conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/query/query.html:    shouldBe("gl.ANY_SAMPLES_PASSED", "0x8C2F");
conformance2/query/query.html:    shouldBe("gl.ANY_SAMPLES_PASSED_CONSERVATIVE", "0x8D6A");
conformance2/query/query.html:    shouldBe("gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN", "0x8C88");
conformance2/query/query.html:    gl.getQuery(gl.ANY_SAMPLES_PASSED, gl.CURRENT_QUERY);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "ANY_SAMPLES_PASSED query should succeed");
conformance2/query/query.html:    gl.getQuery(gl.ANY_SAMPLES_PASSED_CONSERVATIVE, gl.CURRENT_QUERY);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "ANY_SAMPLES_PASSED query should succeed");
conformance2/query/query.html:    gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "ANY_SAMPLES_PASSED query should succeed");
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.ANY_SAMPLES_PASSED, gl.CURRENT_QUERY)");
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.ANY_SAMPLES_PASSED_CONSERVATIVE, gl.CURRENT_QUERY)");
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY)");
conformance2/query/query.html:    q1 = gl.createQuery();
conformance2/query/query.html:    q2 = gl.createQuery();
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY)");
conformance2/query/query.html:    gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, q1);
conformance2/query/query.html:    shouldBeTrue("gl.isQuery(q1)");
conformance2/query/query.html:    shouldBe("gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY)", "q1");
conformance2/query/query.html:    gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, q2);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Can't begin a query while one is already active");
conformance2/query/query.html:    shouldBe("gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY)", "q1");
conformance2/query/query.html:    gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY)");
conformance2/query/query.html:    gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Can't end a query if one is not active");
conformance2/query/query.html:    gl.beginQuery(gl.ANY_SAMPLES_PASSED, q1);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Can't re-use query objects for incompatible targets");
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.ANY_SAMPLES_PASSED, gl.CURRENT_QUERY)");
conformance2/query/query.html:    gl.beginQuery(gl.ANY_SAMPLES_PASSED, q2);
conformance2/query/query.html:    shouldBe("gl.getQuery(gl.ANY_SAMPLES_PASSED, gl.CURRENT_QUERY)", "q2");
conformance2/query/query.html:    gl.beginQuery(gl.ANY_SAMPLES_PASSED_CONSERVATIVE, q2);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Can't call beginQuery on an already active query object");
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.ANY_SAMPLES_PASSED_CONSERVATIVE, gl.CURRENT_QUERY)");
conformance2/query/query.html:    gl.endQuery(gl.ANY_SAMPLES_PASSED);
conformance2/query/query.html:    gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, q1);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be able to have multiple unrelated query types active at once");
conformance2/query/query.html:    shouldBe("gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY)", "q1");
conformance2/query/query.html:    gl.deleteQuery(q1);
conformance2/query/query.html:    gl.deleteQuery(q2);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "deleting queries should not produce errors");
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY)");
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.ANY_SAMPLES_PASSED_CONSERVATIVE, gl.CURRENT_QUERY)");
conformance2/query/query.html:    gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, q1);
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "beginning a deleted query object");
conformance2/query/query.html:    shouldBeNull("gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY)");
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should have no previous errors");
conformance2/query/query.html:    q1 = gl.createQuery();
conformance2/query/query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "createQuery should not set an error");
conformance2/query/query.html:    shouldBeFalse("gl.isQuery(q1)");
conformance2/query/query.html:    gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, q1);
conformance2/query/query.html:    shouldBeTrue("gl.isQuery(q1)");
conformance2/query/query.html:    gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
conformance2/query/query.html:    shouldBeTrue("gl.isQuery(q1)");
conformance2/query/query.html:    gl.deleteQuery(q1);
conformance2/query/query.html:    shouldBeFalse("gl.isQuery(q1)");
conformance2/query/query.html:    shouldBeFalse("gl.isQuery(null)");
conformance2/query/occlusion-query.html:            target: gl.ANY_SAMPLES_PASSED_CONSERVATIVE,
conformance2/query/occlusion-query.html:            target: gl.ANY_SAMPLES_PASSED,
conformance2/query/occlusion-query.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/query/occlusion-query.html:    gl.uniform4f(gl.getUniformLocation(program, "u_color"), 0, 1, 0, 1);
conformance2/query/occlusion-query.html:    query = gl.createQuery();
conformance2/query/occlusion-query.html:    gl.beginQuery(target, query);
conformance2/query/occlusion-query.html:    gl.endQuery(target);
conformance2/query/occlusion-query.html:        gl.finish();
conformance2/query/occlusion-query.html:        if (gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)) {
conformance2/query/occlusion-query.html:    if (!gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)) {
conformance2/query/occlusion-query.html:    var result = gl.getQueryParameter(query, gl.QUERY_RESULT);
conformance2/query/occlusion-query.html:    gl.deleteQuery(query);
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-test.html:  gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "checkFramebufferStatus on the default framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  var tex = gl.createTexture();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/renderbuffers/framebuffer-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/renderbuffers/framebuffer-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/renderbuffers/framebuffer-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/renderbuffers/framebuffer-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/renderbuffers/framebuffer-test.html:  gl.texImage2D(
conformance2/renderbuffers/framebuffer-test.html:      gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "attach a texture to default framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:  var rb = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
conformance2/renderbuffers/framebuffer-test.html:  gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, canvas.width, canvas.height);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "attach a renderbuffer to the default framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  var fbtex = gl.createTexture();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindTexture(gl.TEXTURE_2D, fbtex);
conformance2/renderbuffers/framebuffer-test.html:  gl.texImage2D(
conformance2/renderbuffers/framebuffer-test.html:      gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/renderbuffers/framebuffer-test.html:  var fb = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "bind a newly created framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  var target = gl.READ_FRAMEBUFFER;
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      target, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "getFramebufferAttachmentParameter(READ_FRAMEBUFFER).");
conformance2/renderbuffers/framebuffer-test.html:  assertMsg(gl.checkFramebufferStatus(target) != 0,
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "checkFramebufferStatus(READ_FRAMEBUFFER).");
conformance2/renderbuffers/framebuffer-test.html:  var readFB = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(target, readFB);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "bindFramebuffer(READ_FRAMEBUFFER).");
conformance2/renderbuffers/framebuffer-test.html:  assertMsg(readFB == gl.getParameter(gl.READ_FRAMEBUFFER_BINDING),
conformance2/renderbuffers/framebuffer-test.html:  assertMsg(fb == gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING),
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      target, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(target, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, 0);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "framebufferTexImage2D(READ_FRAMEBUFFER).");
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(target, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "framebufferRenderbuffer(READ_FRAMEBUFFER).");
conformance2/renderbuffers/framebuffer-test.html:  var colorAttachmentsNum = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
conformance2/renderbuffers/framebuffer-test.html:    var attachment = gl.COLOR_ATTACHMENT1;
conformance2/renderbuffers/framebuffer-test.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, fbtex, 0);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "framebufferTexImage2D(COLOR_ATTACHMENT1).");
conformance2/renderbuffers/framebuffer-test.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, null, 0);
conformance2/renderbuffers/framebuffer-test.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, rb);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "framebufferRenderbuffer(COLOR_ATTACHMENT1).");
conformance2/renderbuffers/framebuffer-test.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, 0);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "attach a texture to a framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "detach a texture from a framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  var maxTexSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, maxLevels - 1);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "framebufferTexture2D with an appropriate mipmap level.");
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, maxLevels);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "framebufferTexture2D with a mipmap level out of range.");
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "attach a renderbuffer to a framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "detach a renderbuffer from a framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "bind default (null) framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:    gl.framebufferTexture2D(targetA, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, 0);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-test.html:    gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:        targetA, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-test.html:    gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:        targetB, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:    gl.framebufferTexture2D(targetA, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "detach a texture from read/draw framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  var readFBWithTexture = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-test.html:  var drawFBWithTexture = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, readFBWithTexture);
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, drawFBWithTexture);
conformance2/renderbuffers/framebuffer-test.html:  attachAndDetachTexture(gl.READ_FRAMEBUFFER, gl.DRAW_FRAMEBUFFER);
conformance2/renderbuffers/framebuffer-test.html:  attachAndDetachTexture(gl.DRAW_FRAMEBUFFER, gl.READ_FRAMEBUFFER);
conformance2/renderbuffers/framebuffer-test.html:  var fbtex1 = gl.createTexture();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindTexture(gl.TEXTURE_2D, fbtex1);
conformance2/renderbuffers/framebuffer-test.html:  gl.texImage2D(
conformance2/renderbuffers/framebuffer-test.html:      gl.TEXTURE_2D, 0, gl.RG8, canvas.width, canvas.height, 0, gl.RG, gl.UNSIGNED_BYTE, null);
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex1, 0);
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, 0);
conformance2/renderbuffers/framebuffer-test.html:  shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.READ_FRAMEBUFFER, ' +
conformance2/renderbuffers/framebuffer-test.html:                  'gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)');
conformance2/renderbuffers/framebuffer-test.html:  shouldBe('gl.getFramebufferAttachmentParameter(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, ' +
conformance2/renderbuffers/framebuffer-test.html:           'gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)', '0');
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:    gl.framebufferRenderbuffer(targetA, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "attaching a renderbuffer to a read/draw framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:    gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:        targetA, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-test.html:    gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:        targetB, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:    gl.framebufferRenderbuffer(targetA, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "detach a renderbuffer from a read/draw framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  var readFBWithRenderbuffer = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-test.html:  var drawFBWithRenderbuffer = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, readFBWithRenderbuffer);
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, drawFBWithRenderbuffer);
conformance2/renderbuffers/framebuffer-test.html:  attachAndDetachRenderbuffer(gl.READ_FRAMEBUFFER, gl.DRAW_FRAMEBUFFER);
conformance2/renderbuffers/framebuffer-test.html:  attachAndDetachRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.READ_FRAMEBUFFER);
conformance2/renderbuffers/framebuffer-test.html:  var depthRB = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-test.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, depthRB);
conformance2/renderbuffers/framebuffer-test.html:  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, canvas.width, canvas.height);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthRB);
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance2/renderbuffers/framebuffer-test.html:  shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.READ_FRAMEBUFFER, ' +
conformance2/renderbuffers/framebuffer-test.html:                  'gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE)');
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.READ_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_DEPTH_SIZE);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:  shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.DRAW_FRAMEBUFFER, ' +
conformance2/renderbuffers/framebuffer-test.html:                  'gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)');
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_RED_SIZE);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_RED_SIZE);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:  shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.DRAW_FRAMEBUFFER, ' +
conformance2/renderbuffers/framebuffer-test.html:                  'gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)');
conformance2/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance2/renderbuffers/framebuffer-test.html:      gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_DEPTH_SIZE);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "bind read framebuffer to default (null) framebuffer.");
conformance2/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "bind draw framebuffer to default (null) framebuffer.");
resources/glsl-generator.js:      var referenceVertexShader = wtu.loadShader(gl, referenceVertexShaderSource, gl.VERTEX_SHADER, testFailed, true, 'reference');
resources/glsl-generator.js:      var referenceFragmentShader = wtu.loadShader(gl, referenceFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true, 'reference');
resources/glsl-generator.js:      var testVertexShader = wtu.loadShader(gl, testVertexShaderSource, gl.VERTEX_SHADER, testFailed, true, 'test');
resources/glsl-generator.js:      var testFragmentShader = wtu.loadShader(gl, testFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true, 'test');
resources/glsl-generator.js:    var posLoc = gl.getAttribLocation(program, "aPosition");
resources/glsl-generator.js:    gl.useProgram(program);
resources/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
resources/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
resources/glsl-generator.js:      var referenceVertexShader = wtu.loadShader(gl, referenceVertexShaderSource, gl.VERTEX_SHADER, testFailed, true, 'reference');
resources/glsl-generator.js:      var referenceFragmentShader = wtu.loadShader(gl, referenceFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true, 'reference');
resources/glsl-generator.js:      var testVertexShader = wtu.loadShader(gl, testVertexShaderSource, gl.VERTEX_SHADER, testFailed, true, 'test');
resources/glsl-generator.js:      var testFragmentShader = wtu.loadShader(gl, testFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true, 'test');
resources/glsl-generator.js:    var posLoc = gl.getAttribLocation(program, "aPosition");
resources/glsl-generator.js:    gl.useProgram(program);
resources/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
resources/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
resources/glsl-generator.js:  var referenceVertexShaderColorBuffer = gl.createBuffer();
resources/glsl-generator.js:      var testVertexShader = wtu.loadShader(gl, testVertexShaderSource, gl.VERTEX_SHADER, testFailed, true);
resources/glsl-generator.js:      var testFragmentShader = wtu.loadShader(gl, testFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true);
resources/glsl-generator.js:        var referenceFragmentShader = wtu.loadShader(gl, referenceFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed);
resources/glsl-generator.js:        var referenceVertexShader = wtu.loadShader(gl, referenceVertexShaderSource, gl.VERTEX_SHADER, testFailed);
resources/glsl-generator.js:    var posLoc = gl.getAttribLocation(program, "aPosition");
resources/glsl-generator.js:    gl.useProgram(program);
resources/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
resources/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
resources/glsl-generator.js:    gl.bindBuffer(gl.ARRAY_BUFFER, indexedQuadForReferenceVertexShader[0]);
resources/glsl-generator.js:    gl.enableVertexAttribArray(0);
resources/glsl-generator.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
resources/glsl-generator.js:    gl.bindBuffer(gl.ARRAY_BUFFER, referenceVertexShaderColorBuffer);
resources/glsl-generator.js:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
resources/glsl-generator.js:    gl.enableVertexAttribArray(1);
resources/glsl-generator.js:    gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, true, 0, 0);
resources/glsl-generator.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexedQuadForReferenceVertexShader[1]);
resources/glsl-generator.js:    gl.useProgram(referenceVertexShaderProgram);
resources/glsl-generator.js:    gl.disableVertexAttribArray(0);
resources/glsl-generator.js:    gl.disableVertexAttribArray(1);
resources/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
resources/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
resources/glsl-generator.js:    gl.activeTexture(gl.TEXTURE0);
resources/glsl-generator.js:    gl.bindTexture(gl.TEXTURE_2D, texture);
resources/glsl-generator.js:    var texLoc = gl.getUniformLocation(program, "tex");
resources/glsl-generator.js:    gl.uniform1i(texLoc, 0);
resources/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
resources/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
resources/glsl-generator.js:      var texture = gl.createTexture();
resources/glsl-generator.js:      gl.bindTexture(gl.TEXTURE_2D, texture);
resources/glsl-generator.js:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
resources/glsl-generator.js:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
resources/glsl-generator.js:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
resources/glsl-generator.js:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
resources/glsl-generator.js:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0,
resources/glsl-generator.js:                    gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var actual = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/renderbuffers/framebuffer-object-attachment.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)
conformance2/renderbuffers/framebuffer-object-attachment.html:    var haveDepthBuffer = attachment0 == gl.DEPTH_ATTACHMENT ||
conformance2/renderbuffers/framebuffer-object-attachment.html:                          attachment0 == gl.DEPTH_STENCIL_ATTACHMENT ||
conformance2/renderbuffers/framebuffer-object-attachment.html:                          attachment1 == gl.DEPTH_ATTACHMENT ||
conformance2/renderbuffers/framebuffer-object-attachment.html:                          attachment1 == gl.DEPTH_STENCIL_ATTACHMENT;
conformance2/renderbuffers/framebuffer-object-attachment.html:    var haveStencilBuffer = attachment0 == gl.STENCIL_ATTACHMENT ||
conformance2/renderbuffers/framebuffer-object-attachment.html:                            attachment0 == gl.DEPTH_STENCIL_ATTACHMENT ||
conformance2/renderbuffers/framebuffer-object-attachment.html:                            attachment1 == gl.STENCIL_ATTACHMENT ||
conformance2/renderbuffers/framebuffer-object-attachment.html:                            attachment1 == gl.DEPTH_STENCIL_ATTACHMENT;
conformance2/renderbuffers/framebuffer-object-attachment.html:    shouldBeTrue("gl.getParameter(gl.RED_BITS) + gl.getParameter(gl.GREEN_BITS) + " +
conformance2/renderbuffers/framebuffer-object-attachment.html:                 "gl.getParameter(gl.BLUE_BITS) + gl.getParameter(gl.ALPHA_BITS) >= 16");
conformance2/renderbuffers/framebuffer-object-attachment.html:        shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) >= 16");
conformance2/renderbuffers/framebuffer-object-attachment.html:        shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) == 0");
conformance2/renderbuffers/framebuffer-object-attachment.html:        shouldBeTrue("gl.getParameter(gl.STENCIL_BITS) >= 8");
conformance2/renderbuffers/framebuffer-object-attachment.html:        shouldBeTrue("gl.getParameter(gl.STENCIL_BITS) == 0");
conformance2/renderbuffers/framebuffer-object-attachment.html:    var fbo = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var texture = gl.createTexture();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var renderbuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_ATTACHMENT);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_STENCIL_ATTACHMENT);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteRenderbuffer(renderbuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteTexture(texture);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var fbo = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var colorBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, size, size);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var depthBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, size, size);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var stencilBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, stencilBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8, size, size);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var depthStencilBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthStencilBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, size, size);
conformance2/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_ATTACHMENT);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencilBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_UNSUPPORTED]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthStencilBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_ATTACHMENT);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_STENCIL_ATTACHMENT);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var texture = gl.createTexture();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH24_STENCIL8, size, size, 0, gl.DEPTH_STENCIL, gl.UNSIGNED_INT_24_8, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, texture, 0);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, null, 0);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_STENCIL_ATTACHMENT);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_ATTACHMENT);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var fbo = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var colorBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 16, 16);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 0, 0);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteRenderbuffer(colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var fbo = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var colorBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteRenderbuffer(colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var fbo = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var colorBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var depthBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 16, 16);
conformance2/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 32, 16);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 32);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var tex = gl.createTexture();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/renderbuffers/framebuffer-object-attachment.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:        checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteTexture(tex);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteRenderbuffer(depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteRenderbuffer(colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var tex = gl.createTexture();
conformance2/renderbuffers/framebuffer-object-attachment.html:    var fbo = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT]);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var colorBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 0, 0);
conformance2/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT]);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "drawArrays with incomplete framebuffer");
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "readPixels from incomplete framebuffer");
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 1, 1);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, [gl.INVALID_FRAMEBUFFER_OPERATION, gl.INVALID_OPERATION],
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 1, 1, 0);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, [gl.INVALID_FRAMEBUFFER_OPERATION, gl.INVALID_OPERATION],
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "clear with incomplete framebuffer");
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteRenderbuffer(colorBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteTexture(tex);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteProgram(program);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var fbo = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/framebuffer-object-attachment.html:    var depthBuffer = gl.createRenderbuffer();
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, size, size);
conformance2/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "After depth renderbuffer setup");
conformance2/renderbuffers/framebuffer-object-attachment.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Before ReadPixels from missing attachment");
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "After ReadPixels from missing attachment");
conformance2/renderbuffers/framebuffer-object-attachment.html:        var tex = gl.createTexture();
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Before CopyTexImage2D from missing attachment");
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, size, size, 0);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "After CopyTexImage2D from missing attachment");
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Before CopyTexSubImage2D from missing attachment");
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size, size);
conformance2/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "After CopyTexSubImage2D from missing attachment");
conformance2/renderbuffers/framebuffer-object-attachment.html:        gl.deleteTexture(tex);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteRenderbuffer(depthBuffer);
conformance2/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance2/context/context-attributes-depth-stencil-antialias-obeyed.html:  var actual_attribs = gl.getContextAttributes();
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.clearColor(0, 0, 0, 0);
conformance2/renderbuffers/invalidate-framebuffer.html:  var fb_m = gl.createFramebuffer();
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb_m);
conformance2/renderbuffers/invalidate-framebuffer.html:  var rb_m = gl.createRenderbuffer();
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, rb_m);
conformance2/renderbuffers/invalidate-framebuffer.html:  var samples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb_m);
conformance2/renderbuffers/invalidate-framebuffer.html:  invalidateIncompleteAttachment(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples[0], gl.RGBA8, canvas.width, canvas.height);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  var rb = gl.createRenderbuffer();
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb);
conformance2/renderbuffers/invalidate-framebuffer.html:  invalidateIncompleteAttachment(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples[0], gl.DEPTH_COMPONENT16, canvas.width, canvas.height);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.clear(gl.DEPTH_BUFFER_BIT);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  invalidation(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.STENCIL_ATTACHMENT);
conformance2/renderbuffers/invalidate-framebuffer.html:  var fb = gl.createFramebuffer();
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/renderbuffers/invalidate-framebuffer.html:  var buffer = gl.createRenderbuffer();
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, buffer);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, canvas.width, canvas.height);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, buffer);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb_m);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.blitFramebuffer(0, 0, canvas.width, canvas.height, 0, 0, canvas.width, canvas.height, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  invalidation(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT);
conformance2/renderbuffers/invalidate-framebuffer.html:  var maxColorAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateSubFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0 + maxColorAttachments], 5, 5, 10, 10);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, [gl.INVALID_OPERATION, gl.INVALID_ENUM],
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, [gl.COLOR_ATTACHMENT0 + maxColorAttachments]);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, [gl.INVALID_OPERATION, gl.INVALID_ENUM],
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/renderbuffers/invalidate-framebuffer.html:  invalidation(gl.FRAMEBUFFER, gl.DEPTH, gl.STENCIL);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.deleteFramebuffer(fb_m);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.deleteRenderbuffer(rb_m);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.deleteRenderbuffer(rb);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.deleteFramebuffer(fb);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.deleteRenderbuffer(buffer);
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateSubFramebuffer(target, [invalid_attachment], 5, 5, 10, 10);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateSubFramebuffer(target, [valid_attachment], 5, 5, 10, 10);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateSubFramebuffer(target, [valid_attachment], 5, 5, -5, -5);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateSubFramebuffer(target, [valid_attachment], -5, -5, 10, 10);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateSubFramebuffer(target, [valid_attachment], 5, 5, 20, 20);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateFramebuffer(target, [invalid_attachment]);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateFramebuffer(target, [valid_attachment]);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)",
conformance2/renderbuffers/invalidate-framebuffer.html:           "gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateSubFramebuffer(target, [incomplete_attachment], 5, 5, 10, 10);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/invalidate-framebuffer.html:  gl.invalidateFramebuffer(target, [incomplete_attachment]);
conformance2/renderbuffers/invalidate-framebuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-texture-layer.html:    var actual = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/renderbuffers/framebuffer-texture-layer.html:    var tex3d = gl.createTexture();
conformance2/renderbuffers/framebuffer-texture-layer.html:    var fb = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.bindTexture(gl.TEXTURE_3D, tex3d);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.texImage3D(gl.TEXTURE_3D,
conformance2/renderbuffers/framebuffer-texture-layer.html:                  gl.RGBA,                                    // internalFormat
conformance2/renderbuffers/framebuffer-texture-layer.html:                  gl.RGBA,                                    // format
conformance2/renderbuffers/framebuffer-texture-layer.html:                  gl.UNSIGNED_BYTE,                           // type
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3d, 0, 0);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3d, 0, 0);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-texture-layer.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, null, 0, 0);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-texture-layer.html:    var maxTexSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3d, maxLevels - 1, 0);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-texture-layer.html:    checkFramebuffer([gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT]);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3d, maxLevels, 0);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3d, 0, -1);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3d, 0, maxTexSize);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/renderbuffers/framebuffer-texture-layer.html:    var tex2d = gl.createTexture();
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.bindTexture(gl.TEXTURE_2D, tex2d);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex2d, 0, 0);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/framebuffer-texture-layer.html:    var texDepthStencil = gl.createTexture();
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.bindTexture(gl.TEXTURE_2D_ARRAY, texDepthStencil);
conformance2/renderbuffers/framebuffer-texture-layer.html:    var fbDepthStencil = gl.createFramebuffer();
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbDepthStencil);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.texImage3D(gl.TEXTURE_2D_ARRAY,
conformance2/renderbuffers/framebuffer-texture-layer.html:                  gl.DEPTH24_STENCIL8,                        // internalFormat
conformance2/renderbuffers/framebuffer-texture-layer.html:                  gl.DEPTH_STENCIL,                           // format
conformance2/renderbuffers/framebuffer-texture-layer.html:                  gl.UNSIGNED_INT_24_8,                       // type
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, texDepthStencil, 0, 0);
conformance2/renderbuffers/framebuffer-texture-layer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/framebuffer-texture-layer.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.deleteTexture(tex3d);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.deleteTexture(texDepthStencil);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.deleteTexture(tex2d);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.deleteFramebuffer(fb);
conformance2/renderbuffers/framebuffer-texture-layer.html:    gl.deleteFramebuffer(fbDepthStencil);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.clearColor(0, 1, 0, 1);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    runTest(gl, gl.canvas.width, gl.canvas.height, 0);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    runTest(gl, gl.canvas.width, gl.canvas.height, 1);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    runTest(gl, gl.canvas.width, gl.canvas.height, 0);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    runTest(gl, gl.canvas.width, gl.canvas.height, 1);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    var clearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, 'should be no errors');
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    var fbo = gl.createFramebuffer();
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    var buffer = gl.createRenderbuffer();
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, buffer);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, width, height);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)",
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:             "gl.FRAMEBUFFER_COMPLETE");
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, 'should be no errors');
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    var fbo_m = gl.createFramebuffer();
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo_m);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    var buffer_m = gl.createRenderbuffer();
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, buffer_m);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:      var samples = gl.getInternalformatParameter(
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:          gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:      gl.renderbufferStorageMultisample(
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:          gl.RENDERBUFFER, samples[0], gl.RGBA8, width, height);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:      gl.framebufferRenderbuffer(
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, buffer);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)",
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:             "gl.FRAMEBUFFER_COMPLETE");
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, 'should be no errors');
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_m);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height,
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:                       gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, 'should be no errors');
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.deleteFramebuffer(fbo_m);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.deleteRenderbuffer(buffer_m);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.deleteFramebuffer(fbo);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.deleteRenderbuffer(buffer);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.canvas.width += 1;
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    gl.canvas.height += 1;
conformance2/renderbuffers/multisampled-renderbuffer-initialization.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, 'should be no errors');
conformance2/renderbuffers/readbuffer.html:  gl.clearColor(color[0] / 255, color[1] / 255, color[2] / 255, color[3] / 255);
conformance2/renderbuffers/readbuffer.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/renderbuffers/readbuffer.html:  gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/renderbuffers/readbuffer.html:  if (expected == gl.NO_ERROR)
conformance2/renderbuffers/readbuffer.html:  var renderbuffer = gl.createRenderbuffer();
conformance2/renderbuffers/readbuffer.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance2/renderbuffers/readbuffer.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, renderbuffer);
conformance2/renderbuffers/readbuffer.html:  gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, canvas.width, canvas.height);
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.NONE);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.BACK);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.COLOR_ATTACHMENT0);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.BACK);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.NONE);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.COLOR_ATTACHMENT0);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  var maxColorAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.COLOR_ATTACHMENT0 + maxColorAttachments);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, [gl.INVALID_ENUM, gl.INVALID_OPERATION],
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.COLOR_ATTACHMENT1);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  shouldBe('gl.getParameter(gl.READ_BUFFER)', 'gl.COLOR_ATTACHMENT1');
conformance2/renderbuffers/readbuffer.html:  validateReadingFromFramebuffer(backColor, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  shouldBe('gl.getParameter(gl.READ_BUFFER)', 'gl.BACK');
conformance2/renderbuffers/readbuffer.html:  var fb = gl.createFramebuffer();
conformance2/renderbuffers/readbuffer.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/renderbuffers/readbuffer.html:  var colorbuffer = setupRenderbuffer(gl.COLOR_ATTACHMENT0);
conformance2/renderbuffers/readbuffer.html:  validateReadingFromFramebuffer(red, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  shouldBe('gl.getParameter(gl.READ_BUFFER)', 'gl.COLOR_ATTACHMENT0');
conformance2/renderbuffers/readbuffer.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/renderbuffers/readbuffer.html:  var colorbuffer1 = setupRenderbuffer(gl.COLOR_ATTACHMENT1);
conformance2/renderbuffers/readbuffer.html:  gl.drawBuffers([gl.NONE, gl.COLOR_ATTACHMENT1]);
conformance2/renderbuffers/readbuffer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no error after setup and clear render buffer");
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.COLOR_ATTACHMENT1);
conformance2/renderbuffers/readbuffer.html:  validateReadingFromFramebuffer(green, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  shouldBe('gl.getParameter(gl.READ_BUFFER)', 'gl.COLOR_ATTACHMENT1');
conformance2/renderbuffers/readbuffer.html:  gl.drawBuffers([gl.COLOR_ATTACHMENT0]);
conformance2/renderbuffers/readbuffer.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.RENDERBUFFER, null)
conformance2/renderbuffers/readbuffer.html:  gl.readBuffer(gl.COLOR_ATTACHMENT1);
conformance2/renderbuffers/readbuffer.html:  validateReadingFromFramebuffer(null, gl.INVALID_OPERATION,
conformance2/renderbuffers/readbuffer.html:  var fb1 = gl.createFramebuffer();
conformance2/renderbuffers/readbuffer.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb1);
conformance2/renderbuffers/readbuffer.html:  var buffer = setupRenderbuffer(gl.COLOR_ATTACHMENT0);
conformance2/renderbuffers/readbuffer.html:  shouldBe('gl.getParameter(gl.READ_BUFFER)', 'gl.COLOR_ATTACHMENT0');
conformance2/renderbuffers/readbuffer.html:  validateReadingFromFramebuffer(blue, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/renderbuffers/readbuffer.html:  shouldBe('gl.getParameter(gl.READ_BUFFER)', 'gl.BACK');
conformance2/renderbuffers/readbuffer.html:  validateReadingFromFramebuffer(backColor, gl.NO_ERROR,
conformance2/renderbuffers/readbuffer.html:  gl.deleteFramebuffer(fb);
conformance2/renderbuffers/readbuffer.html:  gl.deleteRenderbuffer(colorbuffer);
conformance2/renderbuffers/readbuffer.html:  gl.deleteRenderbuffer(colorbuffer1);
conformance2/renderbuffers/readbuffer.html:  gl.deleteFramebuffer(fb1);
conformance2/renderbuffers/readbuffer.html:  gl.deleteRenderbuffer(buffer);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.viewport(0, 0, size, size);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    var supportedSampleCountArray = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    var msColorRbo = gl.createRenderbuffer();
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, msColorRbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.renderbufferStorageMultisample(gl.RENDERBUFFER, sampleCount, gl.RGBA8, size, size);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    var msFbo = gl.createFramebuffer();
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, msFbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, msColorRbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    var resolveColorRbo = gl.createRenderbuffer();
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, resolveColorRbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, size, size);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    var resolveFbo = gl.createFramebuffer();
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, resolveFbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, resolveColorRbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, msFbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.clearColor(0.0, 0.0, 0.0, 1.0);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.enable(gl.SAMPLE_COVERAGE);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.sampleCoverage(coverageValue, isInverted);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.useProgram(program);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, resolveFbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.blitFramebuffer(0, 0, size, size, 0, 0, size, size, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, resolveFbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.disable(gl.SAMPLE_COVERAGE);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.deleteRenderbuffer(msColorRbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.deleteRenderbuffer(resolveColorRbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.deleteFramebuffer(msFbo);
conformance2/renderbuffers/multisample-with-full-sample-counts.html:    gl.deleteFramebuffer(resolveFbo);
conformance2/samplers/sampler-drawing-test.html:    gl.REPEAT,
conformance2/samplers/sampler-drawing-test.html:    gl.CLAMP_TO_EDGE,
conformance2/samplers/sampler-drawing-test.html:    gl.MIRRORED_REPEAT,
conformance2/samplers/sampler-drawing-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/samplers/sampler-drawing-test.html:    var texture = gl.createTexture();
conformance2/samplers/sampler-drawing-test.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/samplers/sampler-drawing-test.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas_texture);
conformance2/samplers/sampler-drawing-test.html:    var sampler = gl.createSampler();
conformance2/samplers/sampler-drawing-test.html:    gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/samplers/sampler-drawing-test.html:    gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/samplers/sampler-drawing-test.html:    gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, param);
conformance2/samplers/sampler-drawing-test.html:    gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, param);
conformance2/samplers/sampler-drawing-test.html:    gl.clearColor(1,1,1,1);
conformance2/samplers/sampler-drawing-test.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/samplers/sampler-drawing-test.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/samplers/sampler-drawing-test.html:    gl.bindSampler(0, sampler);
conformance2/samplers/sampler-drawing-test.html:    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 6);
conformance2/samplers/sampler-drawing-test.html:    gl.readPixels(0, 0, 12, 12, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance2/samplers/sampler-drawing-test.html:                case gl.REPEAT:
conformance2/samplers/sampler-drawing-test.html:                case gl.CLAMP_TO_EDGE:
conformance2/samplers/sampler-drawing-test.html:                case gl.MIRRORED_REPEAT:
conformance2/rendering/blitframebuffer-scissor-enabled.html:        blitframebuffer_scissor(gl.RGBA8, gl.RGBA8, bounds[ii], intersections[ii]);
conformance2/rendering/blitframebuffer-scissor-enabled.html:        blitframebuffer_scissor(gl.RGBA8, gl.SRGB8_ALPHA8, bounds[ii], intersections[ii]);
conformance2/rendering/blitframebuffer-scissor-enabled.html:        blitframebuffer_scissor(gl.SRGB8_ALPHA8, gl.RGBA8, bounds[ii], intersections[ii]);
conformance2/rendering/blitframebuffer-scissor-enabled.html:        blitframebuffer_scissor(gl.SRGB8_ALPHA8, gl.SRGB8_ALPHA8, bounds[ii], intersections[ii]);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    var tex_read = gl.createTexture();
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.bindTexture(gl.TEXTURE_2D, tex_read);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.texImage2D(gl.TEXTURE_2D, 0, readbufferFormat, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    var fbo_read = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_read);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_read, 0);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    var tex_draw = gl.createTexture();
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.bindTexture(gl.TEXTURE_2D, tex_draw);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.texImage2D(gl.TEXTURE_2D, 0, drawbufferFormat, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    var fbo_draw = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_draw, 0);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    if (gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE || gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.enable(gl.SCISSOR_TEST);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.scissor(bound[0], bound[1], bound[2], bound[3]);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.blitFramebuffer(blit_src[0], blit_src[1], blit_src[2], blit_src[3], blit_dst[0], blit_dst[1], blit_dst[2], blit_dst[3], gl.COLOR_BUFFER_BIT, gl.LINEAR);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitframebuffer should succeed");
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.readPixels(0, 0, size, size, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readPixels should succeed");
conformance2/rendering/blitframebuffer-scissor-enabled.html:    } else if (readbufferFormat == gl.SRGB8_ALPHA8) {
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.deleteFramebuffer(fbo_read);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.deleteFramebuffer(fbo_draw);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.deleteTexture(tex_read);
conformance2/rendering/blitframebuffer-scissor-enabled.html:    gl.deleteTexture(tex_draw);
conformance2/samplers/samplers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/samplers/samplers.html:    shouldBe("gl.SAMPLER_BINDING", "0x8919");
conformance2/samplers/samplers.html:    shouldBeNull("gl.getParameter(gl.SAMPLER_BINDING)");
conformance2/samplers/samplers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "SAMPLER_BINDING query should succeed");
conformance2/samplers/samplers.html:    s1 = gl.createSampler();
conformance2/samplers/samplers.html:    s2 = gl.createSampler();
conformance2/samplers/samplers.html:    gl.bindSampler(0, s1);
conformance2/samplers/samplers.html:    shouldBe("gl.getParameter(gl.SAMPLER_BINDING)", "s1");
conformance2/samplers/samplers.html:    gl.bindSampler(0, s2);
conformance2/samplers/samplers.html:    shouldBe("gl.getParameter(gl.SAMPLER_BINDING)", "s2");
conformance2/samplers/samplers.html:    gl.bindSampler(1, s1);
conformance2/samplers/samplers.html:    shouldBe("gl.getParameter(gl.SAMPLER_BINDING)", "s2");
conformance2/samplers/samplers.html:    gl.activeTexture(gl.TEXTURE1);
conformance2/samplers/samplers.html:    shouldBe("gl.getParameter(gl.SAMPLER_BINDING)", "s1");
conformance2/samplers/samplers.html:    gl.activeTexture(gl.TEXTURE0);
conformance2/samplers/samplers.html:    gl.bindSampler(0, s1);
conformance2/samplers/samplers.html:    shouldBe("gl.getParameter(gl.SAMPLER_BINDING)", "s1");
conformance2/samplers/samplers.html:    gl.deleteSampler(s1);
conformance2/samplers/samplers.html:    gl.deleteSampler(s2);
conformance2/samplers/samplers.html:    shouldBeNull("gl.getParameter(gl.SAMPLER_BINDING)");
conformance2/samplers/samplers.html:    gl.activeTexture(gl.TEXTURE1);
conformance2/samplers/samplers.html:    shouldBeNull("gl.getParameter(gl.SAMPLER_BINDING)");
conformance2/samplers/samplers.html:    gl.activeTexture(gl.TEXTURE0);
conformance2/samplers/samplers.html:    gl.bindSampler(0, s2);
conformance2/samplers/samplers.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "binding a deleted Sampler object");
conformance2/samplers/samplers.html:    gl.bindSampler(0, null);
conformance2/samplers/samplers.html:    shouldBeNull("gl.getParameter(gl.SAMPLER_BINDING)");
conformance2/samplers/samplers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/samplers/samplers.html:    s1 = gl.createSampler();
conformance2/samplers/samplers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "createSampler should not set an error");
conformance2/samplers/samplers.html:    shouldBeTrue("gl.isSampler(s1)");
conformance2/samplers/samplers.html:    gl.bindSampler(0, s1);
conformance2/samplers/samplers.html:    shouldBeTrue("gl.isSampler(s1)");
conformance2/samplers/samplers.html:    gl.bindSampler(0, null);
conformance2/samplers/samplers.html:    shouldBeTrue("gl.isSampler(s1)");
conformance2/samplers/samplers.html:    gl.deleteSampler(s1);
conformance2/samplers/samplers.html:    shouldBeFalse("gl.isSampler(s1)");
conformance2/samplers/samplers.html:    shouldBeFalse("gl.isSampler(null)");
conformance2/samplers/samplers.html:    s = gl.createSampler();
conformance2/samplers/samplers.html:    gl.bindSampler(0, s);
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_S,  defaultParam: gl.REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_T,  defaultParam: gl.REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_R,  defaultParam: gl.REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_FILTER,  defaultParam: gl.NEAREST_MIPMAP_LINEAR },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAG_FILTER,  defaultParam: gl.LINEAR },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_MODE,  defaultParam: gl.NONE },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  defaultParam: gl.LEQUAL },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_LOD,  defaultParam: -1000 },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAX_LOD,  defaultParam: 1000 },
conformance2/samplers/samplers.html:        shouldBe("gl.getSamplerParameter(s, " + pname + ")", defaultParam.toString());
conformance2/samplers/samplers.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_S,  param: gl.REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_S,  param: gl.MIRRORED_REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_S,  param: gl.CLAMP_TO_EDGE },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_T,  param: gl.REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_T,  param: gl.MIRRORED_REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_T,  param: gl.CLAMP_TO_EDGE },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_R,  param: gl.REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_R,  param: gl.MIRRORED_REPEAT },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_R,  param: gl.CLAMP_TO_EDGE },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_FILTER,  param: gl.NEAREST },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_FILTER,  param: gl.LINEAR },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_FILTER,  param: gl.NEAREST_MIPMAP_NEAREST },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_FILTER,  param: gl.NEAREST_MIPMAP_LINEAR },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_FILTER,  param: gl.LINEAR_MIPMAP_NEAREST },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_FILTER,  param: gl.LINEAR_MIPMAP_LINEAR },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAG_FILTER,  param: gl.NEAREST },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAG_FILTER,  param: gl.LINEAR },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_MODE,  param: gl.NONE },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_MODE,  param: gl.COMPARE_REF_TO_TEXTURE },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  param: gl.LEQUAL },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  param: gl.GEQUAL },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  param: gl.LESS },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  param: gl.GREATER },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  param: gl.EQUAL },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  param: gl.NOTEQUAL },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  param: gl.ALWAYS },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_COMPARE_FUNC,  param: gl.NEVER },
conformance2/samplers/samplers.html:        wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.samplerParameteri(s, " + pname + ", " + param + ")");
conformance2/samplers/samplers.html:        shouldBe("gl.getSamplerParameter(s, " + pname + ")", "gl['" + enumToString(param) + "']");
conformance2/samplers/samplers.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_LOD,  param: -500 },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_LOD,  param: 0 },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MIN_LOD,  param: 10.0 },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAX_LOD,  param: 500 },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAX_LOD,  param: 0 },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAX_LOD,  param: 10.0 },
conformance2/samplers/samplers.html:        wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.samplerParameterf(s, " + pname + ", " + param + ")");
conformance2/samplers/samplers.html:        shouldBe("gl.getSamplerParameter(s, " + pname + ")", param.toString());
conformance2/samplers/samplers.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_IMMUTABLE_FORMAT,  param: null,  expectedError: gl.INVALID_ENUM },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_BASE_LEVEL,  param: null,  expectedError: gl.INVALID_ENUM },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAX_LEVEL,  param: null,  expectedError: gl.INVALID_ENUM },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_S,  param: 0x812D,/* GL_CLAMP_TO_BORDER */  expectedError: gl.INVALID_ENUM },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_WRAP_T,  param: 0x812D,/* GL_CLAMP_TO_BORDER */  expectedError: gl.INVALID_ENUM },
conformance2/samplers/samplers.html:      { pname: gl.TEXTURE_MAG_FILTER,  param: gl.LINEAR_MIPMAP_NEAREST,  expectedError: gl.INVALID_ENUM },
conformance2/samplers/samplers.html:            wtu.shouldGenerateGLError(gl, expectedError, "gl.getSamplerParameter(s, " + pname + ")");
conformance2/samplers/samplers.html:            wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.getSamplerParameter(s, " + pname + ")");
conformance2/samplers/samplers.html:        wtu.shouldGenerateGLError(gl, expectedError, "gl.samplerParameteri(s, " + pname + ", " + param + ")");
conformance2/samplers/samplers.html:        wtu.shouldGenerateGLError(gl, expectedError, "gl.samplerParameterf(s, " + pname + ", " + param + ")");
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/rendering/instanced-arrays.html:    shouldBe("gl.VERTEX_ATTRIB_ARRAY_DIVISOR", "0x88FE");
conformance2/rendering/instanced-arrays.html:    var max_vertex_attribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
conformance2/rendering/instanced-arrays.html:        var queried_value = gl.getVertexAttrib(i, gl.VERTEX_ATTRIB_ARRAY_DIVISOR);
conformance2/rendering/instanced-arrays.html:    gl.vertexAttribDivisor(max_vertex_attribs, 2);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "vertexAttribDivisor index set greater than or equal to MAX_VERTEX_ATTRIBS should be an invalid value");
conformance2/rendering/instanced-arrays.html:    gl.vertexAttribDivisor(max_vertex_attribs-1, 2);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "vertexAttribDivisor index set less than MAX_VERTEX_ATTRIBS should succeed");
conformance2/rendering/instanced-arrays.html:    var queried_value = gl.getVertexAttrib(max_vertex_attribs-1, gl.VERTEX_ATTRIB_ARRAY_DIVISOR);
conformance2/rendering/instanced-arrays.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance2/rendering/instanced-arrays.html:    gl.clearColor(0, 0, 0, 0);
conformance2/rendering/instanced-arrays.html:    var offsetBuffer = gl.createBuffer();
conformance2/rendering/instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);
conformance2/rendering/instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, offsets, gl.STATIC_DRAW);
conformance2/rendering/instanced-arrays.html:    gl.enableVertexAttribArray(offsetLoc);
conformance2/rendering/instanced-arrays.html:    gl.vertexAttribPointer(offsetLoc, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/instanced-arrays.html:    gl.vertexAttribDivisor(offsetLoc, 1);
conformance2/rendering/instanced-arrays.html:    var colorBuffer = gl.createBuffer();
conformance2/rendering/instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance2/rendering/instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
conformance2/rendering/instanced-arrays.html:    gl.enableVertexAttribArray(colorLoc);
conformance2/rendering/instanced-arrays.html:    gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
conformance2/rendering/instanced-arrays.html:    gl.vertexAttribDivisor(colorLoc, 1);
conformance2/rendering/instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, -1);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "drawArraysInstanced cannot have a primcount less than 0");
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, -1, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "drawArraysInstanced cannot have a count less than 0");
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(gl.POINTS, 0, 6, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstanced with POINTS should succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(gl.LINES, 0, 6, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstanced with LINES should succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(gl.LINE_LIST, 0, 6, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstanced with LINE_LIST should return succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(gl.TRI_LIST, 0, 6, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstanced with TRI_LIST should succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(desktopGL['QUAD_STRIP'], 0, 6, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawArraysInstanced with QUAD_STRIP should return INVALID_ENUM");
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(desktopGL['QUADS'], 0, 6, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawArraysInstanced with QUADS should return INVALID_ENUM");
conformance2/rendering/instanced-arrays.html:    gl.drawArraysInstanced(desktopGL['POLYGON'], 0, 6, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawArraysInstanced with POLYGON should return INVALID_ENUM");
conformance2/rendering/instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, -1);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "drawElementsInstanced cannot have a primcount less than 0");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(gl.TRIANGLES, -1, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "drawElementsInstanced cannot have a count less than 0");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced with UNSIGNED_BYTE should succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(gl.POINTS, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced with POINTS should succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(gl.LINES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced with LINES should succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(gl.LINE_LIST, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced with LINE_LIST should return succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(gl.TRI_LIST, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced with TRI_LIST should succeed");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(desktopGL['QUAD_STRIP'], 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawElementsInstanced with QUAD_STRIP should return INVALID_ENUM");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(desktopGL['QUADS'], 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawElementsInstanced with QUADS should return INVALID_ENUM");
conformance2/rendering/instanced-arrays.html:    gl.drawElementsInstanced(desktopGL['POLYGON'], 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawElementsInstanced with POLYGON should return INVALID_ENUM");
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    gl.viewport(startX, 0, squareSize, squareSize);
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    var one = gl.getUniformLocation(program, "u_one");
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    var two = gl.getUniformLocation(program, "u_two");
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    var three = gl.getUniformLocation(program, "u_three");
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    gl.uniform1i(one, 1);
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    gl.uniform1i(two, 2);
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    gl.uniform1i(three, 3);
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    gl.viewport(startX, 0, squareSize, squareSize);
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    var one = gl.getUniformLocation(program, "u_one");
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    var two = gl.getUniformLocation(program, "u_two");
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    var three = gl.getUniformLocation(program, "u_three");
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    gl.uniform1ui(one, 1);
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    gl.uniform1ui(two, 2);
conformance2/glsl3/unary-minus-operator-in-dynamic-loop.html:    gl.uniform1ui(three, 3);
closure-library/closure/goog/deps.js:goog.addDependency('webgl/webgl.js', ['goog.webgl'], [], false);
conformance2/glsl3/uniform-location-length-limits.html:shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)', 'true');
conformance2/glsl3/uniform-location-length-limits.html:var uniformLoc = gl.getUniformLocation(program, uniform1024Name);
conformance2/glsl3/uniform-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance2/glsl3/uniform-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance2/glsl3/uniform-location-length-limits.html:shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)', 'true');
conformance2/glsl3/uniform-location-length-limits.html:var uniformLoc = gl.getUniformLocation(program, uniform1025Name);
conformance2/glsl3/uniform-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance2/extensions/promoted-extensions.html:var exts = gl.getSupportedExtensions();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        gl.getParameter(ext.GPU_DISJOINT_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        timestamp_counter_bits = gl.getQuery(ext.TIMESTAMP_EXT, ext.QUERY_COUNTER_BITS_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    query = gl.createQuery();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(gl.ANY_SAMPLES_PASSED, query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBeTrue("gl.getQuery(gl.ANY_SAMPLES_PASSED, gl.CURRENT_QUERY) !== null");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.endQuery(gl.ANY_SAMPLES_PASSED);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "enabling EXT_disjoint_timer_query_webgl2 should not break other queries");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.isQuery(null)", "false");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBeTrue("gl.getQuery(ext.TIME_ELAPSED_EXT, gl.CURRENT_QUERY) === null");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBeTrue("gl.getQuery(ext.TIME_ELAPSED_EXT, ext.QUERY_COUNTER_BITS_EXT) >= 30");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBeTrue("gl.getQuery(ext.TIMESTAMP_EXT, gl.CURRENT_QUERY) === null");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBeTrue("gl.getQuery(ext.TIMESTAMP_EXT, ext.QUERY_COUNTER_BITS_EXT) >= 30 || " +
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:                 "gl.getQuery(ext.TIMESTAMP_EXT, ext.QUERY_COUNTER_BITS_EXT) === 0");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    query = gl.createQuery();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.isQuery(query)", "false");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Query creation must succeed.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIMESTAMP_EXT, query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "Beginning a timestamp query should fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIME_ELAPSED_EXT, query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.isQuery(query)", "true");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Beginning an inactive time elapsed query should succeed.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIME_ELAPSED_EXT, query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Attempting to begin an active query should fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Fetching query result availability of an active query should fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.getQueryParameter(query, gl.QUERY_RESULT_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Fetching query result of an active query should fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQuery(ext.TIME_ELAPSED_EXT, gl.CURRENT_QUERY)", "query");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.endQuery(ext.TIME_ELAPSED_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Ending an active time elapsed query should succeed.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Fetching query result availability after query end should succeed.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.endQuery(ext.TIME_ELAPSED_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Attempting to end an inactive query should fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Should not be able to use time elapsed query to store a timestamp.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.deleteQuery(query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Query deletion must succeed.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIME_ELAPSED_EXT, query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Beginning a deleted query must fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Fetching query result availability after query deletion should fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.isQuery(query)", "false");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    query = gl.createQuery();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Timestamp counter queries should work.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.deleteQuery(query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.getParameter(ext.TIMESTAMP_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "getParameter timestamp calls should work.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.getParameter(ext.GPU_DISJOINT_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "getParameter disjoint calls should work.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    query = gl.createQuery();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    query2 = gl.createQuery();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQuery(ext.TIME_ELAPSED_EXT, gl.CURRENT_QUERY)", "null");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIME_ELAPSED_EXT, query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQuery(ext.TIME_ELAPSED_EXT, gl.CURRENT_QUERY)", "query");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIME_ELAPSED_EXT, query2);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Beginning an elapsed query without ending should fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQuery(ext.TIME_ELAPSED_EXT, gl.CURRENT_QUERY)", "query");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIMESTAMP_EXT, query2)
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQuery(ext.TIME_ELAPSED_EXT, gl.CURRENT_QUERY)", "query");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQuery(ext.TIMESTAMP_EXT, gl.CURRENT_QUERY)", "null");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.endQuery(ext.TIME_ELAPSED_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQuery(ext.TIME_ELAPSED_EXT, gl.CURRENT_QUERY)", "null");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIME_ELAPSED_EXT, query2);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Switching query targets should fail.");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQuery(ext.TIME_ELAPSED_EXT, gl.CURRENT_QUERY)", "null");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.deleteQuery(query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.deleteQuery(query2);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors at end of sanity tests");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    elapsed_query = gl.createQuery();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.beginQuery(ext.TIME_ELAPSED_EXT, elapsed_query);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.clearColor(0, 0, 1, 1);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.endQuery(ext.TIME_ELAPSED_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Time elapsed query should have no errors");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    timestamp_query1 = gl.createQuery();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    timestamp_query2 = gl.createQuery();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.clearColor(1, 0, 0, 1);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Timestamp queries should have no errors");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        gl.finish();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        if (gl.getQueryParameter(elapsed_query, gl.QUERY_RESULT_AVAILABLE)) {
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:            if (gl.getQueryParameter(timestamp_query1, gl.QUERY_RESULT_AVAILABLE) ||
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:                gl.getQueryParameter(timestamp_query2, gl.QUERY_RESULT_AVAILABLE)) {
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        if (!gl.getQueryParameter(elapsed_query, gl.QUERY_RESULT_AVAILABLE) ||
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:            (timestamp_counter_bits > 0 && !gl.getQueryParameter(timestamp_query2, gl.QUERY_RESULT_AVAILABLE))) {
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:            var error = gl.getError();
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:            if (error != gl.NO_ERROR) {
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    shouldBe("gl.getQueryParameter(elapsed_query, gl.QUERY_RESULT_AVAILABLE)", "true");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        shouldBe("gl.getQueryParameter(timestamp_query1, gl.QUERY_RESULT_AVAILABLE)", "true");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        shouldBe("gl.getQueryParameter(timestamp_query2, gl.QUERY_RESULT_AVAILABLE)", "true");
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:    var disjoint_value = gl.getParameter(ext.GPU_DISJOINT_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:        var elapsed_result = gl.getQueryParameter(elapsed_query, gl.QUERY_RESULT_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:            var timestamp_result1 = gl.getQueryParameter(timestamp_query1, gl.QUERY_RESULT_EXT);
conformance2/extensions/ext-disjoint-timer-query-webgl2.html:            var timestamp_result2 = gl.getQueryParameter(timestamp_query2, gl.QUERY_RESULT_EXT);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var filters = [gl.LINEAR, gl.NEAREST];
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:            blitframebuffer_srgb_and_linear_drawbuffers(gl.SRGB8_ALPHA8, drawbuffersFormats[jj], filters[ii]);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:            blitframebuffer_srgb_and_linear_drawbuffers(gl.RGBA8, drawbuffersFormats[jj], filters[ii]);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var tex_srgb0 = gl.createTexture();
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var tex_srgb1 = gl.createTexture();
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var tex_linear0 = gl.createTexture();
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var tex_linear1 = gl.createTexture();
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var tex_read = gl.createTexture();
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var fbo_read = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var fbo_draw = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.bindTexture(gl.TEXTURE_2D, tex_read);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.texImage2D(gl.TEXTURE_2D, 0, readbufferFormat, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_read);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_read, 0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "setup read framebuffer should succeed");
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var drawbuffers = [gl.NONE, gl.NONE, gl.NONE, gl.NONE];
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.bindTexture(gl.TEXTURE_2D, tex_srgb0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.SRGB8_ALPHA8, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_srgb0, 0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.bindTexture(gl.TEXTURE_2D, tex_srgb1);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.SRGB8_ALPHA8, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT2, gl.TEXTURE_2D, tex_srgb1, 0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        drawbuffers[0] = gl.COLOR_ATTACHMENT0;
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        drawbuffers[2] = gl.COLOR_ATTACHMENT2;
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.bindTexture(gl.TEXTURE_2D, tex_linear0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.TEXTURE_2D, tex_linear0, 0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.bindTexture(gl.TEXTURE_2D, tex_linear1);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT3, gl.TEXTURE_2D, tex_linear1, 0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        drawbuffers[1] = gl.COLOR_ATTACHMENT1;
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        drawbuffers[3] = gl.COLOR_ATTACHMENT3;
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.drawBuffers(drawbuffers);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "setup draw framebuffer should succeed");
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    if (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE ||
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.blitFramebuffer(0, 0, size, size, 0, 0, dstSize, dstSize, gl.COLOR_BUFFER_BIT, filter);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitframebuffer should succeed");
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.readBuffer(gl.COLOR_ATTACHMENT0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.readPixels(0, 0, dstSize, dstSize, gl.RGBA, gl.UNSIGNED_BYTE, srgbPixels0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.readBuffer(gl.COLOR_ATTACHMENT2);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.readPixels(0, 0, dstSize, dstSize, gl.RGBA, gl.UNSIGNED_BYTE, srgbPixels1);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.readBuffer(gl.COLOR_ATTACHMENT1);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.readPixels(0, 0, dstSize, dstSize, gl.RGBA, gl.UNSIGNED_BYTE, linearPixels0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.readBuffer(gl.COLOR_ATTACHMENT3);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:        gl.readPixels(0, 0, dstSize, dstSize, gl.RGBA, gl.UNSIGNED_BYTE, linearPixels1);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readpixels should succeed");
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var expectedSRGBColor = (readbufferFormat == gl.SRGB8_ALPHA8) ? color : wtu.linearToSRGB(color);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    var expectedLinearColor = (readbufferFormat == gl.SRGB8_ALPHA8) ? wtu.sRGBToLinear(color) : color;
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.deleteTexture(tex_srgb0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.deleteTexture(tex_linear0);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.deleteTexture(tex_srgb1);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.deleteTexture(tex_linear1);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.deleteTexture(tex_read);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.deleteFramebuffer(fbo_read);
conformance2/rendering/blitframebuffer-srgb-and-linear-drawbuffers.html:    gl.deleteFramebuffer(fbo_draw);
extra/readpixels-after-alert.html:gl.clearColor(1, 0, 0, 1);
extra/readpixels-after-alert.html:gl.clear(gl.COLOR_BUFFER_BIT);
extra/readpixels-after-alert.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "setup should succeed");
extra/readpixels-after-alert.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "setup should succeed");
extra/readpixels-after-alert.html:gl.clearColor(1, 0, 0, 1);
extra/readpixels-after-alert.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/glsl3/no-attribute-vertex-shader.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/clear-func-buffer-type-match.html:  var renderbuffer = gl.createRenderbuffer();
conformance2/rendering/clear-func-buffer-type-match.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, renderbuffer);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.renderbufferStorage(gl.RENDERBUFFER, format, canvas.width, canvas.height);
conformance2/rendering/clear-func-buffer-type-match.html:  var fb = gl.createFramebuffer();
conformance2/rendering/clear-func-buffer-type-match.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/clear-func-buffer-type-match.html:  var colorbuffer = setupRenderbuffer(gl.COLOR_ATTACHMENT0, gl.RGBA8);
conformance2/rendering/clear-func-buffer-type-match.html:  var colorbuffer1 = setupRenderbuffer(gl.COLOR_ATTACHMENT1, gl.RGBA32I);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);
conformance2/rendering/clear-func-buffer-type-match.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clear and INT buffer");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clearBufferfv(gl.COLOR, 1, new Float32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clearBufferfv and INT buffer");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clearBufferuiv(gl.COLOR, 1, new Uint32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clearBufferuiv and INT buffer");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.drawBuffers([gl.COLOR_ATTACHMENT0]);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clear and INT buffer is NONE");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clearBufferfv(gl.COLOR, 1, new Float32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clearBufferfv and INT buffer is NONE");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clearBufferuiv(gl.COLOR, 0, new Uint32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clearBufferuiv and float buffer");
conformance2/rendering/clear-func-buffer-type-match.html:  colorbuffer = setupRenderbuffer(gl.COLOR_ATTACHMENT0, gl.RGBA32UI);
conformance2/rendering/clear-func-buffer-type-match.html:  colorbuffer1 = setupRenderbuffer(gl.COLOR_ATTACHMENT1, gl.RGBA8);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);
conformance2/rendering/clear-func-buffer-type-match.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clear and UINT buffer");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clearBufferfv(gl.COLOR, 0, new Float32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clearBufferfv and UINT buffer");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clearBufferiv(gl.COLOR, 0, new Int32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clearBufferiv and UINT buffer");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.drawBuffers([gl.NONE, gl.COLOR_ATTACHMENT1]);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clear and UINT buffer is NONE");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clearBufferfv(gl.COLOR, 0, new Float32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clearBufferfv and UINT buffer is NONE");
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clearBufferiv(gl.COLOR, 1, new Int32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clearBufferiv and float buffer");
conformance2/rendering/clear-func-buffer-type-match.html:  colorbuffer = setupRenderbuffer(gl.COLOR_ATTACHMENT0, gl.RGBA8);
conformance2/rendering/clear-func-buffer-type-match.html:  var ext = gl.getExtension("EXT_color_buffer_float");
conformance2/rendering/clear-func-buffer-type-match.html:    colorbuffer1 = setupRenderbuffer(gl.COLOR_ATTACHMENT1, gl.RGBA32F);
conformance2/rendering/clear-func-buffer-type-match.html:    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]);
conformance2/rendering/clear-func-buffer-type-match.html:    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);
conformance2/rendering/clear-func-buffer-type-match.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/clear-func-buffer-type-match.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/clear-func-buffer-type-match.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clear and " + bufferType);
conformance2/rendering/clear-func-buffer-type-match.html:    gl.clearBufferfv(gl.COLOR, ii, new Float32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clearBufferfv and " + bufferType);
conformance2/rendering/clear-func-buffer-type-match.html:    gl.clearBufferiv(gl.COLOR, ii, new Int32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clearBufferiv and " + bufferType);
conformance2/rendering/clear-func-buffer-type-match.html:    gl.clearBufferuiv(gl.COLOR, ii, new Uint32Array(4));
conformance2/rendering/clear-func-buffer-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "clearBufferuiv and " + bufferType);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.deleteFramebuffer(fb);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.deleteRenderbuffer(colorbuffer);
conformance2/rendering/clear-func-buffer-type-match.html:  gl.deleteRenderbuffer(colorbuffer1);
conformance2/rendering/clear-func-buffer-type-match.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no error");
conformance2/rendering/rendering-sampling-feedback-loop.html:    rendering_sampling_feedback_loop([gl.NONE, gl.COLOR_ATTACHMENT1], gl.INVALID_OPERATION);
conformance2/rendering/rendering-sampling-feedback-loop.html:    rendering_sampling_feedback_loop([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1], gl.INVALID_OPERATION);
conformance2/rendering/rendering-sampling-feedback-loop.html:    rendering_sampling_feedback_loop([gl.COLOR_ATTACHMENT0, gl.NONE], gl.NO_ERROR);
conformance2/rendering/rendering-sampling-feedback-loop.html:    positionLoc = gl.getAttribLocation(program, "aPosition");
conformance2/rendering/rendering-sampling-feedback-loop.html:    texCoordLoc = gl.getAttribLocation(program, "aTexCoord");
conformance2/rendering/rendering-sampling-feedback-loop.html:    gl.viewport(0, 0, width, height);
conformance2/rendering/rendering-sampling-feedback-loop.html:    tex0 = gl.createTexture();
conformance2/rendering/rendering-sampling-feedback-loop.html:    tex1 = gl.createTexture();
conformance2/rendering/rendering-sampling-feedback-loop.html:    fbo = gl.createFramebuffer();
conformance2/rendering/rendering-sampling-feedback-loop.html:    wtu.fillTexture(gl, tex0, width, height, [0xff, 0x0, 0x0, 0xff], 0, gl.RGBA, gl.UNSIGNED_BYTE, gl.RGBA);
conformance2/rendering/rendering-sampling-feedback-loop.html:    wtu.fillTexture(gl, tex1, width, height, [0x0, 0xff, 0x0, 0xff], 0, gl.RGBA, gl.UNSIGNED_BYTE, gl.RGBA);
conformance2/rendering/rendering-sampling-feedback-loop.html:    gl.bindTexture(gl.TEXTURE_2D, tex1);
conformance2/rendering/rendering-sampling-feedback-loop.html:    var texLoc = gl.getUniformLocation(program, "tex");
conformance2/rendering/rendering-sampling-feedback-loop.html:    gl.uniform1i(texLoc, 0);
conformance2/rendering/rendering-sampling-feedback-loop.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/rendering/rendering-sampling-feedback-loop.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex0, 0);
conformance2/rendering/rendering-sampling-feedback-loop.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.TEXTURE_2D, tex1, 0);
conformance2/rendering/rendering-sampling-feedback-loop.html:    gl.drawBuffers(draw_buffers);
conformance2/rendering/rendering-sampling-feedback-loop.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/rendering-sampling-feedback-loop.html:gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/rendering-sampling-feedback-loop.html:gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/rendering/rendering-sampling-feedback-loop.html:gl.deleteTexture(tex0);
conformance2/rendering/rendering-sampling-feedback-loop.html:gl.deleteTexture(tex1);
conformance2/rendering/rendering-sampling-feedback-loop.html:gl.deleteFramebuffer(fbo);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/rendering/draw-buffers.html:  var sub = {numDrawingBuffers: gl.getParameter(gl.MAX_DRAW_BUFFERS)};
conformance2/rendering/draw-buffers.html:  gl.deleteProgram(program);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/rendering/draw-buffers.html:    array.push(gl.COLOR_ATTACHMENT0 + ii);
conformance2/rendering/draw-buffers.html:  var maxDrawingBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);
conformance2/rendering/draw-buffers.html:  var maxColorAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
conformance2/rendering/draw-buffers.html:  var tex = gl.createTexture();
conformance2/rendering/draw-buffers.html:  var fb = gl.createFramebuffer();
conformance2/rendering/draw-buffers.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + maxColorAttachments, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "should not be able to attach pass the max attachment point: gl.COLOR_ATTACHMENT0 + " + maxColorAttachments);
conformance2/rendering/draw-buffers.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + maxColorAttachments - 1, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to attach to the max attachment point: gl.COLOR_ATTACHMENT0 + " + (maxColorAttachments - 1));
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(makeArray(maxDrawingBuffers, gl.NONE));
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffers with array NONE of size " + maxColorAttachments);
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffers with array attachments of size " + maxColorAttachments);
conformance2/rendering/draw-buffers.html:  bufs[0] = gl.NONE;
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffers with mixed array attachments of size " + maxColorAttachments);
conformance2/rendering/draw-buffers.html:    bufs[0] = gl.COLOR_ATTACHMENT1;
conformance2/rendering/draw-buffers.html:    bufs[1] = gl.COLOR_ATTACHMENT0;
conformance2/rendering/draw-buffers.html:    gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "should not be able to call drawBuffers with out of order attachments of size " + maxColorAttachments);
conformance2/rendering/draw-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffers with short array of attachments of size " + bufs.length);
conformance2/rendering/draw-buffers.html:  gl.deleteFramebuffer(fb);
conformance2/rendering/draw-buffers.html:  gl.deleteTexture(tex);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/rendering/draw-buffers.html:  var fb = gl.createFramebuffer();
conformance2/rendering/draw-buffers.html:  var fb2 = gl.createFramebuffer();
conformance2/rendering/draw-buffers.html:  var halfFB1 = gl.createFramebuffer();
conformance2/rendering/draw-buffers.html:  var halfFB2 = gl.createFramebuffer();
conformance2/rendering/draw-buffers.html:  var endsFB = gl.createFramebuffer();
conformance2/rendering/draw-buffers.html:  var middleFB = gl.createFramebuffer();
conformance2/rendering/draw-buffers.html:  var maxDrawingBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);
conformance2/rendering/draw-buffers.html:  var maxColorAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
conformance2/rendering/draw-buffers.html:  var maxUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
conformance2/rendering/draw-buffers.html:  var nones = makeArray(maxUsable, gl.NONE);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/rendering/draw-buffers.html:    gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:    var tex = gl.createTexture();
conformance2/rendering/draw-buffers.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/rendering/draw-buffers.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/draw-buffers.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/rendering/draw-buffers.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/rendering/draw-buffers.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/rendering/draw-buffers.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ii, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance2/rendering/draw-buffers.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ii, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, ii < half ? halfFB1 : halfFB2);
conformance2/rendering/draw-buffers.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ii, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, (ii == 0 || ii == (maxUsable - 1)) ? endsFB : middleFB);
conformance2/rendering/draw-buffers.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ii, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/draw-buffers.html:    var location = gl.getUniformLocation(drawProgram, "u_colors[" + ii + "]");
conformance2/rendering/draw-buffers.html:    gl.uniform4fv(location, floatColor);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance2/rendering/draw-buffers.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/rendering/draw-buffers.html:    gl.useProgram(checkProgram);
conformance2/rendering/draw-buffers.html:      gl.bindTexture(gl.TEXTURE_2D, attachment.texture);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, testFB);
conformance2/rendering/draw-buffers.html:      debug("attachment: " + index + " = " + wtu.glEnumToString(gl, gl.getParameter(gl.DRAW_BUFFER0 + index)) +
conformance2/rendering/draw-buffers.html:            ", " + wtu.glEnumToString(gl, gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + index, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)));
conformance2/rendering/draw-buffers.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance2/rendering/draw-buffers.html:    gl.clearColor(0, 0, 0, 0);
conformance2/rendering/draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, testFB);
conformance2/rendering/draw-buffers.html:    gl.clearColor(0, 1, 0, 1);
conformance2/rendering/draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/draw-buffers.html:    gl.useProgram(drawProgram);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, testFB);
conformance2/rendering/draw-buffers.html:  gl.useProgram(drawProgram);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  gl.clearColor(0, 1, 0, 1);
conformance2/rendering/draw-buffers.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(nones);
conformance2/rendering/draw-buffers.html:  gl.useProgram(redProgram);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:  gl.useProgram(blueProgramESSL1);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/rendering/draw-buffers.html:  gl.getError(); // Consume possible error.
conformance2/rendering/draw-buffers.html:  gl.drawBuffers([gl.COLOR_ATTACHMENT0]);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:  gl.useProgram(redProgram);
conformance2/rendering/draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/rendering/draw-buffers.html:  gl.getError(); // Consume possible error.
conformance2/rendering/draw-buffers.html:  gl.drawBuffers([gl.COLOR_ATTACHMENT0]);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:    gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:    gl.clearColor(1, 0, 0, 1);
conformance2/rendering/draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/draw-buffers.html:        bufs1[ii] = gl.NONE;
conformance2/rendering/draw-buffers.html:        bufs2[ii] = gl.NONE;
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:    gl.drawBuffers(bufs1);
conformance2/rendering/draw-buffers.html:    gl.clearColor(0, 1, 0, 1);
conformance2/rendering/draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:    gl.useProgram(drawProgram);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:    gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:    gl.clearColor(1, 0, 0, 1);
conformance2/rendering/draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/draw-buffers.html:    gl.drawBuffers(bufs2);
conformance2/rendering/draw-buffers.html:    gl.clearColor(0, 0, 1, 1);
conformance2/rendering/draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:    gl.useProgram(drawProgram);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, halfFB1);
conformance2/rendering/draw-buffers.html:    gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, halfFB2);
conformance2/rendering/draw-buffers.html:    gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, endsFB);
conformance2/rendering/draw-buffers.html:      gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, middleFB);
conformance2/rendering/draw-buffers.html:      gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(nones);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  gl.drawBuffers(bufs);
conformance2/rendering/draw-buffers.html:  gl.clearColor(1, 0, 0, 1);
conformance2/rendering/draw-buffers.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance2/rendering/draw-buffers.html:  gl.useProgram(drawProgram);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  gl.useProgram(drawProgram);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:    shouldBe("gl.getParameter(gl.DRAW_BUFFER0 + " + ii + ")", "gl.COLOR_ATTACHMENT0 + " + ii);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance2/rendering/draw-buffers.html:    shouldBe("gl.getParameter(gl.DRAW_BUFFER0 + " + ii + ")", "gl.NONE");
conformance2/rendering/draw-buffers.html:  gl.bindTexture(gl.TEXTURE_2D, attachments[0].texture);
conformance2/rendering/draw-buffers.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width * 2, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/draw-buffers.html:  shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
conformance2/rendering/draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance2/rendering/draw-buffers.html:  shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
conformance2/rendering/draw-buffers.html:  gl.deleteFramebuffer(fb);
conformance2/rendering/draw-buffers.html:  gl.deleteFramebuffer(fb2);
conformance2/rendering/draw-buffers.html:  gl.deleteFramebuffer(halfFB1);
conformance2/rendering/draw-buffers.html:  gl.deleteFramebuffer(halfFB2);
conformance2/rendering/draw-buffers.html:    gl.deleteTexture(attachment.texture);
conformance2/rendering/draw-buffers.html:  gl.deleteProgram(checkProgram);
conformance2/rendering/draw-buffers.html:  gl.deleteProgram(redProgram);
conformance2/rendering/draw-buffers.html:  gl.deleteProgram(drawProgram);
conformance2/rendering/draw-buffers.html:  var maxDrawBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);
conformance2/rendering/draw-buffers.html:  var maxColorAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
conformance2/extensions/ext-color-buffer-float.html:    var texture = gl.createTexture();
conformance2/extensions/ext-color-buffer-float.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/extensions/ext-color-buffer-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/extensions/ext-color-buffer-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/extensions/ext-color-buffer-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/extensions/ext-color-buffer-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/extensions/ext-color-buffer-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texture parameter setup should succeed");
conformance2/extensions/ext-color-buffer-float.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT , buf);
conformance2/extensions/ext-color-buffer-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readPixels from floating-point framebuffer should succeed");
conformance2/extensions/ext-color-buffer-float.html:    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, gl.FLOAT, null);
conformance2/extensions/ext-color-buffer-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "floating-point texture allocation should succeed");
conformance2/extensions/ext-color-buffer-float.html:    var fbo = gl.createFramebuffer();
conformance2/extensions/ext-color-buffer-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/extensions/ext-color-buffer-float.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance2/extensions/ext-color-buffer-float.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/extensions/ext-color-buffer-float.html:    var completeStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/extensions/ext-color-buffer-float.html:        if (completeStatus == gl.FRAMEBUFFER_COMPLETE && !enabled)
conformance2/extensions/ext-color-buffer-float.html:    if (completeStatus != gl.FRAMEBUFFER_COMPLETE) {
conformance2/extensions/ext-color-buffer-float.html:        gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/extensions/ext-color-buffer-float.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height * texSubImageCover, format, gl.FLOAT, data);
conformance2/extensions/ext-color-buffer-float.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D should succeed if EXT_color_buffer_float is enabled");
conformance2/extensions/ext-color-buffer-float.html:        gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/extensions/ext-color-buffer-float.html:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/extensions/ext-color-buffer-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "rendering to floating-point texture should succeed");
conformance2/extensions/ext-color-buffer-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/extensions/ext-color-buffer-float.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/extensions/ext-color-buffer-float.html:    gl.useProgram(testProgram);
conformance2/extensions/ext-color-buffer-float.html:    gl.uniform1i(gl.getUniformLocation(testProgram, "tex"), 0);
conformance2/extensions/ext-color-buffer-float.html:    gl.uniform4fv(gl.getUniformLocation(testProgram, "subtractor"), subtractor);
conformance2/extensions/ext-color-buffer-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "rendering from floating-point texture should succeed");
conformance2/extensions/ext-color-buffer-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/extensions/ext-color-buffer-float.html:        samples = Array.prototype.slice.call(gl.getInternalformatParameter(gl.RENDERBUFFER, internalFormat, gl.SAMPLES));
conformance2/extensions/ext-color-buffer-float.html:        var colorbuffer = gl.createRenderbuffer();
conformance2/extensions/ext-color-buffer-float.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, colorbuffer);
conformance2/extensions/ext-color-buffer-float.html:            gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);
conformance2/extensions/ext-color-buffer-float.html:            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples[ndx], internalFormat, width, height);
conformance2/extensions/ext-color-buffer-float.html:            wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "floating-point renderbuffer allocation should fail if EXT_color_buffer_float is not enabled");
conformance2/extensions/ext-color-buffer-float.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "floating-point renderbuffer allocation should succeed if EXT_color_buffer_float is enabled");
conformance2/extensions/ext-color-buffer-float.html:        var fbo = gl.createFramebuffer();
conformance2/extensions/ext-color-buffer-float.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/extensions/ext-color-buffer-float.html:        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorbuffer);
conformance2/extensions/ext-color-buffer-float.html:        var completeStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/extensions/ext-color-buffer-float.html:        if (completeStatus != gl.FRAMEBUFFER_COMPLETE) {
conformance2/extensions/ext-color-buffer-float.html:            resolveColorRbo = gl.createRenderbuffer();
conformance2/extensions/ext-color-buffer-float.html:            gl.bindRenderbuffer(gl.RENDERBUFFER, resolveColorRbo);
conformance2/extensions/ext-color-buffer-float.html:            gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);
conformance2/extensions/ext-color-buffer-float.html:            resolveFbo = gl.createFramebuffer();
conformance2/extensions/ext-color-buffer-float.html:            gl.bindFramebuffer(gl.FRAMEBUFFER, resolveFbo);
conformance2/extensions/ext-color-buffer-float.html:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, resolveColorRbo);
conformance2/extensions/ext-color-buffer-float.html:            completeStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/extensions/ext-color-buffer-float.html:            if (completeStatus != gl.FRAMEBUFFER_COMPLETE) {
conformance2/extensions/ext-color-buffer-float.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/extensions/ext-color-buffer-float.html:        gl.clearColor(1000.0, 1000.0, 1000.0, 1000.0);
conformance2/extensions/ext-color-buffer-float.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/extensions/ext-color-buffer-float.html:            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, resolveFbo);
conformance2/extensions/ext-color-buffer-float.html:            gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/extensions/ext-color-buffer-float.html:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, resolveFbo);
conformance2/extensions/ext-color-buffer-float.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB16F, width, height, 0, gl.RGB, gl.FLOAT, null);
conformance2/extensions/ext-color-buffer-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "RGB16F texture allocation should succeed");
conformance2/extensions/ext-color-buffer-float.html:    var fbo = gl.createFramebuffer();
conformance2/extensions/ext-color-buffer-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/extensions/ext-color-buffer-float.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance2/extensions/ext-color-buffer-float.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/extensions/ext-color-buffer-float.html:    var completeStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/extensions/ext-color-buffer-float.html:    if (completeStatus == gl.FRAMEBUFFER_COMPLETE)
conformance2/extensions/ext-color-buffer-float.html:    gl.deleteTexture(texture);
conformance2/extensions/ext-color-buffer-float.html:    var colorbuffer = gl.createRenderbuffer();
conformance2/extensions/ext-color-buffer-float.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorbuffer);
conformance2/extensions/ext-color-buffer-float.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGB16F, width, height);
conformance2/extensions/ext-color-buffer-float.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "RGB16F renderbuffer allocation should fail with or without enabling EXT_color_buffer_float");
conformance2/extensions/ext-color-buffer-float.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
conformance2/extensions/ext-color-buffer-float.html:    gl.deleteRenderbuffer(colorbuffer);
conformance2/extensions/ext-color-buffer-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/extensions/ext-color-buffer-float.html:    gl.deleteFramebuffer(fbo);
conformance2/extensions/ext-color-buffer-float.html:    gl.getExtension("EXT_color_buffer_float").myProperty = 2;
conformance2/extensions/ext-color-buffer-float.html:    shouldBe('gl.getExtension("EXT_color_buffer_float").myProperty', '2');
conformance2/extensions/ext-color-buffer-float.html:    var maxSamples = gl.getParameter(gl.MAX_SAMPLES);
conformance2/extensions/ext-color-buffer-float.html:    var formats = new Array(gl.RGBA16F, gl.R32F, gl.RG32F, gl.RGBA32F, gl.R16F, gl.RG16F, gl.R11F_G11F_B10F);
conformance2/extensions/ext-color-buffer-float.html:        var samples = gl.getInternalformatParameter(gl.RENDERBUFFER, formats[fmt], gl.SAMPLES);
conformance2/extensions/ext-color-buffer-float.html:  runFloatTextureRenderTargetTest(false, gl.R16F, gl.RED);
conformance2/extensions/ext-color-buffer-float.html:  runFloatTextureRenderTargetTest(false, gl.RG16F, gl.RG);
conformance2/extensions/ext-color-buffer-float.html:  runFloatTextureRenderTargetTest(false, gl.RGBA16F, gl.RGBA);
conformance2/extensions/ext-color-buffer-float.html:  runFloatTextureRenderTargetTest(false, gl.R32F, gl.RED);
conformance2/extensions/ext-color-buffer-float.html:  runFloatTextureRenderTargetTest(false, gl.RG32F, gl.RG);
conformance2/extensions/ext-color-buffer-float.html:  runFloatTextureRenderTargetTest(false, gl.RGBA32F, gl.RGBA);
conformance2/extensions/ext-color-buffer-float.html:  runFloatTextureRenderTargetTest(false, gl.R11F_G11F_B10F, gl.RGB);
conformance2/extensions/ext-color-buffer-float.html:  runFloatRenderbufferRenderTargetTest(false, gl.R16F);
conformance2/extensions/ext-color-buffer-float.html:  runFloatRenderbufferRenderTargetTest(false, gl.RG16F);
conformance2/extensions/ext-color-buffer-float.html:  runFloatRenderbufferRenderTargetTest(false, gl.RGBA16F);
conformance2/extensions/ext-color-buffer-float.html:  runFloatRenderbufferRenderTargetTest(false, gl.R32F);
conformance2/extensions/ext-color-buffer-float.html:  runFloatRenderbufferRenderTargetTest(false, gl.RG32F);
conformance2/extensions/ext-color-buffer-float.html:  runFloatRenderbufferRenderTargetTest(false, gl.RGBA32F);
conformance2/extensions/ext-color-buffer-float.html:  runFloatRenderbufferRenderTargetTest(false, gl.R11F_G11F_B10F);
conformance2/extensions/ext-color-buffer-float.html:  if (!gl.getExtension("EXT_color_buffer_float")) {
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.R16F, gl.RED, testProgram, 1, [1000, 1, 1, 1], 0);
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.RG16F, gl.RG, testProgram, 2, [1000, 1000, 1, 1], 0);
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.RGBA16F, gl.RGBA, testProgram, 4, [1000, 1000, 1000, 1000], 0);
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.R32F, gl.RED, testProgram, 1, [1000, 1, 1, 1], 0);
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.RG32F, gl.RG, testProgram, 2, [1000, 1000, 1, 1], 0);
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.RGBA32F, gl.RGBA, testProgram, 4, [1000, 1000, 1000, 1000], 0);
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.R11F_G11F_B10F, gl.RGB, testProgram, 3, [1000, 1000, 1000, 1], 0);
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.RGBA32F, gl.RGBA, testProgram, 4, [1000, 1000, 1000, 1000], 1);
conformance2/extensions/ext-color-buffer-float.html:      runFloatTextureRenderTargetTest(true, gl.RGBA32F, gl.RGBA, testProgram, 4, [1000, 1000, 1000, 1000], 0.5);
conformance2/extensions/ext-color-buffer-float.html:      runFloatRenderbufferRenderTargetTest(true, gl.R16F, testProgram, 1, [1000, 1, 1, 1]);
conformance2/extensions/ext-color-buffer-float.html:      runFloatRenderbufferRenderTargetTest(true, gl.RG16F, testProgram, 2, [1000, 1000, 1, 1]);
conformance2/extensions/ext-color-buffer-float.html:      runFloatRenderbufferRenderTargetTest(true, gl.RGBA16F, testProgram, 4, [1000, 1000, 1000, 1000]);
conformance2/extensions/ext-color-buffer-float.html:      runFloatRenderbufferRenderTargetTest(true, gl.R32F, testProgram, 1, [1000, 1, 1, 1]);
conformance2/extensions/ext-color-buffer-float.html:      runFloatRenderbufferRenderTargetTest(true, gl.RG32F, testProgram, 2, [1000, 1000, 1, 1]);
conformance2/extensions/ext-color-buffer-float.html:      runFloatRenderbufferRenderTargetTest(true, gl.RGBA32F, testProgram, 4, [1000, 1000, 1000, 1000]);
conformance2/extensions/ext-color-buffer-float.html:      runFloatRenderbufferRenderTargetTest(true, gl.R11F_G11F_B10F, testProgram, 3, [1000, 1000, 1000, 1]);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:var fbo = gl.createFramebuffer();
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.useProgram(program0);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    rendering([gl.COLOR_ATTACHMENT0, gl.NONE], gl.NO_ERROR);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    rendering([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1], gl.NO_ERROR);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.useProgram(program1);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    rendering([gl.COLOR_ATTACHMENT0, gl.NONE], gl.NO_ERROR);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    rendering([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1], gl.INVALID_OPERATION);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.useProgram(program2);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    rendering([gl.COLOR_ATTACHMENT0, gl.NONE], gl.NO_ERROR);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    rendering([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1], gl.INVALID_OPERATION);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.viewport(0, 0, width, height);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    tex0 = gl.createTexture();
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    tex1 = gl.createTexture();
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    wtu.fillTexture(gl, tex0, width, height, [0xff, 0x0, 0x0, 0xff], 0, gl.RGBA, gl.UNSIGNED_BYTE, gl.RGBA);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    wtu.fillTexture(gl, tex1, width, height, [0x0, 0xff, 0x0, 0xff], 0, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, gl.RGBA8UI);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex0, 0);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.TEXTURE_2D, tex1, 0);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    rb0 = gl.createRenderbuffer();
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb0);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, width, height);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    rb1 = gl.createRenderbuffer();
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb1);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8UI, width, height);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb0);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.RENDERBUFFER, rb1);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    gl.drawBuffers(draw_buffers);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.bindRenderbuffer(gl.RENDERBUFFER, null);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.useProgram(null);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.deleteTexture(tex0);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.deleteTexture(tex1);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.deleteRenderbuffer(rb0);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.deleteRenderbuffer(rb1);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.deleteFramebuffer(fbo);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.deleteProgram(program0);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.deleteProgram(program1);
conformance2/rendering/fs-color-type-mismatch-color-buffer-type.html:gl.deleteProgram(program2);
extra/tex-image-with-video-test.js:        gl.clearColor(0,0,0,1);
extra/tex-image-with-video-test.js:        gl.clearDepth(1);
extra/tex-image-with-video-test.js:        textureLoc = gl.getUniformLocation(program, "tex");
extra/tex-image-with-video-test.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
extra/tex-image-with-video-test.js:        gl.colorMask(1, 1, 1, 0);
extra/tex-image-with-video-test.js:        var texture = gl.createTexture();
extra/tex-image-with-video-test.js:        gl.bindTexture(gl.TEXTURE_2D, texture);
extra/tex-image-with-video-test.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
extra/tex-image-with-video-test.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
extra/tex-image-with-video-test.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/tex-image-with-video-test.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/tex-image-with-video-test.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
extra/tex-image-with-video-test.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
extra/tex-image-with-video-test.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl[pixelFormat],
extra/tex-image-with-video-test.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl[pixelFormat], gl[pixelType], videoElement);
extra/tex-image-with-video-test.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl[pixelFormat], gl[pixelFormat], gl[pixelType], videoElement);
extra/tex-image-with-video-test.js:        gl.uniform1i(textureLoc, 0);
extra/tex-image-with-video-test.js:        wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
extra/tex-image-with-video-test.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
extra/big-fbos-example.html:  var err = gl.getError();
extra/big-fbos-example.html:  if (err != gl.NO_ERROR) {
extra/big-fbos-example.html:    if (err != gl.OUT_OF_MEMORY)
extra/big-fbos-example.html:      testFailed("gl.getError returned " + err);
extra/big-fbos-example.html:  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
extra/big-fbos-example.html:  if (status != gl.FRAMEBUFFER_COMPLETE) {
extra/big-fbos-example.html:    testFailed("gl.checkFramebufferStatus() returned " + WebGLDebugUtils.glEnumToString(status));
extra/big-fbos-example.html:  var tex = gl.createTexture();
extra/big-fbos-example.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
extra/big-fbos-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
extra/big-fbos-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
extra/big-fbos-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/big-fbos-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/big-fbos-example.html:  var fb = gl.createFramebuffer();
extra/big-fbos-example.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
extra/big-fbos-example.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
extra/big-fbos-example.html:  gl.texImage2D(gl.TEXTURE_2D,
extra/big-fbos-example.html:                gl.RGBA,           // internalFormat
extra/big-fbos-example.html:                gl.RGBA,           // format
extra/big-fbos-example.html:                gl.UNSIGNED_BYTE,  // type
extra/big-fbos-example.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
extra/big-fbos-example.html:  gl.disable(gl.DEPTH_TEST);
extra/big-fbos-example.html:  gl.disable(gl.BLEND);
extra/big-fbos-example.html:  var vertexObject = gl.createBuffer();
extra/big-fbos-example.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
extra/big-fbos-example.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
extra/big-fbos-example.html:  ]), gl.STATIC_DRAW);
extra/big-fbos-example.html:  gl.enableVertexAttribArray(0);
extra/big-fbos-example.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
extra/big-fbos-example.html:  var vertexObject = gl.createBuffer();
extra/big-fbos-example.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
extra/big-fbos-example.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0, 1,0, 0,1,
extra/big-fbos-example.html:  ]), gl.STATIC_DRAW);
extra/big-fbos-example.html:  gl.enableVertexAttribArray(1);
extra/big-fbos-example.html:  gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
extra/big-fbos-example.html:  var texLoc = gl.getUniformLocation(prog, "tex");
extra/big-fbos-example.html:  gl.uniform1i(texLoc, 0);
extra/big-fbos-example.html:  gl.clearColor(0, 0, 0, 1);
extra/big-fbos-example.html:  gl.clear(gl.COLOR_BUFFER_BIT);
extra/big-fbos-example.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "setup should succeed");
extra/big-fbos-example.html:  var size = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);
extra/big-fbos-example.html:    gl.texImage2D(gl.TEXTURE_2D,
extra/big-fbos-example.html:                  gl.RGBA,           // internalFormat
extra/big-fbos-example.html:                  gl.RGBA,           // format
extra/big-fbos-example.html:                  gl.UNSIGNED_BYTE,  // type
extra/big-fbos-example.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
extra/big-fbos-example.html:    gl.clearColor(1, 0, 0, 1);
extra/big-fbos-example.html:    gl.clear(gl.COLOR_BUFFER_BIT);
extra/big-fbos-example.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
extra/big-fbos-example.html:    gl.deleteFramebuffer(fb);
extra/big-fbos-example.html:    gl.clearColor(0, 0, 0, 1);
extra/big-fbos-example.html:    gl.clear(gl.COLOR_BUFFER_BIT);
extra/big-fbos-example.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
extra/big-fbos-example.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "each run with no error");
extra/big-fbos-example.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/glsl3/texture-offset-out-of-range.html:    var minOffset = gl.getParameter(gl.MIN_PROGRAM_TEXEL_OFFSET);
conformance2/glsl3/texture-offset-out-of-range.html:    var maxOffset = gl.getParameter(gl.MAX_PROGRAM_TEXEL_OFFSET);
extra/buffer-sizes.html:            "OR that the allocation results in gl.OUT_OF_MEMORY or context loss.");
extra/buffer-sizes.html:    gl.enableVertexAttribArray(0);
extra/buffer-sizes.html:        gl.enableVertexAttribArray(1 + i);
extra/buffer-sizes.html:    gl.disable(gl.DEPTH_TEST);
extra/buffer-sizes.html:    gl.disable(gl.BLEND);
extra/buffer-sizes.html:    squareBuffer = gl.createBuffer();
extra/buffer-sizes.html:    gl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer);
extra/buffer-sizes.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
extra/buffer-sizes.html:    var buffer = gl.createBuffer();
extra/buffer-sizes.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
extra/buffer-sizes.html:    gl.bufferData(gl.ARRAY_BUFFER, size, gl.STATIC_DRAW);
extra/buffer-sizes.html:    error = gl.getError();
extra/buffer-sizes.html:    if (error !== gl.NO_ERROR) {
extra/buffer-sizes.html:        gl.deleteBuffer(buffer);
extra/buffer-sizes.html:            if (error === gl.OUT_OF_MEMORY) {
extra/buffer-sizes.html:                testPassed(msg + " failed with gl.OUT_OF_MEMORY (this is allowed)");
extra/buffer-sizes.html:            } else if (error === gl.CONTEXT_LOST_WEBGL) {
extra/buffer-sizes.html:                testPassed(msg + " failed with gl.CONTEXT_LOST_WEBGL (this is allowed)");
extra/buffer-sizes.html:    var reportedSize = gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);
extra/buffer-sizes.html:    gl.clearColor(0, 1, 0, 1);
extra/buffer-sizes.html:    gl.clear(gl.COLOR_BUFFER_BIT);
extra/buffer-sizes.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
extra/buffer-sizes.html:    var size = gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);
extra/buffer-sizes.html:        gl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer);
extra/buffer-sizes.html:        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
extra/buffer-sizes.html:            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
extra/buffer-sizes.html:            gl.vertexAttribPointer(1 + i, 4, gl.FLOAT, false, 0,
extra/buffer-sizes.html:        gl.drawArrays(gl.TRIANGLES, 0, numVertices);
extra/buffer-sizes.html:        error = gl.getError();
extra/buffer-sizes.html:        if (error !== gl.NO_ERROR) {
extra/buffer-sizes.html:                if (error === gl.OUT_OF_MEMORY) {
extra/buffer-sizes.html:                    testPassed("drawArrays failed with gl.OUT_OF_MEMORY (this is allowed)");
extra/buffer-sizes.html:                } else if (error === gl.CONTEXT_LOST_WEBGL) {
extra/buffer-sizes.html:                    testPassed("drawArrays failed with gl.CONTEXT_LOST_WEBGL (this is allowed)");
extra/buffer-sizes.html:    // Allowed failures are gl.OUT_OF_MEMORY or context loss.
extra/buffer-sizes.html:    gl.deleteBuffer(squareBuffer);
extra/buffer-sizes.html:        if (gl.isContextLost() || error === gl.OUT_OF_MEMORY) {
extra/buffer-sizes.html:            testFailed("Context was not lost after timeout even though gl.getBufferParameter returned null.");
extra/buffer-sizes.html:        gl.deleteBuffer(buffer);
conformance2/glsl3/attrib-location-length-limits.html:shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)', 'true');
conformance2/glsl3/attrib-location-length-limits.html:gl.bindAttribLocation(program, 0, attrib1024Name);
conformance2/glsl3/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance2/glsl3/attrib-location-length-limits.html:var attribLoc = gl.getAttribLocation(program, attrib1024Name);
conformance2/glsl3/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance2/glsl3/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance2/glsl3/attrib-location-length-limits.html:program = gl.createProgram();
conformance2/glsl3/attrib-location-length-limits.html:gl.bindAttribLocation(program, 0, attrib1025Name);
conformance2/glsl3/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance2/glsl3/attrib-location-length-limits.html:shouldBe('gl.getAttribLocation(program, attrib1025Name)', '-1');
conformance2/glsl3/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
extra/out-of-memory.html:    var shader = gl.createShader(gl.VERTEX_SHADER);
extra/out-of-memory.html:      gl.shaderSource(shader, shaderSource);
extra/out-of-memory.html:      var err = gl.getError();
extra/out-of-memory.html:      if (err != gl.NO_ERROR) {
extra/out-of-memory.html:        assertMsg(err == gl.OUT_OF_MEMORY, "shaderSource returns OUT_OF_MEMORY");
extra/webgl-drawelements-validation.html:    var verts = gl.createBuffer();
extra/webgl-drawelements-validation.html:    gl.bindBuffer(gl.ARRAY_BUFFER, verts);
extra/webgl-drawelements-validation.html:    gl.bufferData(gl.ARRAY_BUFFER, vertData, gl.STATIC_DRAW);
extra/webgl-drawelements-validation.html:    gl.vertexAttribPointer(location, 2, gl.FLOAT, false, 0, 0);
extra/webgl-drawelements-validation.html:    gl.enableVertexAttribArray(location);
extra/webgl-drawelements-validation.html:    var indexBuffer = gl.createBuffer();
extra/webgl-drawelements-validation.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
extra/webgl-drawelements-validation.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, fullIndicesArray, gl.DYNAMIC_DRAW);
extra/webgl-drawelements-validation.html:    gl.finish();
extra/webgl-drawelements-validation.html:        var error = gl.getError();
extra/webgl-drawelements-validation.html:        errorsCorrect = errorsCorrect && error == gl.INVALID_OPERATION;
extra/webgl-drawelements-validation.html:            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, fullIndicesArray);
extra/webgl-drawelements-validation.html:            gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);
extra/webgl-drawelements-validation.html:            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, Math.floor(indices.length / 2), new Uint16Array([i + 5]));
extra/webgl-drawelements-validation.html:            gl.drawElements(gl.TRIANGLES, indices.length - i * 3, gl.UNSIGNED_SHORT, 0);
extra/webgl-drawelements-validation.html:            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint16Array([i + 5]));
extra/webgl-drawelements-validation.html:            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, indices.length - 1, new Uint16Array([i + 5]));
extra/webgl-drawelements-validation.html:            gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);
extra/webgl-drawelements-validation.html:        var lose = gl.getExtension('WEBGL_lose_context');
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    var tex_read = gl.createTexture();
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.bindTexture(gl.TEXTURE_2D, tex_read);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.texImage2D(gl.TEXTURE_2D, 0, readbufferFormat, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint_read);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    var fbo_read = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_read);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_read, 0);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    var tex_draw = gl.createTexture();
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.bindTexture(gl.TEXTURE_2D, tex_draw);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.texImage2D(gl.TEXTURE_2D, 0, drawbufferFormat, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    var fbo_draw = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_draw, 0);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    if (gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-filter-outofbounds.html:        var readbufferHasSRGBImage = (readbufferFormat == gl.SRGB8_ALPHA8);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:        var drawbufferHasSRGBImage = (drawbufferFormat == gl.SRGB8_ALPHA8);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_read);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:            gl.bindTexture(gl.TEXTURE_2D, tex_draw);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:            gl.texImage2D(gl.TEXTURE_2D, 0, drawbufferFormat, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:            gl.blitFramebuffer(test[i][0], test[i][1], test[i][2], test[i][3], test[i][4], test[i][5], test[i][6], test[i][7], gl.COLOR_BUFFER_BIT, filter);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:            gl.readPixels(0, 0, size, size, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.deleteFramebuffer(fbo_read);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.deleteFramebuffer(fbo_draw);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.deleteTexture(tex_read);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    gl.deleteTexture(tex_draw);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:    var filters = [gl.LINEAR, gl.NEAREST];
conformance2/rendering/blitframebuffer-filter-outofbounds.html:        blitframebuffer_filter_outofbounds(gl.RGBA8, gl.RGBA8, filters[ii]);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:        blitframebuffer_filter_outofbounds(gl.RGBA8, gl.SRGB8_ALPHA8, filters[ii]);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:        blitframebuffer_filter_outofbounds(gl.SRGB8_ALPHA8, gl.RGBA8, filters[ii]);
conformance2/rendering/blitframebuffer-filter-outofbounds.html:        blitframebuffer_filter_outofbounds(gl.SRGB8_ALPHA8, gl.SRGB8_ALPHA8, filters[ii]);
extra/webgl-translate-shader.html:  debugShaders = gl.getExtension('WEBGL_debug_shaders');
extra/webgl-translate-shader.html:            var ext = gl.getExtension(shaderExtensions[i]);
extra/webgl-translate-shader.html:        var shader = gl.createShader(type);
extra/webgl-translate-shader.html:        gl.shaderSource(shader, source);
extra/webgl-translate-shader.html:        gl.compileShader(shader);
extra/webgl-translate-shader.html:        if (type == gl.FRAGMENT_SHADER) {
extra/webgl-translate-shader.html:        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
extra/webgl-translate-shader.html:            infoLog.value = gl.getShaderInfoLog(shader);
extra/webgl-translate-shader.html:            infoLog.value += 'Info log when compiling as ' + shaderTypeStr + ':\n' + gl.getShaderInfoLog(shader) + '\n';
extra/webgl-translate-shader.html:    if (!tryCompile(gl.FRAGMENT_SHADER) && !tryCompile(gl.VERTEX_SHADER)) {
extra/lots-of-polys-example.html:  assertMsg(gl.getError() == gl.NO_ERROR, "Should be no errors from setup.");
extra/lots-of-polys-example.html:  var tex = gl.createTexture();
extra/lots-of-polys-example.html:  gl.enable(gl.BLEND);
extra/lots-of-polys-example.html:  gl.disable(gl.DEPTH_TEST);
extra/lots-of-polys-example.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after creating texture");
extra/lots-of-polys-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
extra/lots-of-polys-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
extra/lots-of-polys-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/lots-of-polys-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/lots-of-polys-example.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setting texture params");
extra/lots-of-polys-example.html:  var loc = gl.getUniformLocation(program, "tex");
extra/lots-of-polys-example.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after getting tex locations");
extra/lots-of-polys-example.html:  gl.uniform1i(loc, 0);
extra/lots-of-polys-example.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setting tex uniform");
extra/lots-of-polys-example.html:  var indexBuffer = gl.createBuffer();
extra/lots-of-polys-example.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
extra/lots-of-polys-example.html:  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
extra/lots-of-polys-example.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after creating index buffer");
extra/lots-of-polys-example.html:  gl.drawElements(gl.TRIANGLES, numQuads * 6, gl.UNSIGNED_BYTE, 0);
extra/lots-of-polys-example.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    var tex_read = gl.createTexture();
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.bindTexture(gl.TEXTURE_2D, tex_read);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.texImage2D(gl.TEXTURE_2D, 0, readbufferFormat, size_read, size_read, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint_read);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    var fbo_read = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_read);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_read, 0);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    var tex_draw = gl.createTexture();
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.bindTexture(gl.TEXTURE_2D, tex_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.texImage2D(gl.TEXTURE_2D, 0, drawbufferFormat, size_draw, size_draw, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    var fbo_draw = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_draw, 0);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    if (gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-outside-readbuffer.html:        var readbufferHasSRGBImage = (readbufferFormat == gl.SRGB8_ALPHA8);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:        var drawbufferHasSRGBImage = (drawbufferFormat == gl.SRGB8_ALPHA8);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_read);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.blitFramebuffer(srcStart, srcStart, srcEnd, srcEnd, dstStart, dstStart, dstEnd, dstEnd, gl.COLOR_BUFFER_BIT, gl.LINEAR);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.readPixels(0, 0, size_draw, size_draw, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_read);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.blitFramebuffer(srcX, srcY, srcX + size_read, srcY + size_read,
conformance2/rendering/blitframebuffer-outside-readbuffer.html:                               gl.COLOR_BUFFER_BIT, gl.LINEAR);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:            gl.readPixels(0, 0, size_draw, size_draw, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.deleteFramebuffer(fbo_read);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.deleteFramebuffer(fbo_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.deleteTexture(tex_read);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    gl.deleteTexture(tex_draw);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    blitframebuffer_outside_readbuffer(gl.RGBA8, gl.RGBA8);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    blitframebuffer_outside_readbuffer(gl.RGBA8, gl.SRGB8_ALPHA8);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    blitframebuffer_outside_readbuffer(gl.SRGB8_ALPHA8, gl.RGBA8);
conformance2/rendering/blitframebuffer-outside-readbuffer.html:    blitframebuffer_outside_readbuffer(gl.SRGB8_ALPHA8, gl.SRGB8_ALPHA8);
conformance2/rendering/blitframebuffer-filter-srgb.html:var tex_read = gl.createTexture();
conformance2/rendering/blitframebuffer-filter-srgb.html:var tex_draw = gl.createTexture();
conformance2/rendering/blitframebuffer-filter-srgb.html:var fbo_read = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-filter-srgb.html:var fbo_draw = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.bindTexture(gl.TEXTURE_2D, tex_read);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.texImage2D(gl.TEXTURE_2D, 0, readbufferFormat, size_read, size_read, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_read);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_read, 0);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.bindTexture(gl.TEXTURE_2D, tex_draw);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.texImage2D(gl.TEXTURE_2D, 0, drawbufferFormat, size_draw, size_draw, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_draw, 0);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.blitFramebuffer(0, 0, size_read, size_read, 0, 0, size_draw, size_draw, gl.COLOR_BUFFER_BIT, filter);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_draw);
conformance2/rendering/blitframebuffer-filter-srgb.html:    gl.readPixels(0, 0, size_draw, size_draw, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/rendering/blitframebuffer-filter-srgb.html:        if (readbufferFormat == gl.SRGB8_ALPHA8) {
conformance2/rendering/blitframebuffer-filter-srgb.html:    var temp = blitframebuffer_helper(gl.RGBA, gl.RGBA, filter, ref_buffer);
conformance2/rendering/blitframebuffer-filter-srgb.html:        if (drawbufferFormat == gl.SRGB8_ALPHA8) {
conformance2/rendering/blitframebuffer-filter-srgb.html:    var filters = [gl.LINEAR, gl.NEAREST];
conformance2/rendering/blitframebuffer-filter-srgb.html:        blitframebuffer_filter_srgb(gl.RGBA8, gl.SRGB8_ALPHA8, filters[ii], true);
conformance2/rendering/blitframebuffer-filter-srgb.html:        blitframebuffer_filter_srgb(gl.RGBA8, gl.SRGB8_ALPHA8, filters[ii], false);
conformance2/rendering/blitframebuffer-filter-srgb.html:        blitframebuffer_filter_srgb(gl.SRGB8_ALPHA8, gl.RGBA8, filters[ii], true);
conformance2/rendering/blitframebuffer-filter-srgb.html:        blitframebuffer_filter_srgb(gl.SRGB8_ALPHA8, gl.RGBA8, filters[ii], false);
conformance2/rendering/blitframebuffer-filter-srgb.html:        blitframebuffer_filter_srgb(gl.SRGB8_ALPHA8, gl.SRGB8_ALPHA8, filters[ii], true);
conformance2/rendering/blitframebuffer-filter-srgb.html:        blitframebuffer_filter_srgb(gl.SRGB8_ALPHA8, gl.SRGB8_ALPHA8, filters[ii], false);
conformance2/rendering/blitframebuffer-filter-srgb.html:gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/blitframebuffer-filter-srgb.html:gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-filter-srgb.html:gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-filter-srgb.html:gl.deleteFramebuffer(fbo_read);
conformance2/rendering/blitframebuffer-filter-srgb.html:gl.deleteFramebuffer(fbo_draw);
conformance2/rendering/blitframebuffer-filter-srgb.html:gl.deleteTexture(tex_read);
conformance2/rendering/blitframebuffer-filter-srgb.html:gl.deleteTexture(tex_draw);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:var tex_blit = gl.createTexture();
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:var fb0 = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:var rb0 = gl.createRenderbuffer();
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:var fbo_blit = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    var filters = [gl.LINEAR, gl.NEAREST];
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:        blitframebuffer_multisampled_readbuffer(gl.SRGB8_ALPHA8, gl.SRGB8_ALPHA8, filters[ii]);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.viewport(0, 0, size, size);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.bindTexture(gl.TEXTURE_2D, tex_blit);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.texImage2D(gl.TEXTURE_2D, 0, drawbufferFormat, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo_blit);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_blit, 0);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "setup draw framebuffer should succeed");
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.blitFramebuffer(0, 0, size, size, 0, 0, size, size, gl.COLOR_BUFFER_BIT, filter);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitframebuffer should succeed");
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb0);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, readbufferFormat, size, size);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb0);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.useProgram(program);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Blit from a multi-sampled srgb image to a srgb image should succeed");
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo_blit);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:gl.bindRenderbuffer(gl.RENDERBUFFER, null);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:gl.deleteRenderbuffer(rb0);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:gl.deleteTexture(tex_blit);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:gl.deleteFramebuffer(fb0);
conformance2/rendering/blitframebuffer-multisampled-readbuffer.html:gl.deleteFramebuffer(fbo_blit);
extra/slow-shader-example.html:var maxTexSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
extra/slow-shader-example.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after getting a context");
extra/slow-shader-example.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after program setup");
extra/slow-shader-example.html:var tex = gl.createTexture();
extra/slow-shader-example.html:gl.enable(gl.BLEND);
extra/slow-shader-example.html:gl.disable(gl.DEPTH_TEST);
extra/slow-shader-example.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after creating texture");
extra/slow-shader-example.html:gl.bindTexture(gl.TEXTURE_2D, tex);
extra/slow-shader-example.html:gl.texImage2D(
extra/slow-shader-example.html:      gl.TEXTURE_2D, 0, gl.RGBA, texSize, texSize, 0,
extra/slow-shader-example.html:      gl.RGBA, gl.UNSIGNED_BYTE, pixels);
extra/slow-shader-example.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after texture setup");
extra/slow-shader-example.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
extra/slow-shader-example.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
extra/slow-shader-example.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
extra/slow-shader-example.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
extra/slow-shader-example.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after texture param setting");
extra/slow-shader-example.html:var loc = gl.getUniformLocation(program, "tex");
extra/slow-shader-example.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after getting tex location");
extra/slow-shader-example.html:gl.uniform1i(loc, 0);
extra/slow-shader-example.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setting tex uniform");
extra/slow-shader-example.html:var indexBuffer = gl.createBuffer();
extra/slow-shader-example.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
extra/slow-shader-example.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
extra/slow-shader-example.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setting up indices");
extra/slow-shader-example.html:    gl.drawElements(gl.TRIANGLES, numQuads * 6, gl.UNSIGNED_BYTE, 0);
extra/slow-shader-example.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
conformance2/rendering/blitframebuffer-test.html:    var tex_2d = gl.createTexture();
conformance2/rendering/blitframebuffer-test.html:    gl.bindTexture(gl.TEXTURE_2D, tex_2d);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance2/rendering/blitframebuffer-test.html:    var fb0 = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_2d, 0);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    var rb0 = gl.createRenderbuffer();
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb0);
conformance2/rendering/blitframebuffer-test.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, width, height);
conformance2/rendering/blitframebuffer-test.html:    var fb1 = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb0);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer should succeed.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 4, 4, 6, 6, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer should generate INVALID_OPERATION if read/draw buffer are identical.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 4, 4, 6, 6, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer should generate INVALID_OPERATION if read/draw buffer are identical.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_2d, 0);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_2d, 0);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE ||
conformance2/rendering/blitframebuffer-test.html:        gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 4, 4, 6, 6, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer should generate INVALID_OPERATION if read/draw color buffer are identical.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex_2d, 1);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer should succeed if read/draw buffer has the same image with different levels.");
conformance2/rendering/blitframebuffer-test.html:    var tex_cube_map = gl.createTexture();
conformance2/rendering/blitframebuffer-test.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex_cube_map);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, tex_cube_map, 0);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, tex_cube_map, 0);
conformance2/rendering/blitframebuffer-test.html:    if ((gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) ||
conformance2/rendering/blitframebuffer-test.html:        (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer should succeed if read/draw buffer has the same CUBE_MAP image with different faces.");
conformance2/rendering/blitframebuffer-test.html:    var tex_2d_array = gl.createTexture();
conformance2/rendering/blitframebuffer-test.html:    gl.bindTexture(gl.TEXTURE_2D_ARRAY, tex_2d_array);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA8, width, height, depth, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTextureLayer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex_2d_array, level, layer);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTextureLayer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex_2d_array, level, layer);
conformance2/rendering/blitframebuffer-test.html:    if ((gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) ||
conformance2/rendering/blitframebuffer-test.html:        (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer should succeed if read/draw buffer has the same 3D/2D_ARRAY image with different layers.");
conformance2/rendering/blitframebuffer-test.html:    var rb1 = gl.createRenderbuffer();
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, width, height);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, tex_cube_map, 0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, tex_cube_map, 0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE ||
conformance2/rendering/blitframebuffer-test.html:        gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer should succeed.");
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer should generate INVALID_OPERATION if read/draw framebuffer have identical depth buffer attachment.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE ||
conformance2/rendering/blitframebuffer-test.html:        gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer should succeed.");
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer should generate INVALID_OPERATION if read/draw framebuffer have identical stencil buffer attachment.");
conformance2/rendering/blitframebuffer-test.html:    var rb2 = gl.createRenderbuffer();
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb2);
conformance2/rendering/blitframebuffer-test.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, width, height);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, tex_cube_map, 0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb2);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, tex_cube_map, 0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.TEXTURE_CUBE_MAP_POSITIVE_X, tex_cube_map, 0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE ||
conformance2/rendering/blitframebuffer-test.html:        gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.DEPTH_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer should succeed.");
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer should succeed.");
conformance2/rendering/blitframebuffer-test.html:    gl.drawBuffers([gl.COLOR_ATTACHENT0, gl.COLOR_ATTACHMENT1]);
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer should generate INVALID_OPERATION if read/draw buffers have identical color buffer attachment.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindTexture(gl.TEXTURE_2D_ARRAY, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteTexture(tex_2d);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteTexture(tex_cube_map);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteTexture(tex_2d_array);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteRenderbuffer(rb0);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteRenderbuffer(rb1);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteRenderbuffer(rb2);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteFramebuffer(fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteFramebuffer(fb1);
conformance2/rendering/blitframebuffer-test.html:    var rb0 = gl.createRenderbuffer();
conformance2/rendering/blitframebuffer-test.html:    var fb0 = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-test.html:    var rb1 = gl.createRenderbuffer();
conformance2/rendering/blitframebuffer-test.html:    var fb1 = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-test.html:    var samples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.SRGB8_ALPHA8, gl.SAMPLES);
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb0);
conformance2/rendering/blitframebuffer-test.html:    gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples[0], gl.SRGB8_ALPHA8, width, height);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb0);
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.SRGB8_ALPHA8, width, height);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE ||
conformance2/rendering/blitframebuffer-test.html:        gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.LINEAR);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "blitFramebuffer from multisampled srgb image should succeed.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples[0], gl.SRGB8_ALPHA8, width, height);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.LINEAR);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer to a multisampled srgb image should generate INVALID_OPERATION.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.SRGB8_ALPHA8, width, height);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb1);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 2, 2, 4, 4, gl.COLOR_BUFFER_BIT, gl.LINEAR);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer from a multisampled srgb image, the src region and the dst region must be exactly the same.");
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 4, 4, gl.COLOR_BUFFER_BIT, gl.LINEAR);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer from a multisampled srgb image, the src region and the dst region must be exactly the same.");
conformance2/rendering/blitframebuffer-test.html:    var tex = gl.createTexture();
conformance2/rendering/blitframebuffer-test.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/rendering/blitframebuffer-test.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-test.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/blitframebuffer-test.html:    if (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/blitframebuffer-test.html:    gl.blitFramebuffer(0, 0, 2, 2, 0, 0, 2, 2, gl.COLOR_BUFFER_BIT, gl.LINEAR);
conformance2/rendering/blitframebuffer-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "blitFramebuffer from a multisampled srgb image, the format/type must be exactly the same.");
conformance2/rendering/blitframebuffer-test.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteRenderbuffer(rb0);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteRenderbuffer(rb1);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteTexture(tex);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteFramebuffer(fb0);
conformance2/rendering/blitframebuffer-test.html:    gl.deleteFramebuffer(fb1);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:    var error = gl.getError();
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:    if (error === gl.INVALID_OPERATION) {
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:    } else if (error === gl.NO_ERROR) {
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:    var glElementArrayBuffer = gl.createBuffer();
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, glElementArrayBuffer);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, quadIndices, gl.STATIC_DRAW);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:var quadBuffer = gl.createBuffer();
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bufferData(gl.ARRAY_BUFFER, quadPositions, gl.STATIC_DRAW);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.enableVertexAttribArray(0);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:var vertexBuffer = gl.createBuffer();
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bufferData(gl.ARRAY_BUFFER,
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:              gl.STATIC_DRAW);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.enableVertexAttribArray(1);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.vertexAttribPointer(1, 4, gl.FLOAT, false, 0, 0);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Shader and buffer setup should generate no errors");
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:var loc = gl.getUniformLocation(program, "u_testCase");
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.uniform1i(loc, 1);  // TEST_CASE_IN_BOUND == 1
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.clearColor(0.0, 0.0, 1.0, 1.0);  // Start with blue to indicate no pixels touched.
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_SHORT, /*offset*/0);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Draw call should generate no errors");
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.uniform1i(loc, 2);  // TEST_CASE_OUT_OF_BOUND == 2
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.clearColor(0.0, 0.0, 1.0, 1.0);  // Start with blue to indicate no pixels touched.
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, outOfBoundsElementArrayBuffer);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bindBuffer(gl.COPY_WRITE_BUFFER, elementArrayBuffer);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.copyBufferSubData(gl.ELEMENT_ARRAY_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, 4 * Uint16Array.BYTES_PER_ELEMENT);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "copyBufferSubData should generate no errors");
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementArrayBuffer);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_SHORT, /*offset*/0);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.uniform1i(loc, 2);  // TEST_CASE_OUT_OF_BOUND == 2
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.clearColor(0.0, 0.0, 1.0, 1.0);  // Start with blue to indicate no pixels touched.
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementArrayBuffer);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.bindBuffer(gl.COPY_READ_BUFFER, outOfBoundsElementArrayBuffer);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.ELEMENT_ARRAY_BUFFER, 0, 0, 4 * Uint16Array.BYTES_PER_ELEMENT);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "copyBufferSubData should generate no errors");
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_SHORT, /*offset*/0);
conformance2/rendering/out-of-bounds-index-buffers-after-copying.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Running tests should generate no errors");
extra/point-no-attributes-stress.html:  gl.enable(gl.BLEND);
extra/point-no-attributes-stress.html:  gl.drawArrays(gl.POINTS, 0, Math.pow(2, 31) - 1);
extra/point-no-attributes-stress.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
extra/program-test-1.html:  gl.clearColor(0.0, 0.0, 0.0, 0.0);
extra/program-test-1.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
extra/program-test-1.html:  var vs = gl.createShader(gl.VERTEX_SHADER);
extra/program-test-1.html:  gl.shaderSource(vs, "attribute vec4 aVertex; attribute vec4 aColor; varying vec4 vColor; void main() { vColor = aColor; gl_Position = aVertex; }");
extra/program-test-1.html:  gl.compileShader(vs);
extra/program-test-1.html:  var fs = gl.createShader(gl.FRAGMENT_SHADER);
extra/program-test-1.html:  gl.shaderSource(fs, "precision mediump float; varying vec4 vColor; void main() { gl_FragColor = vColor; }");
extra/program-test-1.html:  gl.compileShader(fs);
extra/program-test-1.html:  var prog = gl.createProgram();
extra/program-test-1.html:  gl.attachShader(prog, vs);
extra/program-test-1.html:  //gl.attachShader(prog, fs);
extra/program-test-1.html:  gl.bindAttribLocation(prog, 0, "aVertex");
extra/program-test-1.html:  gl.bindAttribLocation(prog, 1, "aColor");
extra/program-test-1.html:  gl.linkProgram(prog);
extra/program-test-1.html:  var vbuf = gl.createBuffer();
extra/program-test-1.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbuf);
extra/program-test-1.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
extra/program-test-1.html:      1.0, 1.0, 0.0, 1.0]), gl.STATIC_DRAW);
extra/program-test-1.html:  gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
extra/program-test-1.html:  var cbuf = gl.createBuffer();
extra/program-test-1.html:  gl.bindBuffer(gl.ARRAY_BUFFER, cbuf);
extra/program-test-1.html:  gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array([255, 0, 0,
extra/program-test-1.html:                                                 255, 255, 0]), gl.STATIC_DRAW);
extra/program-test-1.html:  gl.vertexAttribPointer(1, 3, gl.UNSIGNED_BYTE, false, 0, 0);
extra/program-test-1.html:  gl.enableVertexAttribArray(0);
extra/program-test-1.html:  gl.enableVertexAttribArray(1);
extra/program-test-1.html:  gl.useProgram(prog);
extra/program-test-1.html:  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
extra/program-test-1.html:  log("glError", "0x" + gl.getError().toString(16));
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL error from set up");
conformance2/rendering/attrib-type-match.html:    gl.useProgram(program0);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4i(pIndex, 1, 0, 0, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArrays succeeds: type in shader mismatch default vertex type is valid for inactive attrib");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttrib4f(aIndex, 0.0, 1.0, 0.0, 0.0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArrays succeeds: type in shader mismatch vertexAttrib type is valid for inactive attrib");
conformance2/rendering/attrib-type-match.html:    gl.useProgram(program1);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4i(pIndex, 1, 0, 0, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Type mismatch: type in shader mismatch the default type for a vertex attrib");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4i(aIndex, 0, 1, 0, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Type mismatch: type in shader mismatch the default type for a vertex attrib");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4ui(bIndex, 0, 0, 1, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArrays succeeds");
conformance2/rendering/attrib-type-match.html:    gl.useProgram(program2);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttrib4f(pIndex, 1.0, 0.0, 0.0, 0.0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Type mismatch: generic attrib is valid per context. 'a' is set to int type by previous test case");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttrib4f(aIndex, 0.0, 1.0, 0.0, 0.0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArrays succeeds: default type of generic attrib is float");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4i(offsetILoc, -1, -2, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4ui(offsetULoc, 1, 2, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttrib4f(colorLoc, 1.0, 0, 0, 1.0);
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetIBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(offsetILoc, 2, gl.INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(offsetULoc, 2, gl.UNSIGNED_INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL error from set up");
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArrays succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstanced succeeds");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4i(offsetULoc, 1, 2, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttrib4f(offsetULoc, 1.0, 2.0, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4ui(offsetILoc, 1, 2, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttrib4f(offsetILoc, 1.0, 2.0, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4i(colorLoc, 1, 0, 0, 1);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4ui(colorLoc, 1, 0, 0, 1);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElements succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawRangeElements succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced succeeds");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4i(offsetULoc, 1, 2, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttrib4f(offsetULoc, 1.0, 2.0, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4ui(offsetILoc, 1, 2, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttrib4f(offsetILoc, 1.0, 2.0, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4i(colorLoc, 1, 0, 0, 1);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribI4ui(colorLoc, 1, 0, 0, 1);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    var offsetIBuffer = gl.createBuffer();
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetIBuffer);
conformance2/rendering/attrib-type-match.html:    gl.bufferData(gl.ARRAY_BUFFER, offsetI, gl.STATIC_DRAW);
conformance2/rendering/attrib-type-match.html:    var offsetUBuffer = gl.createBuffer();
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.bufferData(gl.ARRAY_BUFFER, offsetU, gl.STATIC_DRAW);
conformance2/rendering/attrib-type-match.html:    var offsetFBuffer = gl.createBuffer();
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetFBuffer);
conformance2/rendering/attrib-type-match.html:    gl.bufferData(gl.ARRAY_BUFFER, offsetF, gl.STATIC_DRAW);
conformance2/rendering/attrib-type-match.html:    var colorBuffer = gl.createBuffer();
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance2/rendering/attrib-type-match.html:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
conformance2/rendering/attrib-type-match.html:    var colorUBuffer = gl.createBuffer();
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.bufferData(gl.ARRAY_BUFFER, colorsU, gl.STATIC_DRAW);
conformance2/rendering/attrib-type-match.html:    gl.enableVertexAttribArray(offsetILoc);
conformance2/rendering/attrib-type-match.html:    gl.enableVertexAttribArray(offsetULoc);
conformance2/rendering/attrib-type-match.html:    gl.enableVertexAttribArray(colorLoc);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArrays succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstanced succeeds");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetIBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(offsetULoc, 2, gl.INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetFBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribPointer(offsetULoc, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(offsetILoc, 2, gl.UNSIGNED_INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetFBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribPointer(offsetILoc, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(colorLoc, 4, gl.UNSIGNED_INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(colorLoc, 4, gl.INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElements succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawRangeElements succeeds");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced succeeds");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetIBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(offsetULoc, 2, gl.INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetFBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribPointer(offsetULoc, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(offsetILoc, 2, gl.UNSIGNED_INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetFBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribPointer(offsetILoc, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(colorLoc, 4, gl.UNSIGNED_INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorUBuffer);
conformance2/rendering/attrib-type-match.html:    gl.vertexAttribIPointer(colorLoc, 4, gl.INT, 0, 0);
conformance2/rendering/attrib-type-match.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/rendering/attrib-type-match.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/attrib-type-match.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type mismatch");
conformance2/glsl3/frag-depth.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance2/glsl3/frag-depth.html:    gl.clearDepth(0.5);
conformance2/glsl3/frag-depth.html:    gl.enable(gl.DEPTH_TEST);
conformance2/glsl3/frag-depth.html:    var depthUniform = gl.getUniformLocation(program, "uDepth");
conformance2/glsl3/frag-depth.html:    gl.uniform1f(depthUniform, 1.0);
conformance2/glsl3/frag-depth.html:    gl.uniform1f(depthUniform, 0.0);
extra/lots-of-polys-shader-example.html:  var tex = gl.createTexture();
extra/lots-of-polys-shader-example.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
extra/lots-of-polys-shader-example.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
extra/lots-of-polys-shader-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/lots-of-polys-shader-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/lots-of-polys-shader-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
extra/lots-of-polys-shader-example.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
extra/lots-of-polys-shader-example.html:    var colorLocation = gl.getAttribLocation(program, "color")
extra/lots-of-polys-shader-example.html:    var buf = gl.createBuffer();
extra/lots-of-polys-shader-example.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
extra/lots-of-polys-shader-example.html:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
extra/lots-of-polys-shader-example.html:    gl.enableVertexAttribArray(colorLocation);
extra/lots-of-polys-shader-example.html:    gl.vertexAttribPointer(colorLocation, 3, gl.FLOAT, false, 0, 0);
extra/lots-of-polys-shader-example.html:  var gridResLoc = gl.getUniformLocation(program, "gridRes");
extra/lots-of-polys-shader-example.html:  gl.uniform1f(gridResLoc, gridRes);
extra/lots-of-polys-shader-example.html:  assertMsg(gl.getError() == gl.NO_ERROR, "Should be no errors from setup.");
extra/lots-of-polys-shader-example.html:  gl.enable(gl.BLEND);
extra/lots-of-polys-shader-example.html:  //gl.enable(gl.CULL_FACE);
extra/lots-of-polys-shader-example.html:  //gl.cullFace(gl.FRONT);
extra/lots-of-polys-shader-example.html:  gl.drawElements(gl.TRIANGLES, gridRes * gridRes * 6, gl.UNSIGNED_SHORT, 0);
extra/lots-of-polys-shader-example.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
conformance2/rendering/clear-srgb-color-buffer.html:var tex = gl.createTexture();
conformance2/rendering/clear-srgb-color-buffer.html:var fbo = gl.createFramebuffer();
conformance2/rendering/clear-srgb-color-buffer.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/rendering/clear-srgb-color-buffer.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.SRGB8_ALPHA8, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/clear-srgb-color-buffer.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/rendering/clear-srgb-color-buffer.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/clear-srgb-color-buffer.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/clear-srgb-color-buffer.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/rendering/clear-srgb-color-buffer.html:        gl.clearColor(color[0] / 255, color[1] / 255, color[2] / 255, color[3] / 255);
conformance2/rendering/clear-srgb-color-buffer.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/clear-srgb-color-buffer.html:        gl.clearBufferfv(gl.COLOR, 0, data);
conformance2/rendering/clear-srgb-color-buffer.html:gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/rendering/clear-srgb-color-buffer.html:gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/rendering/clear-srgb-color-buffer.html:gl.deleteTexture(tex);
conformance2/rendering/clear-srgb-color-buffer.html:gl.deleteFramebuffer(fbo);
conformance2/glsl3/bool-type-cast-bug-uint-ivec-uvec.html:            var uniformLoc = gl.getUniformLocation(program, 'bvalue');
conformance2/glsl3/bool-type-cast-bug-uint-ivec-uvec.html:            gl.uniform1i(uniformLoc, 0);
conformance2/glsl3/bool-type-cast-bug-uint-ivec-uvec.html:            gl.uniform1i(uniformLoc, 1);
conformance2/glsl3/bool-type-cast-bug-uint-ivec-uvec.html:            gl.deleteProgram(program);
conformance2/glsl3/bool-type-cast-bug-uint-ivec-uvec.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from testing");
extra/fbo-lost-context.html:  var size = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);
extra/fbo-lost-context.html:        assertMsg(err == gl.OUT_OF_MEMORY,
extra/fbo-lost-context.html:                  "correctly returns gl.OUT_OF_MEMORY when out of memory");
extra/fbo-lost-context.html:    var tex = gl.createTexture();
extra/fbo-lost-context.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
extra/fbo-lost-context.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
extra/fbo-lost-context.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
extra/fbo-lost-context.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/fbo-lost-context.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/fbo-lost-context.html:    gl.texImage2D(gl.TEXTURE_2D,
extra/fbo-lost-context.html:                  gl.RGBA,           // internalFormat
extra/fbo-lost-context.html:                  gl.RGBA,           // format
extra/fbo-lost-context.html:                  gl.UNSIGNED_BYTE,  // type
extra/fbo-lost-context.html:    var fb = gl.createFramebuffer();
extra/fbo-lost-context.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
extra/fbo-lost-context.html:    gl.framebufferTexture2D(
extra/fbo-lost-context.html:        gl.FRAMEBUFFER,
extra/fbo-lost-context.html:        gl.COLOR_ATTACHMENT0,
extra/fbo-lost-context.html:        gl.TEXTURE_2D,
extra/fbo-lost-context.html:    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
extra/fbo-lost-context.html:    if (status != gl.FRAMEBUFFER_COMPLETE) {
extra/fbo-lost-context.html:      testFailed("gl.checkFramebufferStatus() returned " + WebGLDebugUtils.glEnumToString(status));
extra/fbo-lost-context.html:  gl.disable(gl.DEPTH_TEST);
extra/fbo-lost-context.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
extra/fbo-lost-context.html:    gl.scissor(0, 0, size, size);
extra/fbo-lost-context.html:    gl.clearColor(0, ii / numFBOs, 1 - ii / numFBOs, 1);
extra/fbo-lost-context.html:    gl.clear(gl.COLOR_BUFFER_BIT);
extra/fbo-lost-context.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
extra/fbo-lost-context.html:  var vertexObject = gl.createBuffer();
extra/fbo-lost-context.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
extra/fbo-lost-context.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
extra/fbo-lost-context.html:   ]), gl.STATIC_DRAW);
extra/fbo-lost-context.html:  gl.enableVertexAttribArray(0);
extra/fbo-lost-context.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
extra/fbo-lost-context.html:  var vertexObject = gl.createBuffer();
extra/fbo-lost-context.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
extra/fbo-lost-context.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
extra/fbo-lost-context.html:   ]), gl.STATIC_DRAW);
extra/fbo-lost-context.html:  gl.enableVertexAttribArray(1);
extra/fbo-lost-context.html:  gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
extra/fbo-lost-context.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
extra/fbo-lost-context.html:  g_texLoc = gl.getUniformLocation(gl.program, "tex");
extra/fbo-lost-context.html:  gl.uniform1i(g_texLoc, 0);
extra/fbo-lost-context.html:  g_worldLoc = gl.getUniformLocation(gl.program, "world");
extra/fbo-lost-context.html:  gl.uniformMatrix4fv(g_worldLoc, false, [
extra/fbo-lost-context.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/fbo-lost-context.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/fbo-lost-context.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
extra/fbo-lost-context.html:  gl.bindTexture(gl.TEXTURE_2D, g_textures[g_texIndex]);
extra/fbo-lost-context.html:  gl.uniformMatrix4fv(g_worldLoc, false, rotationZ(g_angle));
extra/fbo-lost-context.html:  gl.clearColor(1,0,0,1);
extra/fbo-lost-context.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
extra/fbo-lost-context.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/glsl3/short-circuiting-in-loop-condition.html:    gl.uniform1i(gl.getUniformLocation(program, "u"), 1);
conformance2/glsl3/short-circuiting-in-loop-condition.html:    gl.uniform1i(gl.getUniformLocation(program, "u"), 0);
extra/texture-sizing.html:    gl.enable(gl.BLEND);
extra/texture-sizing.html:    gl.disable(gl.DEPTH_TEST);
extra/texture-sizing.html:    var tex = gl.createTexture();
extra/texture-sizing.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
extra/texture-sizing.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
extra/texture-sizing.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/texture-sizing.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/texture-sizing.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
extra/texture-sizing.html:    var loc = gl.getUniformLocation(program, "tex");
extra/texture-sizing.html:    gl.uniform1i(loc, 0);
conformance2/attribs/gl-vertex-attrib-i-render.html:    gl.readPixels(0, 0, w, w, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance2/attribs/gl-vertex-attrib-i-render.html:    gl.enableVertexAttribArray(0);
conformance2/attribs/gl-vertex-attrib-i-render.html:    var pos = gl.createBuffer();
conformance2/attribs/gl-vertex-attrib-i-render.html:    gl.bindBuffer(gl.ARRAY_BUFFER, pos);
conformance2/attribs/gl-vertex-attrib-i-render.html:    gl.bufferData(gl.ARRAY_BUFFER, new Int32Array([-10, -10, 10, -10, -10, 10, 10, 10]), gl.STATIC_DRAW);
conformance2/attribs/gl-vertex-attrib-i-render.html:    gl.vertexAttribIPointer(0, 2, gl.INT, 4 * 2, 0);
conformance2/attribs/gl-vertex-attrib-i-render.html:            gl.useProgram(program);
conformance2/attribs/gl-vertex-attrib-i-render.html:            gl.useProgram(program_unsigned);
conformance2/attribs/gl-vertex-attrib-i-render.html:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/attribs/gl-vertex-attrib-i-render.html:        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
conformance2/glsl3/loops-with-side-effects.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance2/glsl3/loops-with-side-effects.html:    gl.uniform1i(gl.getUniformLocation(program, "uVertZero"), 0);
conformance2/glsl3/loops-with-side-effects.html:    gl.uniform1i(gl.getUniformLocation(program, "uFragZero"), 0);
conformance2/glsl3/loops-with-side-effects.html:    gl.uniform1i(gl.getUniformLocation(program, "uReference"), reference);
conformance2/glsl3/loops-with-side-effects.html:    gl.useProgram(program);
conformance2/rendering/blitframebuffer-size-overflow.html:    var tex0 = gl.createTexture();
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.bindTexture(gl.TEXTURE_2D, tex0);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-size-overflow.html:    var fb0 = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb0);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex0, 0);
conformance2/rendering/blitframebuffer-size-overflow.html:    var tex1 = gl.createTexture();
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.bindTexture(gl.TEXTURE_2D, tex1);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/rendering/blitframebuffer-size-overflow.html:    var fb1 = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb1);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex1, 0);
conformance2/rendering/blitframebuffer-size-overflow.html:    if ((gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) ||
conformance2/rendering/blitframebuffer-size-overflow.html:        (gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)) {
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.blitFramebuffer(0, 0, max, max, 0, 0, width, height, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.blitFramebuffer(0, 0, width, height, 0, 0, max, max, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.blitFramebuffer(0, 0, max, max, 0, 0, max, max, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.blitFramebuffer(-1, -1, max, max, 0, 0, width, height, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.blitFramebuffer(0, 0, width, height, -1, -1, max, max, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.blitFramebuffer(-1, -1, max, max, -1, -1, max, max, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.blitFramebuffer(-max - 1, -max - 1, max, max, -max - 1, -max - 1, max, max, gl.COLOR_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.bindTexture(gl.TEXTURE_2D, null)
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.deleteTexture(tex0);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.deleteTexture(tex1);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.deleteFramebuffer(fb0);
conformance2/rendering/blitframebuffer-size-overflow.html:    gl.deleteFramebuffer(fb1);
extra/out-of-resources.html:    gl.useProgram(program);
extra/out-of-resources.html:    var size = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);
extra/out-of-resources.html:          assertMsg(err == gl.OUT_OF_MEMORY,
extra/out-of-resources.html:                    "correctly returns gl.OUT_OF_MEMORY when out of memory");
extra/out-of-resources.html:      var tex = gl.createTexture();
extra/out-of-resources.html:      gl.bindTexture(gl.TEXTURE_2D, tex);
extra/out-of-resources.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
extra/out-of-resources.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
extra/out-of-resources.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/out-of-resources.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/out-of-resources.html:      gl.texImage2D(gl.TEXTURE_2D,
extra/out-of-resources.html:                    gl.RGBA,           // internalFormat
extra/out-of-resources.html:                    gl.RGBA,           // format
extra/out-of-resources.html:                    gl.UNSIGNED_BYTE,  // type
extra/out-of-resources.html:      var err = gl.getError();
extra/out-of-resources.html:      if (err != gl.NO_ERROR) {
extra/out-of-resources.html:        var fb = gl.createFramebuffer();
extra/out-of-resources.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
extra/out-of-resources.html:        gl.framebufferTexture2D(
extra/out-of-resources.html:            gl.FRAMEBUFFER,
extra/out-of-resources.html:            gl.COLOR_ATTACHMENT0,
extra/out-of-resources.html:            gl.TEXTURE_2D,
extra/out-of-resources.html:        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
extra/out-of-resources.html:        if (status != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/rgb-format-support.html:    var samples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGB8, gl.SAMPLES);
conformance2/rendering/rgb-format-support.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors from getInternalformatParameter()");
conformance2/rendering/rgb-format-support.html:        var renderbuffer = gl.createRenderbuffer();
conformance2/rendering/rgb-format-support.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance2/rendering/rgb-format-support.html:            gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGB8, 2, 2);
conformance2/rendering/rgb-format-support.html:            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, sampleCount, gl.RGB8, width, height);
conformance2/rendering/rgb-format-support.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors from renderbufferStorage{Multisample}");
conformance2/rendering/rgb-format-support.html:        var fbo = gl.createFramebuffer();
conformance2/rendering/rgb-format-support.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/rendering/rgb-format-support.html:        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbuffer);
conformance2/rendering/rgb-format-support.html:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/rgb-format-support.html:        gl.clearColor(1, 0, 1, 1);
conformance2/rendering/rgb-format-support.html:        gl.clear(gl.COLOR_BIT);
conformance2/rendering/rgb-format-support.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors from clear()");
conformance2/rendering/rgb-format-support.html:        var tex = gl.createTexture();
conformance2/rendering/rgb-format-support.html:        gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/rendering/rgb-format-support.html:        gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, width, height, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
conformance2/rendering/rgb-format-support.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors from texture setup");
conformance2/rendering/rgb-format-support.html:        var fbo = gl.createFramebuffer();
conformance2/rendering/rgb-format-support.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/rendering/rgb-format-support.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/rgb-format-support.html:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/rendering/rgb-format-support.html:        gl.clearColor(1, 0, 1, 1);
conformance2/rendering/rgb-format-support.html:        gl.clear(gl.COLOR_BIT);
conformance2/rendering/rgb-format-support.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors from clear()");
conformance2/misc/object-deletion-behaviour-2.html:var bufferBaseUniform = gl.createBuffer();
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBufferBase(gl.UNIFORM_BUFFER, 0, bufferBaseUniform)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBe("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)", "bufferBaseUniform");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(bufferBaseUniform)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeFalse("gl.isBuffer(bufferBaseUniform)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindBufferBase(gl.UNIFORM_BUFFER, 0, bufferBaseUniform)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:var bufferBaseTransformFeedback = gl.createBuffer();
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, bufferBaseTransformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBe("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)", "bufferBaseTransformFeedback");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(bufferBaseTransformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeFalse("gl.isBuffer(bufferBaseTransformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, bufferBaseTransformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:var bufferRangeUniform = gl.createBuffer();
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBufferRange(gl.UNIFORM_BUFFER, 0, bufferRangeUniform, 0, gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBe("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)", "bufferRangeUniform");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(bufferRangeUniform)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeFalse("gl.isBuffer(bufferRangeUniform)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindBufferRange(gl.UNIFORM_BUFFER, 0, bufferRangeUniform, 0, gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:var bufferRangeTransformFeedback = gl.createBuffer();
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, bufferRangeTransformFeedback, 0, 4)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBe("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)", "bufferRangeTransformFeedback");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(bufferRangeTransformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeFalse("gl.isBuffer(bufferRangeTransformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, bufferRangeTransformFeedback, 0, 4)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:var sampler = gl.createSampler();
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindSampler(0, sampler)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBe("gl.getParameter(gl.SAMPLER_BINDING)", "sampler");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteSampler(sampler)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeFalse("gl.isSampler(sampler)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.SAMPLER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindSampler(0, sampler)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.SAMPLER_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:var vertexArray = gl.createVertexArray();
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindVertexArray(vertexArray)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBe("gl.getParameter(gl.VERTEX_ARRAY_BINDING)", "vertexArray");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteVertexArray(vertexArray)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeFalse("gl.isVertexArray(vertexArray)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.VERTEX_ARRAY_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindVertexArray(vertexArray)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.VERTEX_ARRAY_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:var transformFeedback = gl.createTransformFeedback();
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBe("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)", "transformFeedback");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteTransformFeedback(transformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeFalse("gl.isTransformFeedback(transformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)");
conformance2/misc/object-deletion-behaviour-2.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedback)");
conformance2/misc/object-deletion-behaviour-2.html:shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)");
conformance2/buffers/one-large-uniform-buffer.html:    quadVB = gl.createBuffer()
conformance2/buffers/one-large-uniform-buffer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, quadVB);
conformance2/buffers/one-large-uniform-buffer.html:  gl.bufferData(gl.ARRAY_BUFFER, quadVerts, gl.STATIC_DRAW);
conformance2/buffers/one-large-uniform-buffer.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, gl.FALSE, 0, 0);
conformance2/buffers/one-large-uniform-buffer.html:  gl.enableVertexAttribArray(0);
conformance2/buffers/one-large-uniform-buffer.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/buffers/one-large-uniform-buffer.html:    var ubo = gl.createBuffer();
conformance2/buffers/one-large-uniform-buffer.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, ubo);
conformance2/buffers/one-large-uniform-buffer.html:    gl.bufferData(gl.UNIFORM_BUFFER, big_size, gl.DYNAMIC_DRAW);
conformance2/buffers/one-large-uniform-buffer.html:    gl.bufferSubData(gl.UNIFORM_BUFFER, 0, data);
conformance2/buffers/one-large-uniform-buffer.html:    gl.bindBufferBase(gl.UNIFORM_BUFFER, 0, ubo);
conformance2/buffers/one-large-uniform-buffer.html:    var buffer_index = gl.getUniformBlockIndex(program, "uni");
conformance2/buffers/one-large-uniform-buffer.html:    gl.uniformBlockBinding(program, buffer_index, 0);
conformance2/buffers/one-large-uniform-buffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setting up uniform block should succeed");
conformance2/buffers/one-large-uniform-buffer.html:    gl.useProgram(program);
conformance2/buffers/one-large-uniform-buffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Draw with uniform block should succeed");
conformance2/rendering/blitframebuffer-stencil-only.html:  var buf = gl.createFramebuffer();
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, buf)
conformance2/rendering/blitframebuffer-stencil-only.html:  var tex = gl.createTexture();
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA8, 16, 16);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/rendering/blitframebuffer-stencil-only.html:  var rbo = gl.createRenderbuffer();
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.renderbufferStorage(gl.RENDERBUFFER, format, 16, 16);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER,
conformance2/rendering/blitframebuffer-stencil-only.html:      gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, rbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.clearBufferfi(gl.DEPTH_STENCIL, 0, 1.0, 0);
conformance2/rendering/blitframebuffer-stencil-only.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after buffer init");
conformance2/rendering/blitframebuffer-stencil-only.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/blitframebuffer-stencil-only.html:    quadVB = gl.createBuffer()
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindBuffer(gl.ARRAY_BUFFER, quadVB);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bufferData(gl.ARRAY_BUFFER, quadVerts, gl.STATIC_DRAW);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, gl.FALSE, 0, 0);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.enableVertexAttribArray(0);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/blitframebuffer-stencil-only.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawQuad");
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, src.fbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.viewport(0, 0, 16, 16);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.enable(gl.DEPTH_TEST);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.enable(gl.STENCIL_TEST);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.stencilFunc(gl.ALWAYS, 7, 0xFF);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.uniform3f(colorLoc, 1.0, 0.0, 0.0);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, dest.fbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.stencilFunc(gl.ALWAYS, 1, 0xff);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.uniform3f(colorLoc, 1.0, 1.0, 0.0);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindFramebuffer(gl.READ_FRAMEBUFFER, src.fbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dest.fbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.STENCIL_BUFFER_BIT, gl.NEAREST);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, dest.fbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.stencilOp(gl.KEEP, gl.DECR, gl.KEEP);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.stencilFunc(gl.ALWAYS, 0, 0xff);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.uniform3f(colorLoc, 0.0, 0.0, 1.0);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.disable(gl.DEPTH_TEST);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.stencilFunc(gl.EQUAL, 6, 0xff);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.uniform3f(colorLoc, 0.0, 1.0, 0.0);
conformance2/rendering/blitframebuffer-stencil-only.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after test");
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.deleteFramebuffer(src.fbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.deleteFramebuffer(dest.fbo);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.deleteTexture(src.color);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.deleteTexture(dest.color);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.deleteRenderbuffer(src.depthStencil);
conformance2/rendering/blitframebuffer-stencil-only.html:  gl.deleteRenderbuffer(dest.depthStencil);
conformance2/rendering/blitframebuffer-stencil-only.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after program initialization");
conformance2/rendering/blitframebuffer-stencil-only.html:    shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)', 'true');
conformance2/rendering/blitframebuffer-stencil-only.html:    colorLoc = gl.getUniformLocation(program, "color")
conformance2/rendering/blitframebuffer-stencil-only.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "query uniform location");
conformance2/rendering/blitframebuffer-stencil-only.html:    test_stencil_only_blit(gl.DEPTH24_STENCIL8);
conformance2/rendering/blitframebuffer-stencil-only.html:    test_stencil_only_blit(gl.DEPTH32F_STENCIL8);
conformance2/rendering/element-index-uint.html:        var drawType = (ii == 0) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;
conformance2/rendering/element-index-uint.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/rendering/element-index-uint.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance2/rendering/element-index-uint.html:        var vertexObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:        gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/rendering/element-index-uint.html:        gl.bufferData(gl.ARRAY_BUFFER, quadArray, drawType);
conformance2/rendering/element-index-uint.html:        var indexObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance2/rendering/element-index-uint.html:        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array([
conformance2/rendering/element-index-uint.html:        gl.enableVertexAttribArray(opt_positionLocation);
conformance2/rendering/element-index-uint.html:        gl.vertexAttribPointer(opt_positionLocation, 3, gl.FLOAT, false, 0, 0);
conformance2/rendering/element-index-uint.html:        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/rendering/element-index-uint.html:        gl.clearColor(1.0, 1.0, 1.0, 1.0);
conformance2/rendering/element-index-uint.html:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/rendering/element-index-uint.html:        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0);
conformance2/rendering/element-index-uint.html:      case gl.BYTE:
conformance2/rendering/element-index-uint.html:      case gl.UNSIGNED_BYTE:
conformance2/rendering/element-index-uint.html:      case gl.SHORT:
conformance2/rendering/element-index-uint.html:      case gl.UNSIGNED_SHORT:
conformance2/rendering/element-index-uint.html:      case gl.INT:
conformance2/rendering/element-index-uint.html:      case gl.UNSIGNED_INT:
conformance2/rendering/element-index-uint.html:      case gl.FLOAT:
conformance2/rendering/element-index-uint.html:    var bufferComplete = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, bufferComplete);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, dataComplete, drawType);
conformance2/rendering/element-index-uint.html:    var elements = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elements);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, drawType);
conformance2/rendering/element-index-uint.html:    gl.useProgram(program);
conformance2/rendering/element-index-uint.html:    var vertexLoc = gl.getAttribLocation(program, "a_vertex");
conformance2/rendering/element-index-uint.html:    var normalLoc = gl.getAttribLocation(program, "a_normal");
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(vertexLoc, 4, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 0);
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(vertexLoc);
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(normalLoc);
conformance2/rendering/element-index-uint.html:    shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/rendering/element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/rendering/element-index-uint.html:    var bufferIncomplete = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, bufferIncomplete);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, dataIncomplete, drawType);
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(vertexLoc, 4, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 0);
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(vertexLoc);
conformance2/rendering/element-index-uint.html:    gl.disableVertexAttribArray(normalLoc);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/rendering/element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(normalLoc);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/rendering/element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, [gl.NO_ERROR, gl.INVALID_OPERATION]);
conformance2/rendering/element-index-uint.html:    gl.disableVertexAttribArray(normalLoc);
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(extraLoc);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/rendering/element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION);
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(extraLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/rendering/element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), -2000000000 * sizeInBytes(gl.FLOAT));
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance2/rendering/element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance2/rendering/element-index-uint.html:    gl.useProgram(program);
conformance2/rendering/element-index-uint.html:    var vertexObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(0);
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0,0, 0,1,0, 1,0,0, 1,1,0 ]), drawType);
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance2/rendering/element-index-uint.html:    var indexObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, drawType);
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 4)");
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, [0, gl.INVALID_OPERATION], "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 0)");
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, [0, gl.INVALID_OPERATION], "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 8)");
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 4)");
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, [0, gl.INVALID_OPERATION], "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 0)");
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, [0, gl.INVALID_OPERATION], "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 8)");
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after initialization");
conformance2/rendering/element-index-uint.html:    var vertexObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(0);
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after vertex setup");
conformance2/rendering/element-index-uint.html:    var texCoordObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(1);
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after texture coord setup");
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after vertex redefinition");
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array([
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, false, 0, 0);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after texture coordinate / color redefinition");
conformance2/rendering/element-index-uint.html:    var indexObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, drawType);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setting up indices");
conformance2/rendering/element-index-uint.html:    gl.drawElements(gl.TRIANGLES, numQuads * 6, gl.UNSIGNED_INT, 0);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
conformance2/rendering/element-index-uint.html:    gl.useProgram(program);
conformance2/rendering/element-index-uint.html:    var vertexObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.enableVertexAttribArray(0);
conformance2/rendering/element-index-uint.html:    gl.disableVertexAttribArray(1);
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0,0, 0,1,0, 1,0,0, 1,1,0 ]), drawType);
conformance2/rendering/element-index-uint.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance2/rendering/element-index-uint.html:    var indexObject = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array([ 10000, 0, 1, 2, 3, 10000 ]), drawType);
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 4)");
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, [0, gl.INVALID_OPERATION], "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 0)");
conformance2/rendering/element-index-uint.html:    wtu.shouldGenerateGLError(gl, [0, gl.INVALID_OPERATION], "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 8)");
conformance2/rendering/element-index-uint.html:    var elementBuffer = gl.createBuffer();
conformance2/rendering/element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance2/rendering/element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, 256, drawType);
conformance2/rendering/element-index-uint.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 64, data);
conformance2/rendering/element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "after attempting to update a buffer outside of the allocated bounds");
conformance2/misc/uninitialized-test-2.html:    var is3d = (target == gl.TEXTURE_3D || target == gl.TEXTURE_2D_ARRAY);
conformance2/misc/uninitialized-test-2.html:    var texture = gl.createTexture();
conformance2/misc/uninitialized-test-2.html:    gl.bindTexture(target, texture);
conformance2/misc/uninitialized-test-2.html:        gl.texImage3D(target, 0, gl.RGBA8, texWidth, texHeight, texDepth, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/uninitialized-test-2.html:    } else if (target == gl.TEXTURE_2D) {
conformance2/misc/uninitialized-test-2.html:        gl.texImage2D(target, 0, gl.RGBA8, texWidth, texHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/uninitialized-test-2.html:        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGBA8, texWidth, texHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/uninitialized-test-2.html:        gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGBA8, texWidth, texHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/uninitialized-test-2.html:        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGBA8, texWidth, texHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/uninitialized-test-2.html:        gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGBA8, texWidth, texHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/uninitialized-test-2.html:        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGBA8, texWidth, texHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/uninitialized-test-2.html:        gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGBA8, texWidth, texHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/uninitialized-test-2.html:        gl.texSubImage3D(target, 0, 0, 0, 0, texWidth, texHeight, texDepth, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance2/misc/uninitialized-test-2.html:    } else if (target == gl.TEXTURE_2D) {
conformance2/misc/uninitialized-test-2.html:        gl.texSubImage2D(target, 0, 0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance2/misc/uninitialized-test-2.html:        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, 0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance2/misc/uninitialized-test-2.html:        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, 0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance2/misc/uninitialized-test-2.html:        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, 0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance2/misc/uninitialized-test-2.html:        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, 0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance2/misc/uninitialized-test-2.html:        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, 0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance2/misc/uninitialized-test-2.html:        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, 0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance2/misc/uninitialized-test-2.html:    gl.finish(); // make sure it has been uploaded
conformance2/misc/uninitialized-test-2.html:    gl.deleteTexture(texture);
conformance2/misc/uninitialized-test-2.html:    gl.finish(); // make sure it has been deleted
conformance2/misc/uninitialized-test-2.html:    var texture = gl.createTexture();
conformance2/misc/uninitialized-test-2.html:    gl.bindTexture(target, texture);
conformance2/misc/uninitialized-test-2.html:    var is3d = (target == gl.TEXTURE_3D || target == gl.TEXTURE_2D_ARRAY);
conformance2/misc/uninitialized-test-2.html:      case gl.TEXTURE_CUBE_MAP_POSITIVE_X:
conformance2/misc/uninitialized-test-2.html:      case gl.TEXTURE_CUBE_MAP_NEGATIVE_X:
conformance2/misc/uninitialized-test-2.html:      case gl.TEXTURE_CUBE_MAP_POSITIVE_Y:
conformance2/misc/uninitialized-test-2.html:      case gl.TEXTURE_CUBE_MAP_NEGATIVE_Y:
conformance2/misc/uninitialized-test-2.html:      case gl.TEXTURE_CUBE_MAP_POSITIVE_Z:
conformance2/misc/uninitialized-test-2.html:      case gl.TEXTURE_CUBE_MAP_NEGATIVE_Z:
conformance2/misc/uninitialized-test-2.html:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance2/misc/uninitialized-test-2.html:        gl.bindTexture(target, null);
conformance2/misc/uninitialized-test-2.html:    var fb = gl.createFramebuffer();
conformance2/misc/uninitialized-test-2.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/misc/uninitialized-test-2.html:        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, texture, level, layer);
conformance2/misc/uninitialized-test-2.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, target, texture, level);
conformance2/misc/uninitialized-test-2.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance2/misc/uninitialized-test-2.html:      case gl.UNSIGNED_INT:
conformance2/misc/uninitialized-test-2.html:      case gl.INT:
conformance2/misc/uninitialized-test-2.html:      case gl.UNSIGNED_BYTE:
conformance2/misc/uninitialized-test-2.html:    gl.readPixels(0, 0, texWidth, texHeight, format, type, data);
conformance2/misc/uninitialized-test-2.html:    var max_3d_texture_size = Math.min(gl.getParameter(gl.MAX_3D_TEXTURE_SIZE), 1024);
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.UNSIGNED_BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.UNSIGNED_INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.INT,
conformance2/misc/uninitialized-test-2.html:        format: gl.RGBA_INTEGER,
conformance2/misc/uninitialized-test-2.html:        type: gl.BYTE,
conformance2/misc/uninitialized-test-2.html:        read_type: gl.INT,
conformance2/misc/uninitialized-test-2.html:        gl.texImage3D(gl[test.target], 0, gl[test.internal_format], test.width, test.height, test.depth, 0, test.format, test.type, null);
conformance2/misc/uninitialized-test-2.html:              case gl.BYTE:
conformance2/misc/uninitialized-test-2.html:              case gl.UNSIGNED_BYTE:
conformance2/misc/uninitialized-test-2.html:            gl.texSubImage3D(gl[test.target], 0, exception.x, exception.y, 0, 1, 1, test.depth, test.format, test.type, data);
conformance2/misc/uninitialized-test-2.html:        gl.deleteTexture(tex);
conformance2/misc/uninitialized-test-2.html:        gl.finish();
conformance2/misc/uninitialized-test-2.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/misc/uninitialized-test-2.html:        gl.texStorage2D(gl[targets[ii]], levels, gl.RGBA8, width, height);
conformance2/misc/uninitialized-test-2.html:            if (gl[targets[ii]] == gl.TEXTURE_2D) {
conformance2/misc/uninitialized-test-2.html:                checkNonZeroPixels(tex, gl[targets[ii]], gl.RGBA, gl.UNSIGNED_BYTE, width, height, level, 0, []);
conformance2/misc/uninitialized-test-2.html:                checkNonZeroPixels(tex, gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.RGBA, gl.UNSIGNED_BYTE, width, height, level, 0, []);
conformance2/misc/uninitialized-test-2.html:                checkNonZeroPixels(tex, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.RGBA, gl.UNSIGNED_BYTE, width, height, level, 0, []);
conformance2/misc/uninitialized-test-2.html:                checkNonZeroPixels(tex, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.RGBA, gl.UNSIGNED_BYTE, width, height, level, 0, []);
conformance2/misc/uninitialized-test-2.html:                checkNonZeroPixels(tex, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.RGBA, gl.UNSIGNED_BYTE, width, height, level, 0, []);
conformance2/misc/uninitialized-test-2.html:                checkNonZeroPixels(tex, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.RGBA, gl.UNSIGNED_BYTE, width, height, level, 0, []);
conformance2/misc/uninitialized-test-2.html:                checkNonZeroPixels(tex, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, gl.RGBA, gl.UNSIGNED_BYTE, width, height, level, 0, []);
conformance2/misc/uninitialized-test-2.html:        gl.deleteTexture(tex);
conformance2/misc/uninitialized-test-2.html:        gl.finish();
conformance2/misc/uninitialized-test-2.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/misc/uninitialized-test-2.html:    var formats = [ gl.RGBA, gl.RGBA_INTEGER, gl.RGBA_INTEGER ];
conformance2/misc/uninitialized-test-2.html:    var read_types = [ gl.UNSIGNED_BYTE, gl.UNSIGNED_INT, gl.INT ];
conformance2/misc/uninitialized-test-2.html:            gl.texStorage3D(gl[targets[ii]], levels, gl[internal_formats[jj]], width, height, depth);
conformance2/misc/uninitialized-test-2.html:                if (gl[targets[ii]] == gl.TEXTURE_3D)
conformance2/misc/uninitialized-test-2.html:            gl.deleteTexture(tex);
conformance2/misc/uninitialized-test-2.html:            gl.finish();
conformance2/misc/uninitialized-test-2.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/attribs/gl-vertexattribipointer.html:  debug("Checking gl.vertexAttribIPointer.");
conformance2/attribs/gl-vertexattribipointer.html:  // gl.vertexAttribIPointer(0, 3, gl.INT, 0, 0);
conformance2/attribs/gl-vertexattribipointer.html:  // wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/attribs/gl-vertexattribipointer.html:  gl.vertexAttribIPointer(0, 3, gl.INT, 0, 12);
conformance2/attribs/gl-vertexattribipointer.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/attribs/gl-vertexattribipointer.html:  var vertexObject = gl.createBuffer();
conformance2/attribs/gl-vertexattribipointer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/attribs/gl-vertexattribipointer.html:  gl.bufferData(gl.ARRAY_BUFFER, new Int32Array(0), gl.STATIC_DRAW);
conformance2/attribs/gl-vertexattribipointer.html:  gl.vertexAttribIPointer(0, 1, gl.FLOAT, 0, 0);
conformance2/attribs/gl-vertexattribipointer.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance2/attribs/gl-vertexattribipointer.html:    gl.vertexAttribIPointer(0, size, type, stride, offset);
conformance2/attribs/gl-vertexattribipointer.html:        "gl.vertexAttribIPointer(0, " + size +
conformance2/attribs/gl-vertexattribipointer.html:        ", gl." + wtu.glEnumToString(gl, type) +
conformance2/attribs/gl-vertexattribipointer.html:        ") should " + (err == gl.NO_ERROR ? "succeed " : "fail ") + reason);
conformance2/attribs/gl-vertexattribipointer.html:    { type:gl.BYTE,           bytesPerComponent: 1 },
conformance2/attribs/gl-vertexattribipointer.html:    { type:gl.UNSIGNED_BYTE,  bytesPerComponent: 1 },
conformance2/attribs/gl-vertexattribipointer.html:    { type:gl.SHORT,          bytesPerComponent: 2 },
conformance2/attribs/gl-vertexattribipointer.html:    { type:gl.UNSIGNED_SHORT, bytesPerComponent: 2 },
conformance2/attribs/gl-vertexattribipointer.html:    { type:gl.INT,            bytesPerComponent: 4 },
conformance2/attribs/gl-vertexattribipointer.html:    { type:gl.UNSIGNED_INT,   bytesPerComponent: 4 },
conformance2/attribs/gl-vertexattribipointer.html:          var err = gl.NO_ERROR;
conformance2/attribs/gl-vertexattribipointer.html:            err = gl.INVALID_OPERATION;
conformance2/attribs/gl-vertexattribipointer.html:            err = gl.INVALID_OPERATION;
conformance2/attribs/gl-vertexattribipointer.html:              gl, gl.NO_ERROR, "at stride limit",
conformance2/attribs/gl-vertexattribipointer.html:              gl, gl.INVALID_VALUE, "over stride limit",
conformance2/misc/expando-loss-2.html:        assertMsg(instance === gl.getParameter(test.retrieveConstant), msg + " returns instance that was bound.");
conformance2/misc/expando-loss-2.html:        var retrievedObject = gl.getParameter(test.retrieveConstant);
conformance2/misc/expando-loss-2.html:            indexMax: gl.getParameter(glProt.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS) - 1,
conformance2/misc/expando-loss-2.html:            indexMax: gl.getParameter(glProt.MAX_UNIFORM_BUFFER_BINDINGS) - 1,
conformance2/misc/expando-loss-2.html:            assertMsg(instances[i] === gl.getIndexedParameter(test.retrieveConstant, i), msg + " returns instance that was bound.");
conformance2/misc/expando-loss-2.html:            var retrievedObject = gl.getIndexedParameter(test.retrieveConstant, i);
conformance2/misc/expando-loss-2.html:    var query1 = gl.createQuery();
conformance2/misc/expando-loss-2.html:    gl.beginQuery(gl.ANY_SAMPLES_PASSED, query1);
conformance2/misc/expando-loss-2.html:    var query2 = gl.createQuery();
conformance2/misc/expando-loss-2.html:    gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, query2);
conformance2/misc/expando-loss-2.html:    assertMsg(query1 === gl.getQuery(gl.ANY_SAMPLES_PASSED, gl.CURRENT_QUERY), "CURRENT_QUERY returns instance that was bound.");
conformance2/misc/expando-loss-2.html:    assertMsg(query2 === gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY), "CURRENT_QUERY returns instance that was bound.");
conformance2/misc/expando-loss-2.html:    var retrievedQuery1 = gl.getQuery(gl.ANY_SAMPLES_PASSED, gl.CURRENT_QUERY);
conformance2/misc/expando-loss-2.html:    var retrievedQuery2 = gl.getQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, gl.CURRENT_QUERY);
conformance2/misc/expando-loss-2.html:    gl.endQuery(gl.ANY_SAMPLES_PASSED);
conformance2/misc/expando-loss-2.html:    gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
conformance2/rendering/instanced-rendering-bug.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance2/rendering/instanced-rendering-bug.html:    var vao = gl.createVertexArray();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindVertexArray(vao);
conformance2/rendering/instanced-rendering-bug.html:    var positionLoc = gl.getAttribLocation(program, "aPosition");
conformance2/rendering/instanced-rendering-bug.html:    var offsetLoc = gl.getAttribLocation(program, "aOffset");
conformance2/rendering/instanced-rendering-bug.html:    var colorLoc = gl.getAttribLocation(program, "aColor");
conformance2/rendering/instanced-rendering-bug.html:    gl.enableVertexAttribArray(positionLoc);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribDivisor(positionLoc, 0);
conformance2/rendering/instanced-rendering-bug.html:    var positionBuffer = gl.createBuffer();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/instanced-rendering-bug.html:    gl.enableVertexAttribArray(offsetLoc);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribDivisor(offsetLoc, 1);
conformance2/rendering/instanced-rendering-bug.html:    var offsetBuffer = gl.createBuffer();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.bufferData(gl.ARRAY_BUFFER, offsets, gl.STATIC_DRAW);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribPointer(offsetLoc, 1, gl.FLOAT, false, 0, 0);
conformance2/rendering/instanced-rendering-bug.html:    gl.enableVertexAttribArray(colorLoc);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribDivisor(colorLoc, divisor);
conformance2/rendering/instanced-rendering-bug.html:    var colorBuffer = gl.createBuffer();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribPointer(colorLoc, 1, gl.FLOAT, false, 0, 0);
conformance2/rendering/instanced-rendering-bug.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/instanced-rendering-bug.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstanced should succeed");
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteBuffer(positionBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteBuffer(offsetBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteBuffer(colorBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteProgram(program);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteVertexArray(vao);
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance2/rendering/instanced-rendering-bug.html:    gl.useProgram(null);
conformance2/rendering/instanced-rendering-bug.html:    gl.bindVertexArray(null);
conformance2/rendering/instanced-rendering-bug.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clean up should succeed");
conformance2/rendering/instanced-rendering-bug.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance2/rendering/instanced-rendering-bug.html:    var vao = gl.createVertexArray();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindVertexArray(vao);
conformance2/rendering/instanced-rendering-bug.html:    var positionLoc = gl.getAttribLocation(program, "aPosition");
conformance2/rendering/instanced-rendering-bug.html:    var offsetLoc = gl.getAttribLocation(program, "aOffset");
conformance2/rendering/instanced-rendering-bug.html:    var colorLoc = gl.getAttribLocation(program, "aColor");
conformance2/rendering/instanced-rendering-bug.html:    gl.enableVertexAttribArray(positionLoc);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribDivisor(positionLoc, 0);
conformance2/rendering/instanced-rendering-bug.html:    var positionBuffer = gl.createBuffer();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 0, 0);
conformance2/rendering/instanced-rendering-bug.html:    gl.enableVertexAttribArray(offsetLoc);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribDivisor(offsetLoc, 1);
conformance2/rendering/instanced-rendering-bug.html:    var offsetBuffer = gl.createBuffer();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.bufferData(gl.ARRAY_BUFFER, offsets, gl.STATIC_DRAW);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribPointer(offsetLoc, 1, gl.FLOAT, false, 0, 0);
conformance2/rendering/instanced-rendering-bug.html:    gl.enableVertexAttribArray(colorLoc);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribDivisor(colorLoc, divisor);
conformance2/rendering/instanced-rendering-bug.html:    var colorBuffer = gl.createBuffer();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
conformance2/rendering/instanced-rendering-bug.html:    gl.vertexAttribPointer(colorLoc, 1, gl.FLOAT, false, 0, 0);
conformance2/rendering/instanced-rendering-bug.html:    var indexBuffer = gl.createBuffer();
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance2/rendering/instanced-rendering-bug.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/instanced-rendering-bug.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced should succeed");
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteBuffer(positionBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteBuffer(offsetBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteBuffer(colorBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteBuffer(indexBuffer);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteProgram(program);
conformance2/rendering/instanced-rendering-bug.html:    gl.deleteVertexArray(vao);
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance2/rendering/instanced-rendering-bug.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance2/rendering/instanced-rendering-bug.html:    gl.useProgram(null);
conformance2/rendering/instanced-rendering-bug.html:    gl.bindVertexArray(null);
conformance2/rendering/instanced-rendering-bug.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clean up should succeed");
extra/offscreen-issue.html:  gl.clearColor(1,0,0,1);
extra/offscreen-issue.html:  gl.clear(gl.COLOR_BUFFER_BIT);
extra/offscreen-issue.html:    gl.enable(gl.SCISSOR_TEST);
extra/offscreen-issue.html:    gl.scissor(0,0,50,50);
extra/offscreen-issue.html:    gl.clearColor(0,1,0,1);
extra/offscreen-issue.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:  var renderbuffer = gl.createRenderbuffer();
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:  gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGB8, width, height);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:  var fbo = gl.createFramebuffer();
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbuffer);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:  if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:    gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:    var pbo = gl.createBuffer();
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, pbo);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:    gl.bufferData(gl.PIXEL_PACK_BUFFER, width * height * 4, gl.STATIC_COPY);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, 0);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:    gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, data);
conformance2/reading/read-pixels-from-rgb8-into-pbo-bug.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Tests should complete without gl errors");
extra/canvas-compositing-test.html:            var vertexObject = gl.createBuffer();
extra/canvas-compositing-test.html:            gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
extra/canvas-compositing-test.html:            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
extra/canvas-compositing-test.html:            gl.enableVertexAttribArray(0);
extra/canvas-compositing-test.html:            gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
extra/canvas-compositing-test.html:            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
extra/canvas-compositing-test.html:            gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance2/rendering/framebuffer-unsupported.html:    var actual = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/rendering/framebuffer-unsupported.html:    var tex1 = gl.createTexture();
conformance2/rendering/framebuffer-unsupported.html:    var tex2 = gl.createTexture();
conformance2/rendering/framebuffer-unsupported.html:    var fb = gl.createFramebuffer();
conformance2/rendering/framebuffer-unsupported.html:    gl.bindTexture(gl.TEXTURE_2D, tex1);
conformance2/rendering/framebuffer-unsupported.html:    gl.texImage2D(gl.TEXTURE_2D,
conformance2/rendering/framebuffer-unsupported.html:                  gl.RGBA,                                    // internalFormat
conformance2/rendering/framebuffer-unsupported.html:                  gl.RGBA,                                    // format
conformance2/rendering/framebuffer-unsupported.html:                  gl.UNSIGNED_BYTE,                           // type
conformance2/rendering/framebuffer-unsupported.html:    gl.bindTexture(gl.TEXTURE_2D, tex2);
conformance2/rendering/framebuffer-unsupported.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance2/rendering/framebuffer-unsupported.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Texture creation should succeed.");
conformance2/rendering/framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex1, 0);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.TEXTURE_2D, tex2, 0);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT2, gl.TEXTURE_2D, tex1, 0);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_UNSUPPORTED]);
conformance2/rendering/framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/rendering/framebuffer-unsupported.html:    gl.deleteFramebuffer(fb);
conformance2/rendering/framebuffer-unsupported.html:    fb = gl.createFramebuffer();
conformance2/rendering/framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/framebuffer-unsupported.html:    var texCube = gl.createTexture();
conformance2/rendering/framebuffer-unsupported.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCube);
conformance2/rendering/framebuffer-unsupported.html:    for (var target = gl.TEXTURE_CUBE_MAP_POSITIVE_X; target < gl.TEXTURE_CUBE_MAP_POSITIVE_X + 6; target++) {
conformance2/rendering/framebuffer-unsupported.html:      gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, texCube, 0);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, texCube, 0);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT2, gl.TEXTURE_CUBE_MAP_POSITIVE_X, texCube, 0);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_UNSUPPORTED]);
conformance2/rendering/framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/rendering/framebuffer-unsupported.html:    gl.deleteFramebuffer(fb);
conformance2/rendering/framebuffer-unsupported.html:    fb = gl.createFramebuffer();
conformance2/rendering/framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/framebuffer-unsupported.html:    var tex3d = gl.createTexture();
conformance2/rendering/framebuffer-unsupported.html:    gl.bindTexture(gl.TEXTURE_3D, tex3d);
conformance2/rendering/framebuffer-unsupported.html:    gl.texImage3D(gl.TEXTURE_3D,
conformance2/rendering/framebuffer-unsupported.html:                  gl.RGBA,                                    // internalFormat
conformance2/rendering/framebuffer-unsupported.html:                  gl.RGBA,                                    // format
conformance2/rendering/framebuffer-unsupported.html:                  gl.UNSIGNED_BYTE,                           // type
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3d, 0, 0);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, tex3d, 0, 1);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/rendering/framebuffer-unsupported.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT2, tex3d, 0, 0);
conformance2/rendering/framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_UNSUPPORTED]);
conformance2/rendering/framebuffer-unsupported.html:    gl.deleteTexture(tex1);
conformance2/rendering/framebuffer-unsupported.html:    gl.deleteTexture(tex2);
conformance2/rendering/framebuffer-unsupported.html:    gl.deleteTexture(texCube);
conformance2/rendering/framebuffer-unsupported.html:    gl.deleteTexture(tex3d);
conformance2/rendering/framebuffer-unsupported.html:    gl.deleteFramebuffer(fb);
extra/buffer-gc-stress.html:    gl.disable(gl.DEPTH_TEST);
extra/buffer-gc-stress.html:    gl.disable(gl.BLEND);
extra/buffer-gc-stress.html:    squareBuffer = gl.createBuffer();
extra/buffer-gc-stress.html:    gl.enableVertexAttribArray(0);
extra/buffer-gc-stress.html:    gl.bindBuffer(gl.ARRAY_BUFFER, squareBuffer);
extra/buffer-gc-stress.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
extra/buffer-gc-stress.html:    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
extra/buffer-gc-stress.html:    buffer = gl.createBuffer();
extra/buffer-gc-stress.html:    gl.enableVertexAttribArray(1);
extra/buffer-gc-stress.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
extra/buffer-gc-stress.html:    gl.vertexAttribPointer(1, 4, gl.FLOAT, false, 0, 0);
extra/buffer-gc-stress.html:        gl.deleteBuffer(buffer);
extra/buffer-gc-stress.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
extra/buffer-gc-stress.html:    gl.bufferData(gl.ARRAY_BUFFER, size, gl.DYNAMIC_DRAW);
extra/buffer-gc-stress.html:    gl.clearColor(0, 255, 0, 255);
extra/buffer-gc-stress.html:    gl.clear(gl.COLOR_BUFFER_BIT);
extra/buffer-gc-stress.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
extra/buffer-gc-stress.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array(updateBufferData));
extra/buffer-gc-stress.html:    gl.drawArrays(gl.TRIANGLES, 0, numVertices);
extra/buffer-gc-stress.html:    var error = gl.getError();
extra/buffer-gc-stress.html:    if (error !== gl.NO_ERROR) {
extra/webgl-info.html:        var value = gl.getParameter(debugExt[pname]);
extra/webgl-info.html:        var typeStr = shaderType === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';
extra/webgl-info.html:        if (precision == gl.MEDIUM_FLOAT) {
extra/webgl-info.html:        } else if (precision == gl.LOW_FLOAT) {
extra/webgl-info.html:        rows.push([typeStr + ' shader ' + precisionStr + ' float', gl.getShaderPrecisionFormat(shaderType, precision).precision + ' mantissa bits']);
extra/webgl-info.html:    var f = wtu.loadShader(gl, fSource, gl.FRAGMENT_SHADER);
extra/webgl-info.html:        addPrecisionRow(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
extra/webgl-info.html:    addPrecisionRow(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);
extra/webgl-info.html:    addPrecisionRow(gl.FRAGMENT_SHADER, gl.LOW_FLOAT);
extra/webgl-info.html:    addPrecisionRow(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
extra/webgl-info.html:    addPrecisionRow(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);
extra/webgl-info.html:    addPrecisionRow(gl.VERTEX_SHADER, gl.LOW_FLOAT);
extra/webgl-info.html:        format: gl.RGBA,
extra/webgl-info.html:        type: gl.UNSIGNED_BYTE
extra/webgl-info.html:        format: gl.RGB,
extra/webgl-info.html:        type: gl.UNSIGNED_BYTE
extra/webgl-info.html:        format: gl.RGBA,
extra/webgl-info.html:        type: gl.FLOAT
extra/webgl-info.html:        format: gl.RGB,
extra/webgl-info.html:        type: gl.FLOAT
extra/webgl-info.html:        format: gl.RGBA,
extra/webgl-info.html:        format: gl.RGB,
extra/webgl-info.html:      var fb = gl.createFramebuffer();
extra/webgl-info.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
extra/webgl-info.html:      var tex = gl.createTexture();
extra/webgl-info.html:      gl.bindTexture(gl.TEXTURE_2D, tex);
extra/webgl-info.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
extra/webgl-info.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
extra/webgl-info.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
extra/webgl-info.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
extra/webgl-info.html:      gl.texImage2D(gl.TEXTURE_2D, 0, format.format, 256, 256, 0, format.format, format.type, null);
extra/webgl-info.html:      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
extra/webgl-info.html:      if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
extra/webgl-info.html:      gl.deleteFramebuffer(fb);
extra/webgl-info.html:      gl.deleteTexture(tex);
extra/webgl-info.html:        var value = gl.getParameter(gl[pname]);
extra/webgl-info.html:  var exts = gl.getSupportedExtensions();
conformance2/buffers/buffer-copying-restrictions.html:var validTargets = [gl.ARRAY_BUFFER, gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER,
conformance2/buffers/buffer-copying-restrictions.html:                    gl.ELEMENT_ARRAY_BUFFER, gl.PIXEL_PACK_BUFFER,
conformance2/buffers/buffer-copying-restrictions.html:                    gl.PIXEL_UNPACK_BUFFER, gl.TRANSFORM_FEEDBACK_BUFFER,
conformance2/buffers/buffer-copying-restrictions.html:                    gl.UNIFORM_BUFFER];
conformance2/buffers/buffer-copying-restrictions.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance2/buffers/buffer-copying-restrictions.html:  var srcBuffer = gl.createBuffer(),
conformance2/buffers/buffer-copying-restrictions.html:    dstBuffer = gl.createBuffer();
conformance2/buffers/buffer-copying-restrictions.html:  var testCopyStr = "copying from a gl." + wtu.glEnumToString(gl, srcTarget) + " buffer to a gl."
conformance2/buffers/buffer-copying-restrictions.html:  gl.bindBuffer(srcTarget, srcBuffer);
conformance2/buffers/buffer-copying-restrictions.html:  gl.bufferData(srcTarget, new Float32Array(32), gl.STATIC_DRAW);
conformance2/buffers/buffer-copying-restrictions.html:  gl.bindBuffer(dstTarget, dstBuffer);
conformance2/buffers/buffer-copying-restrictions.html:  gl.bufferData(dstTarget, new Float32Array(32), gl.STATIC_DRAW);
conformance2/buffers/buffer-copying-restrictions.html:  gl.copyBufferSubData(srcTarget, dstTarget, 8, 0, 4);
conformance2/buffers/buffer-copying-restrictions.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, testCopyStr + " should work.");
conformance2/buffers/buffer-copying-restrictions.html:  else if (srcTarget == gl.ELEMENT_ARRAY_BUFFER || dstTarget == gl.ELEMENT_ARRAY_BUFFER )
conformance2/buffers/buffer-copying-restrictions.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, testCopyStr + " should fail.");
conformance2/buffers/buffer-copying-restrictions.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, testCopyStr + " should work.");
conformance2/buffers/buffer-copying-restrictions.html:  if (srcTarget == gl.ELEMENT_ARRAY_BUFFER &&
conformance2/buffers/buffer-copying-restrictions.html:      (dstTarget == gl.COPY_READ_BUFFER || dstTarget == gl.COPY_WRITE_BUFFER)) {
conformance2/buffers/buffer-copying-restrictions.html:    dstBuffer = gl.createBuffer();
conformance2/buffers/buffer-copying-restrictions.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, dstBuffer);
conformance2/buffers/buffer-copying-restrictions.html:  } else if (dstTarget == gl.ELEMENT_ARRAY_BUFFER &&
conformance2/buffers/buffer-copying-restrictions.html:      (srcTarget == gl.COPY_READ_BUFFER || srcTarget == gl.COPY_WRITE_BUFFER)) {
conformance2/buffers/buffer-copying-restrictions.html:    srcBuffer = gl.createBuffer();
conformance2/buffers/buffer-copying-restrictions.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, srcBuffer);
conformance2/buffers/buffer-copying-restrictions.html:  gl.bindBuffer(srcTarget, srcBuffer);
conformance2/buffers/buffer-copying-restrictions.html:  gl.bufferData(srcTarget, new Float32Array(32), gl.STATIC_DRAW);
conformance2/buffers/buffer-copying-restrictions.html:  gl.bindBuffer(dstTarget, dstBuffer);
conformance2/buffers/buffer-copying-restrictions.html:  gl.bufferData(dstTarget, new Float32Array(32), gl.STATIC_DRAW);
conformance2/buffers/buffer-copying-restrictions.html:  gl.copyBufferSubData(srcTarget, dstTarget, 8, 0, 4);
conformance2/buffers/buffer-copying-restrictions.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, testCopyStr + " should work if all buffers were initially bound to ELEMENT_ARRAY_BUFFER.");
conformance2/buffers/buffer-copying-restrictions.html:debug("Test copying a buffer of other data (gl.ARRAY_BUFFER) bound to gl.COPY_READ_BUFFER to a "
conformance2/buffers/buffer-copying-restrictions.html:  + "buffer bound to gl.ELEMENT_ARRAY_BUFFER");
conformance2/buffers/buffer-copying-restrictions.html:var srcBuffer = gl.createBuffer(), dstBuffer = gl.createBuffer();
conformance2/buffers/buffer-copying-restrictions.html:gl.bindBuffer(gl.ARRAY_BUFFER, srcBuffer);
conformance2/buffers/buffer-copying-restrictions.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, dstBuffer);
conformance2/buffers/buffer-copying-restrictions.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Float32Array(32), gl.STATIC_DRAW);
conformance2/buffers/buffer-copying-restrictions.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(32), gl.STATIC_DRAW);
conformance2/buffers/buffer-copying-restrictions.html:gl.bindBuffer(gl.COPY_READ_BUFFER, srcBuffer);
conformance2/buffers/buffer-copying-restrictions.html:gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.ELEMENT_ARRAY_BUFFER, 0, 0, 4);
conformance2/buffers/buffer-copying-restrictions.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Copying gl.ARRAY_BUFFER bound to "
conformance2/buffers/buffer-copying-restrictions.html:  + "gl.COPY_READ_BUFFER to a buffer bound to gl.ELEMENT_ARRAY_BUFFER should fail.");
conformance2/reading/read-pixels-from-fbo-test.html:gl.pixelStorei(gl.PACK_ALIGNMENT, 1);
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RED:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RED_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.ALPHA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.LUMINANCE:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RB:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RB_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.LUMINANCE_ALPHA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_5_6_5:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_4_4_4_4:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_5_5_5_1:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_2_10_10_10_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_10F_11F_11F_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_5_9_9_9_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.R8:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG8:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB8:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA8:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB5_A1:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.SRGB8_ALPHA8:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB10_A2:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB565:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA4:
conformance2/reading/read-pixels-from-fbo-test.html:  if (srcInternalFormat == gl.SRGB8_ALPHA8) {
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_BYTE:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_4_4_4_4:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_5_5_5_1:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_5_6_5:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_2_10_10_10_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_5_9_9_9_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_BYTE:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.BYTE:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_5_6_5:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_4_4_4_4:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_5_5_5_1:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.SHORT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_2_10_10_10_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_10F_11F_11F_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_5_9_9_9_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.INT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.HALF_FLOAT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.FLOAT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RED:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RED_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.LUMINANCE:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.LUMINANCE_ALPHA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.ALPHA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_BYTE:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.BYTE:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.SHORT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.INT:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_5_6_5:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_5_5_5_1:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_2_10_10_10_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_SHORT_4_4_4_4:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_10F_11F_11F_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.UNSIGNED_INT_5_9_9_9_REV:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RED:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RED_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.ALPHA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.LUMINANCE:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.LUMINANCE_ALPHA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:        case gl.UNSIGNED_SHORT_5_6_5:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA_INTEGER:
conformance2/reading/read-pixels-from-fbo-test.html:        case gl.UNSIGNED_SHORT_4_4_4_4:
conformance2/reading/read-pixels-from-fbo-test.html:        case gl.UNSIGNED_SHORT_5_5_5_1:
conformance2/reading/read-pixels-from-fbo-test.html:        case gl.UNSIGNED_INT_2_10_10_10_REV:
conformance2/reading/read-pixels-from-fbo-test.html:        case gl.UNSIGNED_INT_10F_11F_11F_REV:
conformance2/reading/read-pixels-from-fbo-test.html:        case gl.UNSIGNED_INT_5_9_9_9_REV:
conformance2/reading/read-pixels-from-fbo-test.html:  gl.readPixels(0, 0, width, height, readFormat, readType, buf);
conformance2/reading/read-pixels-from-fbo-test.html:      gl, gl.NO_ERROR, "readPixels should generate no error");
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.R8UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.R16UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.R32UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG8UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG16UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG32UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA8UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA16UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA32UI:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGB10_A2UI:
conformance2/reading/read-pixels-from-fbo-test.html:      gl.clearBufferuiv(gl.COLOR, 0, value);
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.R8I:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.R16I:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.R32I:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG8I:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG16I:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RG32I:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA8I:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA16I:
conformance2/reading/read-pixels-from-fbo-test.html:    case gl.RGBA32I:
conformance2/reading/read-pixels-from-fbo-test.html:      gl.clearBufferiv(gl.COLOR, 0, value);
conformance2/reading/read-pixels-from-fbo-test.html:      gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
conformance2/reading/read-pixels-from-fbo-test.html:      gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/reading/read-pixels-from-fbo-test.html:  var fbo = gl.createFramebuffer();
conformance2/reading/read-pixels-from-fbo-test.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/reading/read-pixels-from-fbo-test.html:  var colorImage = gl.createTexture();
conformance2/reading/read-pixels-from-fbo-test.html:  gl.bindTexture(gl.TEXTURE_2D, colorImage);
conformance2/reading/read-pixels-from-fbo-test.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl[test.texInternalFormat], width, height, 0,
conformance2/reading/read-pixels-from-fbo-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
conformance2/reading/read-pixels-from-fbo-test.html:                          gl.TEXTURE_2D, colorImage, 0);
conformance2/reading/read-pixels-from-fbo-test.html:      gl, gl.NO_ERROR, "Setting up fbo should generate no error");
conformance2/reading/read-pixels-from-fbo-test.html:  if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance2/reading/read-pixels-from-fbo-test.html:      gl, gl.NO_ERROR, "Clear color should generate no error");
conformance2/reading/read-pixels-from-fbo-test.html:  var implFormat = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);
conformance2/reading/read-pixels-from-fbo-test.html:  var implType = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);
conformance2/reading/read-pixels-from-fbo-test.html:  if (gl[test.texInternalFormat] == gl.RGB10_A2) {
conformance2/reading/read-pixels-from-fbo-test.html:    var readTypes = [gl.UNSIGNED_BYTE, gl.UNSIGNED_INT_2_10_10_10_REV];
conformance2/reading/read-pixels-from-fbo-test.html:    if (implFormat == gl.RGBA && implTypeString != '') {
conformance2/reading/read-pixels-from-fbo-test.html:                     gl.RGBA, readTypes[rr], test.clearColor);
conformance2/reading/read-pixels-from-fbo-test.html:    gl.deleteTexture(colorImage);
conformance2/reading/read-pixels-from-fbo-test.html:    gl.deleteFramebuffer(fbo);
conformance2/attribs/gl-vertexattribipointer-offsets.html:        type: gl.INT,
conformance2/attribs/gl-vertexattribipointer-offsets.html:        type: gl.UNSIGNED_INT,
conformance2/attribs/gl-vertexattribipointer-offsets.html:        type: gl.SHORT,
conformance2/attribs/gl-vertexattribipointer-offsets.html:        type: gl.UNSIGNED_SHORT,
conformance2/attribs/gl-vertexattribipointer-offsets.html:        type: gl.BYTE,
conformance2/attribs/gl-vertexattribipointer-offsets.html:        type: gl.UNSIGNED_BYTE,
conformance2/attribs/gl-vertexattribipointer-offsets.html:    var vertexObject = gl.createBuffer();
conformance2/attribs/gl-vertexattribipointer-offsets.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/attribs/gl-vertexattribipointer-offsets.html:    gl.bufferData(gl.ARRAY_BUFFER, 1024, gl.STATIC_DRAW);
conformance2/attribs/gl-vertexattribipointer-offsets.html:    gl.enableVertexAttribArray(0);
conformance2/attribs/gl-vertexattribipointer-offsets.html:                if (test.type == gl.INT || test.type == gl.SHORT || test.type == gl.BYTE) {
conformance2/attribs/gl-vertexattribipointer-offsets.html:                    gl.useProgram(program);
conformance2/attribs/gl-vertexattribipointer-offsets.html:                    gl.useProgram(program_unsigned);
conformance2/attribs/gl-vertexattribipointer-offsets.html:                gl.vertexAttrib4fv(1, color);
conformance2/attribs/gl-vertexattribipointer-offsets.html:                gl.bufferSubData(gl.ARRAY_BUFFER, offset, data);
conformance2/attribs/gl-vertexattribipointer-offsets.html:                gl.vertexAttribIPointer(0, 3, test.type, stride, offset);
conformance2/attribs/gl-vertexattribipointer-offsets.html:                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/attribs/gl-vertexattribipointer-offsets.html:                gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance2/attribs/gl-vertexattribipointer-offsets.html:                gl.readPixels(0, 0, 50, 50, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance2/buffers/buffer-type-restrictions.html:var validTargets = [gl.ARRAY_BUFFER, gl.ELEMENT_ARRAY_BUFFER, gl.COPY_READ_BUFFER,
conformance2/buffers/buffer-type-restrictions.html:                    gl.COPY_WRITE_BUFFER, gl.PIXEL_PACK_BUFFER, gl.PIXEL_UNPACK_BUFFER,
conformance2/buffers/buffer-type-restrictions.html:                    gl.TRANSFORM_FEEDBACK_BUFFER, gl.UNIFORM_BUFFER];
conformance2/buffers/buffer-type-restrictions.html:  return target == gl.COPY_READ_BUFFER || target == gl.COPY_WRITE_BUFFER;
conformance2/buffers/buffer-type-restrictions.html:  return isCopyTarget(second) || ((first == gl.ELEMENT_ARRAY_BUFFER) == (second == gl.ELEMENT_ARRAY_BUFFER));
conformance2/buffers/buffer-type-restrictions.html:    gl.bindBuffer(target, buffer);
conformance2/buffers/buffer-type-restrictions.html:    gl.bindBufferRange(target, 0, buffer, 0, 4);
conformance2/buffers/buffer-type-restrictions.html:    gl.bindBufferBase(target, 0, buffer);
conformance2/buffers/buffer-type-restrictions.html:  var buffer = gl.createBuffer();
conformance2/buffers/buffer-type-restrictions.html:  var messagePrefix = "Binding buffer first with " + firstBindFn + " to gl." + firstTargetStr
conformance2/buffers/buffer-type-restrictions.html:    + " and then binding buffer with " + secondBindFn + " to gl." + secondTargetStr + " should ";
conformance2/buffers/buffer-type-restrictions.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, messagePrefix + "WORK");
conformance2/buffers/buffer-type-restrictions.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, messagePrefix + "FAIL");
conformance2/buffers/buffer-type-restrictions.html:    if (i == 0 || firstTarget == gl.UNIFORM_BUFFER || firstTarget == gl.TRANSFORM_FEEDBACK_BUFFER)
conformance2/buffers/buffer-type-restrictions.html:        if (j == 0 || secondTarget == gl.UNIFORM_BUFFER || secondTarget == gl.TRANSFORM_FEEDBACK_BUFFER)
conformance2/buffers/buffer-type-restrictions.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance2/buffers/buffer-type-restrictions.html:var buffer1 = gl.createBuffer();
conformance2/buffers/buffer-type-restrictions.html:bind("bindBuffer", gl.ARRAY_BUFFER, buffer1);
conformance2/buffers/buffer-type-restrictions.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "bindBuffer(gl.ARRAY_BUFFER, buffer1) should WORK");
conformance2/buffers/buffer-type-restrictions.html:var buffer2 = gl.createBuffer();
conformance2/buffers/buffer-type-restrictions.html:bind("bindBufferRange", gl.UNIFORM_BUFFER, buffer2);
conformance2/buffers/buffer-type-restrictions.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "bindBufferRange(gl.UNIFORM_BUFFER, 0, buffer2, 0, 4) should WORK");
conformance2/buffers/buffer-type-restrictions.html:var buffer3 = gl.createBuffer();
conformance2/buffers/buffer-type-restrictions.html:bind("bindBufferBase", gl.UNIFORM_BUFFER, buffer3);
conformance2/buffers/buffer-type-restrictions.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "bindBufferBase(gl.UNIFORM_BUFFER, 0, buffer3) should WORK");
conformance2/misc/getextension-while-pbo-bound-stability.html:  var pbo = gl.createBuffer();
conformance2/misc/getextension-while-pbo-bound-stability.html:  gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, pbo);
conformance2/misc/getextension-while-pbo-bound-stability.html:  var ext = gl.getExtension('EXT_color_buffer_float');
conformance2/misc/getextension-while-pbo-bound-stability.html:  var gl_texture_float_linear = gl.getExtension(extension_name);
conformance2/misc/getextension-while-pbo-bound-stability.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Late-enable of extension should succeed");
conformance2/misc/getextension-while-pbo-bound-stability.html:  if (pbo != gl.getParameter(gl.PIXEL_UNPACK_BUFFER_BINDING)) {
conformance2/glsl3/array-assign-constructor.html:  var uniformLoc = gl.getUniformLocation(program, 'u');
conformance2/glsl3/array-assign-constructor.html:  gl.uniform1i(uniformLoc, 5);
conformance2/rendering/uniform-block-buffer-size.html:    var blockIndex = gl.getUniformBlockIndex(program, "UBOData");
conformance2/rendering/uniform-block-buffer-size.html:    var blockSize = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_DATA_SIZE);
conformance2/rendering/uniform-block-buffer-size.html:    var uniformIndices = gl.getUniformIndices(program, ["UBORed", "UBOGreen", "UBOBlue"]);
conformance2/rendering/uniform-block-buffer-size.html:    var uniformOffsets = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_OFFSET);
conformance2/rendering/uniform-block-buffer-size.html:    gl.uniformBlockBinding(program, blockIndex, binding);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Set up succeeded");
conformance2/rendering/uniform-block-buffer-size.html:    var buffer = gl.createBuffer();
conformance2/rendering/uniform-block-buffer-size.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawArrays: UniformBlock is not backed by a buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawArraysInstanced: UniformBlock is not backed by a buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.bindBufferBase(gl.UNIFORM_BUFFER, binding, buffer);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawArrays: UniformBlock is backed by a buffer with no data store");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawArraysInstanced: UniformBlock is backed by a buffer with no data store");
conformance2/rendering/uniform-block-buffer-size.html:    gl.bufferData(gl.UNIFORM_BUFFER, arrayNotLargeEnough, gl.DYNAMIC_DRAW);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawArrays: UniformBlock not populated with a large enough buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawArraysInstanced: UniformBlock not populated with a large enough buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboFloatView, gl.DYNAMIC_DRAW);
conformance2/rendering/uniform-block-buffer-size.html:    gl.clearColor(0, 0, 0, 1);
conformance2/rendering/uniform-block-buffer-size.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArrays: should be able to draw with sufficient data for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstanced: should be able to draw with sufficient data for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    gl.bindBufferRange(gl.UNIFORM_BUFFER, binding, buffer, 0, blockSize -1);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, [gl.INVALID_OPERATION, gl.INVALID_VALUE], "drawArrays: bindBufferRange set size too small for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawArraysInstanced(gl.TRIANGLES, 0, 6, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawArraysInstanced: bindBufferRange set size too small for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    var blockIndex = gl.getUniformBlockIndex(program, "UBOData");
conformance2/rendering/uniform-block-buffer-size.html:    var blockSize = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_DATA_SIZE);
conformance2/rendering/uniform-block-buffer-size.html:    var uniformIndices = gl.getUniformIndices(program, ["UBORed", "UBOGreen", "UBOBlue"]);
conformance2/rendering/uniform-block-buffer-size.html:    var uniformOffsets = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_OFFSET);
conformance2/rendering/uniform-block-buffer-size.html:    gl.uniformBlockBinding(program, blockIndex, binding);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Set up succeeded");
conformance2/rendering/uniform-block-buffer-size.html:    var buffer = gl.createBuffer();
conformance2/rendering/uniform-block-buffer-size.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawElements: UniformBlock is not backed by a buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawRangeElements: UniformBlock is not backed by a buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawElementsInstanced: UniformBlock is not backed a buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.bindBufferBase(gl.UNIFORM_BUFFER, binding, buffer);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawElements: UniformBlock is populated with a buffer with no data store");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawRangeElements: UniformBlock is populated with a buffer with no data store");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawElementsInstanced: UniformBlock is populated with a buffer with no data store");
conformance2/rendering/uniform-block-buffer-size.html:    gl.bufferData(gl.UNIFORM_BUFFER, arrayNotLargeEnough, gl.DYNAMIC_DRAW);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawElements: UniformBlock not populated with a large enough buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawRangeElements: UniformBlock not populated with a large enough buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawElementsInstanced: UniformBlock not populated with a large enough buffer");
conformance2/rendering/uniform-block-buffer-size.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboFloatView, gl.DYNAMIC_DRAW);
conformance2/rendering/uniform-block-buffer-size.html:    gl.clearColor(0, 0, 0, 1);
conformance2/rendering/uniform-block-buffer-size.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElements: should be able to draw with sufficient data for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawRangeElements: should be able to draw with sufficient data for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstanced: should be able to draw with sufficient data for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    gl.bindBufferRange(gl.UNIFORM_BUFFER, binding, buffer, 0, blockSize -1);
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, [gl.INVALID_OPERATION, gl.INVALID_VALUE], "drawElements: bindBufferRange set size too small for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawRangeElements(gl.TRIANGLES, 0, 5, 6, gl.UNSIGNED_SHORT, 0);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawRangeElements: bindBufferRange set size too small for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance2/rendering/uniform-block-buffer-size.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawElementsInstanced: bindBufferRange set size too small for UniformBlock");
conformance2/rendering/uniform-block-buffer-size.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
extra/out-of-vram.html:  gl.useProgram(program);
extra/out-of-vram.html:    if (gl.isContextLost()) {
extra/out-of-vram.html:    var texture = gl.createTexture();
extra/out-of-vram.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
extra/out-of-vram.html:    gl.texImage2D(gl.TEXTURE_2D,
extra/out-of-vram.html:                  gl.RGBA,           // internalFormat
extra/out-of-vram.html:                  gl.RGBA,           // format
extra/out-of-vram.html:                  gl.UNSIGNED_BYTE,  // type
extra/out-of-vram.html:    var err = gl.getError();
extra/out-of-vram.html:    if (err != gl.NO_ERROR) {
conformance2/rendering/framebuffer-completeness-unaffected.html:  var renderbuffer = gl.createRenderbuffer();
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, renderbuffer);
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, canvas.width, canvas.height);
conformance2/rendering/framebuffer-completeness-unaffected.html:  var fb = gl.createFramebuffer();
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/rendering/framebuffer-completeness-unaffected.html:  var colorbuffer = setupRenderbuffer(gl.COLOR_ATTACHMENT0);
conformance2/rendering/framebuffer-completeness-unaffected.html:  var colorbuffer1 = setupRenderbuffer(gl.COLOR_ATTACHMENT1);
conformance2/rendering/framebuffer-completeness-unaffected.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.drawBuffers([gl.NONE, gl.COLOR_ATTACHMENT1]);
conformance2/rendering/framebuffer-completeness-unaffected.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.RENDERBUFFER, null);
conformance2/rendering/framebuffer-completeness-unaffected.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/framebuffer-completeness-unaffected.html:  //gl.readBuffer(gl.COLOR_ATTACHMENT1);
conformance2/rendering/framebuffer-completeness-unaffected.html:  //shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.drawBuffers([gl.COLOR_ATTACHMENT0]);
conformance2/rendering/framebuffer-completeness-unaffected.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.drawBuffers([gl.NONE, gl.COLOR_ATTACHMENT1]);
conformance2/rendering/framebuffer-completeness-unaffected.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.readBuffer(gl.COLOR_ATTACHMENT0);
conformance2/rendering/framebuffer-completeness-unaffected.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.deleteFramebuffer(fb);
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.deleteRenderbuffer(colorbuffer);
conformance2/rendering/framebuffer-completeness-unaffected.html:  gl.deleteRenderbuffer(colorbuffer1);
conformance2/rendering/framebuffer-completeness-unaffected.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no error after setup and clear render buffer");
conformance2/reading/format-r11f-g11f-b10f.html:  if (gl.getExtension("EXT_color_buffer_float")) {
conformance2/reading/format-r11f-g11f-b10f.html:  gl.clearBufferfv(gl.COLOR, 0, data);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.FLOAT, buffer);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.clearBufferfv(gl.COLOR, 0, data);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.clearColor(0, 0, 0,1);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.uniform3fv(program.colorPos, data.slice(0, 3));
conformance2/reading/format-r11f-g11f-b10f.html:  gl.uniform3fv(program.tolPos, tol);
conformance2/reading/format-r11f-g11f-b10f.html:  var fbo = gl.createFramebuffer();
conformance2/reading/format-r11f-g11f-b10f.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/reading/format-r11f-g11f-b10f.html:  var renderbuffer = gl.createRenderbuffer();
conformance2/reading/format-r11f-g11f-b10f.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.renderbufferStorage(gl.RENDERBUFFER, gl.R11F_G11F_B10F, width, height);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbuffer);
conformance2/reading/format-r11f-g11f-b10f.html:  shouldBe("gl.FRAMEBUFFER_COMPLETE", "gl.checkFramebufferStatus(gl.FRAMEBUFFER)");
conformance2/reading/format-r11f-g11f-b10f.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setup framebuffer with renderbuffer should succeed.");
conformance2/reading/format-r11f-g11f-b10f.html:  gl.deleteFramebuffer(fbo);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.deleteRenderbuffer(renderbuffer);
conformance2/reading/format-r11f-g11f-b10f.html:  var fbo = gl.createFramebuffer();
conformance2/reading/format-r11f-g11f-b10f.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/reading/format-r11f-g11f-b10f.html:  var tex = gl.createTexture();
conformance2/reading/format-r11f-g11f-b10f.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.R11F_G11F_B10F, width, height, 0, gl.RGB, gl.FLOAT, null);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/reading/format-r11f-g11f-b10f.html:  shouldBe("gl.FRAMEBUFFER_COMPLETE", "gl.checkFramebufferStatus(gl.FRAMEBUFFER)");
conformance2/reading/format-r11f-g11f-b10f.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setup framebuffer with texture should succeed.");
conformance2/reading/format-r11f-g11f-b10f.html:  gl.deleteFramebuffer(fbo);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.deleteTexture(tex);
conformance2/reading/format-r11f-g11f-b10f.html:  program.colorPos = gl.getUniformLocation(program, "u_color");
conformance2/reading/format-r11f-g11f-b10f.html:  program.tolPos = gl.getUniformLocation(program, "u_tol");
conformance2/reading/format-r11f-g11f-b10f.html:  var texPos = gl.getUniformLocation(program, "u_tex");
conformance2/reading/format-r11f-g11f-b10f.html:    gl.deleteProgram(program);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.useProgram(program);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.uniform1i(texPos, 0);
conformance2/reading/format-r11f-g11f-b10f.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setup program should succeed.");
conformance2/reading/format-r11f-g11f-b10f.html:  var fbo = gl.createFramebuffer();
conformance2/reading/format-r11f-g11f-b10f.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/reading/format-r11f-g11f-b10f.html:  var tex = gl.createTexture();
conformance2/reading/format-r11f-g11f-b10f.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.R11F_G11F_B10F, width, height, 0, gl.RGB, gl.FLOAT, null);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/reading/format-r11f-g11f-b10f.html:  shouldBe("gl.FRAMEBUFFER_COMPLETE", "gl.checkFramebufferStatus(gl.FRAMEBUFFER)");
conformance2/reading/format-r11f-g11f-b10f.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setup framebuffer with texture should succeed.");
conformance2/reading/format-r11f-g11f-b10f.html:  gl.deleteTexture(tex);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.deleteFramebuffer(fbo);
conformance2/reading/format-r11f-g11f-b10f.html:  gl.deleteProgram(program);
conformance2/reading/format-r11f-g11f-b10f.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL error from tests.");
conformance2/reading/read-pixels-pack-parameters.html:    gl.disable(gl.DEPTH_TEST);
conformance2/reading/read-pixels-pack-parameters.html:    gl.disable(gl.BLEND);
conformance2/reading/read-pixels-pack-parameters.html:    var tex = gl.createTexture();
conformance2/reading/read-pixels-pack-parameters.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/reading/read-pixels-pack-parameters.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance2/reading/read-pixels-pack-parameters.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/reading/read-pixels-pack-parameters.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/reading/read-pixels-pack-parameters.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/reading/read-pixels-pack-parameters.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/reading/read-pixels-pack-parameters.html:    var loc = gl.getUniformLocation(program, "tex");
conformance2/reading/read-pixels-pack-parameters.html:    gl.uniform1i(loc, 0);
conformance2/reading/read-pixels-pack-parameters.html:    gl.pixelStorei(gl.PACK_ALIGNMENT, packParams.alignment);
conformance2/reading/read-pixels-pack-parameters.html:    gl.pixelStorei(gl.PACK_ROW_LENGTH, packParams.rowLength);
conformance2/reading/read-pixels-pack-parameters.html:    gl.pixelStorei(gl.PACK_SKIP_PIXELS, packParams.skipPixels);
conformance2/reading/read-pixels-pack-parameters.html:    gl.pixelStorei(gl.PACK_SKIP_ROWS, packParams.skipRows);
conformance2/reading/read-pixels-pack-parameters.html:    var bytesPerPixel = 4; // see readPixels' parameters below, the format is gl.RGBA, type is gl.UNSIGNED_BYTE
conformance2/reading/read-pixels-pack-parameters.html:        var buffer = gl.createBuffer();
conformance2/reading/read-pixels-pack-parameters.html:        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer);
conformance2/reading/read-pixels-pack-parameters.html:            gl.bufferData(gl.PIXEL_PACK_BUFFER, arrayWrongSize, gl.STATIC_DRAW);
conformance2/reading/read-pixels-pack-parameters.html:            gl.readPixels(xoffset, yoffset, width, height, gl.RGBA, gl.UNSIGNED_BYTE, offset);
conformance2/reading/read-pixels-pack-parameters.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "buffer too small");
conformance2/reading/read-pixels-pack-parameters.html:        gl.bufferData(gl.PIXEL_PACK_BUFFER, array, gl.STATIC_DRAW);
conformance2/reading/read-pixels-pack-parameters.html:        gl.readPixels(xoffset, yoffset, width, height, gl.RGBA, gl.UNSIGNED_BYTE, offset);
conformance2/reading/read-pixels-pack-parameters.html:            gl.readPixels(xoffset, yoffset, width, height, gl.RGBA, gl.UNSIGNED_BYTE, arrayWrongSize);
conformance2/reading/read-pixels-pack-parameters.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "buffer too small");
conformance2/reading/read-pixels-pack-parameters.html:        gl.readPixels(xoffset, yoffset, width, height, gl.RGBA, gl.UNSIGNED_BYTE, array);
conformance2/reading/read-pixels-pack-parameters.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readPixels should succeed");
conformance2/reading/read-pixels-pack-parameters.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Invalid pack params combination");
conformance2/reading/read-pixels-pack-parameters.html:        gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, array);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:    gl.getBufferSubData(gl.ARRAY_BUFFER, sourceByteOffset, readbackView);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        var buf = gl.createBuffer();
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferData(gl.ARRAY_BUFFER, view, gl.STATIC_DRAW, 0, count + 1);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferData(gl.ARRAY_BUFFER, view, gl.STATIC_DRAW, count + 1);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferData(gl.ARRAY_BUFFER, view, gl.STATIC_DRAW, count - 1, 2);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferData(gl.ARRAY_BUFFER, view, gl.STATIC_DRAW, offset);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferData(gl.ARRAY_BUFFER, view, gl.STATIC_DRAW, offset, size);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferData(gl.ARRAY_BUFFER, view, gl.STATIC_DRAW, count);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.deleteBuffer(buf);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no GL error");
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        var buf = gl.createBuffer();
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferData(gl.ARRAY_BUFFER, totalBufferBytes, gl.STATIC_DRAW);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferSubData(gl.ARRAY_BUFFER, sourceByteOffset, view, 0, count + 1);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferSubData(gl.ARRAY_BUFFER, sourceByteOffset, view, count + 1);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferSubData(gl.ARRAY_BUFFER, sourceByteOffset, view, count - 1, 2);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferSubData(gl.ARRAY_BUFFER, sourceByteOffset, view, offset);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferSubData(gl.ARRAY_BUFFER, sourceByteOffset, view, offset, size);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bufferSubData(gl.ARRAY_BUFFER, sourceByteOffset, view, count);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.deleteBuffer(buf);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance2/buffers/buffer-data-and-buffer-sub-data-sub-source.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no GL error");
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    var invalidFormat = [gl.DEPTH_COMPONENT, gl.DEPTH_STENCIL, gl.R8, gl.RGBA4, gl.LUMINANCE, gl.LUMINANCE_ALPHA];
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    var invalidType = [gl.UNSIGNED_INT_24_8];
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        gl.readPixels(0, 0, 1, 1, format, gl.UNSIGNED_BYTE, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "Format should not be able to read as " + wtu.glEnumToString(gl, format));
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, type, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "Type should not be able to read as " + wtu.glEnumToString(gl, type));
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.RGBA,         type: gl.UNSIGNED_BYTE},
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.RGB,          type: gl.UNSIGNED_BYTE},
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.RGB,          type: gl.UNSIGNED_SHORT_5_6_5},
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.RGBA,         type: gl.UNSIGNED_SHORT_5_5_5_1},
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.RGBA,         type: gl.UNSIGNED_SHORT_4_4_4_4},
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.ALPHA,        type: gl.UNSIGNED_BYTE},
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.RED,          type: gl.UNSIGNED_BYTE},
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.RGBA_INTEGER, type: gl.UNSIGNED_INT},
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        {format: gl.RGBA_INTEGER, type: gl.INT}
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    var implFormat = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    var implType = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        gl.readPixels(0, 0, 1, 1, format, type, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:        if ((format == gl.RGBA && type == gl.UNSIGNED_BYTE) || (format == implFormat && type == implType)) {
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "The combination of format/type should be able to read as " +
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "The combination of format/type should not be able to read as " +
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.clearColor(0, 0, 0, 1);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.pixelStorei(gl.PACK_ALIGNMENT, 1);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    var buffer = gl.createBuffer();
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.bufferData(gl.PIXEL_PACK_BUFFER, size, gl.STATIC_DRAW);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, array);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "should generate INVALID_OPERATION if pixel pack buffer is bound");
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, -1);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "offset < 0");
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, size);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "offset > buffer size");
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(0, 0, canvasWidth + 1, canvasHeight, gl.RGBA, gl.UNSIGNED_BYTE, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "pixel pack buffer is not large enough");
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(-1, -2, canvasWidth, canvasHeight, gl.RGBA, gl.UNSIGNED_BYTE, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "reading pixels outside of the framebuffer should succeed.");
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(2, 1, canvasWidth, canvasHeight, gl.RGBA, gl.UNSIGNED_BYTE, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "reading pixels outside of the framebuffer should succeed.");
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(2, 1, -1, -1, gl.RGBA, gl.UNSIGNED_BYTE, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, array);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, 0);
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "no pixel pack buffer bound");
conformance2/reading/read-pixels-into-pixel-pack-buffer.html:    gl.deleteBuffer(buffer);
conformance2/transform_feedback/transform_feedback.html:    shouldBe("gl.TRANSFORM_FEEDBACK_BINDING", "0x8E25");
conformance2/transform_feedback/transform_feedback.html:    gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING);
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "TRANSFORM_FEEDBACK_BINDING query should succeed");
conformance2/transform_feedback/transform_feedback.html:    shouldBe("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)", "null");
conformance2/transform_feedback/transform_feedback.html:    tf = gl.createTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    tf1 = gl.createTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)");
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
conformance2/transform_feedback/transform_feedback.html:    shouldBe("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)", "tf");
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf1);
conformance2/transform_feedback/transform_feedback.html:    shouldBe("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)", "tf1");
conformance2/transform_feedback/transform_feedback.html:    gl.deleteTransformFeedback(tf);
conformance2/transform_feedback/transform_feedback.html:    gl.deleteTransformFeedback(tf1);
conformance2/transform_feedback/transform_feedback.html:    shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)");
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf1);
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "binding a deleted Transform Feedback object");
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
conformance2/transform_feedback/transform_feedback.html:    shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BINDING)");
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/transform_feedback/transform_feedback.html:    tf = gl.createTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "createTransformFeedback should not set an error");
conformance2/transform_feedback/transform_feedback.html:    shouldBeFalse("gl.isTransformFeedback(tf)");
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
conformance2/transform_feedback/transform_feedback.html:    shouldBeTrue("gl.isTransformFeedback(tf)");
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
conformance2/transform_feedback/transform_feedback.html:    shouldBeTrue("gl.isTransformFeedback(tf)");
conformance2/transform_feedback/transform_feedback.html:    gl.deleteTransformFeedback(tf);
conformance2/transform_feedback/transform_feedback.html:    shouldBeFalse("gl.isTransformFeedback(tf)");
conformance2/transform_feedback/transform_feedback.html:    shouldBeFalse("gl.isTransformFeedback(null)");
conformance2/transform_feedback/transform_feedback.html:    var in_buffer = gl.createBuffer();
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.ARRAY_BUFFER, in_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(in_data), gl.STATIC_DRAW);
conformance2/transform_feedback/transform_feedback.html:    var out_add_buffer = gl.createBuffer();
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, Float32Array.BYTES_PER_ELEMENT * in_data.length, gl.STATIC_DRAW);
conformance2/transform_feedback/transform_feedback.html:        ["out_add"], gl.SEPARATE_ATTRIBS,
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "linking transform feedback shader should not set an error");
conformance2/transform_feedback/transform_feedback.html:    tf = gl.createTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    gl.enableVertexAttribArray(0);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.ARRAY_BUFFER, in_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 16, 0);
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.enable(gl.RASTERIZER_DISCARD);
conformance2/transform_feedback/transform_feedback.html:    gl.beginTransformFeedback(gl.POINTS);
conformance2/transform_feedback/transform_feedback.html:    gl.drawArrays(gl.POINTS, 0, 3);
conformance2/transform_feedback/transform_feedback.html:    gl.endTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    gl.disable(gl.RASTERIZER_DISCARD);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    wtu.checkFloatBuffer(gl, gl.TRANSFORM_FEEDBACK_BUFFER, add_expected);
conformance2/transform_feedback/transform_feedback.html:    var in_buffer = gl.createBuffer();
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.ARRAY_BUFFER, in_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(in_data), gl.STATIC_DRAW);
conformance2/transform_feedback/transform_feedback.html:    var out_add_buffer = gl.createBuffer();
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, Float32Array.BYTES_PER_ELEMENT * in_data.length, gl.STATIC_DRAW);
conformance2/transform_feedback/transform_feedback.html:    var out_mul_buffer = gl.createBuffer();
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_mul_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, Float32Array.BYTES_PER_ELEMENT * in_data.length, gl.STATIC_DRAW);
conformance2/transform_feedback/transform_feedback.html:        ["out_add", "out_mul"], gl.SEPARATE_ATTRIBS,
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "linking transform feedback shader should not set an error");
conformance2/transform_feedback/transform_feedback.html:    query = gl.createQuery();
conformance2/transform_feedback/transform_feedback.html:    tf = gl.createTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    gl.enableVertexAttribArray(0);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.ARRAY_BUFFER, in_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 16, 0);
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 1, out_mul_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.enable(gl.RASTERIZER_DISCARD);
conformance2/transform_feedback/transform_feedback.html:    gl.beginTransformFeedback(gl.POINTS);
conformance2/transform_feedback/transform_feedback.html:    gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, query);
conformance2/transform_feedback/transform_feedback.html:    gl.drawArrays(gl.POINTS, 0, 3);
conformance2/transform_feedback/transform_feedback.html:    gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
conformance2/transform_feedback/transform_feedback.html:    gl.endTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    gl.disable(gl.RASTERIZER_DISCARD);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 1, null);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    wtu.checkFloatBuffer(gl, gl.TRANSFORM_FEEDBACK_BUFFER, add_expected);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_mul_buffer);
conformance2/transform_feedback/transform_feedback.html:    wtu.checkFloatBuffer(gl, gl.TRANSFORM_FEEDBACK_BUFFER, mul_expected);
conformance2/transform_feedback/transform_feedback.html:        gl.finish();
conformance2/transform_feedback/transform_feedback.html:        if (gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)) {
conformance2/transform_feedback/transform_feedback.html:    wtu.shouldGenerateGLError(gl, expected, "gl.getBufferSubData(gl.TRANSFORM_FEEDBACK_BUFFER, 0, retArray, 0, retArray.length)");
conformance2/transform_feedback/transform_feedback.html:    var in_buffer = gl.createBuffer();
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.ARRAY_BUFFER, in_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(in_data), gl.STATIC_DRAW);
conformance2/transform_feedback/transform_feedback.html:    var out_add_buffer = gl.createBuffer();
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, Float32Array.BYTES_PER_ELEMENT * in_data.length, gl.STATIC_DRAW);
conformance2/transform_feedback/transform_feedback.html:        ["out_add"], gl.SEPARATE_ATTRIBS,
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "linking transform feedback shader should not set an error");
conformance2/transform_feedback/transform_feedback.html:    tf = gl.createTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    gl.enableVertexAttribArray(0);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.ARRAY_BUFFER, in_buffer);
conformance2/transform_feedback/transform_feedback.html:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 16, 0);
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
conformance2/transform_feedback/transform_feedback.html:    verifyGetBufferSubData(gl.NO_ERROR);
conformance2/transform_feedback/transform_feedback.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    verifyGetBufferSubData(gl.NO_ERROR);
conformance2/transform_feedback/transform_feedback.html:    gl.enable(gl.RASTERIZER_DISCARD);
conformance2/transform_feedback/transform_feedback.html:    gl.beginTransformFeedback(gl.POINTS);
conformance2/transform_feedback/transform_feedback.html:    verifyGetBufferSubData(gl.INVALID_OPERATION);
conformance2/transform_feedback/transform_feedback.html:    gl.drawArrays(gl.POINTS, 0, 3);
conformance2/transform_feedback/transform_feedback.html:    gl.endTransformFeedback();
conformance2/transform_feedback/transform_feedback.html:    gl.disable(gl.RASTERIZER_DISCARD);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);
conformance2/transform_feedback/transform_feedback.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_add_buffer);
conformance2/transform_feedback/transform_feedback.html:    wtu.checkFloatBuffer(gl, gl.TRANSFORM_FEEDBACK_BUFFER, add_expected);
conformance2/transform_feedback/transform_feedback.html:    if (!gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)) {
conformance2/transform_feedback/transform_feedback.html:    var result = gl.getQueryParameter(query, gl.QUERY_RESULT);
conformance2/transform_feedback/transform_feedback.html:    activeInfo = gl.getTransformFeedbackVarying(prog, index);
conformance2/transform_feedback/transform_feedback.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/transform_feedback/transform_feedback.html:        shouldBe("activeInfo.type", "gl.FLOAT_VEC4");
conformance2/transform_feedback/transform_feedback.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/transform_feedback/transform_feedback.html:        ["out_add", "out_mul"], gl.SEPARATE_ATTRIBS,
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "linking transform feedback shader should not set an error");
conformance2/transform_feedback/transform_feedback.html:    shouldBe("gl.getProgramParameter(program, gl.TRANSFORM_FEEDBACK_VARYINGS)", "2");
conformance2/transform_feedback/transform_feedback.html:    gl.transformFeedbackVaryings(program, ["out_mul"], gl.SEPARATE_ATTRIBS);
conformance2/transform_feedback/transform_feedback.html:    shouldBe("gl.getProgramParameter(program, gl.TRANSFORM_FEEDBACK_VARYINGS)", "2");
conformance2/transform_feedback/transform_feedback.html:    gl.linkProgram(program);
conformance2/transform_feedback/transform_feedback.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "linking transform feedback shader should not set an error");
conformance2/transform_feedback/transform_feedback.html:    shouldBeTrue("gl.getProgramParameter(program, gl.LINK_STATUS)");
conformance2/transform_feedback/transform_feedback.html:    shouldBe("gl.getProgramParameter(program, gl.TRANSFORM_FEEDBACK_VARYINGS)", "1");
conformance2/buffers/get-buffer-sub-data.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance2/buffers/get-buffer-sub-data.html:var buffer = gl.createBuffer();
conformance2/buffers/get-buffer-sub-data.html:gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance2/buffers/get-buffer-sub-data.html:gl.bufferData(gl.ARRAY_BUFFER, floatArray, gl.STATIC_DRAW);
conformance2/buffers/get-buffer-sub-data.html:var uninitializedBuffer = gl.createBuffer();
conformance2/buffers/get-buffer-sub-data.html:gl.bindBuffer(gl.ARRAY_BUFFER, uninitializedBuffer);
conformance2/buffers/get-buffer-sub-data.html:gl.bufferData(gl.ARRAY_BUFFER, 36, gl.STATIC_DRAW);
conformance2/buffers/get-buffer-sub-data.html:gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance2/buffers/get-buffer-sub-data.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from buffer setup.");
conformance2/buffers/get-buffer-sub-data.html:gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance2/buffers/get-buffer-sub-data.html:debug("Test that getBufferSubData successfully works reading buffer data from gl.ARRAY_BUFFER");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray)");
conformance2/buffers/get-buffer-sub-data.html:shouldThrow("gl.getBufferSubData(gl.ARRAY_BUFFER, 0, new ArrayBuffer(4))");
conformance2/buffers/get-buffer-sub-data.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should not generate GL error");
conformance2/buffers/get-buffer-sub-data.html:shouldThrow("gl.getBufferSubData(gl.ARRAY_BUFFER, 0, null)");
conformance2/buffers/get-buffer-sub-data.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should not generate GL error");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray, 2)");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray, retArray.length)");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray, retArray.length + 1)");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray, 2, 2)");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray, retArray.length - 1, 1)");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray, retArray.length - 1, 2)");
conformance2/buffers/get-buffer-sub-data.html:gl.getBufferSubData(gl.ARRAY_BUFFER, 0, extraLargeBuffer);
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE,
conformance2/buffers/get-buffer-sub-data.html:                          "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, extraLargeBuffer)",
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE,
conformance2/buffers/get-buffer-sub-data.html:                          "gl.getBufferSubData(gl.ARRAY_BUFFER, retArray.byteLength + 1, retArray)");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, "gl.getBufferSubData(gl.ARRAY_BUFFER, 1, retArray)");
conformance2/buffers/get-buffer-sub-data.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION,
conformance2/buffers/get-buffer-sub-data.html:                          "gl.getBufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, retArray)");
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, "gl.getBufferSubData(gl.ARRAY_BUFFER, -1, retArray)");
conformance2/buffers/get-buffer-sub-data.html:gl.bindBuffer(gl.ARRAY_BUFFER, uninitializedBuffer);
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR,
conformance2/buffers/get-buffer-sub-data.html:    "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray)");
conformance2/buffers/get-buffer-sub-data.html:gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR,
conformance2/buffers/get-buffer-sub-data.html:    "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray)");
conformance2/buffers/get-buffer-sub-data.html:gl.bufferData(gl.ARRAY_BUFFER, 4, gl.STATIC_DRAW);
conformance2/buffers/get-buffer-sub-data.html:gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance2/buffers/get-buffer-sub-data.html:gl.bufferData(gl.ARRAY_BUFFER, floatArray, gl.STATIC_DRAW);
conformance2/buffers/get-buffer-sub-data.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR,
conformance2/buffers/get-buffer-sub-data.html:    "gl.getBufferSubData(gl.ARRAY_BUFFER, 0, retArray)");
conformance2/buffers/get-buffer-sub-data.html:gl.deleteBuffer(buffer);
conformance2/misc/views-with-offsets.html:console.log(gl.getParameter(gl.VERSION));
conformance2/misc/views-with-offsets.html:var fb = gl.createFramebuffer();
conformance2/misc/views-with-offsets.html:  if (!gl.getError()) {
conformance2/misc/views-with-offsets.html:      fnTexOrSubImage(gl.RGBA, gl.UNSIGNED_BYTE, testView, viewOffset);
conformance2/misc/views-with-offsets.html:      fnTexOrSubImage(gl.RGBA, gl.UNSIGNED_BYTE, testView, i);
conformance2/misc/views-with-offsets.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/misc/views-with-offsets.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, readPixelView);
conformance2/misc/views-with-offsets.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/misc/views-with-offsets.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION);
conformance2/misc/views-with-offsets.html:      fnTexOrSubImage(gl.RGB, gl.UNSIGNED_SHORT_5_6_5, view565, i);
conformance2/misc/views-with-offsets.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/misc/views-with-offsets.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, readPixelView);
conformance2/misc/views-with-offsets.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/misc/views-with-offsets.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION);
conformance2/misc/views-with-offsets.html:    gl.texImage2D(gl.TEXTURE_2D, 0, format, 1, 1, 0, format, type, view, viewOffset);
conformance2/misc/views-with-offsets.html:    gl.texImage2D(gl.TEXTURE_2D, 0, format, 1, 1, 0, format, type, null);
conformance2/misc/views-with-offsets.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, format, type, view, viewOffset);
conformance2/misc/views-with-offsets.html:    gl.texImage3D(gl.TEXTURE_3D, 0, format, 1, 1, 1, 0, format, type, view, viewOffset);
conformance2/misc/views-with-offsets.html:    gl.texImage3D(gl.TEXTURE_3D, 0, format, 1, 1, 1, 0, format, type, null);
conformance2/misc/views-with-offsets.html:    gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 1, 1, 1, format, type, view, viewOffset);
conformance2/misc/views-with-offsets.html:  var tex2d = gl.createTexture();
conformance2/misc/views-with-offsets.html:  gl.bindTexture(gl.TEXTURE_2D, tex2d);
conformance2/misc/views-with-offsets.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/misc/views-with-offsets.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex2d, 0);
conformance2/misc/views-with-offsets.html:  var tex3d = gl.createTexture();
conformance2/misc/views-with-offsets.html:  gl.bindTexture(gl.TEXTURE_3D, tex3d);
conformance2/misc/views-with-offsets.html:  gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/misc/views-with-offsets.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance2/misc/views-with-offsets.html:  gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3d, 0, 0);
conformance2/misc/views-with-offsets.html:  if (gl.getExtension("WEBGL_compressed_texture_s3tc")) {
conformance2/misc/views-with-offsets.html:    var e = gl.getExtension("WEBGL_compressed_texture_s3tc");
conformance2/misc/views-with-offsets.html:  } else if (gl.getExtension("WEBGL_compressed_texture_etc")) {
conformance2/misc/views-with-offsets.html:    var e = gl.getExtension("WEBGL_compressed_texture_etc");
conformance2/misc/views-with-offsets.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, compressedFormat, 4, 4, 0,
conformance2/misc/views-with-offsets.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, compressedFormat, 4, 4, 0,
conformance2/misc/views-with-offsets.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, compressedFormat,
conformance2/misc/views-with-offsets.html:    gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, compressedFormat, 4, 4, 1, 0,
conformance2/misc/views-with-offsets.html:    gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, compressedFormat, 4, 4, 1, 0,
conformance2/misc/views-with-offsets.html:    gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 4, 4, 1, compressedFormat,
conformance2/misc/views-with-offsets.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/misc/views-with-offsets.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance2/misc/views-with-offsets.html:  var tex2d = gl.createTexture();
conformance2/misc/views-with-offsets.html:  gl.bindTexture(gl.TEXTURE_2D, tex2d);
conformance2/misc/views-with-offsets.html:  var tex3d = gl.createTexture();
conformance2/misc/views-with-offsets.html:  gl.bindTexture(gl.TEXTURE_2D_ARRAY, tex3d);
conformance2/misc/views-with-offsets.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/misc/views-with-offsets.html:  gl.clearColor(testColor[0]/255.0,
conformance2/misc/views-with-offsets.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/misc/views-with-offsets.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, readPixelView, viewOffset);
conformance2/misc/views-with-offsets.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/misc/views-with-offsets.html:      wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION);
conformance2/misc/views-with-offsets.html:      wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    var in_buffer = gl.createBuffer();
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bindBuffer(gl.ARRAY_BUFFER, in_buffer);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(in_data), gl.STATIC_DRAW);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    var out_buffer = gl.createBuffer();
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_buffer);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, Float32Array.BYTES_PER_ELEMENT * in_data.length, gl.STATIC_DRAW);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:        ["out_data"], gl.SEPARATE_ATTRIBS,
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    var loc = gl.getUniformLocation(program, "flag");
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.uniform1i(loc, flag);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Set up program should succeed");
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    var tf = gl.createTransformFeedback();
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.enableVertexAttribArray(0);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bindBuffer(gl.ARRAY_BUFFER, in_buffer);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 16, 0);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, out_buffer);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.enable(gl.RASTERIZER_DISCARD);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.beginTransformFeedback(gl.POINTS);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.drawArrays(gl.POINTS, 0, 3);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.endTransformFeedback();
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.disable(gl.RASTERIZER_DISCARD);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_buffer);
conformance2/transform_feedback/unwritten-output-defaults-to-zero.html:    wtu.checkFloatBuffer(gl, gl.TRANSFORM_FEEDBACK_BUFFER, expected_data);
conformance2/buffers/uniform-buffers.html:    shouldBeNull("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)");
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "UNIFORM_BUFFER_BINDING query should succeed");
conformance2/buffers/uniform-buffers.html:    b1 = gl.createBuffer();
conformance2/buffers/uniform-buffers.html:    b2 = gl.createBuffer();
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "createBuffer should not set an error");
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, b1);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to bind uniform buffer");
conformance2/buffers/uniform-buffers.html:    shouldBe("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)", "b1");
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, b2);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to update uniform buffer binding");
conformance2/buffers/uniform-buffers.html:    shouldBe("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)", "b2");
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, null);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to unbind uniform buffer");
conformance2/buffers/uniform-buffers.html:    gl.deleteBuffer(b1);
conformance2/buffers/uniform-buffers.html:    gl.deleteBuffer(b2);
conformance2/buffers/uniform-buffers.html:    shouldBeNull("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)");
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, b2);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "binding a deleted buffer should generate INVALID_OPERATION");
conformance2/buffers/uniform-buffers.html:    shouldBeNull("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)");
conformance2/buffers/uniform-buffers.html:    var blockIndex_1 = gl.getUniformBlockIndex(program, "UBOData");
conformance2/buffers/uniform-buffers.html:    var blockSize_1 = gl.getActiveUniformBlockParameter(program, blockIndex_1, gl.UNIFORM_BLOCK_DATA_SIZE);
conformance2/buffers/uniform-buffers.html:    var uniformIndices_1 = gl.getUniformIndices(program, ["UBORed", "UBOGreen", "UBOBlue"]);
conformance2/buffers/uniform-buffers.html:    var uniformOffsets_1 = gl.getActiveUniforms(program, uniformIndices_1, gl.UNIFORM_OFFSET);
conformance2/buffers/uniform-buffers.html:    var blockIndex_2 = gl.getUniformBlockIndex(program, "UBOD");
conformance2/buffers/uniform-buffers.html:    var blockSize_2 = gl.getActiveUniformBlockParameter(program, blockIndex_2, gl.UNIFORM_BLOCK_DATA_SIZE);
conformance2/buffers/uniform-buffers.html:    var uniformIndices_2 = gl.getUniformIndices(program, ["UBOR", "UBOG", "UBOB"]);
conformance2/buffers/uniform-buffers.html:    var uniformOffsets_2 = gl.getActiveUniforms(program, uniformIndices_2, gl.UNIFORM_OFFSET);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to query uniform block information without error");
conformance2/buffers/uniform-buffers.html:    var b_1 = gl.createBuffer();
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, b_1);
conformance2/buffers/uniform-buffers.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboFloatView_1, gl.DYNAMIC_DRAW);
conformance2/buffers/uniform-buffers.html:    var b_2 = gl.createBuffer();
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, b_2);
conformance2/buffers/uniform-buffers.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboFloatView_2, gl.DYNAMIC_DRAW);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to set UBO data with no errors");
conformance2/buffers/uniform-buffers.html:    gl.uniformBlockBinding(program, blockIndex_1, bindings[0]);
conformance2/buffers/uniform-buffers.html:    gl.bindBufferBase(gl.UNIFORM_BUFFER, bindings[0], b_1);
conformance2/buffers/uniform-buffers.html:    gl.uniformBlockBinding(program, blockIndex_2, bindings[1]);
conformance2/buffers/uniform-buffers.html:    gl.bindBufferBase(gl.UNIFORM_BUFFER, bindings[1], b_2);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call bindBufferBase without errors");
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, b_1);
conformance2/buffers/uniform-buffers.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboFloatView_1, gl.DYNAMIC_DRAW);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/buffers/uniform-buffers.html:    var blockIndex = gl.getUniformBlockIndex(program, "UBOData");
conformance2/buffers/uniform-buffers.html:    var blockSize = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_DATA_SIZE);
conformance2/buffers/uniform-buffers.html:    var uniformIndices = gl.getUniformIndices(program, ["UBOData.Red", "UBOData.Green", "UBOData.Blue"]);
conformance2/buffers/uniform-buffers.html:    var uniformOffsets = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_OFFSET);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to query uniform block information without error");
conformance2/buffers/uniform-buffers.html:    b1 = gl.createBuffer();
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, b1);
conformance2/buffers/uniform-buffers.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboArray, gl.DYNAMIC_DRAW);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to set UBO data with no errors");
conformance2/buffers/uniform-buffers.html:    gl.uniformBlockBinding(program, blockIndex, binding);
conformance2/buffers/uniform-buffers.html:    gl.bindBufferBase(gl.UNIFORM_BUFFER, binding, b1);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call bindBufferBase without errors");
conformance2/buffers/uniform-buffers.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboArray, gl.DYNAMIC_DRAW);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/buffers/uniform-buffers.html:    var blockIndex = [gl.getUniformBlockIndex(program, "UBOData[0]"),
conformance2/buffers/uniform-buffers.html:                      gl.getUniformBlockIndex(program, "UBOData[1]")];
conformance2/buffers/uniform-buffers.html:    if (blockIndex[0] == gl.INVALID_INDEX ||
conformance2/buffers/uniform-buffers.html:        blockIndex[1] == gl.INVALID_INDEX) {
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to query uniform block indices without error");
conformance2/buffers/uniform-buffers.html:    var blockSize = [gl.getActiveUniformBlockParameter(program, blockIndex[0], gl.UNIFORM_BLOCK_DATA_SIZE),
conformance2/buffers/uniform-buffers.html:                     gl.getActiveUniformBlockParameter(program, blockIndex[1], gl.UNIFORM_BLOCK_DATA_SIZE)];
conformance2/buffers/uniform-buffers.html:    var uniformIndices = gl.getUniformIndices(program, ["UBOData.Red", "UBOData.Green", "UBOData.Blue"]);
conformance2/buffers/uniform-buffers.html:        uniformIndices[0] == gl.INVALID_INDEX ||
conformance2/buffers/uniform-buffers.html:        uniformIndices[1] == gl.INVALID_INDEX ||
conformance2/buffers/uniform-buffers.html:        uniformIndices[2] == gl.INVALID_INDEX) {
conformance2/buffers/uniform-buffers.html:    var uniformOffsets = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_OFFSET);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to query uniform block information without error");
conformance2/buffers/uniform-buffers.html:    var offsetAlignment = gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT);
conformance2/buffers/uniform-buffers.html:    b1 = gl.createBuffer();
conformance2/buffers/uniform-buffers.html:    gl.bindBuffer(gl.UNIFORM_BUFFER, b1);
conformance2/buffers/uniform-buffers.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboArray, gl.DYNAMIC_DRAW);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to set UBO data with no errors");
conformance2/buffers/uniform-buffers.html:    gl.uniformBlockBinding(program, blockIndex[0], bindings[0]);
conformance2/buffers/uniform-buffers.html:    gl.bindBufferRange(gl.UNIFORM_BUFFER, bindings[0], b1, 0, blockSize[0]);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call bindBufferRange without errors");
conformance2/buffers/uniform-buffers.html:    gl.uniformBlockBinding(program, blockIndex[1], bindings[1]);
conformance2/buffers/uniform-buffers.html:    gl.bindBufferRange(gl.UNIFORM_BUFFER, bindings[1], b1, offset, blockSize[1]);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call bindBufferRange without errors");
conformance2/buffers/uniform-buffers.html:    gl.bufferData(gl.UNIFORM_BUFFER, uboArray, gl.DYNAMIC_DRAW);
conformance2/buffers/uniform-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
extra/cube-map-uploads-out-of-order.html:var tex = gl.createTexture();
extra/cube-map-uploads-out-of-order.html:gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
extra/cube-map-uploads-out-of-order.html:    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);
extra/cube-map-uploads-out-of-order.html:gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
extra/cube-map-uploads-out-of-order.html:gl.generateMipmap(gl.TEXTURE_CUBE_MAP); // there's no need to call this but the code doesn't check the size.
extra/cube-map-uploads-out-of-order.html:gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
extra/cube-map-uploads-out-of-order.html:gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + first, 0, gl.RGBA, dataWidth, dataHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, textureData);
extra/cube-map-uploads-out-of-order.html:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
extra/cube-map-uploads-out-of-order.html:        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, dataWidth, dataHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, textureData);
extra/cube-map-uploads-out-of-order.html:gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
extra/cube-map-uploads-out-of-order.html:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
extra/cube-map-uploads-out-of-order.html:        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, dataWidth, dataHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, textureData);
extra/cube-map-uploads-out-of-order.html:        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
extra/cube-map-uploads-out-of-order.html:gl.flush();
conformance2/buffers/buffer-copying-contents.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance2/buffers/buffer-copying-contents.html:  var srcBuffer = gl.createBuffer(), dstBuffer = gl.createBuffer();
conformance2/buffers/buffer-copying-contents.html:  gl.bindBuffer(srcTarget, srcBuffer);
conformance2/buffers/buffer-copying-contents.html:  gl.bufferData(srcTarget, originalData, gl.STATIC_DRAW);
conformance2/buffers/buffer-copying-contents.html:    gl.bindBuffer(gl.COPY_READ_BUFFER, srcBuffer);
conformance2/buffers/buffer-copying-contents.html:  gl.bindBuffer(dstTarget, dstBuffer);
conformance2/buffers/buffer-copying-contents.html:  gl.bufferData(dstTarget, new Float32Array(length), gl.STATIC_DRAW);
conformance2/buffers/buffer-copying-contents.html:    gl.bindBuffer(gl.COPY_WRITE_BUFFER, dstBuffer);
conformance2/buffers/buffer-copying-contents.html:  var expectedGLError = gl.NO_ERROR;
conformance2/buffers/buffer-copying-contents.html:      gl.bindBuffer(srcTarget, srcBuffer);
conformance2/buffers/buffer-copying-contents.html:      expectedGLError = gl.INVALID_VALUE;
conformance2/buffers/buffer-copying-contents.html:  if ((srcTarget == gl.ELEMENT_ARRAY_BUFFER &&
conformance2/buffers/buffer-copying-contents.html:       dstTarget != gl.ELEMENT_ARRAY_BUFFER) ||
conformance2/buffers/buffer-copying-contents.html:      (srcTarget != gl.ELEMENT_ARRAY_BUFFER &&
conformance2/buffers/buffer-copying-contents.html:       dstTarget == gl.ELEMENT_ARRAY_BUFFER)) {
conformance2/buffers/buffer-copying-contents.html:    expectedGLError = gl.INVALID_OPERATION;
conformance2/buffers/buffer-copying-contents.html:  gl.copyBufferSubData(copyRead ? gl.COPY_READ_BUFFER : srcTarget,
conformance2/buffers/buffer-copying-contents.html:                       copyWrite ? gl.COPY_WRITE_BUFFER : dstTarget,
conformance2/buffers/buffer-copying-contents.html:  if (expectedGLError == gl.NO_ERROR) {
conformance2/buffers/buffer-copying-contents.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Copying should work");
conformance2/buffers/buffer-copying-contents.html:    gl.getBufferSubData(dstTarget, 0, retBuffer);
conformance2/buffers/buffer-copying-contents.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-copying-contents.html:        "gl.getBufferSubData(" + targetToString(gl, dstTarget) +
conformance2/buffers/buffer-copying-contents.html:  gl.deleteBuffer(srcBuffer);
conformance2/buffers/buffer-copying-contents.html:  gl.deleteBuffer(dstBuffer);
conformance2/buffers/buffer-copying-contents.html:  shouldBeNull("gl.getParameter(gl.ARRAY_BUFFER_BINDING)");
conformance2/buffers/buffer-copying-contents.html:  shouldBeNull("gl.getParameter(gl.COPY_READ_BUFFER_BINDING)");
conformance2/buffers/buffer-copying-contents.html:  shouldBeNull("gl.getParameter(gl.COPY_WRITE_BUFFER_BINDING)");
conformance2/buffers/buffer-copying-contents.html:  shouldBeNull("gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING)");
conformance2/buffers/buffer-copying-contents.html:  shouldBeNull("gl.getParameter(gl.PIXEL_PACK_BUFFER_BINDING)");
conformance2/buffers/buffer-copying-contents.html:  shouldBeNull("gl.getParameter(gl.PIXEL_UNPACK_BUFFER_BINDING)");
conformance2/buffers/buffer-copying-contents.html:  shouldBeNull("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)");
conformance2/buffers/buffer-copying-contents.html:  shouldBeNull("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)");
conformance2/buffers/buffer-copying-contents.html:    case gl.ARRAY_BUFFER:
conformance2/buffers/buffer-copying-contents.html:    case gl.COPY_READ_BUFFER:
conformance2/buffers/buffer-copying-contents.html:    case gl.COPY_WRITE_BUFFER:
conformance2/buffers/buffer-copying-contents.html:    case gl.ELEMENT_ARRAY_BUFFER:
conformance2/buffers/buffer-copying-contents.html:    case gl.PIXEL_PACK_BUFFER:
conformance2/buffers/buffer-copying-contents.html:    case gl.PIXEL_UNPACK_BUFFER:
conformance2/buffers/buffer-copying-contents.html:    case gl.TRANSFORM_FEEDBACK_BUFFER:
conformance2/buffers/buffer-copying-contents.html:    case gl.UNIFORM_BUFFER:
conformance2/buffers/buffer-copying-contents.html:  gl.ARRAY_BUFFER,
conformance2/buffers/buffer-copying-contents.html:  gl.ELEMENT_ARRAY_BUFFER,
conformance2/buffers/buffer-copying-contents.html:  gl.PIXEL_PACK_BUFFER,
conformance2/buffers/buffer-copying-contents.html:  gl.PIXEL_UNPACK_BUFFER,
conformance2/buffers/buffer-copying-contents.html:  gl.TRANSFORM_FEEDBACK_BUFFER,
conformance2/buffers/buffer-copying-contents.html:  gl.UNIFORM_BUFFER,
conformance2/buffers/buffer-copying-contents.html:    if (targets[srcIndex] != gl.TRANSFORM_FEEDBACK_BUFFER &&
conformance2/buffers/buffer-copying-contents.html:        targets[dstIndex] != gl.TRANSFORM_FEEDBACK_BUFFER) {
conformance2/buffers/buffer-copying-contents.html:    if (targets[srcIndex] != gl.TRANSFORM_FEEDBACK_BUFFER) {
conformance2/buffers/buffer-copying-contents.html:    if (targets[dstIndex] != gl.TRANSFORM_FEEDBACK_BUFFER) {
conformance2/rendering/canvas-resizing-with-pbo-bound.html:    gl.clearColor(0, 1, 0, 1);
conformance2/rendering/canvas-resizing-with-pbo-bound.html:    pbo = gl.createBuffer();
conformance2/rendering/canvas-resizing-with-pbo-bound.html:    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, pbo);
conformance2/rendering/canvas-resizing-with-pbo-bound.html:  gl.viewport(0, 0, largeSize, currentSize);
conformance2/rendering/canvas-resizing-with-pbo-bound.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/rendering/canvas-resizing-with-pbo-bound.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL error");
conformance2/rendering/canvas-resizing-with-pbo-bound.html:  if (gl.getParameter(gl.PIXEL_UNPACK_BUFFER_BINDING) != pbo) {
conformance2/buffers/bound-buffer-size-change-test.html:var buffer1 = gl.createBuffer();
conformance2/buffers/bound-buffer-size-change-test.html:gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer1);
conformance2/buffers/bound-buffer-size-change-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)", "buffer1");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0)", "buffer1");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, 0)", "0");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_START, 0)", "0");
conformance2/buffers/bound-buffer-size-change-test.html:gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 4, gl.STATIC_DRAW);
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0)", "buffer1");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, 0)", "0");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_START, 0)", "0");
conformance2/buffers/bound-buffer-size-change-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/buffers/bound-buffer-size-change-test.html:var buffer2 = gl.createBuffer();
conformance2/buffers/bound-buffer-size-change-test.html:gl.bindBufferBase(gl.UNIFORM_BUFFER, 1, buffer2);
conformance2/buffers/bound-buffer-size-change-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)", "buffer2");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1)", "buffer2");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_SIZE, 1)", "0");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_START, 1)", "0");
conformance2/buffers/bound-buffer-size-change-test.html:gl.bufferData(gl.UNIFORM_BUFFER, 8, gl.STATIC_DRAW);
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1)", "buffer2");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_SIZE, 1)", "0");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_START, 1)", "0");
conformance2/buffers/bound-buffer-size-change-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/buffers/bound-buffer-size-change-test.html:var buffer3 = gl.createBuffer();
conformance2/buffers/bound-buffer-size-change-test.html:gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer3, 4, 8);
conformance2/buffers/bound-buffer-size-change-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING)", "buffer3");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0)", "buffer3");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, 0)", "8");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_START, 0)", "4");
conformance2/buffers/bound-buffer-size-change-test.html:gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 4, gl.STATIC_DRAW);
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0)", "buffer3");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, 0)", "8");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_START, 0)", "4");
conformance2/buffers/bound-buffer-size-change-test.html:gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 12, gl.STATIC_DRAW);
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0)", "buffer3");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, 0)", "8");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_START, 0)", "4");
conformance2/buffers/bound-buffer-size-change-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance2/buffers/bound-buffer-size-change-test.html:var buffer4 = gl.createBuffer();
conformance2/buffers/bound-buffer-size-change-test.html:var offset = gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT);
conformance2/buffers/bound-buffer-size-change-test.html:gl.bindBufferRange(gl.UNIFORM_BUFFER, 1, buffer4, offset, 12);
conformance2/buffers/bound-buffer-size-change-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getParameter(gl.UNIFORM_BUFFER_BINDING)", "buffer4");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1)", "buffer4");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_SIZE, 1)", "12");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_START, 1)", "offset");
conformance2/buffers/bound-buffer-size-change-test.html:gl.bufferData(gl.UNIFORM_BUFFER, offset + 8, gl.STATIC_DRAW);
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1)", "buffer4");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_SIZE, 1)", "12");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_START, 1)", "offset");
conformance2/buffers/bound-buffer-size-change-test.html:gl.bufferData(gl.UNIFORM_BUFFER, offset + 12, gl.STATIC_DRAW);
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1)", "buffer4");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_SIZE, 1)", "12");
conformance2/buffers/bound-buffer-size-change-test.html:shouldBe("gl.getIndexedParameter(gl.UNIFORM_BUFFER_START, 1)", "offset");
conformance2/buffers/bound-buffer-size-change-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
extra/out-of-bounds-uniform-array-access.html:  var lineWidthLoc = gl.getUniformLocation(program, "lineWidth");
extra/out-of-bounds-uniform-array-access.html:  var elemMultLoc = gl.getUniformLocation(program, "elemMult");
extra/out-of-bounds-uniform-array-access.html:  assertMsg(gl.getError() == gl.NO_ERROR, "Should be no errors from setup.");
extra/out-of-bounds-uniform-array-access.html:    gl.uniform1f(lineWidthLoc, lineWidth);
extra/out-of-bounds-uniform-array-access.html:    gl.uniform1i(elemMultLoc, elemMult);
extra/out-of-bounds-uniform-array-access.html:    gl.drawElements(gl.TRIANGLES, gridRes * gridRes * 6, gl.UNSIGNED_SHORT, 0);
conformance2/transform_feedback/two-unreferenced-varyings.html:    quadVB = gl.createBuffer()
conformance2/transform_feedback/two-unreferenced-varyings.html:  gl.bindBuffer(gl.ARRAY_BUFFER, quadVB);
conformance2/transform_feedback/two-unreferenced-varyings.html:  gl.bufferData(gl.ARRAY_BUFFER, quadVerts, gl.STATIC_DRAW);
conformance2/transform_feedback/two-unreferenced-varyings.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, gl.FALSE, 0, 0);
conformance2/transform_feedback/two-unreferenced-varyings.html:  gl.enableVertexAttribArray(0);
conformance2/transform_feedback/two-unreferenced-varyings.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance2/transform_feedback/two-unreferenced-varyings.html:        ["outAttrib1", "outAttrib2"], gl.INTERLEAVED_ATTRIBS,
conformance2/transform_feedback/two-unreferenced-varyings.html:    var out_buffer = gl.createBuffer();
conformance2/transform_feedback/two-unreferenced-varyings.html:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, out_buffer);
conformance2/transform_feedback/two-unreferenced-varyings.html:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, Float32Array.BYTES_PER_ELEMENT * 3 * 2 * 6,
conformance2/transform_feedback/two-unreferenced-varyings.html:                  gl.STREAM_DRAW);
conformance2/transform_feedback/two-unreferenced-varyings.html:    var tf = gl.createTransformFeedback();
conformance2/transform_feedback/two-unreferenced-varyings.html:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
conformance2/transform_feedback/two-unreferenced-varyings.html:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, out_buffer);
conformance2/transform_feedback/two-unreferenced-varyings.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Init transform feedback should succeed");
conformance2/transform_feedback/two-unreferenced-varyings.html:    gl.useProgram(program)
conformance2/transform_feedback/two-unreferenced-varyings.html:    gl.beginTransformFeedback(gl.TRIANGLES);
conformance2/transform_feedback/two-unreferenced-varyings.html:    gl.endTransformFeedback();
conformance2/transform_feedback/two-unreferenced-varyings.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Draw with transform feedback should succeed");
conformance2/transform_feedback/two-unreferenced-varyings.html:    wtu.checkFloatBuffer(gl, gl.TRANSFORM_FEEDBACK_BUFFER, expected_data);
conformance2/buffers/buffer-overflow-test.html:var buffer1 = gl.createBuffer();
conformance2/buffers/buffer-overflow-test.html:gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer1, 0, 4);
conformance2/buffers/buffer-overflow-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-overflow-test.html:shouldBe("buffer1", "gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0)");
conformance2/buffers/buffer-overflow-test.html:shouldBe("4", "gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, 0)");
conformance2/buffers/buffer-overflow-test.html:shouldBe("0", "gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_START, 0)");
conformance2/buffers/buffer-overflow-test.html:var buffer2 = gl.createBuffer();
conformance2/buffers/buffer-overflow-test.html:gl.bindBuffer(gl.UNIFORM_BUFFER, buffer2);
conformance2/buffers/buffer-overflow-test.html:gl.bufferData(gl.UNIFORM_BUFFER, 4, gl.STATIC_DRAW);
conformance2/buffers/buffer-overflow-test.html:gl.bindBufferRange(gl.UNIFORM_BUFFER, 1, buffer2, 0, 8);
conformance2/buffers/buffer-overflow-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/buffers/buffer-overflow-test.html:shouldBe("buffer2", "gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1)");
conformance2/buffers/buffer-overflow-test.html:shouldBe("8", "gl.getIndexedParameter(gl.UNIFORM_BUFFER_SIZE, 1)");
conformance2/buffers/buffer-overflow-test.html:shouldBe("0", "gl.getIndexedParameter(gl.UNIFORM_BUFFER_START, 1)");
conformance/glsl/samplers/glsl-function-texture2d-bias.html:var tex = gl.createTexture();
conformance/glsl/samplers/glsl-function-texture2d-bias.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/glsl/samplers/glsl-function-texture2d-bias.html:gl.texParameteri(
conformance/glsl/samplers/glsl-function-texture2d-bias.html:    gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
conformance/glsl/samplers/glsl-function-texture2d-bias.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/glsl/samplers/glsl-function-texture2d-bias.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/glsl/samplers/glsl-function-texture2d-bias.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/glsl/samplers/glsl-function-texture2d-bias.html:var loc = gl.getUniformLocation(program, "bias");
conformance/glsl/samplers/glsl-function-texture2d-bias.html:  gl.uniform1f(loc, ii);
conformance/glsl/samplers/glsl-function-texture2d-bias.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance2/sync/sync-webgl-specific.html:  shouldBe("gl.TIMEOUT_IGNORED", "-1");
conformance2/sync/sync-webgl-specific.html:  shouldBe("gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL", "0x9247");
conformance2/sync/sync-webgl-specific.html:  var max = gl.getParameter(gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL);
conformance2/sync/sync-webgl-specific.html:  debug("Querying gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL");
conformance2/sync/sync-webgl-specific.html:  shouldBe("gl.getError()", "gl.NO_ERROR");
conformance2/sync/sync-webgl-specific.html:  debug("gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL returns " + max + "ns");
conformance2/sync/sync-webgl-specific.html:    testFailed("gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL < 0");
conformance2/sync/sync-webgl-specific.html:    testFailed("gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL should not exceed 1000ms");
conformance2/sync/sync-webgl-specific.html:    testPassed("gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL returns a valid value");
conformance2/sync/sync-webgl-specific.html:  sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
conformance2/sync/sync-webgl-specific.html:  shouldBe("gl.getError()", "gl.NO_ERROR");
conformance2/sync/sync-webgl-specific.html:  gl.clientWaitSync(sync, 0, max);
conformance2/sync/sync-webgl-specific.html:  shouldBe("gl.getError()", "gl.NO_ERROR");
conformance2/sync/sync-webgl-specific.html:  gl.clientWaitSync(sync, 0, max + 1);
conformance2/sync/sync-webgl-specific.html:  shouldBe("gl.getError()", "gl.INVALID_OPERATION");
conformance/glsl/samplers/glsl-function-texture2dlod.html:if (gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0) {
conformance/glsl/samplers/glsl-function-texture2dlod.html:  var tex = gl.createTexture();
conformance/glsl/samplers/glsl-function-texture2dlod.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/glsl/samplers/glsl-function-texture2dlod.html:  gl.texParameteri(
conformance/glsl/samplers/glsl-function-texture2dlod.html:      gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);
conformance/glsl/samplers/glsl-function-texture2dlod.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/glsl/samplers/glsl-function-texture2dlod.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/glsl/samplers/glsl-function-texture2dlod.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/glsl/samplers/glsl-function-texture2dlod.html:  var loc = gl.getUniformLocation(program, "lod");
conformance/glsl/samplers/glsl-function-texture2dlod.html:    gl.uniform1f(loc, ii);
conformance/glsl/samplers/glsl-function-texture2dlod.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:if (gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0) {
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:    var tex = gl.createTexture();
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:    gl.texParameteri(
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:        gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:      gl.texImage2D(gl.TEXTURE_2D, ii, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:    var lodLoc = gl.getUniformLocation(program, "lod");
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:    var divLoc = gl.getUniformLocation(program, "divisor");
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:        gl.uniform1f(lodLoc, ii);
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:        gl.uniform1f(divLoc, div);
conformance/glsl/samplers/glsl-function-texture2dprojlod.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
extra/texture-allocation-stress-test.html:    var tex = gl.createTexture();
extra/texture-allocation-stress-test.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
extra/texture-allocation-stress-test.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/glsl/samplers/glsl-function-texture2dproj.html:var tex = gl.createTexture();
conformance/glsl/samplers/glsl-function-texture2dproj.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/glsl/samplers/glsl-function-texture2dproj.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/glsl/samplers/glsl-function-texture2dproj.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/glsl/samplers/glsl-function-texture2dproj.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/glsl/samplers/glsl-function-texture2dproj.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/glsl/samplers/glsl-function-texture2dproj.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/glsl/samplers/glsl-function-texture2dproj.html:  gl.useProgram(program);
conformance/glsl/samplers/glsl-function-texture2dproj.html:  var loc = gl.getUniformLocation(program, "divisor");
conformance/glsl/samplers/glsl-function-texture2dproj.html:    gl.uniform1f(loc, 1 / denominator);
conformance/glsl/samplers/glsl-function-texture2dproj.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance2/programs/gl-get-frag-data-location.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL error from set up");
conformance2/programs/gl-get-frag-data-location.html:  var loc0 = gl.getFragDataLocation(program, "fragColor0");
conformance2/programs/gl-get-frag-data-location.html:  var loc1 = gl.getFragDataLocation(program, "fragColor1");
conformance2/programs/gl-get-frag-data-location.html:  var loc = gl.getFragDataLocation(programArray, "fragColor");
conformance2/programs/gl-get-frag-data-location.html:  loc0 = gl.getFragDataLocation(programArray, "fragColor[0]");
conformance2/programs/gl-get-frag-data-location.html:  loc1 = gl.getFragDataLocation(programArray, "fragColor[1]");
conformance2/programs/gl-get-frag-data-location.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL error from testing");
conformance2/vertex_arrays/vertex-array-object.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/vertex_arrays/vertex-array-object.html:    shouldBe("gl.VERTEX_ARRAY_BINDING", "0x85B5");
conformance2/vertex_arrays/vertex-array-object.html:    gl.getParameter(gl.VERTEX_ARRAY_BINDING);
conformance2/vertex_arrays/vertex-array-object.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "VERTEX_ARRAY_BINDING query should succeed");
conformance2/vertex_arrays/vertex-array-object.html:    if (gl.getParameter(gl.VERTEX_ARRAY_BINDING) === null) {
conformance2/vertex_arrays/vertex-array-object.html:    var vao0 = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:    var vao1 = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:    shouldBeNull("gl.getParameter(gl.VERTEX_ARRAY_BINDING)");
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao0);
conformance2/vertex_arrays/vertex-array-object.html:    if (gl.getParameter(gl.VERTEX_ARRAY_BINDING) == vao0) {
conformance2/vertex_arrays/vertex-array-object.html:        testPassed("gl.getParameter(gl.VERTEX_ARRAY_BINDING) is expected VAO");
conformance2/vertex_arrays/vertex-array-object.html:        testFailed("gl.getParameter(gl.VERTEX_ARRAY_BINDING) is not expected VAO")
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao1);
conformance2/vertex_arrays/vertex-array-object.html:    if (gl.getParameter(gl.VERTEX_ARRAY_BINDING) == vao1) {
conformance2/vertex_arrays/vertex-array-object.html:        testPassed("gl.getParameter(gl.VERTEX_ARRAY_BINDING) is expected VAO");
conformance2/vertex_arrays/vertex-array-object.html:        testFailed("gl.getParameter(gl.VERTEX_ARRAY_BINDING) is not expected VAO")
conformance2/vertex_arrays/vertex-array-object.html:    gl.deleteVertexArray(vao1);
conformance2/vertex_arrays/vertex-array-object.html:    shouldBeNull("gl.getParameter(gl.VERTEX_ARRAY_BINDING)");
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao1);
conformance2/vertex_arrays/vertex-array-object.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "binding a deleted vertex array object");
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    shouldBeNull("gl.getParameter(gl.VERTEX_ARRAY_BINDING)");
conformance2/vertex_arrays/vertex-array-object.html:    gl.deleteVertexArray(vao1);
conformance2/vertex_arrays/vertex-array-object.html:    vao = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "createVertexArray should not set an error");
conformance2/vertex_arrays/vertex-array-object.html:    shouldBeFalse("gl.isVertexArray(vao)");
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao);
conformance2/vertex_arrays/vertex-array-object.html:    shouldBeTrue("gl.isVertexArray(vao)");
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    shouldBeTrue("gl.isVertexArray(vao)");
conformance2/vertex_arrays/vertex-array-object.html:    shouldBeFalse("gl.isVertexArray(null)");
conformance2/vertex_arrays/vertex-array-object.html:    gl.deleteVertexArray(vao);
conformance2/vertex_arrays/vertex-array-object.html:    var attrCount = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
conformance2/vertex_arrays/vertex-array-object.html:        gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance2/vertex_arrays/vertex-array-object.html:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance2/vertex_arrays/vertex-array-object.html:        var vao = state.vao = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:        gl.bindVertexArray(vao);
conformance2/vertex_arrays/vertex-array-object.html:            gl.enableVertexAttribArray(n);
conformance2/vertex_arrays/vertex-array-object.html:            gl.disableVertexAttribArray(n);
conformance2/vertex_arrays/vertex-array-object.html:            var buffer = state.buffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance2/vertex_arrays/vertex-array-object.html:            gl.bufferData(gl.ARRAY_BUFFER, 1024, gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:            gl.vertexAttribPointer(n, 1 + n % 4, gl.FLOAT, true, n * 4, n * 4);
conformance2/vertex_arrays/vertex-array-object.html:            var elbuffer = state.elbuffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elbuffer);
conformance2/vertex_arrays/vertex-array-object.html:            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, 1024, gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:        gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:        gl.bindVertexArray(state.vao);
conformance2/vertex_arrays/vertex-array-object.html:        var isEnabled = gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_ENABLED);
conformance2/vertex_arrays/vertex-array-object.html:        var buffer = gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
conformance2/vertex_arrays/vertex-array-object.html:                if ((gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_SIZE) == 1 + n % 4) &&
conformance2/vertex_arrays/vertex-array-object.html:                    (gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_TYPE) == gl.FLOAT) &&
conformance2/vertex_arrays/vertex-array-object.html:                    (gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED) == true) &&
conformance2/vertex_arrays/vertex-array-object.html:                    (gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_STRIDE) == n * 4) &&
conformance2/vertex_arrays/vertex-array-object.html:                    (gl.getVertexAttribOffset(n, gl.VERTEX_ATTRIB_ARRAY_POINTER) == n * 4)) {
conformance2/vertex_arrays/vertex-array-object.html:        var elbuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:        gl.deleteVertexArray(state.vao);
conformance2/vertex_arrays/vertex-array-object.html:    var vao0 = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttrib4f(0, 0, 1, 2, 3);
conformance2/vertex_arrays/vertex-array-object.html:    v = gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao0);
conformance2/vertex_arrays/vertex-array-object.html:    v = gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttrib4f(0, 4, 5, 6, 7);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    v = gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    gl.deleteVertexArray(vao0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance2/vertex_arrays/vertex-array-object.html:    var vao0 = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:    var vao1 = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:        var vertexObject = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:        gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/vertex_arrays/vertex-array-object.html:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance2/vertex_arrays/vertex-array-object.html:             1.0 * s, -1.0 * s, 0.0]), gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:        gl.enableVertexAttribArray(opt_positionLocation);
conformance2/vertex_arrays/vertex-array-object.html:        gl.vertexAttribPointer(opt_positionLocation, 3, gl.FLOAT, false, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:        var vertexObject = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:        gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance2/vertex_arrays/vertex-array-object.html:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance2/vertex_arrays/vertex-array-object.html:            1.0 * s, 0.0 * s]), gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:        gl.enableVertexAttribArray(opt_texcoordLocation);
conformance2/vertex_arrays/vertex-array-object.html:        gl.vertexAttribPointer(opt_texcoordLocation, 2, gl.FLOAT, false, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao1);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao1);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    gl.deleteVertexArray(vao0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.deleteVertexArray(vao1);
conformance2/vertex_arrays/vertex-array-object.html:    gl.disableVertexAttribArray(opt_positionLocation);
conformance2/vertex_arrays/vertex-array-object.html:    gl.disableVertexAttribArray(opt_texcoordLocation);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttrib4f(colorLoc, 1, 0, 0, 1);
conformance2/vertex_arrays/vertex-array-object.html:    var vao0 = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttrib4f(colorLoc, 0, 1, 0, 1);
conformance2/vertex_arrays/vertex-array-object.html:    gl.deleteVertexArray(vao0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.useProgram(program);
conformance2/vertex_arrays/vertex-array-object.html:    var positionBuffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bufferData(
conformance2/vertex_arrays/vertex-array-object.html:        gl.ARRAY_BUFFER,
conformance2/vertex_arrays/vertex-array-object.html:        gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:      var vao = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:      gl.bindVertexArray(vao);
conformance2/vertex_arrays/vertex-array-object.html:      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance2/vertex_arrays/vertex-array-object.html:      gl.enableVertexAttribArray(0);
conformance2/vertex_arrays/vertex-array-object.html:      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:      var elementBuffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance2/vertex_arrays/vertex-array-object.html:      gl.bufferData(
conformance2/vertex_arrays/vertex-array-object.html:          gl.ELEMENT_ARRAY_BUFFER,
conformance2/vertex_arrays/vertex-array-object.html:          gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:        var colorBuffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance2/vertex_arrays/vertex-array-object.html:        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(
conformance2/vertex_arrays/vertex-array-object.html:          ]), gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:        gl.enableVertexAttribArray(1);
conformance2/vertex_arrays/vertex-array-object.html:        gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, true, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:        gl.vertexAttrib4f(1, color[0] / 255, color[1] / 255, color[2] / 255, color[3] / 255);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:      gl.deleteBuffer(colorBuffers[ii]);
conformance2/vertex_arrays/vertex-array-object.html:      gl.deleteBuffer(elementBuffers[ii]);
conformance2/vertex_arrays/vertex-array-object.html:      gl.bindVertexArray(vaos[ii]);
conformance2/vertex_arrays/vertex-array-object.html:      var boundBuffer = gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    gl.deleteBuffer(positionBuffer);
conformance2/vertex_arrays/vertex-array-object.html:      gl.bindVertexArray(vaos[ii]);
conformance2/vertex_arrays/vertex-array-object.html:      gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
conformance2/vertex_arrays/vertex-array-object.html:      gl.deleteVertexArray(vaos[ii]);
conformance2/vertex_arrays/vertex-array-object.html:      if(gl.isBuffer(colorBuffers[ii])) {
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    gl.useProgram(program);
conformance2/vertex_arrays/vertex-array-object.html:    var elementBuffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bufferData(
conformance2/vertex_arrays/vertex-array-object.html:        gl.ELEMENT_ARRAY_BUFFER,
conformance2/vertex_arrays/vertex-array-object.html:        gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:    var nonVAOColorBuffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, nonVAOColorBuffer);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(
conformance2/vertex_arrays/vertex-array-object.html:      ]), gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:    var positionBuffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bufferData(
conformance2/vertex_arrays/vertex-array-object.html:        gl.ARRAY_BUFFER,
conformance2/vertex_arrays/vertex-array-object.html:        gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:    gl.enableVertexAttribArray(1);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:    var vao = gl.createVertexArray();
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(vao);
conformance2/vertex_arrays/vertex-array-object.html:    gl.enableVertexAttribArray(1);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:    var vaoColorBuffer = gl.createBuffer();
conformance2/vertex_arrays/vertex-array-object.html:    gl.enableVertexAttribArray(0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttribPointer(0, 4, gl.UNSIGNED_BYTE, true, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vaoColorBuffer);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(
conformance2/vertex_arrays/vertex-array-object.html:      ]), gl.STATIC_DRAW);
conformance2/vertex_arrays/vertex-array-object.html:    gl.enableVertexAttribArray(0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttribPointer(0, 4, gl.UNSIGNED_BYTE, true, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, nonVAOColorBuffer);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance2/vertex_arrays/vertex-array-object.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.bindVertexArray(null);
conformance2/vertex_arrays/vertex-array-object.html:    gl.enableVertexAttribArray(0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.vertexAttribPointer(0, 4, gl.UNSIGNED_BYTE, true, 0, 0);
conformance2/vertex_arrays/vertex-array-object.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.disable(gl.DEPTH_TEST);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.disable(gl.BLEND);
conformance2/textures/misc/tex-srgb-mipmap.html:    var texLoc = gl.getUniformLocation(program, "tex");
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.uniform1i(texLoc, 0);
conformance2/textures/misc/tex-srgb-mipmap.html:    var multLoc = gl.getUniformLocation(program, "uMult");
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.viewport(0, 0, width, height);
conformance2/textures/misc/tex-srgb-mipmap.html:    var srgbTex = gl.createTexture();
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.bindTexture(gl.TEXTURE_2D, srgbTex);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.uniform4f(multLoc, 1, 1, 1, 1);
conformance2/textures/misc/tex-srgb-mipmap.html:    wtu.fillTexture(gl, srgbTex, width, height, colors['srgba'], 0, gl.RGBA, gl.UNSIGNED_BYTE, gl.SRGB8_ALPHA8);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, redWidth, redHeight, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);
conformance2/textures/misc/tex-srgb-mipmap.html:    var linearTex = gl.createTexture();
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.bindTexture(gl.TEXTURE_2D, linearTex);
conformance2/textures/misc/tex-srgb-mipmap.html:    wtu.fillTexture(gl, linearTex, width, height, wtu.sRGBToLinear(colors['srgba']), 0, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, redWidth, redHeight, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.viewport(0, 0, width, height);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.bindTexture(gl.TEXTURE_2D, srgbTex);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, result);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.bindTexture(gl.TEXTURE_2D, linearTex);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, reference);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.deleteTexture(srgbTex);
conformance2/textures/misc/tex-srgb-mipmap.html:    gl.deleteTexture(linearTex);
conformance2/state/gl-getstring.html:<title>WebGL gl.getParameter Strings Conformance Tests</title>
conformance2/state/gl-getstring.html:  shouldBeNonNull("gl.getParameter(gl.VENDOR)");
conformance2/state/gl-getstring.html:  shouldBeNonNull("gl.getParameter(gl.RENDERER)");
conformance2/state/gl-getstring.html:  shouldBe("gl.getError()", "gl.NO_ERROR");
conformance2/state/gl-getstring.html:  var s = gl.getParameter(gl[enum_val]);
conformance2/state/gl-getstring.html:    testPassed("getParameter(gl." + enum_val + ") correctly started with " + expected);
conformance2/state/gl-getstring.html:    testFailed("getParameter(gl." + enum_val + ") did not start with " + expected);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  var texture = gl.createTexture();
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl[test.internalformat], width, height, 0,
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "srcOffset too large");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl[test.internalformat], width, height, 0,
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage2D succeeds with correct buffer and srcOffset");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, readBuf);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl[test.internalformat], width, height, 0,
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl[test.format], gl[test.type],
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "srcOffset too large");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl[test.format], gl[test.type],
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D succeeds with correct buffer and srcOffset");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, readBuf);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.deleteTexture(texture);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.deleteProgram(program);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  var texture = gl.createTexture();
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.bindTexture(gl.TEXTURE_3D, texture);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texImage3D(gl.TEXTURE_3D, 0, gl[test.internalformat], width, height, depth, 0,
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "srcOffset too large");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texImage3D(gl.TEXTURE_3D, 0, gl[test.internalformat], width, height, depth, 0,
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D succeeds with correct buffer and srcOffset");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, readBuf);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texImage3D(gl.TEXTURE_3D, 0, gl[test.internalformat], width, height, depth, 0,
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, width, height, depth, gl[test.format], gl[test.type],
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "srcOffset too large");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, width, height, depth, gl[test.format], gl[test.type],
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage3D succeeds with correct buffer and srcOffset");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, readBuf);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error");
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.deleteTexture(texture);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:  gl.deleteProgram(program);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:    run2DTest(gl, testCases[idx], gl.drawingBufferWidth, gl.drawingBufferHeight, srcOffset, tol);
conformance2/textures/misc/tex-image-and-sub-image-with-array-buffer-view-sub-source.html:    run3DTest(gl, testCases[idx], gl.drawingBufferWidth, gl.drawingBufferHeight, srcOffset, tol);
conformance2/textures/misc/tex-mipmap-levels.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance2/textures/misc/tex-mipmap-levels.html:  var tex = gl.createTexture();
conformance2/textures/misc/tex-mipmap-levels.html:  gl.disable(gl.DEPTH_TEST);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.disable(gl.BLEND);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.uniform1i(gl.getUniformLocation(program, "tex"), 0);
conformance2/textures/misc/tex-mipmap-levels.html:  var multLoc = gl.getUniformLocation(program, "uMult");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.uniform4f(multLoc, 1, 1, 1, 1);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.fillTexture(gl, tex, 8, 8, [255, 0, 0, 255], 2, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "fillTexture(8x8, level=2) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.fillTexture(gl, tex, 4, 4, [0, 255, 0, 255], 3, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "fillTexture(4x4, level=3) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.fillTexture(gl, tex, 2, 2, [0, 0, 255, 255], 4, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "fillTexture(2x2, level=4) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL, 2);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_BASE_LEVEL) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL, 4);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_MAX_LEVEL) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_MAG_FILTER) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_MIN_FILTER) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clearAndDrawQuad should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "generateMipmap should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.deleteTexture(tex);
conformance2/textures/misc/tex-mipmap-levels.html:  tex = gl.createTexture();
conformance2/textures/misc/tex-mipmap-levels.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.fillTexture(gl, tex, 8, 8, [255, 0, 0, 255], 2, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "fillTexture(8x8, level=2) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.fillTexture(gl, tex, 4, 4, [255, 0, 0, 255], 3, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "fillTexture(4x4, level=3) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL, 2);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_BASE_LEVEL) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL, 4);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_MAX_LEVEL) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clearAndDrawQuad should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.deleteTexture(tex);
conformance2/textures/misc/tex-mipmap-levels.html:  tex = gl.createTexture();
conformance2/textures/misc/tex-mipmap-levels.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.fillTexture(gl, tex, 8, 8, [255, 0, 0, 255], 2, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "fillTexture(8x8, level=2) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.fillTexture(gl, tex, 4, 4, [255, 0, 0, 255], 3, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "fillTexture(4x4, level=3) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.fillTexture(gl, tex, 2, 2, [0, 0, 255, 255], 4, gl.RGBA, gl.UNSIGNED_BYTE);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "fillTexture(2x2, level=4) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL, 1);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_BASE_LEVEL) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "generateMipmap should fail if base level texture is not specified");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL, 2);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "generateMipmap should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.deleteTexture(tex);
conformance2/textures/misc/tex-mipmap-levels.html:  var tex3d = gl.createTexture();
conformance2/textures/misc/tex-mipmap-levels.html:  gl.bindTexture(gl.TEXTURE_3D, tex3d);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texImage3D( gl.TEXTURE_3D, 0, gl.RGBA, 8, 8, 8, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(8 * 8 * 8 * 4));
conformance2/textures/misc/tex-mipmap-levels.html:  gl.generateMipmap(gl.TEXTURE_3D);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "generateMipmap should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texSubImage3D(gl.TEXTURE_3D, 1, 0, 0, 0, 4, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4 * 4 * 4 * 4));
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage3D should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.deleteTexture(tex3d);
conformance2/textures/misc/tex-mipmap-levels.html:  var tex2dArray = gl.createTexture();
conformance2/textures/misc/tex-mipmap-levels.html:  gl.bindTexture(gl.TEXTURE_2D_ARRAY, tex2dArray);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texImage3D( gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 8, 8, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(8 * 8 * 4 * 4));
conformance2/textures/misc/tex-mipmap-levels.html:  gl.generateMipmap(gl.TEXTURE_2D_ARRAY);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "generateMipmap should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 1, 0, 0, 0, 4, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4 * 4 * 4 * 4));
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage3D should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.deleteTexture(tex2dArray);
conformance2/textures/misc/tex-mipmap-levels.html:  tex = gl.createTexture();
conformance2/textures/misc/tex-mipmap-levels.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, [gl.NO_ERROR, gl.INVALID_OPERATION],
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 8, 8, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(8 * 8 * 4));
conformance2/textures/misc/tex-mipmap-levels.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "generateMipmap should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8UI, 8, 8, 0, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE, new Uint8Array(8 * 8 * 4));
conformance2/textures/misc/tex-mipmap-levels.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "generateMipmap should fail for non-texture-filterable format");
conformance2/textures/misc/tex-mipmap-levels.html:  if (gl.getExtension('EXT_color_buffer_float')) {
conformance2/textures/misc/tex-mipmap-levels.html:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 8, 8, 0, gl.RGBA, gl.FLOAT, new Float32Array(8 * 8 * 4));
conformance2/textures/misc/tex-mipmap-levels.html:      gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:      wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "generateMipmap should fail for float texture");
conformance2/textures/misc/tex-mipmap-levels.html:  if (gl.getExtension('EXT_color_buffer_float') && gl.getExtension('OES_texture_float_linear')) {
conformance2/textures/misc/tex-mipmap-levels.html:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 0, 0, 0, gl.RGBA, gl.FLOAT, null);
conformance2/textures/misc/tex-mipmap-levels.html:      gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:      wtu.glErrorShouldBe(gl, [gl.NO_ERROR, gl.INVALID_OPERATION],
conformance2/textures/misc/tex-mipmap-levels.html:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 8, 8, 0, gl.RGBA, gl.FLOAT, new Float32Array(8 * 8 * 4));
conformance2/textures/misc/tex-mipmap-levels.html:      gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/tex-mipmap-levels.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "generateMipmap should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.deleteTexture(tex);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.uniform1i(gl.getUniformLocation(program, "tex"), 0);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.uniform1i(gl.getUniformLocation(program, "lod"), 1);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.uniform2i(gl.getUniformLocation(program, "texSize"), 7, 4);
conformance2/textures/misc/tex-mipmap-levels.html:  tex = gl.createTexture();
conformance2/textures/misc/tex-mipmap-levels.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_MAG_FILTER) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_MIN_FILTER) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL, 1);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameter(TEXTURE_BASE_LEVEL) should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.texStorage2D(gl.TEXTURE_2D, 4, gl.RGBA8, 31, 17);
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texStorage2D should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "clearAndDrawQuad should succeed");
conformance2/textures/misc/tex-mipmap-levels.html:  gl.deleteTexture(tex);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    var texture = gl.createTexture();
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:        gl.texImage2D(face + gl.TEXTURE_CUBE_MAP_POSITIVE_X, level, gl.RG8I, levelSize, levelSize, 0, gl.RG_INTEGER, gl.BYTE, new Int8Array(backingBuffer));
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    var regularLocation = gl.getUniformLocation(sampleProgram, "texRegular");
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    var weirdLocation = gl.getUniformLocation(sampleProgram, "texWeird");
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    wtu.setupQuad(gl, gl.getAttribLocation(sampleProgram, "a_position"));
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.clearColor(0.0, 0.0, 0.0, 0.0);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.activeTexture(gl.TEXTURE0);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, regularTex);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.activeTexture(gl.TEXTURE0 + 1);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, weirdTex);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.uniform1i(regularLocation, 0);
conformance2/textures/misc/integer-cubemap-specification-order-bug.html:    gl.uniform1i(weirdLocation, 1);
conformance/state/gl-enable-enum-test.html:<title>WebGL gl.ENABLE enums Conformance Tests</title>
conformance/state/gl-enable-enum-test.html:  debug("Checking gl.ENABLE enums.");
conformance/state/gl-enable-enum-test.html:    gl.enable(desktopGL[name]);
conformance/state/gl-enable-enum-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/state/gl-enable-enum-test.html:              "gl.enable must set INVALID_ENUM when passed GL_" + name );
conformance/state/gl-enable-enum-test.html:    gl.enable(gl[name]);
conformance/state/gl-enable-enum-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/state/gl-enable-enum-test.html:              "gl.enable must succeed when passed gl." + name );
conformance/state/gl-enable-enum-test.html:        shouldBe('gl.isEnabled(gl.' + name + ')', 'true');
conformance/state/gl-enable-enum-test.html:        gl.disable(gl[name]);
conformance/state/gl-enable-enum-test.html:        shouldBe('gl.isEnabled(gl.' + name + ')', 'false');
conformance/state/gl-enable-enum-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    var texture = gl.createTexture();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_3D, texture);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, width, height, depth, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    var fbo = gl.createFramebuffer();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, texture, 0, layer);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, layer, 0, 0, width, height);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "gl.INVALID_OPERATION is generated");
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteFramebuffer(fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteTexture(texture);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    var texture = gl.createTexture();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_3D, texture);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, width, height, depth, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.generateMipmap(gl.TEXTURE_3D);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    var fbo = gl.createFramebuffer();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, texture, level1, 0);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.copyTexSubImage3D(gl.TEXTURE_3D, level2, 0, 0, 0, 0, 0, width/2, height/2);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D should succeed.");
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteFramebuffer(fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteTexture(texture);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    var texture = gl.createTexture();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_3D, texture);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, width, height, depth, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    var fbo = gl.createFramebuffer();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, texture, 0, layer1);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, layer2, 0, 0, width, height);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D should succeed.");
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteFramebuffer(fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteTexture(texture);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    texture[0] = gl.createTexture();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    texture[1] = gl.createTexture();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_2D, texture[0]);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    var fbo = gl.createFramebuffer();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[0], 0);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.bindTexture(gl.TEXTURE_3D, texture[1]);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.texStorage3D(gl.TEXTURE_3D, 1, gl.RGBA8, width, height, depth);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, layer, 0, 0, width, height);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, texture[1], 0, layer);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, bytes);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readpixel should succeed.");
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_3D, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteFramebuffer(fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteTexture(texture[0]);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteTexture(texture[1]);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    texture[0] = gl.createTexture();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    texture[1] = gl.createTexture();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    var fbo = gl.createFramebuffer();
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_2D, texture[0]);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[0], 0);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.bindTexture(gl.TEXTURE_3D, texture[1]);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, width2, height2, depth, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint2);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, xoffset, yoffset, layer, xx, yy, copyWidth, copyHeight);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "using copyTexSubImage3D: x = " + xx + ", y = " + yy + " width = " + copyWidth + ", height = " + copyHeight);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, texture[1], 0, layer);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        gl.readPixels(0, 0, width2, height2, gl.RGBA, gl.UNSIGNED_BYTE, bytes);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readpixel should succeed.");
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindTexture(gl.TEXTURE_3D, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteFramebuffer(fbo);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteTexture(texture[0]);
conformance2/textures/misc/copy-texture-image-webgl-specific.html:    gl.deleteTexture(texture[1]);
conformance/state/gl-geterror.html:var tex = gl.createTexture();
conformance/state/gl-geterror.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/state/gl-geterror.html:gl.enable(desktopGL.ALPHA_TEST);
conformance/state/gl-geterror.html:wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "should generate INVALID_ENUM");
conformance/state/gl-geterror.html:gl.viewport(-1, -1, -1, -1);
conformance/state/gl-geterror.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "should generate INVALID_VALUE");
conformance/state/gl-geterror.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/state/gl-geterror.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "should generate INVALID_OPERATION");
conformance/state/gl-geterror.html:gl.viewport(-1, -1, -1, -1);
conformance/state/gl-geterror.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/state/gl-geterror.html:gl.enable(desktopGL.ALPHA_TEST);
conformance/state/gl-geterror.html:gl.viewport(-1, -1, -1, -1);
conformance/state/gl-geterror.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/state/gl-geterror.html:gl.enable(desktopGL.ALPHA_TEST);
conformance/state/gl-geterror.html:var err1 = gl.getError();
conformance/state/gl-geterror.html:var err2 = gl.getError();
conformance/state/gl-geterror.html:var err3 = gl.getError();
conformance/state/gl-geterror.html:var err4 = gl.getError();
conformance/state/gl-geterror.html:var err5 = gl.getError();
conformance/state/gl-geterror.html:var err6 = gl.getError();
conformance/state/gl-geterror.html:if (err2 == gl.NO_ERROR) {
conformance/state/gl-geterror.html:  shouldBeTrue('err1 == gl.INVALID_VALUE && err2 == gl.NO_ERROR && err3 == gl.NO_ERROR');
conformance/state/gl-geterror.html:  shouldBeTrue('err1 == gl.INVALID_VALUE || ' +
conformance/state/gl-geterror.html:               'err2 == gl.INVALID_VALUE || ' +
conformance/state/gl-geterror.html:               'err3 == gl.INVALID_VALUE || ' +
conformance/state/gl-geterror.html:               'err4 == gl.INVALID_VALUE || ' +
conformance/state/gl-geterror.html:               'err5 == gl.INVALID_VALUE || ' +
conformance/state/gl-geterror.html:               'err6 == gl.INVALID_VALUE');
conformance/state/gl-geterror.html:  shouldBeTrue('gl.getError() == gl.NO_ERROR');
conformance/state/gl-getstring.html:<title>WebGL gl.getParameter Strings Conformance Tests</title>
conformance/state/gl-getstring.html:  shouldBeNonNull("gl.getParameter(gl.VENDOR)");
conformance/state/gl-getstring.html:  shouldBeNonNull("gl.getParameter(gl.RENDERER)");
conformance/state/gl-getstring.html:  shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/state/gl-getstring.html:  var s = gl.getParameter(gl[enum_val]);
conformance/state/gl-getstring.html:    testPassed("getParameter(gl." + enum_val + ") correctly started with " + expected);
conformance/state/gl-getstring.html:    testFailed("getParameter(gl." + enum_val + ") did not start with " + expected);
conformance/glsl/bugs/array-of-struct-with-int-first-position.html:    gl.viewport(startX, 0, squareSize, squareSize);
conformance2/textures/misc/tex-3d-size-limit.html:    var tex3d = gl.createTexture();
conformance2/textures/misc/tex-3d-size-limit.html:    gl.bindTexture(gl.TEXTURE_3D, tex3d);
conformance2/textures/misc/tex-3d-size-limit.html:    var maxTexSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);
conformance2/textures/misc/tex-3d-size-limit.html:    gl.texImage3D(gl.TEXTURE_3D,
conformance2/textures/misc/tex-3d-size-limit.html:                  gl.RGBA,                          // internalFormat
conformance2/textures/misc/tex-3d-size-limit.html:                  gl.RGBA,                          // format
conformance2/textures/misc/tex-3d-size-limit.html:                  gl.UNSIGNED_BYTE,                 // type
conformance2/textures/misc/tex-3d-size-limit.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/textures/misc/tex-3d-size-limit.html:    gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, maxTexSize + 1, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-3d-size-limit.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texImage3D(gl.TEXTURE_3D, level, gl.RGBA, size, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D should succeed.");
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texImage3D(gl.TEXTURE_3D, level, gl.RGBA, 1, size, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D should succeed.");
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texImage3D(gl.TEXTURE_3D, level, gl.RGBA, 1, 1, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D should succeed.");
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texImage3D(gl.TEXTURE_3D, level, gl.RGBA, badSize, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texImage3D should fail for dimension out of range.");
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texImage3D(gl.TEXTURE_3D, level, gl.RGBA, 2, badSize, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texImage3D should fail for dimension out of range.");
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texImage3D(gl.TEXTURE_3D, level, gl.RGBA, 2, 2, badSize, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texImage3D should fail for dimension out of range.");
conformance2/textures/misc/tex-3d-size-limit.html:    gl.deleteTexture(tex3d);
conformance2/textures/misc/tex-3d-size-limit.html:    var tex3d = gl.createTexture();
conformance2/textures/misc/tex-3d-size-limit.html:    gl.bindTexture(gl.TEXTURE_3D, tex3d);
conformance2/textures/misc/tex-3d-size-limit.html:            internalformat: gl.RGBA,
conformance2/textures/misc/tex-3d-size-limit.html:            format: gl.RGBA,
conformance2/textures/misc/tex-3d-size-limit.html:            type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/tex-3d-size-limit.html:            internalformat: gl.R8,
conformance2/textures/misc/tex-3d-size-limit.html:            format: gl.RED,
conformance2/textures/misc/tex-3d-size-limit.html:            type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/tex-3d-size-limit.html:            internalformat: gl.RGB565,
conformance2/textures/misc/tex-3d-size-limit.html:            format: gl.RGB,
conformance2/textures/misc/tex-3d-size-limit.html:            type: gl.UNSIGNED_SHORT_5_6_5,
conformance2/textures/misc/tex-3d-size-limit.html:            internalformat: gl.RGBA32I,
conformance2/textures/misc/tex-3d-size-limit.html:            format: gl.RGBA_INTEGER,
conformance2/textures/misc/tex-3d-size-limit.html:            type: gl.INT,
conformance2/textures/misc/tex-3d-size-limit.html:            internalformat: gl.RGBA32F,
conformance2/textures/misc/tex-3d-size-limit.html:            format: gl.RGBA,
conformance2/textures/misc/tex-3d-size-limit.html:            type: gl.FLOAT,
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texImage3D(gl.TEXTURE_3D, 0, test.internalformat, 256, 256, 256, 0, test.format, test.type, pixels);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "ArrayBufferView not big enough for request by texImage3D.");
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texImage3D(gl.TEXTURE_3D, 0, test.internalformat, 256, 256, 4, 0, test.format, test.type, pixels);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "ArrayBufferView big enough for request by texImage3D.");
conformance2/textures/misc/tex-3d-size-limit.html:        gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 256, 256, 2, test.format, test.type, pixels);
conformance2/textures/misc/tex-3d-size-limit.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "ArrayBufferView not big enough for request by texSubImage3D.");
conformance2/textures/misc/tex-3d-size-limit.html:    gl.deleteTexture(tex3d);
conformance2/textures/misc/mipmap-fbo.html:    var texture = gl.createTexture();
conformance2/textures/misc/mipmap-fbo.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/textures/misc/mipmap-fbo.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance2/textures/misc/mipmap-fbo.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
conformance2/textures/misc/mipmap-fbo.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/mipmap-fbo.html:    var fbo = gl.createFramebuffer();
conformance2/textures/misc/mipmap-fbo.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/mipmap-fbo.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 1);
conformance2/textures/misc/mipmap-fbo.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
conformance/glsl/bugs/loop-if-loop-gradient.html:gl.canvas.addEventListener("webglcontextlost", function(e) {
conformance/glsl/bugs/loop-if-loop-gradient.html:    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
conformance/glsl/bugs/loop-if-loop-gradient.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/textures/misc/tex-image-with-bad-args-from-dom-elements.html:    var tex = gl.createTexture();
conformance2/textures/misc/tex-image-with-bad-args-from-dom-elements.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-image-with-bad-args-from-dom-elements.html:    // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB10_A2, gl.RGBA, gl.UNSIGNED_INT_2_10_10_10_REV, domElement);
conformance2/textures/misc/tex-image-with-bad-args-from-dom-elements.html:    // wtu.glErrorShouldBe(gl, [gl.INVALID_VALUE, gl.INVALID_ENUM, gl.INVALID_OPERATION], "TexImage2D taking RGB10_A2/RGBA/UNSIGNED_INT_2_10_10_10_REV should fail");
conformance2/textures/misc/tex-image-with-bad-args-from-dom-elements.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RG8, gl.RG, gl.FLOAT, domElement);
conformance2/textures/misc/tex-image-with-bad-args-from-dom-elements.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "TexImage2D taking RG8/RG/FLOAT should fail");
conformance2/textures/misc/tex-image-with-bad-args-from-dom-elements.html:    gl.deleteTexture(tex);
conformance2/textures/misc/texel-fetch-undefined.html:  gl.uniform2i(uTestPos, x, y);
conformance2/textures/misc/texel-fetch-undefined.html:var aPosition = gl.getAttribLocation(program, "aPosition");
conformance2/textures/misc/texel-fetch-undefined.html:var uTestPos = gl.getUniformLocation(program, "uTestPos");
conformance2/textures/misc/texel-fetch-undefined.html:var tex = gl.createTexture();
conformance2/textures/misc/texel-fetch-undefined.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/texel-fetch-undefined.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/texel-fetch-undefined.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/texel-fetch-undefined.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/textures/misc/texel-fetch-undefined.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/glsl/bugs/logic-inside-block-without-braces.html:  var uniformLoc = gl.getUniformLocation(program, 'uFalse');
conformance/glsl/bugs/logic-inside-block-without-braces.html:  gl.uniform1i(uniformLoc, 0);
conformance2/textures/misc/tex-storage-2d.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/textures/misc/tex-storage-2d.html:            target: gl.TEXTURE_2D,
conformance2/textures/misc/tex-storage-2d.html:            sizedformat: gl.RGBA8,
conformance2/textures/misc/tex-storage-2d.html:            unsizedformat: gl.RGBA,
conformance2/textures/misc/tex-storage-2d.html:            type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/tex-storage-2d.html:            target: gl.TEXTURE_2D,
conformance2/textures/misc/tex-storage-2d.html:            sizedformat: gl.R11F_G11F_B10F,
conformance2/textures/misc/tex-storage-2d.html:            unsizedformat: gl.RGB,
conformance2/textures/misc/tex-storage-2d.html:            type: gl.UNSIGNED_INT_10F_11F_11F_REV,
conformance2/textures/misc/tex-storage-2d.html:            target: gl.TEXTURE_2D,
conformance2/textures/misc/tex-storage-2d.html:            sizedformat: gl.RGBA32F,
conformance2/textures/misc/tex-storage-2d.html:            unsizedformat: gl.RGBA,
conformance2/textures/misc/tex-storage-2d.html:            type: gl.FLOAT,
conformance2/textures/misc/tex-storage-2d.html:            target: gl.TEXTURE_CUBE_MAP,
conformance2/textures/misc/tex-storage-2d.html:            sizedformat: gl.RGBA8,
conformance2/textures/misc/tex-storage-2d.html:            unsizedformat: gl.RGBA,
conformance2/textures/misc/tex-storage-2d.html:            type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/tex-storage-2d.html:            target: gl.TEXTURE_CUBE_MAP,
conformance2/textures/misc/tex-storage-2d.html:            sizedformat: gl.RGB8,
conformance2/textures/misc/tex-storage-2d.html:            unsizedformat: gl.RGB,
conformance2/textures/misc/tex-storage-2d.html:            type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/tex-storage-2d.html:            target: gl.TEXTURE_CUBE_MAP,
conformance2/textures/misc/tex-storage-2d.html:            sizedformat: gl.RGB10_A2UI,
conformance2/textures/misc/tex-storage-2d.html:            unsizedformat: gl.UNSIGNED_INT_2_10_10_10_REV, // type enum, bad as format
conformance2/textures/misc/tex-storage-2d.html:            target: gl.TEXTURE_CUBE_MAP,
conformance2/textures/misc/tex-storage-2d.html:            sizedformat: gl.R11F_G11F_B10F,
conformance2/textures/misc/tex-storage-2d.html:            unsizedformat: gl.RGB,
conformance2/textures/misc/tex-storage-2d.html:        if (target == gl.TEXTURE_2D) {
conformance2/textures/misc/tex-storage-2d.html:            imageTargets = [ gl.TEXTURE_2D ];
conformance2/textures/misc/tex-storage-2d.html:            imageTargets = [ gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance2/textures/misc/tex-storage-2d.html:                             gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance2/textures/misc/tex-storage-2d.html:                             gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance2/textures/misc/tex-storage-2d.html:                             gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance2/textures/misc/tex-storage-2d.html:                             gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance2/textures/misc/tex-storage-2d.html:                             gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ];
conformance2/textures/misc/tex-storage-2d.html:        var tex = gl.createTexture();
conformance2/textures/misc/tex-storage-2d.html:        gl.bindTexture(target, tex);
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(target, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage2D should fail for zero width");
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(target, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage2D should fail for zero height");
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(target, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage2D should fail for negative height");
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(target, 0, testcase.sizedformat,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage2D should fail for zero levels");
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(target,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texStorage2D should fail for too many levels");
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "texStorage2D should fail for bad target TEXTURE_CUBE_MAP_NEGATIVE_X");
conformance2/textures/misc/tex-storage-2d.html:        gl.bindTexture(target, null);
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(target, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texStorage2D should fail when no texture is bound");
conformance2/textures/misc/tex-storage-2d.html:        gl.bindTexture(target, tex);
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(target, levels, testcase.unsizedformat,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "texStorage2D should fail for bad internalformat " + enumToString(testcase.unsizedformat));
conformance2/textures/misc/tex-storage-2d.html:        gl.texStorage2D(target, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texStorage2D should succeed with a good sized internalformat");
conformance2/textures/misc/tex-storage-2d.html:        var immutable = gl.getTexParameter(target, gl.TEXTURE_IMMUTABLE_FORMAT);
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "getTexParameter should succeed with TEXTURE_IMMUTABLE_FORMAT");
conformance2/textures/misc/tex-storage-2d.html:        gl.texImage2D(imageTargets[0], 0, gl.RGBA, texsize, texsize, 0,
conformance2/textures/misc/tex-storage-2d.html:                      gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texImage2D should fail on immutable texture");
conformance2/textures/misc/tex-storage-2d.html:        var s3tc = gl.getExtension("WEBGL_compressed_texture_s3tc");
conformance2/textures/misc/tex-storage-2d.html:            gl.compressedTexImage2D(imageTargets[0], 0, s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,
conformance2/textures/misc/tex-storage-2d.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "compressedTexImage2D should fail on immutable texture");
conformance2/textures/misc/tex-storage-2d.html:        gl.copyTexImage2D(imageTargets[0], 0, gl.RGBA, 0, 0, texsize, texsize, 0);
conformance2/textures/misc/tex-storage-2d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "copyTexImage2D should fail on immutable texture");
conformance2/textures/misc/tex-storage-2d.html:            gl.texParameteri(target, gl.TEXTURE_MIN_FILTER,
conformance2/textures/misc/tex-storage-2d.html:                             testcase.mipmap ? gl.NEAREST_MIPMAP_NEAREST : gl.NEAREST);
conformance2/textures/misc/tex-storage-2d.html:            if (testcase.type == gl.FLOAT) {
conformance2/textures/misc/tex-storage-2d.html:                gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/textures/misc/tex-storage-2d.html:            if (target == gl.TEXTURE_2D) {
conformance2/textures/misc/tex-storage-2d.html:            } else if (target == gl.TEXTURE_CUBE_MAP) {
conformance2/textures/misc/tex-storage-2d.html:            if (target == gl.TEXTURE_2D) {
conformance2/textures/misc/tex-storage-2d.html:                    gl.texSubImage2D(gl.TEXTURE_2D,
conformance2/textures/misc/tex-storage-2d.html:                    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D should succeed on immutable texture as long as the format is compatible");
conformance2/textures/misc/tex-storage-2d.html:            } else if (target == gl.TEXTURE_CUBE_MAP) {
conformance2/textures/misc/tex-storage-2d.html:                        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f,
conformance2/textures/misc/tex-storage-2d.html:                        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D should succeed on immutable texture as long as the format is compatible");
conformance/state/state-uneffected-after-compositing.html:  var tex = gl.createTexture();
conformance/state/state-uneffected-after-compositing.html:  var fb = gl.createFramebuffer();
conformance/state/state-uneffected-after-compositing.html:    gl.clearColor(1, 0, 0, 1);
conformance/state/state-uneffected-after-compositing.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/state/state-uneffected-after-compositing.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/state/state-uneffected-after-compositing.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/state/state-uneffected-after-compositing.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
deqp/functional/gles3/es3fFboStencilbufferTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fFboStencilbufferTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFboStencilbufferTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fFboStencilbufferTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFboStencilbufferTests.js:        /** @const {number} */ var colorFormat = gl.RGBA8;
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_format, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.clearBufferfi(gl.DEPTH_STENCIL, 0, 1.0, 0);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilFunc(gl.ALWAYS, 0, 0xff);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilFunc(gl.EQUAL, this.m_useDepth ? 2 : 1, 0xff);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilOp(gl.DECR, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilFunc(gl.GREATER, this.m_useDepth ? 1 : 2, 0xff);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        DE_ASSERT(this.m_attachDepth == gl.DEPTH_ATTACHMENT || this.m_attachDepth == gl.DEPTH_STENCIL_ATTACHMENT || this.m_attachDepth == gl.NONE);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        DE_ASSERT(this.m_attachStencil == gl.STENCIL_ATTACHMENT || this.m_attachStencil == gl.NONE);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        DE_ASSERT(this.m_attachDepth != gl.DEPTH_STENCIL || this.m_attachStencil == gl.NONE);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        /** @const {number} */ var colorFormat = gl.RGBA8;
deqp/functional/gles3/es3fFboStencilbufferTests.js:        /** @const {number} */ var depthStencilFormat = gl.DEPTH24_STENCIL8;
deqp/functional/gles3/es3fFboStencilbufferTests.js:        /** @const {boolean} */ var hasDepth = this.m_attachDepth == gl.DEPTH_STENCIL || this.m_attachDepth == gl.DEPTH_ATTACHMENT;
deqp/functional/gles3/es3fFboStencilbufferTests.js:        // /** @const {boolean} */ var hasStencil = this.m_attachDepth == gl.DEPTH_STENCIL || this.m_attachStencil == gl.DEPTH_STENCIL_ATTACHMENT); // commented out in original code
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, width, height);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, depthStencilFormat, width, height);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        if (this.m_attachDepth != gl.NONE)
deqp/functional/gles3/es3fFboStencilbufferTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, this.m_attachDepth, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        if (this.m_attachStencil != gl.NONE)
deqp/functional/gles3/es3fFboStencilbufferTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, this.m_attachStencil, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.clearBufferfi(gl.DEPTH_STENCIL, 0, 1.0, 0);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilFunc(gl.ALWAYS, 0, 0xff);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilFunc(gl.EQUAL, hasDepth ? 2 : 1, 0xff);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilOp(gl.DECR, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fFboStencilbufferTests.js:        ctx.stencilFunc(gl.GREATER, hasDepth ? 1 : 2, 0xff);
deqp/functional/gles3/es3fFboStencilbufferTests.js:            gl.DEPTH32F_STENCIL8,
deqp/functional/gles3/es3fFboStencilbufferTests.js:            gl.DEPTH24_STENCIL8,
deqp/functional/gles3/es3fFboStencilbufferTests.js:            gl.STENCIL_INDEX8
deqp/functional/gles3/es3fFboStencilbufferTests.js:        attachGroup.addChild(new es3fFboStencilbufferTests.DepthStencilAttachCase('depth_only', 'Only depth part of depth-stencil RBO attached', gl.DEPTH_ATTACHMENT, gl.NONE));
deqp/functional/gles3/es3fFboStencilbufferTests.js:        attachGroup.addChild(new es3fFboStencilbufferTests.DepthStencilAttachCase('stencil_only', 'Only stencil part of depth-stencil RBO attached', gl.NONE, gl.STENCIL_ATTACHMENT));
deqp/functional/gles3/es3fFboStencilbufferTests.js:        attachGroup.addChild(new es3fFboStencilbufferTests.DepthStencilAttachCase('depth_stencil_separate', 'Depth and stencil attached separately', gl.DEPTH_ATTACHMENT, gl.STENCIL_ATTACHMENT));
deqp/functional/gles3/es3fFboStencilbufferTests.js:        attachGroup.addChild(new es3fFboStencilbufferTests.DepthStencilAttachCase('depth_stencil_attachment', 'Depth and stencil attached with DEPTH_STENCIL_ATTACHMENT', gl.DEPTH_STENCIL_ATTACHMENT, gl.NONE));
conformance2/textures/misc/texture-npot.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance2/textures/misc/texture-npot.html:  { format: gl.RGBA,
conformance2/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/texture-npot.html:  { format: gl.RGB,
conformance2/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/texture-npot.html:  { format: gl.LUMINANCE,
conformance2/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/texture-npot.html:  { format: gl.ALPHA,
conformance2/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/texture-npot.html:  { format: gl.LUMINANCE_ALPHA,
conformance2/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/texture-npot.html:  var tex = gl.createTexture();
conformance2/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/textures/misc/texture-npot.html:      "gl.texImage2D with NPOT texture with level > 0 should succeed");
conformance2/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/textures/misc/texture-npot.html:      "gl.texImage2D with NPOT texture at level 0 should succeed");
conformance2/textures/misc/texture-npot.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/textures/misc/texture-npot.html:      "gl.generateMipmap with NPOT texture should succeed");
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance2/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);
conformance2/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance2/textures/misc/texture-npot.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 1, test.format, 0, 0, 5, 3, 0);
conformance2/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/textures/misc/texture-npot.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance2/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/textures/misc/texture-npot.html:      "gl.texImage2D and gl.generateMipmap with POT texture at level 0 should succeed");
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance2/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance2/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/glsl/bugs/struct-constructor-highp-bug.html:gl.clearColor(1, 0, 0, 1);
conformance/glsl/bugs/struct-constructor-highp-bug.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/textures/misc/tex-unpack-params.html:  var fbo = gl.createFramebuffer();
conformance2/textures/misc/tex-unpack-params.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/tex-unpack-params.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance2/textures/misc/tex-unpack-params.html:  gl.readPixels(xoffset, yoffset, width, height, gl.RGBA, gl.UNSIGNED_BYTE, readbackBuffer);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "read back texture pixels should succeed");
conformance2/textures/misc/tex-unpack-params.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/tex-unpack-params.html:  gl.deleteFramebuffer(fbo);
conformance2/textures/misc/tex-unpack-params.html:  var fbo = gl.createFramebuffer();
conformance2/textures/misc/tex-unpack-params.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/tex-unpack-params.html:    gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex, 0, zz + zoffset);
conformance2/textures/misc/tex-unpack-params.html:    gl.readPixels(xoffset, yoffset, width, height, gl.RGBA, gl.UNSIGNED_BYTE, readbackBuffer);
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "read back texture pixels should succeed");
conformance2/textures/misc/tex-unpack-params.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/tex-unpack-params.html:  gl.deleteFramebuffer(fbo);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_ALIGNMENT, testCase.alignment);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_ROW_LENGTH, testCase.rowLength);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, testCase.skipPixels);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_SKIP_ROWS, testCase.skipRows);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Set up pixel store parameters should succeed");
conformance2/textures/misc/tex-unpack-params.html:  var tex = gl.createTexture();
conformance2/textures/misc/tex-unpack-params.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-unpack-params.html:    buffer = gl.createBuffer();
conformance2/textures/misc/tex-unpack-params.html:    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buffer);
conformance2/textures/misc/tex-unpack-params.html:    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, bufferSize - 1, gl.DYNAMIC_DRAW);
conformance2/textures/misc/tex-unpack-params.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB8, testCase.width, testCase.height, 0,
conformance2/textures/misc/tex-unpack-params.html:                  gl.RGB, gl.UNSIGNED_BYTE, 0);
conformance2/textures/misc/tex-unpack-params.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB8, testCase.width, testCase.height, 0,
conformance2/textures/misc/tex-unpack-params.html:                  gl.RGB, gl.UNSIGNED_BYTE, array);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "buffer too small");
conformance2/textures/misc/tex-unpack-params.html:    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, array, gl.DYNAMIC_DRAW);
conformance2/textures/misc/tex-unpack-params.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB8, testCase.width, testCase.height, 0,
conformance2/textures/misc/tex-unpack-params.html:                gl.RGB, gl.UNSIGNED_BYTE, useUnpackBuffer ? 0 : array);
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage2D with correct buffer size should succeed");
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid unpack params combination");
conformance2/textures/misc/tex-unpack-params.html:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB8, testCase.width, testCase.height, 0,
conformance2/textures/misc/tex-unpack-params.html:                    gl.RGB, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-unpack-params.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "unpack param constraints do not apply if no data are uploaded.");
conformance2/textures/misc/tex-unpack-params.html:    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, bufferSize - 1, gl.DYNAMIC_DRAW);
conformance2/textures/misc/tex-unpack-params.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, testCase.xoffset, testCase.yoffset,
conformance2/textures/misc/tex-unpack-params.html:                     subWidth, subHeight, gl.RGB, gl.UNSIGNED_BYTE, 0);
conformance2/textures/misc/tex-unpack-params.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, testCase.xoffset, testCase.yoffset,
conformance2/textures/misc/tex-unpack-params.html:                     subWidth, subHeight, gl.RGB, gl.UNSIGNED_BYTE, array);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "buffer too small");
conformance2/textures/misc/tex-unpack-params.html:    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, array, gl.DYNAMIC_DRAW);
conformance2/textures/misc/tex-unpack-params.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, testCase.xoffset, testCase.yoffset, subWidth, subHeight,
conformance2/textures/misc/tex-unpack-params.html:                   gl.RGB, gl.UNSIGNED_BYTE, useUnpackBuffer ? 0 : array);
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D with correct buffer size should succeed");
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid unpack params combination");
conformance2/textures/misc/tex-unpack-params.html:    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null);
conformance2/textures/misc/tex-unpack-params.html:    gl.deleteBuffer(buffer);
conformance2/textures/misc/tex-unpack-params.html:  gl.bindTexture(gl.TEXTURE_2D, null);
conformance2/textures/misc/tex-unpack-params.html:  gl.deleteTexture(tex);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error");
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_ALIGNMENT, testCase.alignment);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_ROW_LENGTH, testCase.rowLength);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, testCase.imageHeight);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, testCase.skipPixels);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_SKIP_ROWS, testCase.skipRows);
conformance2/textures/misc/tex-unpack-params.html:  gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, testCase.skipImages);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Set up pixel store parameters should succeed");
conformance2/textures/misc/tex-unpack-params.html:  var tex = gl.createTexture();
conformance2/textures/misc/tex-unpack-params.html:  gl.bindTexture(gl.TEXTURE_3D, tex);
conformance2/textures/misc/tex-unpack-params.html:    buffer = gl.createBuffer();
conformance2/textures/misc/tex-unpack-params.html:    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buffer);
conformance2/textures/misc/tex-unpack-params.html:    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, bufferSize - 1, gl.DYNAMIC_DRAW);
conformance2/textures/misc/tex-unpack-params.html:    gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB8, testCase.width, testCase.height, testCase.depth, 0,
conformance2/textures/misc/tex-unpack-params.html:                  gl.RGB, gl.UNSIGNED_BYTE, 0);
conformance2/textures/misc/tex-unpack-params.html:    gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB8, testCase.width, testCase.height, testCase.depth, 0,
conformance2/textures/misc/tex-unpack-params.html:                  gl.RGB, gl.UNSIGNED_BYTE, array);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "buffer too small");
conformance2/textures/misc/tex-unpack-params.html:    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, array, gl.DYNAMIC_DRAW);
conformance2/textures/misc/tex-unpack-params.html:  gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB8, testCase.width, testCase.height, testCase.depth, 0,
conformance2/textures/misc/tex-unpack-params.html:                gl.RGB, gl.UNSIGNED_BYTE, useUnpackBuffer ? 0 : array);
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D with correct buffer size should succeed");
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid unpack params combination");
conformance2/textures/misc/tex-unpack-params.html:      gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB8, testCase.width, testCase.height, testCase.depth, 0,
conformance2/textures/misc/tex-unpack-params.html:                    gl.RGB, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/tex-unpack-params.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "unpack param constraints do not apply if no data are uploaded.");
conformance2/textures/misc/tex-unpack-params.html:    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, bufferSize - 1, gl.DYNAMIC_DRAW);
conformance2/textures/misc/tex-unpack-params.html:    gl.texSubImage3D(gl.TEXTURE_3D, 0, testCase.xoffset, testCase.yoffset, testCase.zoffset,
conformance2/textures/misc/tex-unpack-params.html:                     subWidth, subHeight, subDepth, gl.RGB, gl.UNSIGNED_BYTE, 0);
conformance2/textures/misc/tex-unpack-params.html:    gl.texSubImage3D(gl.TEXTURE_3D, 0, testCase.xoffset, testCase.yoffset, testCase.zoffset,
conformance2/textures/misc/tex-unpack-params.html:                     subWidth, subHeight, subDepth, gl.RGB, gl.UNSIGNED_BYTE, array);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "buffer too small");
conformance2/textures/misc/tex-unpack-params.html:    gl.bufferData(gl.PIXEL_UNPACK_BUFFER, array, gl.DYNAMIC_DRAW);
conformance2/textures/misc/tex-unpack-params.html:  gl.texSubImage3D(gl.TEXTURE_3D, 0, testCase.xoffset, testCase.yoffset, testCase.zoffset,
conformance2/textures/misc/tex-unpack-params.html:                   gl.RGB, gl.UNSIGNED_BYTE, useUnpackBuffer ? 0 : array);
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage3D with correct buffer size should succeed");
conformance2/textures/misc/tex-unpack-params.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid unpack params combination");
conformance2/textures/misc/tex-unpack-params.html:    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null);
conformance2/textures/misc/tex-unpack-params.html:    gl.deleteBuffer(buffer);
conformance2/textures/misc/tex-unpack-params.html:  gl.bindTexture(gl.TEXTURE_3D, null);
conformance2/textures/misc/tex-unpack-params.html:  gl.deleteTexture(tex);
conformance2/textures/misc/tex-unpack-params.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error");
conformance2/textures/misc/tex-storage-compressed-formats.html:var WEBGL_compressed_texture_etc = gl.getExtension("WEBGL_compressed_texture_etc");
conformance2/textures/misc/tex-storage-compressed-formats.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/textures/misc/tex-storage-compressed-formats.html:        var tex = gl.createTexture();
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, 1, 1);
conformance2/textures/misc/tex-storage-compressed-formats.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.deleteTexture(tex);
conformance2/textures/misc/tex-storage-compressed-formats.html:        var tex3d = gl.createTexture();
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.bindTexture(gl.TEXTURE_3D, tex3d);
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.texStorage3D(gl.TEXTURE_3D, 1, internalformat, 1, 1, 1);
conformance2/textures/misc/tex-storage-compressed-formats.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.deleteTexture(tex3d);
conformance2/textures/misc/tex-storage-compressed-formats.html:        var tex2dArr = gl.createTexture();
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.bindTexture(gl.TEXTURE_2D_ARRAY, tex2dArr);
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, internalformat, 1, 1, 1);
conformance2/textures/misc/tex-storage-compressed-formats.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance2/textures/misc/tex-storage-compressed-formats.html:        gl.deleteTexture(tex2dArr);
conformance/glsl/bugs/conditional-discard-in-loop.html:  var tex = gl.createTexture();
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, 	 gl.CLAMP_TO_EDGE);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, 	 gl.CLAMP_TO_EDGE);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.activeTexture(gl.TEXTURE0);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/glsl/bugs/conditional-discard-in-loop.html:  gl.uniform1i(uniformMap.u_data.location, 0);
conformance/state/gl-initial-state.html:<title>WebGL gl.getParameter initial values Tests</title>
conformance/state/gl-initial-state.html:  shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/state/gl-initial-state.html:  var s = gl.getParameter(gl[enum_val]);
conformance/state/gl-initial-state.html:    testPassed("getParameter(gl." + enum_val + ") returned " + expected + " which is " + gl[expected]);
conformance/state/gl-initial-state.html:    testFailed("getParameter(gl." + enum_val + ") returned " + s + " expected: " + expected + " which is " + gl[expected]);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:      case gl.R8UI:
conformance2/textures/misc/integer-cubemap-texture-sampling.html:      case gl.RG8UI:
conformance2/textures/misc/integer-cubemap-texture-sampling.html:      case gl.RGB8UI:
conformance2/textures/misc/integer-cubemap-texture-sampling.html:      case gl.RGBA8UI:
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.readPixels(0, 0, size, size, gl.RGBA_INTEGER, gl.UNSIGNED_INT, buffer);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.clearColor(1, 1, 0, 1);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.clearDepth(1);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    var tex = gl.createTexture();
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    var targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance2/textures/misc/integer-cubemap-texture-sampling.html:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance2/textures/misc/integer-cubemap-texture-sampling.html:                   gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance2/textures/misc/integer-cubemap-texture-sampling.html:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance2/textures/misc/integer-cubemap-texture-sampling.html:                   gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance2/textures/misc/integer-cubemap-texture-sampling.html:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
conformance2/textures/misc/integer-cubemap-texture-sampling.html:        gl.texImage2D(targets[tt], 0, gl[internalFormat], size, size, 0, gl[format], gl[type], data);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    var fbo = gl.createFramebuffer();
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, targets[tt], tex, 0);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.deleteFramebuffer(fbo);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    var loc = gl.getUniformLocation(program, "face");
conformance2/textures/misc/integer-cubemap-texture-sampling.html:        gl.uniform1i(loc, targets[tt]);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:        wtu.checkCanvasRect(gl, 0, 0, gl.canvas.width, gl.canvas.height, [255, 0, 0, 255], "Should be red");
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.deleteProgram(program);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    gl.deleteTexture(tex);
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL errors");
conformance2/textures/misc/integer-cubemap-texture-sampling.html:    var m = wtu.makeImageFromCanvas(gl.canvas);
conformance/reading/read-pixels-test.html:gl.clearColor(1, 1, 1, 1);
conformance/reading/read-pixels-test.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/reading/read-pixels-test.html:if (gl.getError() != gl.CONTEXT_LOST_WEBGL) {
conformance/reading/read-pixels-test.html:  gl.clearColor(0.2, 0.6, 0.4, 1);
conformance/reading/read-pixels-test.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/reading/read-pixels-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no GL errors");
conformance/reading/read-pixels-test.html:    gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/reading/read-pixels-test.html:  var invalidFormat = [gl.DEPTH_COMPONENT, gl.DEPTH_STENCIL, desktopGL.R8, gl.RGBA4, gl.LUMINANCE, gl.LUMINANCE_ALPHA];
conformance/reading/read-pixels-test.html:      {type: gl.UNSIGNED_SHORT,                     dest: new Uint16Array(4)},
conformance/reading/read-pixels-test.html:      {type: gl.SHORT,                              dest: new Int16Array(4)},
conformance/reading/read-pixels-test.html:      {type: gl.BYTE,                               dest: new Int8Array(4)},
conformance/reading/read-pixels-test.html:      {type: gl.UNSIGNED_INT,                       dest: new Uint32Array(4)},
conformance/reading/read-pixels-test.html:    gl.readPixels(0, 0, 1, 1, format, gl.UNSIGNED_BYTE, buf);
conformance/reading/read-pixels-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "Should not be able to read as " + wtu.glEnumToString(gl, format));
conformance/reading/read-pixels-test.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, type, dest);
conformance/reading/read-pixels-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "Should not be able to read as " + wtu.glEnumToString(gl, type));
conformance/reading/read-pixels-test.html:      format: gl.RGBA,
conformance/reading/read-pixels-test.html:      type: gl.UNSIGNED_BYTE,
conformance/reading/read-pixels-test.html:      format: gl.RGB,
conformance/reading/read-pixels-test.html:      type: gl.UNSIGNED_BYTE,
conformance/reading/read-pixels-test.html:      format: gl.RGB,
conformance/reading/read-pixels-test.html:      type: gl.UNSIGNED_SHORT_5_6_5,
conformance/reading/read-pixels-test.html:      format: gl.RGBA,
conformance/reading/read-pixels-test.html:      type: gl.UNSIGNED_SHORT_5_5_5_1,
conformance/reading/read-pixels-test.html:      format: gl.RGBA,
conformance/reading/read-pixels-test.html:      type: gl.UNSIGNED_SHORT_4_4_4_4,
conformance/reading/read-pixels-test.html:      format: gl.ALPHA,
conformance/reading/read-pixels-test.html:      type: gl.UNSIGNED_BYTE,
conformance/reading/read-pixels-test.html:        format: gl.RED,
conformance/reading/read-pixels-test.html:        type: gl.UNSIGNED_BYTE,
conformance/reading/read-pixels-test.html:        format: gl.RGBA_INTEGER,
conformance/reading/read-pixels-test.html:        type: gl.UNSIGNED_INT,
conformance/reading/read-pixels-test.html:        format: gl.RGBA_INTEGER,
conformance/reading/read-pixels-test.html:        type: gl.INT,
conformance/reading/read-pixels-test.html:  var implFormat = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);
conformance/reading/read-pixels-test.html:  var implType = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);
conformance/reading/read-pixels-test.html:    gl.readPixels(0, 0, 1, 1, format, type, dest);
conformance/reading/read-pixels-test.html:    if ((format == gl.RGBA && type == gl.UNSIGNED_BYTE) || (format == implFormat && type == implType)) {
conformance/reading/read-pixels-test.html:          gl, gl.NO_ERROR,
conformance/reading/read-pixels-test.html:          gl, gl.INVALID_OPERATION,
conformance/reading/read-pixels-test.html:  if (gl.getError() != gl.CONTEXT_LOST_WEBGL) {
conformance/reading/read-pixels-test.html:  gl.viewport(0, 0, 1024, 1024);
conformance/reading/read-pixels-test.html:  var loc = gl.getUniformLocation(program, "tex");
conformance/reading/read-pixels-test.html:  gl.disable(gl.BLEND);
conformance/reading/read-pixels-test.html:  gl.disable(gl.DEPTH_TEST);
conformance/reading/read-pixels-test.html:    gl.activeTexture(gl.TEXTURE0 + ii);
conformance/reading/read-pixels-test.html:    var tex = gl.createTexture();
conformance/reading/read-pixels-test.html:      gl.uniform1i(loc, jj % 3);
conformance/reading/read-pixels-test.html:      gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/reading/read-pixels-test.html:    gl.readPixels(512, 512, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/reading/read-pixels-test.html:      gl.uniform1i(loc, (jj + kk) % 3);
conformance/reading/read-pixels-test.html:      gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/reading/read-pixels-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no GL errors");
conformance/glsl/bugs/uniforms-should-not-lose-values.html:    var loc = gl.getUniformLocation(program, name);
conformance/glsl/bugs/uniforms-should-not-lose-values.html:    var loc = gl.getUniformLocation(program, name);
conformance/glsl/bugs/uniforms-should-not-lose-values.html:  gl.viewport(0, 0, 256, 256);
conformance/glsl/bugs/uniforms-should-not-lose-values.html:  gl.viewport(256, 0, 256, 256);
conformance/glsl/bugs/uniforms-should-not-lose-values.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/glsl/bugs/pow-of-small-constant-in-user-defined-function.html:  if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision == 0) {
conformance/buffers/element-array-buffer-delete-recreate.html:  var vertexBuffer = gl.createBuffer();
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/buffers/element-array-buffer-delete-recreate.html:  ]), gl.STATIC_DRAW);
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.enableVertexAttribArray(0);
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/buffers/element-array-buffer-delete-recreate.html:  var indexBuffer = gl.createBuffer();
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array([0, 1, 2, 3]), gl.STATIC_DRAW);
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.deleteBuffer(indexBuffer);
conformance/buffers/element-array-buffer-delete-recreate.html:  indexBuffer = gl.createBuffer();
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array([0, 1, 2, 3]), gl.STATIC_DRAW);
conformance/buffers/element-array-buffer-delete-recreate.html:  gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_BYTE, 0);
conformance/buffers/element-array-buffer-delete-recreate.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
conformance/glsl/bugs/nested-loops-with-break-and-continue.html:    var uniformLoc = gl.getUniformLocation(program, 'uCount');
conformance/glsl/bugs/nested-loops-with-break-and-continue.html:    gl.uniform1i(uniformLoc, 5);
deqp/functional/gles3/es3fFboDepthbufferTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFboDepthbufferTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fFboDepthbufferTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFboDepthbufferTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fFboDepthbufferTests.js:        var colorFormat = gl.RGBA8;
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, this.m_width, this.m_height);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, depthRbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_format, this.m_width, this.m_height);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthRbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.clearBufferfv(gl.DEPTH, 0, [clearDepth]);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        var format = gl.RGBA;
deqp/functional/gles3/es3fFboDepthbufferTests.js:        var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindTexture(gl.TEXTURE_2D, gridTex);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, format, texW, texH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFboDepthbufferTests.js:        var colorFormat = gl.RGBA8;
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, this.m_width, this.m_height);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindTexture(gl.TEXTURE_2D, depthTexture);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, this.m_format, this.m_width, this.m_height, 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.clearBufferfv(gl.DEPTH, 0, [clearDepth]);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.depthFunc(gl.LESS); // (1 < depth) ?
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.depthFunc(gl.GREATER); // (0 > depth) ?
deqp/functional/gles3/es3fFboDepthbufferTests.js:        var colorFormat = gl.RGBA8;
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, this.m_width, this.m_height);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindTexture(gl.TEXTURE_2D, depthTexture);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, this.m_format, this.m_width, this.m_height, 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture, 0);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.clearBufferfv(gl.DEPTH, 0, [clearDepth]);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        ctx.depthFunc(gl.EQUAL);
deqp/functional/gles3/es3fFboDepthbufferTests.js:        gl.DEPTH_COMPONENT32F,
deqp/functional/gles3/es3fFboDepthbufferTests.js:        gl.DEPTH_COMPONENT24,
deqp/functional/gles3/es3fFboDepthbufferTests.js:        gl.DEPTH_COMPONENT16,
deqp/functional/gles3/es3fFboDepthbufferTests.js:        gl.DEPTH32F_STENCIL8,
deqp/functional/gles3/es3fFboDepthbufferTests.js:        gl.DEPTH24_STENCIL8
conformance/state/diffs.txt:<   case gl.BYTE:
conformance/state/diffs.txt:<   case gl.UNSIGNED_BYTE:
conformance/state/diffs.txt:<   case gl.SHORT:
conformance/state/diffs.txt:<   case gl.UNSIGNED_SHORT:
conformance/state/diffs.txt:<   case gl.INT:
conformance/state/diffs.txt:<   case gl.UNSIGNED_INT:
conformance/state/diffs.txt:<   case gl.FLOAT:
conformance/state/diffs.txt:> var validArray = new Array(gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT, gl.STENCIL_ATTACHMENT, gl.DEPTH_STENCIL_ATTACHMENT);
conformance/state/diffs.txt:> for (var ii = 1; ii < gl.getParameter(gl.MAX_COLOR_ATTACHMENTS); ++ii) {
conformance/state/diffs.txt:>   validArray[validArray.length] = gl.COLOR_ATTACHMENT0 + ii;
conformance/state/diffs.txt:<     [ gl.COLOR_ATTACHMENT0,
conformance/state/diffs.txt:<       gl.DEPTH_ATTACHMENT,
conformance/state/diffs.txt:<       gl.STENCIL_ATTACHMENT,
conformance/state/diffs.txt:<       gl.DEPTH_STENCIL_ATTACHMENT
conformance/state/diffs.txt:>       gl.RENDERBUFFER_SAMPLES,
conformance/state/diffs.txt:<       gl.CURRENT_VERTEX_ATTRIB
conformance/state/diffs.txt:>       gl.CURRENT_VERTEX_ATTRIB,
conformance/state/diffs.txt:>       gl.VERTEX_ATTRIB_ARRAY_DIVISOR
conformance2/textures/misc/tex-image-with-bad-args.html:    var tex = gl.createTexture();
conformance2/textures/misc/tex-image-with-bad-args.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-image-with-bad-args.html:    gl.texImage2D(gl.TEXTURE_2D, 0, test.internalformat, 64, 64, 0, test.format, test.type, null);
conformance2/textures/misc/tex-image-with-bad-args.html:    gl.deleteTexture(tex);
conformance2/textures/misc/tex-image-with-bad-args.html:    { internalformat: gl.RGBA, format: gl.RGBA, type: gl.UNSIGNED_BYTE, errors: [gl.NO_ERROR] },
conformance2/textures/misc/tex-image-with-bad-args.html:    { internalformat: gl.RGBA, format: gl.RGBA, type: gl.FLOAT, errors: [gl.INVALID_OPERATION] },
conformance2/textures/misc/tex-image-with-bad-args.html:    { internalformat: gl.RGBA, format: gl.RGBA, type: gl.HALF_FLOAT, errors: [gl.INVALID_OPERATION] },
conformance2/textures/misc/tex-image-with-bad-args.html:    { internalformat: gl.LUMINANCE, format: gl.LUMINANCE, type: gl.FLOAT, errors: [gl.INVALID_OPERATION] },
conformance2/textures/misc/tex-image-with-bad-args.html:    { internalformat: gl.LUMINANCE_ALPHA, format: gl.LUMINANCE_ALPHA, type: gl.HALF_FLOAT, errors: [gl.INVALID_OPERATION] },
conformance/ogles/ogles-utils.js:    var buf = gl.createBuffer();
conformance/ogles/ogles-utils.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/ogles/ogles-utils.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(buffer.data), gl.STATIC_DRAW);
conformance/ogles/ogles-utils.js:    gl.enableVertexAttribArray(loc);
conformance/ogles/ogles-utils.js:    gl.vertexAttribPointer(loc, buffer.numComponents, gl.FLOAT, false, 0, 0);
conformance/ogles/ogles-utils.js:  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
conformance/ogles/ogles-utils.js:  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
conformance/ogles/ogles-utils.js:  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
conformance/ogles/ogles-utils.js:  gl.drawArrays(gl.TRIANGLES, 0, numVertices);
conformance/ogles/ogles-utils.js:  gl.useProgram(program);
conformance/ogles/ogles-utils.js:  var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
conformance/ogles/ogles-utils.js:    var info = gl.getActiveAttrib(program, ii);
conformance/ogles/ogles-utils.js:    var location = gl.getAttribLocation(program, name);
conformance/ogles/ogles-utils.js:  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
conformance/ogles/ogles-utils.js:    var info = gl.getActiveUniform(program, ii);
conformance/ogles/ogles-utils.js:    var location = gl.getUniformLocation(program, name);
conformance/ogles/ogles-utils.js:    gl.uniformMatrix4fv(
conformance/ogles/ogles-utils.js:    gl.uniform1f(loc, gl.canvas.width);
conformance/ogles/ogles-utils.js:    gl.uniform1f(loc, gl.canvas.height);
conformance/ogles/ogles-utils.js:      log("gl." + type + '("' + name + '", ' + transpose + ", " + value + ")");
conformance/ogles/ogles-utils.js:      log("gl." + type + '("' + name + '", ' + args.slice(1) + ")");
conformance/ogles/ogles-utils.js:      log("gl." + type + '("' + name + '", ' + value + ")");
conformance/ogles/ogles-utils.js:    var err = gl.getError();
conformance/ogles/ogles-utils.js:    if (err != gl.NO_ERROR) {
conformance/ogles/ogles-utils.js:      gl.depthRange(fields.near, fields.far);
conformance/ogles/ogles-utils.js:  gl.clearColor(0, 0, 0, 0);
conformance/ogles/ogles-utils.js:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/ogles/ogles-utils.js:    fn(attribs, gl.canvas.width, gl.canvas.height);
conformance/ogles/ogles-utils.js:  var pixels = new Uint8Array(gl.canvas.width * gl.canvas.height * 4);
conformance/ogles/ogles-utils.js:  gl.readPixels(0, 0, gl.canvas.width, gl.canvas.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance/ogles/ogles-utils.js:    width: gl.canvas.width,
conformance/ogles/ogles-utils.js:    height: gl.canvas.height,
conformance/ogles/ogles-utils.js:    img: wtu.makeImageFromCanvas(gl.canvas)
conformance/ogles/ogles-utils.js:  loadShader(programInfo.vertexShader, gl.VERTEX_SHADER, 0);
conformance/ogles/ogles-utils.js:  loadShader(programInfo.fragmentShader, gl.FRAGMENT_SHADER, 1);
conformance/ogles/ogles-utils.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/ogles/ogles-utils.js:      shaders[index] = gl.createShader();
conformance/ogles/ogles-utils.js:  loadShader(test.testProgram.vertexShader, gl.VERTEX_SHADER, 0);
conformance/ogles/ogles-utils.js:  loadShader(test.testProgram.fragmentShader, gl.FRAGMENT_SHADER, 1);
conformance/ogles/ogles-utils.js:  console.log("gl." + functionName + "(" +
conformance/ogles/ogles-utils.js:  if (gl.canvas.width != 500 || gl.canvas.height != 500) {
conformance/canvas/texture-bindings-unaffected-on-resize.html:var tex0 = gl.createTexture();
conformance/canvas/texture-bindings-unaffected-on-resize.html:gl.activeTexture(gl.TEXTURE1)
conformance/canvas/texture-bindings-unaffected-on-resize.html:var tex1 = gl.createTexture();
conformance/canvas/texture-bindings-unaffected-on-resize.html:var loc = gl.getUniformLocation(program, "tex");
conformance/canvas/texture-bindings-unaffected-on-resize.html:  gl.viewport(0, 0, canvas.width, canvas.height);
conformance/canvas/texture-bindings-unaffected-on-resize.html:  gl.uniform1i(loc, 0);
conformance/canvas/texture-bindings-unaffected-on-resize.html:  gl.uniform1i(loc, 1);
conformance/canvas/texture-bindings-unaffected-on-resize.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/canvas/buffer-offscreen-test.html:    gl.clearColor(1, 0, 0, 1);
conformance/canvas/buffer-offscreen-test.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
conformance/canvas/buffer-offscreen-test.html:    gl.scissor(0, 10, 10, 10);
conformance/canvas/buffer-offscreen-test.html:    gl.enable(gl.SCISSOR_TEST);
conformance/canvas/buffer-offscreen-test.html:        gl.clearColor(0, 0, 1, 1);
conformance/canvas/buffer-offscreen-test.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.uniform1i(samplerLoc, textureUnit);
conformance2/textures/misc/active-3d-texture-bug.html:    var texture = gl.createTexture();
conformance2/textures/misc/active-3d-texture-bug.html:    var sampler = gl.createSampler();
conformance2/textures/misc/active-3d-texture-bug.html:    samplerLoc = gl.getUniformLocation(program, "u_sampler");
conformance2/textures/misc/active-3d-texture-bug.html:    gl.viewport(0, 0, width, height);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.bindTexture(gl.TEXTURE_3D, texture);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, width, height, depth, 0, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.bindTexture(gl.TEXTURE_3D, null);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.activeTexture(gl.TEXTURE1);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.bindSampler(0, sampler);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.bindTexture(gl.TEXTURE_3D, texture);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.bindSampler(0, null);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.deleteSampler(sampler);
conformance2/textures/misc/active-3d-texture-bug.html:    // Crash happens when calling gl.drawArrays during this rendering.
conformance2/textures/misc/active-3d-texture-bug.html:    gl.bindTexture(gl.TEXTURE_3D, null);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.deleteTexture(texture);
conformance2/textures/misc/active-3d-texture-bug.html:    gl.deleteProgram(program);
conformance/buffers/buffer-uninitialized.html:gl.clearColor(0, 1, 0, 1);
conformance/buffers/buffer-uninitialized.html:  var uninitializedBuffer = gl.createBuffer();
conformance/buffers/buffer-uninitialized.html:  gl.bindBuffer(gl.ARRAY_BUFFER, uninitializedBuffer);
conformance/buffers/buffer-uninitialized.html:  var elements = gl.createBuffer();
conformance/buffers/buffer-uninitialized.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elements);
conformance/buffers/buffer-uninitialized.html:  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/buffers/buffer-uninitialized.html:  gl.useProgram(program);
conformance/buffers/buffer-uninitialized.html:  var vertexLoc = gl.getAttribLocation(program, "a_vertex");
conformance/buffers/buffer-uninitialized.html:  gl.vertexAttribPointer(vertexLoc, 1, gl.FLOAT, gl.FALSE, 0, 0);
conformance/buffers/buffer-uninitialized.html:  gl.enableVertexAttribArray(vertexLoc);
conformance/buffers/buffer-uninitialized.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error should result from setup");
conformance/buffers/buffer-uninitialized.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/buffers/buffer-uninitialized.html:  gl.drawElements(gl.POINTS, TEST_LENGTH, gl.UNSIGNED_SHORT, 0);
conformance/buffers/buffer-uninitialized.html:  gl.deleteBuffer(uninitializedBuffer);
conformance/buffers/buffer-uninitialized.html:    gl.bufferData(gl.ARRAY_BUFFER, TEST_BUFSIZE, gl.STATIC_DRAW);
conformance/buffers/buffer-uninitialized.html:    gl.bufferData(gl.ARRAY_BUFFER, TEST_BUFSIZE, gl.STATIC_DRAW);
conformance/buffers/buffer-uninitialized.html:    gl.bufferSubData(gl.ARRAY_BUFFER, TEST_BUFSIZE / 4, data);
conformance/reading/read-pixels-pack-alignment.html:    case gl.ALPHA:
conformance/reading/read-pixels-pack-alignment.html:    case gl.RGB:
conformance/reading/read-pixels-pack-alignment.html:    case gl.RGBA:
conformance/reading/read-pixels-pack-alignment.html:    case gl.UNSIGNED_BYTE:
conformance/reading/read-pixels-pack-alignment.html:    case gl.UNSIGNED_SHORT_5_6_5:
conformance/reading/read-pixels-pack-alignment.html:        if (format != gl.RGB)
conformance/reading/read-pixels-pack-alignment.html:    case gl.UNSIGNED_SHORT_4_4_4_4:
conformance/reading/read-pixels-pack-alignment.html:    case gl.UNSIGNED_SHORT_5_5_5_1:
conformance/reading/read-pixels-pack-alignment.html:        if (format != gl.RGBA)
conformance/reading/read-pixels-pack-alignment.html:    case gl.UNSIGNED_BYTE:
conformance/reading/read-pixels-pack-alignment.html:        case gl.ALPHA:
conformance/reading/read-pixels-pack-alignment.html:        case gl.RGB:
conformance/reading/read-pixels-pack-alignment.html:        case gl.RGBA:
conformance/reading/read-pixels-pack-alignment.html:    case gl.UNSIGNED_SHORT_5_6_5:
conformance/reading/read-pixels-pack-alignment.html:        if (format != gl.RGB)
conformance/reading/read-pixels-pack-alignment.html:    case gl.UNSIGNED_SHORT_4_4_4_4:
conformance/reading/read-pixels-pack-alignment.html:        if (format != gl.RGBA)
conformance/reading/read-pixels-pack-alignment.html:    case gl.UNSIGNED_SHORT_5_5_5_1:
conformance/reading/read-pixels-pack-alignment.html:        if (format != gl.RGBA)
conformance/reading/read-pixels-pack-alignment.html:    gl.clearColor(1, 0.4, 0, 1);
conformance/reading/read-pixels-pack-alignment.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/reading/read-pixels-pack-alignment.html:    gl.pixelStorei(gl.PACK_ALIGNMENT, packAlignment);
conformance/reading/read-pixels-pack-alignment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/reading/read-pixels-pack-alignment.html:    if (type != gl.UNSIGNED_BYTE) {
conformance/reading/read-pixels-pack-alignment.html:    gl.readPixels(0, 0, width, height, format, type, array);
conformance/reading/read-pixels-pack-alignment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance/reading/read-pixels-pack-alignment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/reading/read-pixels-pack-alignment.html:var formats = [ gl.RGBA ];
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 1, 1, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 2, 1, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 4, 1, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 1, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 4, 2, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 2, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 4, 3, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 3, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 4, 4, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 4, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 5, 1);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 4, 5, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 5, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 6, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 7, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 8, 2);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 1, 0, 0);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 2, 0, 0);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 4, 0, 0);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, 0, 0);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 1, -1, 1);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 2, 1, -1);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 4, 0, -1);
conformance/reading/read-pixels-pack-alignment.html:    runTestIteration(format, gl.UNSIGNED_BYTE, 8, -1, -1);
conformance/glsl/bugs/gl-fragcoord-multisampling-bug.html:  gl.clearColor(1, 0, 0, 1);
conformance/glsl/bugs/gl-fragcoord-multisampling-bug.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/buffers/buffer-data-array-buffer-delete.html:var buf = gl.createBuffer();
conformance/buffers/buffer-data-array-buffer-delete.html:gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/buffers/buffer-data-array-buffer-delete.html:gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);
conformance/buffers/buffer-data-array-buffer-delete.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/buffer-data-array-buffer-delete.html:gl.enableVertexAttribArray(attribLocation);
conformance/buffers/buffer-data-array-buffer-delete.html:gl.vertexAttribPointer(attribLocation, 1, gl.FLOAT, false, 0, 0);
conformance/buffers/buffer-data-array-buffer-delete.html:gl.deleteBuffer(buf);
conformance/glsl/bugs/conditional-discard-optimization.html:  gl.clearColor(0.0, 0.0, 0.0, 1.0);
conformance/glsl/bugs/conditional-discard-optimization.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/bugs/conditional-discard-optimization.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/bugs/conditional-discard-optimization.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/attribs/gl-vertexattribpointer.html:  debug("Checking gl.vertexAttribPointer.");
conformance/attribs/gl-vertexattribpointer.html:  if (!gl.FIXED) {
conformance/attribs/gl-vertexattribpointer.html:    gl.FIXED = 0x140C;
conformance/attribs/gl-vertexattribpointer.html:  var vertexObject = gl.createBuffer();
conformance/attribs/gl-vertexattribpointer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/attribs/gl-vertexattribpointer.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(0), gl.STATIC_DRAW);
conformance/attribs/gl-vertexattribpointer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/attribs/gl-vertexattribpointer.html:  gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 0, 4);
conformance/attribs/gl-vertexattribpointer.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/attribs/gl-vertexattribpointer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/attribs/gl-vertexattribpointer.html:  gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 0, 0);
conformance/attribs/gl-vertexattribpointer.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/attribs/gl-vertexattribpointer.html:  //gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/attribs/gl-vertexattribpointer.html:  //gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 0, 0);
conformance/attribs/gl-vertexattribpointer.html:  //wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/attribs/gl-vertexattribpointer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/attribs/gl-vertexattribpointer.html:    gl.vertexAttribPointer(0, 1, gl.INT, 0, 0, 0);
conformance/attribs/gl-vertexattribpointer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/attribs/gl-vertexattribpointer.html:    gl.vertexAttribPointer(0, 1, gl.UNSIGNED_INT, 0, 0, 0);
conformance/attribs/gl-vertexattribpointer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/attribs/gl-vertexattribpointer.html:    gl.vertexAttribPointer(0, 1, gl.FIXED, 0, 0, 0);
conformance/attribs/gl-vertexattribpointer.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/attribs/gl-vertexattribpointer.html:    gl.vertexAttribPointer(0, size, type, normalize, stride, offset);
conformance/attribs/gl-vertexattribpointer.html:    var succeeded = (err == gl.NO_ERROR);
conformance/attribs/gl-vertexattribpointer.html:        "gl.vertexAttribPointer(0, " + size +
conformance/attribs/gl-vertexattribpointer.html:        ", gl." + wtu.glEnumToString(gl, type) +
conformance/attribs/gl-vertexattribpointer.html:      shouldBe('gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_SIZE)', size.toString());
conformance/attribs/gl-vertexattribpointer.html:      shouldBe('gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_TYPE)', 'gl.' + wtu.glEnumToString(gl, type));
conformance/attribs/gl-vertexattribpointer.html:      shouldBe('gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED)', normalize.toString());
conformance/attribs/gl-vertexattribpointer.html:      shouldBe('gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_STRIDE)', stride.toString());
conformance/attribs/gl-vertexattribpointer.html:      shouldBe('gl.getVertexAttribOffset(0, gl.VERTEX_ATTRIB_ARRAY_POINTER)', offset.toString());
conformance/attribs/gl-vertexattribpointer.html:    { type:gl.BYTE,           bytesPerComponent: 1 },
conformance/attribs/gl-vertexattribpointer.html:    { type:gl.UNSIGNED_BYTE,  bytesPerComponent: 1 },
conformance/attribs/gl-vertexattribpointer.html:    { type:gl.SHORT,          bytesPerComponent: 2 },
conformance/attribs/gl-vertexattribpointer.html:    { type:gl.UNSIGNED_SHORT, bytesPerComponent: 2 },
conformance/attribs/gl-vertexattribpointer.html:    { type:gl.FLOAT,          bytesPerComponent: 4 },
conformance/attribs/gl-vertexattribpointer.html:          var err = gl.NO_ERROR;
conformance/attribs/gl-vertexattribpointer.html:            err = gl.INVALID_OPERATION;
conformance/attribs/gl-vertexattribpointer.html:            err = gl.INVALID_OPERATION;
conformance/attribs/gl-vertexattribpointer.html:              gl, gl.NO_ERROR, "at stride limit",
conformance/attribs/gl-vertexattribpointer.html:              gl, gl.INVALID_VALUE, "over stride limit",
conformance/glsl/bugs/qualcomm-crash.html:gl.canvas.addEventListener("webglcontextlost", function(e) {
conformance/glsl/bugs/qualcomm-crash.html:    if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision == 0) {
conformance/glsl/bugs/qualcomm-crash.html:        if (!gl.getProgramParameter(program1, gl.LINK_STATUS)) {
conformance/glsl/bugs/qualcomm-crash.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/glsl/bugs/qualcomm-crash.html:        if (!gl.getProgramParameter(program2, gl.LINK_STATUS)) {
conformance/glsl/bugs/qualcomm-crash.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/glsl/bugs/floor-div-cos-should-not-truncate.html:gl.clearColor(1, 0, 0, 1);
conformance/glsl/bugs/floor-div-cos-should-not-truncate.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/glsl/bugs/floor-div-cos-should-not-truncate.html:gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
conformance/glsl/bugs/floor-div-cos-should-not-truncate.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);
conformance/glsl/bugs/floor-div-cos-should-not-truncate.html:gl.enableVertexAttribArray(0);
conformance/glsl/bugs/floor-div-cos-should-not-truncate.html:gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 12, 0);
conformance/glsl/bugs/floor-div-cos-should-not-truncate.html:gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/attribs/gl-enable-vertex-attrib.html:var vertexObject = gl.createBuffer();
conformance/attribs/gl-enable-vertex-attrib.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/attribs/gl-enable-vertex-attrib.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/attribs/gl-enable-vertex-attrib.html:gl.enableVertexAttribArray(0);
conformance/attribs/gl-enable-vertex-attrib.html:gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/attribs/gl-enable-vertex-attrib.html:gl.enableVertexAttribArray(3);
conformance/attribs/gl-enable-vertex-attrib.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/attribs/gl-enable-vertex-attrib.html:gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/attribs/gl-enable-vertex-attrib.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION);
conformance/buffers/buffer-bind-test.html:  var buf = gl.createBuffer();
conformance/buffers/buffer-bind-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/buffers/buffer-bind-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/buffers/buffer-bind-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/buffers/buffer-bind-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/buffers/buffer-bind-test.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buf);
conformance/buffers/buffer-bind-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/buffers/buffer-bind-test.html:  var buf = gl.createBuffer();
conformance/buffers/buffer-bind-test.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buf);
conformance/buffers/buffer-bind-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/buffers/buffer-bind-test.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance/buffers/buffer-bind-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/buffers/buffer-bind-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/buffers/buffer-bind-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/glsl/bugs/floored-division-accuracy.html:  gl.clearColor(0.0, 0.0, 0.0, 1.0);
conformance/glsl/bugs/floored-division-accuracy.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/bugs/floored-division-accuracy.html:  gl.uniform1f(gl.getUniformLocation(program, "divisor"), 3);
conformance/attribs/gl-vertex-attrib-render.html:  gl.readPixels(0, 0, w, w, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/attribs/gl-vertex-attrib-render.html:  gl.enableVertexAttribArray(gl.p);
conformance/attribs/gl-vertex-attrib-render.html:  var pos = gl.createBuffer();
conformance/attribs/gl-vertex-attrib-render.html:  pos.type = gl.FLOAT;
conformance/attribs/gl-vertex-attrib-render.html:  gl.bindBuffer(gl.ARRAY_BUFFER, pos);
conformance/attribs/gl-vertex-attrib-render.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]), gl.STATIC_DRAW);
conformance/attribs/gl-vertex-attrib-render.html:  gl.vertexAttribPointer(0, pos.size, pos.type, false, 0, 0);
conformance/attribs/gl-vertex-attrib-render.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/attribs/gl-vertex-attrib-render.html:    gl.drawArrays(gl.TRIANGLE_STRIP, 0, pos.num);
conformance/buffers/index-validation-with-resized-buffer.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after initialization");
conformance/buffers/index-validation-with-resized-buffer.html:var vertexObject = gl.createBuffer();
conformance/buffers/index-validation-with-resized-buffer.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/buffers/index-validation-with-resized-buffer.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(
conformance/buffers/index-validation-with-resized-buffer.html:     -1,-1,0, 1,1,0, 1,-1,0]), gl.STATIC_DRAW);
conformance/buffers/index-validation-with-resized-buffer.html:gl.enableVertexAttribArray(0);
conformance/buffers/index-validation-with-resized-buffer.html:gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/buffers/index-validation-with-resized-buffer.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after vertex setup");
conformance/buffers/index-validation-with-resized-buffer.html:var texCoordObject = gl.createBuffer();
conformance/buffers/index-validation-with-resized-buffer.html:gl.bindBuffer(gl.ARRAY_BUFFER, texCoordObject);
conformance/buffers/index-validation-with-resized-buffer.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(
conformance/buffers/index-validation-with-resized-buffer.html:     0,1, 1,0, 1,1]), gl.STATIC_DRAW);
conformance/buffers/index-validation-with-resized-buffer.html:gl.enableVertexAttribArray(1);
conformance/buffers/index-validation-with-resized-buffer.html:gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance/buffers/index-validation-with-resized-buffer.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after texture coord setup");
conformance/buffers/index-validation-with-resized-buffer.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/buffers/index-validation-with-resized-buffer.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/buffers/index-validation-with-resized-buffer.html:    -1,1,0, 1,1,0, -1,-1,0, 1,-1,0]), gl.STATIC_DRAW);
conformance/buffers/index-validation-with-resized-buffer.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after vertex redefinition");
conformance/buffers/index-validation-with-resized-buffer.html:gl.bindBuffer(gl.ARRAY_BUFFER, texCoordObject);
conformance/buffers/index-validation-with-resized-buffer.html:gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array([
conformance/buffers/index-validation-with-resized-buffer.html:    0, 255, 0, 255]), gl.STATIC_DRAW);
conformance/buffers/index-validation-with-resized-buffer.html:gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, false, 0, 0);
conformance/buffers/index-validation-with-resized-buffer.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after texture coordinate / color redefinition");
conformance/buffers/index-validation-with-resized-buffer.html:var indexObject = gl.createBuffer();
conformance/buffers/index-validation-with-resized-buffer.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance/buffers/index-validation-with-resized-buffer.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/buffers/index-validation-with-resized-buffer.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setting up indices");
conformance/buffers/index-validation-with-resized-buffer.html:gl.drawElements(gl.TRIANGLES, numQuads * 6, gl.UNSIGNED_BYTE, 0);
conformance/buffers/index-validation-with-resized-buffer.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
conformance/attribs/gl-bindAttribLocation-matrix.html:var maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
conformance/attribs/gl-bindAttribLocation-matrix.html:var glFragmentShader = wtu.loadShader(gl, wtu.simpleColorFragmentShader, gl.FRAGMENT_SHADER);
conformance/attribs/gl-bindAttribLocation-matrix.html:    return wtu.loadShader(gl, strVertexShader, gl.VERTEX_SHADER);
conformance/attribs/gl-bindAttribLocation-matrix.html:    var glProgram = gl.createProgram();
conformance/attribs/gl-bindAttribLocation-matrix.html:    gl.bindAttribLocation(glProgram, matrixLocation, 'matrix');
conformance/attribs/gl-bindAttribLocation-matrix.html:    gl.bindAttribLocation(glProgram, vectorLocation, 'vector');
conformance/attribs/gl-bindAttribLocation-matrix.html:    gl.attachShader(glProgram, glVertexShader);
conformance/attribs/gl-bindAttribLocation-matrix.html:    gl.attachShader(glProgram, glFragmentShader);
conformance/attribs/gl-bindAttribLocation-matrix.html:    gl.linkProgram(glProgram);
conformance/attribs/gl-bindAttribLocation-matrix.html:    return gl.getProgramParameter(glProgram, gl.LINK_STATUS);
conformance/glsl/bugs/sampler-struct-function-arg.html:    var textureGreen = gl.createTexture()
conformance/glsl/bugs/sampler-struct-function-arg.html:    gl.bindTexture(gl.TEXTURE_2D, textureGreen);
conformance/glsl/bugs/sampler-struct-function-arg.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/glsl/bugs/sampler-struct-function-arg.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/glsl/bugs/sampler-struct-function-arg.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/glsl/bugs/sampler-struct-function-arg.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/glsl/bugs/sampler-struct-function-arg.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/glsl/bugs/sampler-struct-function-arg.html:    gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/glsl/bugs/sampler-struct-function-arg.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/bugs/sampler-struct-function-arg.html:        gl.activeTexture(gl.TEXTURE0);
conformance/glsl/bugs/sampler-struct-function-arg.html:        gl.bindTexture(gl.TEXTURE_2D, textureGreen);
conformance/glsl/bugs/sampler-struct-function-arg.html:        gl.uniform1i(uniformMap['green.source'].location, 0);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    var buf = gl.createBuffer();
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferData(gl.ARRAY_BUFFER, 4, gl.STATIC_DRAW);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "no buffer bound");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferData(gl.ARRAY_BUFFER, -4, gl.STATIC_DRAW);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferData(gl.ARRAY_BUFFER, null, gl.STATIC_DRAW);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferData(gl.ARRAY_BUFFER, undefined, gl.STATIC_DRAW);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/buffers/buffer-data-and-buffer-sub-data.html:        var buffer = gl.createBuffer();
conformance/buffers/buffer-data-and-buffer-sub-data.html:        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance/buffers/buffer-data-and-buffer-sub-data.html:        gl.bufferData(gl.ARRAY_BUFFER, bufferDataParam.parameter, gl.STATIC_DRAW);
conformance/buffers/buffer-data-and-buffer-sub-data.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Passing " + bufferDataParam.parameter + " to bufferData");
conformance/buffers/buffer-data-and-buffer-sub-data.html:        shouldEvaluateTo("gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE)", bufferDataParam.expectedBufferSize);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    var buf = gl.createBuffer();
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new ArrayBuffer(1));
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "Calling bufferSubData before bufferData should fail");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferData(gl.ARRAY_BUFFER, 128, gl.STATIC_DRAW);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferSubData(gl.ARRAY_BUFFER, -10, array);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 65, array);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "buffer overflow");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferSubData(gl.ARRAY_BUFFER, -10, new Float32Array(8));
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 10, array);
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 10, new Float32Array(0));
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/buffers/buffer-data-and-buffer-sub-data.html:    shouldThrow("gl.bufferSubData(gl.ARRAY_BUFFER, 0, 42);");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    shouldThrow("gl.bufferSubData(gl.ARRAY_BUFFER, 0, 5.5);");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    shouldThrow("gl.bufferSubData(gl.ARRAY_BUFFER, 0, \"5.5\");");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    shouldThrow("gl.bufferSubData(gl.ARRAY_BUFFER, 0, [4]);");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    shouldThrow("gl.bufferSubData(gl.ARRAY_BUFFER, 0, { mynumber: 42});");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    shouldThrow("gl.bufferSubData(gl.ARRAY_BUFFER, 10, null)");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    shouldThrow("gl.bufferSubData(gl.ARRAY_BUFFER, 10, undefined)");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should generate no GL error");
conformance/buffers/buffer-data-and-buffer-sub-data.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/attribs/gl-bindAttribLocation-repeated.html:  shouldBe("gl.getAttribLocation(g_program, 'vPosition')", "g_attribLocation");
conformance/attribs/gl-vertex-attrib-zero-issues.html:  shouldBe("g_attribLocation", "gl.getAttribLocation(g_program, 'vPosition')");
conformance/attribs/gl-vertex-attrib-zero-issues.html:  var vertexObject = gl.createBuffer();
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  var indexBuffer = gl.createBuffer();
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.useProgram(p0);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.enableVertexAttribArray(0);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.drawElements(gl.TRIANGLES, 60000, gl.UNSIGNED_SHORT, 0);
conformance/attribs/gl-vertex-attrib-zero-issues.html:      gl, gl.NO_ERROR,
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.disableVertexAttribArray(0);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.useProgram(p3);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.enableVertexAttribArray(3);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.vertexAttribPointer(3, 3, gl.FLOAT, false, 0, 0);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.drawArrays(gl.TRIANGLES, 0, 60000);
conformance/attribs/gl-vertex-attrib-zero-issues.html:      gl, gl.NO_ERROR,
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.disableVertexAttribArray(3);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.useProgram(p3);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.enableVertexAttribArray(3);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.drawElements(gl.TRIANGLES, 60000, gl.UNSIGNED_SHORT, 0);
conformance/attribs/gl-vertex-attrib-zero-issues.html:      gl, gl.NO_ERROR,
conformance/attribs/gl-vertex-attrib-zero-issues.html:  gl.disableVertexAttribArray(3);
conformance2/textures/misc/tex-image-with-different-data-source.html:var tex = gl.createTexture();
conformance2/textures/misc/tex-image-with-different-data-source.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-image-with-different-data-source.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance2/textures/misc/tex-image-with-different-data-source.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "TexImage2D taking a canvas source should succeed");
conformance2/textures/misc/tex-image-with-different-data-source.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB10_A2, 16, 16, 0, gl.RGBA, gl.UNSIGNED_INT_2_10_10_10_REV, null);
conformance2/textures/misc/tex-image-with-different-data-source.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Teximage2D taking a null array buffer should succeed");
conformance2/textures/misc/tex-image-with-different-data-source.html:gl.deleteTexture(tex);
conformance2/textures/misc/tex-image-with-different-data-source.html:tex = gl.createTexture();
conformance2/textures/misc/tex-image-with-different-data-source.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-image-with-different-data-source.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB10_A2, 16, 16, 0, gl.RGBA, gl.UNSIGNED_INT_2_10_10_10_REV, null);
conformance2/textures/misc/tex-image-with-different-data-source.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Teximage2D taking a null array buffer should succeed");
conformance2/textures/misc/tex-image-with-different-data-source.html:// gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB10_A2, gl.RGBA, gl.UNSIGNED_INT_2_10_10_10_REV, c);
conformance2/textures/misc/tex-image-with-different-data-source.html:// wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "TexImage2D taking RGB10_A2 internalformat and a canvas source should fail");
conformance2/textures/misc/tex-image-with-different-data-source.html:gl.deleteTexture(tex);
conformance2/textures/misc/tex-storage-and-subimage-3d.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            target: gl.TEXTURE_3D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            sizedformat: gl.RGBA8,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            unsizedformat: gl.RGBA,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            type: gl.UNSIGNED_BYTE,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            target: gl.TEXTURE_3D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            sizedformat: gl.R11F_G11F_B10F,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            unsizedformat: gl.RGB,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            type: gl.UNSIGNED_INT_10F_11F_11F_REV,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            target: gl.TEXTURE_3D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            sizedformat: gl.RGBA32F,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            unsizedformat: gl.RGBA,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            type: gl.FLOAT,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        var tex = gl.createTexture();
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.bindTexture(gl.TEXTURE_3D, tex);
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage3D should fail for zero width");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage3D should fail for zero height");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage3D should fail for zero depth");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage3D should fail for negative height");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, 0, testcase.sizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texStorage3D should fail for zero levels");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            gl.texStorage3D(gl.TEXTURE_3D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texStorage3D should fail for too many levels");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_2D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "texStorage3D should fail for target TEXTURE_2D");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_CUBE_MAP,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "texStorage3D should fail for target TEXTURE_CUBE_MAP");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.bindTexture(gl.TEXTURE_3D, null);
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texStorage3D should fail when no texture is bound");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.bindTexture(gl.TEXTURE_3D, tex);
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, levels, testcase.unsizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "texStorage3D should fail for bad internalformat " + enumToString(testcase.unsizedformat));
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texSubImage3D(gl.TEXTURE_2D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texSubImage3D(gl.TEXTURE_3D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texStorage3D should succeed with a good sized internalformat");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texStorage3D(gl.TEXTURE_3D, levels, testcase.sizedformat,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texStorage3D should fail on immutable-format texture");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            gl.texSubImage3D(gl.TEXTURE_3D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage3D should succeed on immutable texture as long as the format is compatible");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texSubImage3D(gl.TEXTURE_3D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texSubImage3D should fail for too-high level");
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        gl.texSubImage3D(gl.TEXTURE_3D,
conformance2/textures/misc/tex-storage-and-subimage-3d.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texSubImage3D should fail for dimension out of range");
conformance/buffers/index-validation-crash-with-buffer-sub-data.html:var elementBuffer = gl.createBuffer();
conformance/buffers/index-validation-crash-with-buffer-sub-data.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance/buffers/index-validation-crash-with-buffer-sub-data.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, 256, gl.STATIC_DRAW);
conformance/buffers/index-validation-crash-with-buffer-sub-data.html:gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 63, data);
conformance2/textures/misc/copy-texture-image.html:    var actual = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance2/textures/misc/copy-texture-image.html:    var texture = gl.createTexture();
conformance2/textures/misc/copy-texture-image.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/textures/misc/copy-texture-image.html:        var fbo = gl.createFramebuffer();
conformance2/textures/misc/copy-texture-image.html:        var srcTexture = gl.createTexture();
conformance2/textures/misc/copy-texture-image.html:        gl.bindTexture(gl.TEXTURE_2D, srcTexture);
conformance2/textures/misc/copy-texture-image.html:        gl.texImage2D(gl.TEXTURE_2D, 0, srcTexFormatsTypes.internalformat, 64, 64, 0, srcTexFormatsTypes.format, srcTexFormatsTypes.type, null);
conformance2/textures/misc/copy-texture-image.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/copy-texture-image.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, fboAttachmentType, gl.TEXTURE_2D, srcTexture, 0);
conformance2/textures/misc/copy-texture-image.html:        checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance2/textures/misc/copy-texture-image.html:        gl.bindTexture(gl.TEXTURE_2D, texture);
conformance2/textures/misc/copy-texture-image.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl[internalformat], 0, 0, 64, 64, 0);
conformance2/textures/misc/copy-texture-image.html:        gl.deleteTexture(srcTexture);
conformance2/textures/misc/copy-texture-image.html:        gl.deleteFramebuffer(fbo);
conformance2/textures/misc/copy-texture-image.html:        var srcTexFormatsTypes = { internalformat: gl.RGBA, format: gl.RGBA, type: gl.UNSIGNED_BYTE };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.NO_ERROR, "copyTexImage2D should succeed for good internalformat ");
conformance2/textures/misc/copy-texture-image.html:        srcTexFormatsTypes = { internalformat: gl.RGBA8, format: gl.RGBA, type: gl.UNSIGNED_BYTE };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.NO_ERROR, "copyTexImage2D should succeed for good internalformat ");
conformance2/textures/misc/copy-texture-image.html:        var srcTexFormatsTypes = { internalformat: gl.RGBA8, format: gl.RGBA, type: gl.UNSIGNED_BYTE };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.INVALID_OPERATION,
conformance2/textures/misc/copy-texture-image.html:        var srcTexFormatsTypes = { internalformat: gl.SRGB8_ALPHA8, format: gl.RGBA, type: gl.UNSIGNED_BYTE };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.NO_ERROR, "copyTexImage2D should succeed for good internalformat ");
conformance2/textures/misc/copy-texture-image.html:        var srcTexFormatsTypes = { internalformat: gl.RGBA32I, format: gl.RGBA_INTEGER, type: gl.INT };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.NO_ERROR, "copyTexImage2D should succeed for good internalformat ");
conformance2/textures/misc/copy-texture-image.html:        var srcTexFormatsTypes = { internalformat: gl.RGBA32I, format: gl.RGBA_INTEGER, type: gl.INT };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.INVALID_OPERATION,
conformance2/textures/misc/copy-texture-image.html:        var srcTexFormatsTypes = { internalformat: gl.RGBA32UI, format: gl.RGBA_INTEGER, type: gl.UNSIGNED_INT };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.NO_ERROR, "copyTexImage2D should succeed for good internalformat ");
conformance2/textures/misc/copy-texture-image.html:        var srcTexFormatsTypes = { internalformat: gl.RGBA32UI, format: gl.RGBA_INTEGER, type: gl.UNSIGNED_INT };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.INVALID_OPERATION,
conformance2/textures/misc/copy-texture-image.html:        const srcTexFormatsTypes = { internalformat: gl.RGBA8, format: gl.RGBA, type: gl.UNSIGNED_BYTE };
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0, gl.INVALID_ENUM, "copyTexImage2D should fail for snorm internalformat ");
conformance2/textures/misc/copy-texture-image.html:        if (gl.getExtension("EXT_color_buffer_float")) {
conformance2/textures/misc/copy-texture-image.html:            var srcTexFormatsTypes = { internalformat: gl.RGBA32F, format: gl.RGBA, type: gl.FLOAT};
conformance2/textures/misc/copy-texture-image.html:            testFormat(internalformat, srcTexFormatsTypes, gl.COLOR_ATTACHMENT0,
conformance2/textures/misc/copy-texture-image.html:                       [gl.INVALID_ENUM, gl.INVALID_OPERATION],
conformance2/textures/misc/copy-texture-image.html:        var srcTexFormatsTypes = { internalformat: gl.DEPTH24_STENCIL8, format: gl.DEPTH_STENCIL, type: gl.UNSIGNED_INT_24_8};
conformance2/textures/misc/copy-texture-image.html:        testFormat(internalformat, srcTexFormatsTypes, gl.DEPTH_STENCIL_ATTACHMENT,
conformance2/textures/misc/copy-texture-image.html:                   [gl.INVALID_ENUM, gl.INVALID_OPERATION],
conformance2/textures/misc/copy-texture-image.html:    gl.deleteTexture(texture);
conformance/buffers/index-validation.html:  case gl.BYTE:
conformance/buffers/index-validation.html:  case gl.UNSIGNED_BYTE:
conformance/buffers/index-validation.html:  case gl.SHORT:
conformance/buffers/index-validation.html:  case gl.UNSIGNED_SHORT:
conformance/buffers/index-validation.html:  case gl.INT:
conformance/buffers/index-validation.html:  case gl.UNSIGNED_INT:
conformance/buffers/index-validation.html:  case gl.FLOAT:
conformance/buffers/index-validation.html:var bufferComplete = gl.createBuffer();
conformance/buffers/index-validation.html:gl.bindBuffer(gl.ARRAY_BUFFER, bufferComplete);
conformance/buffers/index-validation.html:gl.bufferData(gl.ARRAY_BUFFER, dataComplete, gl.STATIC_DRAW);
conformance/buffers/index-validation.html:var elements = gl.createBuffer();
conformance/buffers/index-validation.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elements);
conformance/buffers/index-validation.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/buffers/index-validation.html:gl.useProgram(program);
conformance/buffers/index-validation.html:var vertexLoc = gl.getAttribLocation(program, "a_vertex");
conformance/buffers/index-validation.html:var normalLoc = gl.getAttribLocation(program, "a_normal");
conformance/buffers/index-validation.html:gl.vertexAttribPointer(vertexLoc, 4, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 0);
conformance/buffers/index-validation.html:gl.enableVertexAttribArray(vertexLoc);
conformance/buffers/index-validation.html:gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance/buffers/index-validation.html:gl.enableVertexAttribArray(normalLoc);
conformance/buffers/index-validation.html:shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/index-validation.html:shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)');
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/index-validation.html:var bufferIncomplete = gl.createBuffer();
conformance/buffers/index-validation.html:gl.bindBuffer(gl.ARRAY_BUFFER, bufferIncomplete);
conformance/buffers/index-validation.html:gl.bufferData(gl.ARRAY_BUFFER, dataIncomplete, gl.STATIC_DRAW);
conformance/buffers/index-validation.html:gl.vertexAttribPointer(vertexLoc, 4, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 0);
conformance/buffers/index-validation.html:gl.enableVertexAttribArray(vertexLoc);
conformance/buffers/index-validation.html:gl.disableVertexAttribArray(normalLoc);
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/index-validation.html:shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)');
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/index-validation.html:gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance/buffers/index-validation.html:gl.enableVertexAttribArray(normalLoc);
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/index-validation.html:shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)');
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, [gl.INVALID_OPERATION, gl.NO_ERROR]);
conformance/buffers/index-validation.html:gl.disableVertexAttribArray(normalLoc);
conformance/buffers/index-validation.html:gl.enableVertexAttribArray(extraLoc);
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/index-validation.html:shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)');
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION);
conformance/buffers/index-validation.html:gl.vertexAttribPointer(extraLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/buffers/index-validation.html:shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)');
conformance/buffers/index-validation.html:gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), -2000000000 * sizeInBytes(gl.FLOAT));
conformance/buffers/index-validation.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance/buffers/index-validation.html:shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)');
conformance2/textures/misc/copy-texture-image-luma-format.html:            format: gl.ALPHA,
conformance2/textures/misc/copy-texture-image-luma-format.html:            format: gl.LUMINANCE,
conformance2/textures/misc/copy-texture-image-luma-format.html:            format: gl.LUMINANCE_ALPHA,
conformance2/textures/misc/copy-texture-image-luma-format.html:        texture[0] = gl.createTexture();
conformance2/textures/misc/copy-texture-image-luma-format.html:        texture[1] = gl.createTexture();
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.bindTexture(gl.TEXTURE_2D, texture[0]);
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint1);
conformance2/textures/misc/copy-texture-image-luma-format.html:        var fbo = gl.createFramebuffer();
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[0], 0);
conformance2/textures/misc/copy-texture-image-luma-format.html:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance2/textures/misc/copy-texture-image-luma-format.html:            gl.bindTexture(gl.TEXTURE_3D, texture[1]);
conformance2/textures/misc/copy-texture-image-luma-format.html:            gl.texImage3D(gl.TEXTURE_3D, 0, testcase.format, width, height, depth, 0, testcase.format, gl.UNSIGNED_BYTE, null);
conformance2/textures/misc/copy-texture-image-luma-format.html:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, layer, 0, 0,width, height);
conformance2/textures/misc/copy-texture-image-luma-format.html:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/copy-texture-image-luma-format.html:                    if (testcase.format == gl.ALPHA) {
conformance2/textures/misc/copy-texture-image-luma-format.html:                    } else if (testcase.format == gl.LUMINANCE) {
conformance2/textures/misc/copy-texture-image-luma-format.html:                    } else { // gl.LUMINANCE_ALPHA
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.bindTexture(gl.TEXTURE_3D, null);
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.deleteFramebuffer(fbo);
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.deleteTexture(texture[0]);
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.deleteTexture(texture[1]);
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.deleteProgram(program);
conformance2/textures/misc/copy-texture-image-luma-format.html:    gl.texParameteri(
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST
conformance2/textures/misc/copy-texture-image-luma-format.html:    gl.texParameteri(
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST
conformance2/textures/misc/copy-texture-image-luma-format.html:    gl.texParameteri(
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE
conformance2/textures/misc/copy-texture-image-luma-format.html:    gl.texParameteri(
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE
conformance2/textures/misc/copy-texture-image-luma-format.html:    gl.texParameteri(
conformance2/textures/misc/copy-texture-image-luma-format.html:        gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.FLOAT,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.FLOAT,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.SHORT,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.UNSIGNED_SHORT,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.UNSIGNED_SHORT,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.SHORT,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.BYTE,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.UNSIGNED_BYTE,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.BYTE,
conformance/attribs/gl-vertexattribpointer-offsets.html:                type: gl.UNSIGNED_BYTE,
conformance/attribs/gl-vertexattribpointer-offsets.html:            var vertexObject = gl.createBuffer();
conformance/attribs/gl-vertexattribpointer-offsets.html:            gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/attribs/gl-vertexattribpointer-offsets.html:            gl.bufferData(gl.ARRAY_BUFFER, 1024, gl.STATIC_DRAW);
conformance/attribs/gl-vertexattribpointer-offsets.html:            gl.enableVertexAttribArray(0);
conformance/attribs/gl-vertexattribpointer-offsets.html:            var colorLoc = gl.getUniformLocation(program, "color");
conformance/attribs/gl-vertexattribpointer-offsets.html:                  gl.uniform4fv(colorLoc, color);
conformance/attribs/gl-vertexattribpointer-offsets.html:                  gl.bufferSubData(gl.ARRAY_BUFFER, offset, data);
conformance/attribs/gl-vertexattribpointer-offsets.html:                  gl.vertexAttribPointer(0, 3, test.type, test.normalize, stride, offset);
conformance/attribs/gl-vertexattribpointer-offsets.html:                  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/attribs/gl-vertexattribpointer-offsets.html:                  gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/attribs/gl-vertexattribpointer-offsets.html:                  gl.readPixels(0, 0, 50, 50, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance2/textures/misc/tex-new-formats.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance2/textures/misc/tex-new-formats.html:        var tex = gl.createTexture();
conformance2/textures/misc/tex-new-formats.html:        gl.bindTexture(gl.TEXTURE_2D, tex);
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_BYTE:
conformance2/textures/misc/tex-new-formats.html:            case gl.BYTE:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_SHORT:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_SHORT_4_4_4_4:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_SHORT_5_5_5_1:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_SHORT_5_6_5:
conformance2/textures/misc/tex-new-formats.html:            case gl.HALF_FLOAT:
conformance2/textures/misc/tex-new-formats.html:            case gl.SHORT:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_INT:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_INT_5_9_9_9_REV:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_INT_10F_11F_11F_REV:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_INT_2_10_10_10_REV:
conformance2/textures/misc/tex-new-formats.html:            case gl.UNSIGNED_INT_24_8:
conformance2/textures/misc/tex-new-formats.html:            case gl.INT:
conformance2/textures/misc/tex-new-formats.html:            case gl.FLOAT:
conformance2/textures/misc/tex-new-formats.html:            case gl.FLOAT_32_UNSIGNED_INT_24_8_REV:
conformance2/textures/misc/tex-new-formats.html:            gl.texImage2D(gl.TEXTURE_2D, 0, unsizedformat, 1, 1, 0, unsizedformat, type, data);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage2D should succeed with unsized internalformat");
conformance2/textures/misc/tex-new-formats.html:            gl.texImage2D(gl.TEXTURE_2D, 0, unsizedformat, 1, 1, 0, unsizedformat, type, baddata);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texImage2D should fail with unsized internalformat and data of wrong type");
conformance2/textures/misc/tex-new-formats.html:            gl.texImage2D(gl.TEXTURE_2D, 0, sizedformat, 1, 1, 0, unsizedformat, type, data);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage2D should succeed with sized internalformat");
conformance2/textures/misc/tex-new-formats.html:            gl.texImage2D(gl.TEXTURE_2D, 0, sizedformat, 1, 1, 0, unsizedformat, type, baddata);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texImage2D should fail with sized internalformat and data of wrong type");
conformance2/textures/misc/tex-new-formats.html:        if (gl.FLOAT_32_UNSIGNED_INT_24_8_REV != type) {
conformance2/textures/misc/tex-new-formats.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, unsizedformat, type, data);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D should succeed");
conformance2/textures/misc/tex-new-formats.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, unsizedformat, type, baddata);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texSubImage2D should fail with data of wrong type");
conformance2/textures/misc/tex-new-formats.html:            gl.texStorage2D(gl.TEXTURE_2D, 1, sizedformat, 1, 1);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texStorage2D should succeed");
conformance2/textures/misc/tex-new-formats.html:            if (gl.FLOAT_32_UNSIGNED_INT_24_8_REV != type) {
conformance2/textures/misc/tex-new-formats.html:                gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, unsizedformat, type, data);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D should succeed on immutable-format texture");
conformance2/textures/misc/tex-new-formats.html:                gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, unsizedformat, type, baddata);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texSubImage2D should fail on immutable-format texture with data of wrong type");
conformance2/textures/misc/tex-new-formats.html:            unsizedformat == gl.DEPTH_COMPONENT ||
conformance2/textures/misc/tex-new-formats.html:            unsizedformat == gl.DEPTH_STENCIL;
conformance2/textures/misc/tex-new-formats.html:            var tex3d = gl.createTexture();
conformance2/textures/misc/tex-new-formats.html:            gl.bindTexture(gl.TEXTURE_3D, tex3d);
conformance2/textures/misc/tex-new-formats.html:                gl.texImage3D(gl.TEXTURE_3D, 0, unsizedformat, 1, 1, 1, 0, unsizedformat, type, data);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D should succeed with unsized internalformat");
conformance2/textures/misc/tex-new-formats.html:                gl.texImage3D(gl.TEXTURE_3D, 0, unsizedformat, 1, 1, 1, 0, unsizedformat, type, baddata);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texImage3D should fail with unsized internalformat and data of wrong type");
conformance2/textures/misc/tex-new-formats.html:                gl.texImage3D(gl.TEXTURE_3D, 0, sizedformat, 1, 1, 1, 0, unsizedformat, type, data);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texImage3D should succeed with sized internalformat");
conformance2/textures/misc/tex-new-formats.html:                gl.texImage3D(gl.TEXTURE_3D, 0, sizedformat, 1, 1, 1, 0, unsizedformat, type, baddata);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texImage3D should fail with sized internalformat and data of wrong type");
conformance2/textures/misc/tex-new-formats.html:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 1, 1, 1, unsizedformat, type, data);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage3D should succeed");
conformance2/textures/misc/tex-new-formats.html:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 1, 1, 1, unsizedformat, type, baddata);
conformance2/textures/misc/tex-new-formats.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texSubImage3D should fail with data of wrong type");
conformance2/textures/misc/tex-new-formats.html:                gl.texStorage3D(gl.TEXTURE_3D, 1, sizedformat, 1, 1, 1);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texStorage3D should succeed");
conformance2/textures/misc/tex-new-formats.html:                gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 1, 1, 1, unsizedformat, type, data);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage3D should succeed on immutable-format texture");
conformance2/textures/misc/tex-new-formats.html:                gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 1, 1, 1, unsizedformat, type, baddata);
conformance2/textures/misc/tex-new-formats.html:                wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "texSubImage3D should fail on immutable-format texture with data of wrong type");
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  var vs = gl.createShader(gl.VERTEX_SHADER);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  gl.shaderSource(vs, document.getElementById("vs").text);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  gl.compileShader(vs);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
conformance/glsl/bugs/angle-d3d11-compiler-error.html:      testFailed("Vertex Shader failed to compile: " + gl.getShaderInfoLog(vs));
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  var fs = gl.createShader(gl.FRAGMENT_SHADER);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  gl.shaderSource(fs, document.getElementById("fs").text);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  gl.compileShader(fs);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {
conformance/glsl/bugs/angle-d3d11-compiler-error.html:      testFailed("Fragment Shader failed to compile: " + gl.getShaderInfoLog(fs));
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  var p = gl.createProgram();
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  gl.attachShader(p, vs);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  gl.attachShader(p, fs);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  gl.linkProgram(p);
conformance/glsl/bugs/angle-d3d11-compiler-error.html:  if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {
conformance/glsl/bugs/angle-d3d11-compiler-error.html:      testFailed("Program failed to link: " + gl.getProgramInfoLog(p));
conformance/more/glsl/longLoops.html:    gl.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fTextureSpecificationTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fTextureSpecificationTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fTextureSpecificationTests.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/functional/gles3/es3fTextureSpecificationTests.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/functional/gles3/es3fTextureSpecificationTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fTextureSpecificationTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fTextureSpecificationTests.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/functional/gles3/es3fTextureSpecificationTests.js:        framework.opengl.simplereference.sglrReferenceContext;
deqp/functional/gles3/es3fTextureSpecificationTests.js:            case gl.ALPHA:
deqp/functional/gles3/es3fTextureSpecificationTests.js:            case gl.LUMINANCE:
deqp/functional/gles3/es3fTextureSpecificationTests.js:            case gl.LUMINANCE_ALPHA:
deqp/functional/gles3/es3fTextureSpecificationTests.js:            case gl.RGB:
deqp/functional/gles3/es3fTextureSpecificationTests.js:            case gl.RGBA:
deqp/functional/gles3/es3fTextureSpecificationTests.js:        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        gl.pixelStorei(gl.UNPACK_ROW_LENGTH, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        if (gl.canvas.width < VIEWPORT_WIDTH ||
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.canvas.height < VIEWPORT_HEIGHT)
deqp/functional/gles3/es3fTextureSpecificationTests.js:        var width = Math.min(gl.canvas.width, VIEWPORT_WIDTH);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        var height = Math.min(gl.canvas.height, VIEWPORT_HEIGHT);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        var x = rnd.getInt(0, gl.canvas.width - width);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        var y = rnd.getInt(0, gl.canvas.height - height);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                8, 8, 8, gl.getParameter(gl.ALPHA_BITS) ? 8 : 0
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT |
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.STENCIL_BUFFER_BIT
deqp/functional/gles3/es3fTextureSpecificationTests.js:                this.m_context.getError() == gl.NO_ERROR,
deqp/functional/gles3/es3fTextureSpecificationTests.js:     *  framework.opengl.simplereference.sglrShaderProgram.ShaderProgram
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL, this.m_numLevels - 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.NEAREST_MIPMAP_NEAREST
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.NEAREST
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAX_LEVEL,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.NEAREST_MIPMAP_NEAREST
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.NEAREST
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_R,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAX_LEVEL,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.NEAREST_MIPMAP_NEAREST
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.NEAREST
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, gl.TEXTURE_WRAP_S,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, gl.TEXTURE_WRAP_T,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, gl.TEXTURE_WRAP_R,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, gl.TEXTURE_MAX_LEVEL,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, this.m_internalFormat, levelW, levelH, 0,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, ndx, this.m_internalFormat, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, ndx, this.m_internalFormat, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, levelNdx, this.m_internalFormat, levelW, levelH, 0,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, this.m_internalFormat, levelW, levelH, 0,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D, 0, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, this.m_imageHeight);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_IMAGES, this.m_skipImages);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_3D, 0, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, this.m_internalFormat, levelW, levelH, 0,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, x, y, w, h, this.m_format, this.m_dataType,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D, 0, this.m_internalFormat, this.m_width,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D, 0, this.m_subX, this.m_subY,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, ndx, this.m_internalFormat, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, ndx, x, y, z, w, h, d,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, this.m_internalFormat, levelW, levelH, 0,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, 0, 0, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.texImage2D(gl.TEXTURE_2D, 0, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D, 0, this.m_subX, this.m_subY, this.m_subW,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_3D, 0, this.m_internalFormat, this.m_width,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, this.m_imageHeight);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_IMAGES, this.m_skipImages);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_3D, 0, this.m_subX, this.m_subY, this.m_subZ,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                internalFormat, gl.UNSIGNED_BYTE
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, this.m_internalFormat, x, y,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                internalFormat, gl.UNSIGNED_BYTE
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, this.m_format, levelW, levelH, 0, this.m_format, this.m_dataType, data.getAccess().getDataPtr()
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, xo, yo, x, y, w, h
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D, this.m_numLevels, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, 0, 0, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_CUBE_MAP, this.m_numLevels, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D_ARRAY, this.m_numLevels, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, ndx, 0, 0, 0, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_3D, this.m_numLevels, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_3D, ndx, 0, 0, 0, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bufferData(gl.PIXEL_UNPACK_BUFFER, data, gl.STATIC_DRAW
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.texImage2D(gl.TEXTURE_2D, 0, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            this.m_context.bufferData(gl.PIXEL_UNPACK_BUFFER, data, gl.STATIC_DRAW);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bufferData(gl.PIXEL_UNPACK_BUFFER, data, gl.STATIC_DRAW);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, this.m_imageHeight);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_IMAGES, this.m_skipImages);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D_ARRAY, 0, this.m_internalFormat, this.m_width,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bufferData(gl.PIXEL_UNPACK_BUFFER, data, gl.STATIC_DRAW);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, this.m_imageHeight);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_IMAGES, this.m_skipImages);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_3D, 0, this.m_internalFormat, this.m_width,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D, 0, this.m_internalFormat,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bufferData(gl.PIXEL_UNPACK_BUFFER, access.getBuffer(), gl.STATIC_DRAW);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D, 0, this.m_subX, this.m_subY,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.PIXEL_UNPACK_BUFFER, data, gl.STATIC_DRAW
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.texImage3D(gl.TEXTURE_2D_ARRAY, 0, this.m_internalFormat, this.m_width, this.m_height,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.PIXEL_UNPACK_BUFFER, accessSub.getBuffer(), gl.STATIC_DRAW
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_3D, 0, this.m_internalFormat, this.m_width,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.PIXEL_UNPACK_BUFFER, data, gl.STATIC_DRAW
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, this.m_imageHeight);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, this.m_rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_IMAGES, this.m_skipImages);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, this.m_skipRows);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, this.m_skipPixels);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, this.m_alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_3D, 0, this.m_subX, this.m_subY, this.m_subZ,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, this.m_internalFormat, levelW, levelH, 0,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, ndx, this.m_internalFormat, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, this.m_internalFormat, levelW, levelH, 0,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D, ndx, x, y, w, h, fmt.format, fmt.dataType,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, ndx, this.m_internalFormat, levelW, levelH,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                gl.TEXTURE_2D_ARRAY, ndx, x, y, z, w, h, d, fmt.format,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.PIXEL_UNPACK_BUFFER, access.getBuffer(), gl.STATIC_DRAW
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D, 0, this.m_internalFormat, this.m_width,
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buf);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.PIXEL_UNPACK_BUFFER, access.getBuffer(), gl.STATIC_DRAW
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ROW_LENGTH, rowLength);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_IMAGES, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);
deqp/functional/gles3/es3fTextureSpecificationTests.js:        this.m_context.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_2D_ARRAY, 0, this.m_internalFormat, this.m_width,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_CUBE_MAP_POSITIVE_X,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            gl.TEXTURE_CUBE_MAP_POSITIVE_Z
deqp/functional/gles3/es3fTextureSpecificationTests.js:                format: gl.ALPHA,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                dataType: gl.UNSIGNED_BYTE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                format: gl.LUMINANCE,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                dataType: gl.UNSIGNED_BYTE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                format: gl.LUMINANCE_ALPHA,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                dataType: gl.UNSIGNED_BYTE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                format: gl.RGB,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                dataType: gl.UNSIGNED_SHORT_5_6_5
deqp/functional/gles3/es3fTextureSpecificationTests.js:                format: gl.RGB,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                dataType: gl.UNSIGNED_BYTE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                format: gl.RGBA,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                dataType: gl.UNSIGNED_SHORT_4_4_4_4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                format: gl.RGBA,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                dataType: gl.UNSIGNED_SHORT_5_5_5_1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                format: gl.RGBA,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                dataType: gl.UNSIGNED_BYTE
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba32f', internalFormat: gl.RGBA32F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba32i', internalFormat: gl.RGBA32I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba32ui', internalFormat: gl.RGBA32UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba16f', internalFormat: gl.RGBA16F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba16i', internalFormat: gl.RGBA16I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba16ui', internalFormat: gl.RGBA16UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8', internalFormat: gl.RGBA8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8i', internalFormat: gl.RGBA8I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8ui', internalFormat: gl.RGBA8UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'srgb8_alpha8', internalFormat: gl.SRGB8_ALPHA8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb10_a2', internalFormat: gl.RGB10_A2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb10_a2ui', internalFormat: gl.RGB10_A2UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba4', internalFormat: gl.RGBA4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb5_a1', internalFormat: gl.RGB5_A1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_snorm', internalFormat: gl.RGBA8_SNORM
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8', internalFormat: gl.RGB8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb565', internalFormat: gl.RGB565
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r11f_g11f_b10f', internalFormat: gl.R11F_G11F_B10F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb32f', internalFormat: gl.RGB32F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb32i', internalFormat: gl.RGB32I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb32ui', internalFormat: gl.RGB32UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb16f', internalFormat: gl.RGB16F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb16i', internalFormat: gl.RGB16I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb16ui', internalFormat: gl.RGB16UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_snorm', internalFormat: gl.RGB8_SNORM
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8i', internalFormat: gl.RGB8I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8ui', internalFormat: gl.RGB8UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'srgb8', internalFormat: gl.SRGB8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb9_e5', internalFormat: gl.RGB9_E5
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg32f', internalFormat: gl.RG32F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg32i', internalFormat: gl.RG32I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg32ui', internalFormat: gl.RG32UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg16f', internalFormat: gl.RG16F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg16i', internalFormat: gl.RG16I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg16ui', internalFormat: gl.RG16UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg8', internalFormat: gl.RG8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg8i', internalFormat: gl.RG8I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg8ui', internalFormat: gl.RG8UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rg8_snorm', internalFormat: gl.RG8_SNORM
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r32f', internalFormat: gl.R32F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r32i', internalFormat: gl.R32I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r32ui', internalFormat: gl.R32UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r16f', internalFormat: gl.R16F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r16i', internalFormat: gl.R16I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r16ui', internalFormat: gl.R16UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8', internalFormat: gl.R8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8i', internalFormat: gl.R8I
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8ui', internalFormat: gl.R8UI
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_snorm', internalFormat: gl.R8_SNORM
deqp/functional/gles3/es3fTextureSpecificationTests.js:                internalFormat: gl.DEPTH_COMPONENT32F
deqp/functional/gles3/es3fTextureSpecificationTests.js:                internalFormat: gl.DEPTH_COMPONENT24
deqp/functional/gles3/es3fTextureSpecificationTests.js:                internalFormat: gl.DEPTH_COMPONENT16
deqp/functional/gles3/es3fTextureSpecificationTests.js:                internalFormat: gl.DEPTH32F_STENCIL8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                internalFormat: gl.DEPTH24_STENCIL8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_4_8', '', gl.R8, 4, 8, 4, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_63_1', '', gl.R8, 63, 30, 1, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_63_2', '', gl.R8, 63, 30, 1, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_63_4', '', gl.R8, 63, 30, 1, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_63_8', '', gl.R8, 63, 30, 1, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba4_51_1', '', gl.RGBA4, 51, 30, 1, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba4_51_2', '', gl.RGBA4, 51, 30, 1, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba4_51_4', '', gl.RGBA4, 51, 30, 1, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba4_51_8', '', gl.RGBA4, 51, 30, 1, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb8_39_1', '', gl.RGB8, 39, 43, 1, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb8_39_2', '', gl.RGB8, 39, 43, 1, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb8_39_4', '', gl.RGB8, 39, 43, 1, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb8_39_8', '', gl.RGB8, 39, 43, 1, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba8_47_1', '', gl.RGBA8, 47, 27, 1, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba8_47_2', '', gl.RGBA8, 47, 27, 1, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba8_47_4', '', gl.RGBA8, 47, 27, 1, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba8_47_8', '', gl.RGBA8, 47, 27, 1, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_4_8', '', gl.R8, 4, 3, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_63_1', '', gl.R8, 63, 1, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_63_2', '', gl.R8, 63, 1, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_63_4', '', gl.R8, 63, 1, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_63_8', '', gl.R8, 63, 1, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba4_51_1', '', gl.RGBA4, 51, 1, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba4_51_2', '', gl.RGBA4, 51, 1, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba4_51_4', '', gl.RGBA4, 51, 1, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba4_51_8', '', gl.RGBA4, 51, 1, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb8_39_1', '', gl.RGB8, 39, 1, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb8_39_2', '', gl.RGB8, 39, 1, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb8_39_4', '', gl.RGB8, 39, 1, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb8_39_8', '', gl.RGB8, 39, 1, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba8_47_1', '', gl.RGBA8, 47, 1, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba8_47_2', '', gl.RGBA8, 47, 1, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba8_47_4', '', gl.RGBA8, 47, 1, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba8_47_8', '', gl.RGBA8, 47, 1, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_alignment', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_row_length', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_rows', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_pixels', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex1', format: gl.R8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex2', format: gl.R8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex3', format: gl.R8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex4', format: gl.R8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex1', format: gl.RGBA8, width: 56,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex2', format: gl.RGBA8, width: 56,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex3', format: gl.RGBA8, width: 56,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex4', format: gl.RGBA8, width: 56,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba32f_complex', format: gl.RGBA32F, width: 19,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_offset', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_alignment', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_row_length', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_rows', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_pixels', format: gl.RGB8, width: 31,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            if (depthStencilFormats[ndx].internalFormat == gl.DEPTH32F_STENCIL8)
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_1_1', '', gl.R8, 64, 64, 13, 17, 1, 6, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_1_2', '', gl.R8, 64, 64, 13, 17, 1, 6, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_1_4', '', gl.R8, 64, 64, 13, 17, 1, 6, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_1_8', '', gl.R8, 64, 64, 13, 17, 1, 6, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_63_1', '', gl.R8, 64, 64, 1, 9, 63, 30, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_63_2', '', gl.R8, 64, 64, 1, 9, 63, 30, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_63_4', '', gl.R8, 64, 64, 1, 9, 63, 30, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_r8_63_8', '', gl.R8, 64, 64, 1, 9, 63, 30, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba4_51_1', '', gl.RGBA4, 64, 64, 7, 29, 51, 30, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba4_51_2', '', gl.RGBA4, 64, 64, 7, 29, 51, 30, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba4_51_4', '', gl.RGBA4, 64, 64, 7, 29, 51, 30, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba4_51_8', '', gl.RGBA4, 64, 64, 7, 29, 51, 30, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb8_39_1', '', gl.RGB8, 64, 64, 11, 8, 39, 43, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb8_39_2', '', gl.RGB8, 64, 64, 11, 8, 39, 43, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb8_39_4', '', gl.RGB8, 64, 64, 11, 8, 39, 43, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb8_39_8', '', gl.RGB8, 64, 64, 11, 8, 39, 43, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba8_47_1', '', gl.RGBA8, 64, 64, 10, 1, 47, 27, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba8_47_2', '', gl.RGBA8, 64, 64, 10, 1, 47, 27, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba8_47_4', '', gl.RGBA8, 64, 64, 10, 1, 47, 27, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba8_47_8', '', gl.RGBA8, 64, 64, 10, 1, 47, 27, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_1_1', '', gl.R8, 64, 13, 17, 1, 6, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_1_2', '', gl.R8, 64, 13, 17, 1, 6, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_1_4', '', gl.R8, 64, 13, 17, 1, 6, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_1_8', '', gl.R8, 64, 13, 17, 1, 6, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_63_1', '', gl.R8, 64, 1, 9, 63, 30, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_63_2', '', gl.R8, 64, 1, 9, 63, 30, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_63_4', '', gl.R8, 64, 1, 9, 63, 30, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_r8_63_8', '', gl.R8, 64, 1, 9, 63, 30, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba4_51_1', '', gl.RGBA4, 64, 7, 29, 51, 30, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba4_51_2', '', gl.RGBA4, 64, 7, 29, 51, 30, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba4_51_4', '', gl.RGBA4, 64, 7, 29, 51, 30, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba4_51_8', '', gl.RGBA4, 64, 7, 29, 51, 30, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb8_39_1', '', gl.RGB8, 64, 11, 8, 39, 43, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb8_39_2', '', gl.RGB8, 64, 11, 8, 39, 43, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb8_39_4', '', gl.RGB8, 64, 11, 8, 39, 43, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb8_39_8', '', gl.RGB8, 64, 11, 8, 39, 43, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba8_47_1', '', gl.RGBA8, 64, 10, 1, 47, 27, 1
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba8_47_2', '', gl.RGBA8, 64, 10, 1, 47, 27, 2
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba8_47_4', '', gl.RGBA8, 64, 10, 1, 47, 27, 4
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba8_47_8', '', gl.RGBA8, 64, 10, 1, 47, 27, 8
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_alignment', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_row_length', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_rows', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_pixels', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex1', format: gl.R8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex2', format: gl.R8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex3', format: gl.R8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex4', format: gl.R8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex1', format: gl.RGBA8, width: 92,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex2', format: gl.RGBA8, width: 92,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex3', format: gl.RGBA8, width: 92,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex4', format: gl.RGBA8, width: 92,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba32f_complex', format: gl.RGBA32F, width: 92,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_offset', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_alignment', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_row_length', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_rows', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_pixels', format: gl.RGB8, width: 54,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            if (depthStencilFormats[ndx].internalFormat == gl.DEPTH32F_STENCIL8)
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_alpha', '', gl.ALPHA, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_luminance', '', gl.LUMINANCE, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_luminance_alpha', '', gl.LUMINANCE_ALPHA, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb', '', gl.RGB, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba', '', gl.RGBA, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_alpha', '', gl.ALPHA, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_luminance', '', gl.LUMINANCE, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_luminance_alpha', '', gl.LUMINANCE_ALPHA, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb', '', gl.RGB, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba', '', gl.RGBA, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_alpha', '', gl.ALPHA, gl.UNSIGNED_BYTE, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_luminance', '', gl.LUMINANCE, gl.UNSIGNED_BYTE, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_luminance_alpha', '', gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgb', '', gl.RGB, gl.UNSIGNED_BYTE, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                '2d_rgba', '', gl.RGBA, gl.UNSIGNED_BYTE, 128, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_alpha', '', gl.ALPHA, gl.UNSIGNED_BYTE, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_luminance', '', gl.LUMINANCE, gl.UNSIGNED_BYTE, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_luminance_alpha', '', gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgb', '', gl.RGB, gl.UNSIGNED_BYTE, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                'cube_rgba', '', gl.RGBA, gl.UNSIGNED_BYTE, 64
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_image_height', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_row_length', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_images', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_rows', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_pixels', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex1', format: gl.R8, width: 13,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex2', format: gl.R8, width: 13,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex3', format: gl.R8, width: 13,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex4', format: gl.R8, width: 13,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex1', format: gl.RGBA8, width: 11,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex2', format: gl.RGBA8, width: 11,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex3', format: gl.RGBA8, width: 11,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex4', format: gl.RGBA8, width: 11,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba32f_complex', format: gl.RGBA32F, width: 11,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_offset', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_alignment', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_image_height', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_row_length', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_images', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_rows', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_pixels', format: gl.RGB8, width: 23,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            if (depthStencilFormats[ndx].internalFormat == gl.DEPTH32F_STENCIL8)
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_image_height', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_row_length', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_images', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_rows', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_pixels', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex1', format: gl.R8, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex2', format: gl.R8, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex3', format: gl.R8, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'r8_complex4', format: gl.R8, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex1', format: gl.RGBA8, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex2', format: gl.RGBA8, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex3', format: gl.RGBA8, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba8_complex4', format: gl.RGBA8, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgba32f_complex', format: gl.RGBA32F, width: 15,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_offset', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_image_height', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_row_length', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_images', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_rows', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:                name: 'rgb8_skip_pixels', format: gl.RGB8, width: 26,
deqp/functional/gles3/es3fTextureSpecificationTests.js:            if (depthStencilFormats[ndx].internalFormat == gl.DEPTH32F_STENCIL8)
deqp/functional/gles3/es3fTextureSpecificationTests.js:            if (internalFormat == gl.DEPTH32F_STENCIL8)
deqp/functional/gles3/es3fTextureSpecificationTests.js:            format = gl.RGBA8;
deqp/functional/gles3/es3fTextureSpecificationTests.js:            format = gl.RGBA8;
deqp/functional/gles3/es3fTextureSpecificationTests.js:            if (internalFormat == gl.DEPTH32F_STENCIL8)
deqp/functional/gles3/es3fTextureSpecificationTests.js:            format = gl.RGBA8;
deqp/functional/gles3/es3fTextureSpecificationTests.js:            format = gl.RGBA8;
conformance/misc/expando-loss.html:        assertMsg(instance === gl.getParameter(test.retrieveConstant), msg + " returns instance that was bound.");
conformance/misc/expando-loss.html:        verifyTestExpandos(gl.getParameter(test.retrieveConstant), msg);
conformance/misc/expando-loss.html:    var vs = wtu.loadShader(gl, wtu.simpleVertexShader, gl.VERTEX_SHADER);
conformance/misc/expando-loss.html:    var fs = wtu.loadShader(gl, wtu.simpleColorFragmentShader, gl.FRAGMENT_SHADER);
conformance/misc/expando-loss.html:    assertMsg(program === gl.getParameter(gl.CURRENT_PROGRAM), "getParameter(gl.CURRENT_PROGRAM) return instance set with useProgram");
conformance/misc/expando-loss.html:    var attachedShaders = gl.getAttachedShaders(program);
conformance/misc/expando-loss.html:    var currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);
conformance/misc/expando-loss.html:    var retrievedShaders = gl.getAttachedShaders(currentProgram);
conformance/misc/expando-loss.html:    var position = gl.getAttribLocation(program, "vPosition");
conformance/misc/expando-loss.html:    var buffer = gl.createBuffer();
conformance/misc/expando-loss.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance/misc/expando-loss.html:    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0);
conformance/misc/expando-loss.html:    assertMsg(buffer === gl.getVertexAttrib(position, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING),
conformance/misc/expando-loss.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/misc/expando-loss.html:    var retrievedBuffer = gl.getVertexAttrib(position, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
conformance/misc/expando-loss.html:    var framebuffer = gl.createFramebuffer();
conformance/misc/expando-loss.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/misc/expando-loss.html:        { enum: gl.COLOR_ATTACHMENT0,       name: "COLOR_ATTACHMENT0" },
conformance/misc/expando-loss.html:        { enum: gl.DEPTH_ATTACHMENT,        name: "DEPTH_ATTACHMENT" },
conformance/misc/expando-loss.html:        { enum: gl.STENCIL_ATTACHMENT,      name: "STENCIL_ATTACHMENT" },
conformance/misc/expando-loss.html:        { enum: gl.DEPTH_STENCIL_ATTACHMENT,name: "DEPTH_STENCIL_ATTACHMENT" },
conformance/misc/expando-loss.html:        var renderbuffer = gl.createRenderbuffer();
conformance/misc/expando-loss.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance/misc/expando-loss.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
conformance/misc/expando-loss.html:        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment.enum, gl.RENDERBUFFER, renderbuffer);
conformance/misc/expando-loss.html:        assertMsg(renderbuffer === gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, attachment.enum, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME),
conformance/misc/expando-loss.html:        var retrievedRenderbuffer = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, attachment.enum, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);
conformance/misc/functions-returning-strings.html:  var vs = gl.createShader(gl.VERTEX_SHADER);
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getShaderSource(vs)");
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getShaderInfoLog(vs)");
conformance/misc/functions-returning-strings.html:  gl.shaderSource(vs, validVertexShaderString);
conformance/misc/functions-returning-strings.html:  gl.compileShader(vs);
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getShaderSource(vs)");
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getShaderInfoLog(vs)");
conformance/misc/functions-returning-strings.html:  var fs = gl.createShader(gl.FRAGMENT_SHADER);
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getShaderSource(fs)");
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getShaderInfoLog(fs)");
conformance/misc/functions-returning-strings.html:  gl.shaderSource(fs, validFragmentShaderString);
conformance/misc/functions-returning-strings.html:  gl.compileShader(fs);
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getShaderSource(fs)");
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getShaderInfoLog(fs)");
conformance/misc/functions-returning-strings.html:  var prog = gl.createProgram();
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getProgramInfoLog(prog)");
conformance/misc/functions-returning-strings.html:  gl.attachShader(prog, vs);
conformance/misc/functions-returning-strings.html:  gl.attachShader(prog, fs);
conformance/misc/functions-returning-strings.html:  gl.linkProgram(prog);
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getProgramInfoLog(prog)");
conformance/misc/functions-returning-strings.html:  var exts = gl.getSupportedExtensions();
conformance/misc/functions-returning-strings.html:      shouldReturnString("gl.getSupportedExtensions()[" + s + "]");
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getParameter(gl.VENDOR)");
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getParameter(gl.RENDERER)");
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getParameter(gl.VERSION)");
conformance/misc/functions-returning-strings.html:  shouldReturnString("gl.getParameter(gl.SHADING_LANGUAGE_VERSION)");
conformance/canvas/buffer-preserve-test.html:shouldBeTrue('gl.getContextAttributes().preserveDrawingBuffer == false');
conformance/canvas/buffer-preserve-test.html:gl.clearColor(1, 0, 0, 1);
conformance/canvas/buffer-preserve-test.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
conformance/canvas/buffer-preserve-test.html:gl.scissor(0, 10, 10, 10);
conformance/canvas/buffer-preserve-test.html:gl.enable(gl.SCISSOR_TEST);
conformance/canvas/buffer-preserve-test.html:    gl.clearColor(0, 0, 1, 1);
conformance/canvas/buffer-preserve-test.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/more/util.js:  var tex = gl.createTexture();
conformance/more/util.js:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/util.js:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, elem);
conformance/more/util.js:    gl.generateMipmap(gl.TEXTURE_2D);
conformance/more/util.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/more/util.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/more/util.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/more/util.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
conformance/more/util.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/more/util.js:    shader = gl.createShader(gl.FRAGMENT_SHADER);
conformance/more/util.js:    shader = gl.createShader(gl.VERTEX_SHADER);
conformance/more/util.js:  gl.shaderSource(shader, str);
conformance/more/util.js:  gl.compileShader(shader);
conformance/more/util.js:  if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) != 1) {
conformance/more/util.js:    var ilog = gl.getShaderInfoLog(shader);
conformance/more/util.js:    gl.deleteShader(shader);
conformance/more/util.js:  var id = gl.createProgram();
conformance/more/util.js:      gl.attachShader(id, sh);
conformance/more/util.js:  gl.linkProgram(id);
conformance/more/util.js:  gl.validateProgram(id);
conformance/more/util.js:  if (gl.getProgramParameter(id, gl.LINK_STATUS) != 1) {
conformance/more/util.js:  if (gl.getProgramParameter(id, gl.VALIDATE_STATUS) != 1) {
conformance/more/util.js:  gl.useProgram(null);
conformance/more/util.js:    gl.detachShader(sh.program, s);
conformance/more/util.js:    gl.deleteShader(s);
conformance/more/util.js:  gl.deleteProgram(sh.program);
conformance/more/util.js:  var e = gl.getError();
conformance/more/util.js:  if (e != gl.NO_ERROR) {
conformance/more/util.js:  var e = gl.getError();
conformance/more/util.js:    this.gl.useProgram(this.shader.program);
conformance/more/util.js:    this.gl.uniform1fv(loc, value);
conformance/more/util.js:    this.gl.uniform2fv(loc, value);
conformance/more/util.js:    this.gl.uniform3fv(loc, value);
conformance/more/util.js:    this.gl.uniform4fv(loc, value);
conformance/more/util.js:    this.gl.uniform1f(loc, value);
conformance/more/util.js:    this.gl.uniform2f(loc, v1,v2);
conformance/more/util.js:    this.gl.uniform3f(loc, v1,v2,v3);
conformance/more/util.js:    this.gl.uniform4f(loc, v1, v2, v3, v4);
conformance/more/util.js:    this.gl.uniform1iv(loc, value);
conformance/more/util.js:    this.gl.uniform2iv(loc, value);
conformance/more/util.js:    this.gl.uniform3iv(loc, value);
conformance/more/util.js:    this.gl.uniform4iv(loc, value);
conformance/more/util.js:    this.gl.uniform1i(loc, value);
conformance/more/util.js:    this.gl.uniform2i(loc, v1,v2);
conformance/more/util.js:    this.gl.uniform3i(loc, v1,v2,v3);
conformance/more/util.js:    this.gl.uniform4i(loc, v1, v2, v3, v4);
conformance/more/util.js:    this.gl.uniformMatrix4fv(loc, false, value);
conformance/more/util.js:    this.gl.uniformMatrix3fv(loc, false, value);
conformance/more/util.js:    this.gl.uniformMatrix2fv(loc, false, value);
conformance/more/util.js:      var loc = this.gl.getAttribLocation(this.shader.program, name);
conformance/more/util.js:      var loc = this.gl.getUniformLocation(this.shader.program, name);
conformance/more/util.js:        this.gl.deleteBuffer(this.vbos[i]);
conformance/more/util.js:      this.gl.deleteBuffer(this.elementsVBO);
conformance/more/util.js:    gl.getError();
conformance/more/util.js:      vbos.push(gl.createBuffer());
conformance/more/util.js:      this.elementsVBO = gl.createBuffer();
conformance/more/util.js:        gl.bindBuffer(gl.ARRAY_BUFFER, vbos[i]);
conformance/more/util.js:        gl.bufferData(gl.ARRAY_BUFFER, d.floatArray, gl.STATIC_DRAW);
conformance/more/util.js:        this.elementsType = d.type == gl.UNSIGNED_BYTE ? d.type : gl.UNSIGNED_SHORT;
conformance/more/util.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementsVBO);
conformance/more/util.js:        if (this.elementsType == gl.UNSIGNED_SHORT && !d.ushortArray) {
conformance/more/util.js:          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, d.ushortArray, gl.STATIC_DRAW);
conformance/more/util.js:        } else if (this.elementsType == gl.UNSIGNED_BYTE && !d.ubyteArray) {
conformance/more/util.js:          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, d.ubyteArray, gl.STATIC_DRAW);
conformance/more/util.js:        gl.deleteBuffer(vbos[i]);
conformance/more/util.js:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/util.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance/more/util.js:      gl.bindBuffer(gl.ARRAY_BUFFER, this.vbos[i]);
conformance/more/util.js:      gl.vertexAttribPointer(arguments[i], this.data[i].size, gl.FLOAT, false, 0, 0);
conformance/more/util.js:      gl.enableVertexAttribArray(arguments[i]);
conformance/more/util.js:      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementsVBO);
conformance/more/util.js:      gl.drawElements(gl[this.type], this.elementsLength, this.elementsType, 0);
conformance/more/util.js:      gl.drawArrays(gl[this.type], 0, this.length);
conformance/more/util.js:    if (this.fbo) this.gl.deleteFramebuffer(this.fbo);
conformance/more/util.js:    if (this.rbo) this.gl.deleteRenderbuffer(this.rbo);
conformance/more/util.js:    if (this.texture) this.gl.deleteTexture(this.texture);
conformance/more/util.js:    var fbo = this.fbo != null ? this.fbo : gl.createFramebuffer();
conformance/more/util.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/more/util.js:      rb = this.rbo != null ? this.rbo : gl.createRenderbuffer();
conformance/more/util.js:      gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
conformance/more/util.js:      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);
conformance/more/util.js:    var tex = this.texture != null ? this.texture : gl.createTexture();
conformance/more/util.js:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/util.js:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/more/util.js:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, tmp);
conformance/more/util.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/more/util.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/more/util.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/more/util.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/more/util.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/more/util.js:      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb);
conformance/more/util.js:    var fbstat = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance/more/util.js:    if (fbstat != gl.FRAMEBUFFER_COMPLETE) {
conformance/more/util.js:    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbo);
conformance/more/util.js:      var err = gl.getError();
conformance/more/util.js:      if (err != gl.NO_ERROR) {
conformance/more/util.js:  wrap.getError = function(){ return gl.getError(); };
deqp/functional/gles3/es3fVertexArrayObjectTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fVertexArrayObjectTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    this.type = gl.FLOAT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    this.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        var buffer = gl.createBuffer();
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        gl.bindBuffer(target, buffer);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        gl.bufferData(target, data, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        gl.bindBuffer(target, null);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.bindBuffer(target, this.m_buffers[index]);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        case gl.FLOAT: typedArray = Float32Array; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        case gl.INT: typedArray = Int32Array; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        case gl.UNSIGNED_INT: typedArray = Uint32Array; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        case gl.SHORT: typedArray = Int16Array; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        case gl.UNSIGNED_SHORT: typedArray = Uint16Array; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        case gl.BYTE: typedArray = Int8Array; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        case gl.UNSIGNED_BYTE: typedArray = Uint8Array; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.FLOAT: stride = buffer.componentCount * 4; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.INT: stride = buffer.componentCount * 4; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.UNSIGNED_INT: stride = buffer.componentCount * 4; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.SHORT: stride = buffer.componentCount * 2; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.UNSIGNED_SHORT: stride = buffer.componentCount * 2; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.BYTE: stride = buffer.componentCount * 1; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.UNSIGNED_BYTE: stride = buffer.componentCount * 1; break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.FLOAT: {
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.SHORT: scale = (1.0 / ((1 << 14) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_SHORT: scale = (1.0 / ((1 << 15) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.INT: scale = (1.0 / ((1 << 30) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_INT: scale = (1.0 / ((1 << 31) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.BYTE: scale = (1.0 / ((1 << 6) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_BYTE: scale = (1.0 / ((1 << 7) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        } else if (state.attributes[attribNdx].type != gl.FLOAT && !state.attributes[attribNdx].normalized) {
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.SHORT: scale = (0.5 / ((1 << 14) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_SHORT: scale = (0.5 / ((1 << 15) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.INT: scale = (0.5 / ((1 << 30) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_INT: scale = (0.5 / ((1 << 31) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.BYTE: scale = (0.5 / ((1 << 6) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_BYTE: scale = (0.5 / ((1 << 7) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.SHORT: scale = (1.0 / ((1 << 14) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.UNSIGNED_SHORT: scale = (1.0 / ((1 << 15) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.INT: scale = (1.0 / ((1 << 30) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.UNSIGNED_INT: scale = (1.0 / ((1 << 31) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.BYTE: scale = (1.0 / ((1 << 6) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            case gl.UNSIGNED_BYTE: scale = (1.0 / ((1 << 7) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        if (state.attributes[0].normalized || state.attributes[0].type == gl.FLOAT) {
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.SHORT: scale = (1.0 / ((1 << 14) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_SHORT: scale = (1.0 / ((1 << 15) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.INT: scale = (1.0 / ((1 << 30) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_INT: scale = (1.0 / ((1 << 31) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.BYTE: scale = (1.0 / ((1 << 6) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:                case gl.UNSIGNED_BYTE: scale = (1.0 / ((1 << 7) - 1)); break;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    this.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, state.elementArrayBuffer);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        this.bindBuffer(gl.ARRAY_BUFFER, state.attributes[attribNdx].bufferNdx);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            gl.enableVertexAttribArray(attribNdx);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            gl.disableVertexAttribArray(attribNdx);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            gl.vertexAttribIPointer(attribNdx, state.attributes[attribNdx].size, state.attributes[attribNdx].type, state.attributes[attribNdx].stride, state.attributes[attribNdx].offset);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            gl.vertexAttribPointer(attribNdx, state.attributes[attribNdx].size, state.attributes[attribNdx].type, state.attributes[attribNdx].normalized, state.attributes[attribNdx].stride, state.attributes[attribNdx].offset);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        gl.vertexAttribDivisor(attribNdx, state.attributes[attribNdx].divisor);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.clearColor(0.7, 0.7, 0.7, 1.0);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            gl.drawElements(gl.TRIANGLES, spec.count, spec.indexType, spec.indexOffset);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            gl.drawElementsInstanced(gl.TRIANGLES, spec.count, spec.indexType, spec.indexOffset, spec.instances);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            gl.drawArrays(gl.TRIANGLES, 0, spec.count);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:            gl.drawArraysInstanced(gl.TRIANGLES, 0, spec.count, spec.instances);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:   var vao = gl.createVertexArray();
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.bindVertexArray(vao);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.bindVertexArray(null);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.bindVertexArray(vao);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.useProgram(this.m_vaoProgram.getProgram());
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.bindVertexArray(null);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.useProgram(this.m_stateProgram.getProgram());
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.deleteVertexArray(vao);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.useProgram(this.m_vaoProgram.getProgram());
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    gl.useProgram(this.m_stateProgram.getProgram());
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    var floatCoordBuffer48_1 = new es3fVertexArrayObjectTests.BufferSpec(48, 384, 2, 0, 0, gl.FLOAT, 0, 0, -1.0, 1.0);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    var floatCoordBuffer48_2 = new es3fVertexArrayObjectTests.BufferSpec(48, 384, 2, 0, 0, gl.FLOAT, 0, 0, -1.0, 1.0);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    var shortCoordBuffer48 = new es3fVertexArrayObjectTests.BufferSpec(48, 192, 2, 0, 0, gl.SHORT, -32768, 32768, 0.0, 0.0);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.FLOAT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.FLOAT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.SHORT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.SHORT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.vao.attributes[0].type = gl.SHORT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.state.attributes[0].type = gl.BYTE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.BYTE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.SHORT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[1].type = gl.FLOAT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.SHORT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.SHORT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    state.attributes[0].type = gl.FLOAT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    var indexBuffer = new es3fVertexArrayObjectTests.BufferSpec(24, 192, 1, 0, 0, gl.UNSIGNED_SHORT, 0, 47, 0.0, 0.0);
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.UNSIGNED_SHORT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    var attribCount = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fVertexArrayObjectTests.js:    spec.indexType = gl.NONE;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        spec.state.attributes[attribNdx].type = gl.SHORT;
deqp/functional/gles3/es3fVertexArrayObjectTests.js:        spec.vao.attributes[attribNdx].type = gl.SHORT;
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  var fbo = gl.createFramebuffer();
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  var tex = gl.createTexture();
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 50, 50, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.clearColor(0.0, 1.0, 0.0, 1.0);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/canvas/framebuffer-bindings-affected-by-to-data-url.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/attribs/gl-disabled-vertex-attrib.html:var numVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
conformance/attribs/gl-disabled-vertex-attrib.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
conformance/canvas/drawingbuffer-hd-dpi-test.html:  shouldBe('gl.drawingBufferWidth', 'canvas.width');
conformance/canvas/drawingbuffer-hd-dpi-test.html:  shouldBe('gl.drawingBufferHeight', 'canvas.height');
conformance/canvas/drawingbuffer-hd-dpi-test.html:  gl.useProgram(program);
conformance/canvas/drawingbuffer-hd-dpi-test.html:  shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/canvas/drawingbuffer-hd-dpi-test.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance/canvas/drawingbuffer-hd-dpi-test.html:// This passes device coordinate vertices in to make sure gl.viewport is not being mucked with.
conformance/canvas/drawingbuffer-hd-dpi-test.html:  var vertexObject = gl.createBuffer();
conformance/canvas/drawingbuffer-hd-dpi-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/canvas/drawingbuffer-hd-dpi-test.html:  gl.bufferData(
conformance/canvas/drawingbuffer-hd-dpi-test.html:      gl.ARRAY_BUFFER,
conformance/canvas/drawingbuffer-hd-dpi-test.html:      gl.STATIC_DRAW);
conformance/canvas/drawingbuffer-hd-dpi-test.html:  gl.enableVertexAttribArray(0);
conformance/canvas/drawingbuffer-hd-dpi-test.html:  gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/canvas/drawingbuffer-hd-dpi-test.html:  gl.clearColor(0, 0, 0, 0);
conformance/canvas/drawingbuffer-hd-dpi-test.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/canvas/drawingbuffer-hd-dpi-test.html:    shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/canvas/drawingbuffer-hd-dpi-test.html:    var oldViewport = gl.getParameter(gl.VIEWPORT);
conformance/canvas/drawingbuffer-hd-dpi-test.html:    gl.viewport(0, 0, desiredHeight, desiredWidth);
conformance/canvas/drawingbuffer-hd-dpi-test.html:    shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/canvas/canvas-test.html:    var v = gl.getParameter(name);
conformance/canvas/canvas-test.html:    return getValue4v(gl.VIEWPORT);
conformance/canvas/canvas-test.html:    return getValue4v(gl.COLOR_CLEAR_VALUE);
conformance/canvas/canvas-test.html:      gl.clearColor(0.25, 0.5, 0.75, 1);
conformance/canvas/canvas-test.html:      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/canvas-test.html:      gl.colorMask(0,0,0,0);
conformance/canvas/canvas-test.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL errors before resizing the canvas");
conformance/canvas/canvas-test.html:      err = gl.getError();
conformance/canvas/canvas-test.html:      if (err != gl.CONTEXT_LOST_WEBGL) {
conformance/canvas/canvas-test.html:        shouldBe("err", "gl.NO_ERROR");
conformance/canvas/canvas-test.html:        var v = gl.getParameter(gl.COLOR_CLEAR_VALUE);
conformance/canvas/canvas-test.html:                  "gl.clearColor should not change after canvas resize");
conformance/canvas/canvas-test.html:        v = gl.getParameter(gl.COLOR_WRITEMASK);
conformance/canvas/canvas-test.html:                  "gl.colorMask should not change after canvas resize");
js/webgl-test-utils.js:  if (value === gl.NO_ERROR) {
js/webgl-test-utils.js:  var program = gl.createProgram();
js/webgl-test-utils.js:          shaderType = ii ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER;
js/webgl-test-utils.js:        shader = loadShaderFromFile(gl, shader, gl.VERTEX_SHADER, undefined, opt_logShaders);
js/webgl-test-utils.js:        shader = loadShaderFromFile(gl, shader, gl.FRAGMENT_SHADER, undefined, opt_logShaders);
js/webgl-test-utils.js:        shader = loadShader(gl, shader, ii ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER, undefined, opt_logShaders);
js/webgl-test-utils.js:      gl.attachShader(program, shader);
js/webgl-test-utils.js:      gl.bindAttribLocation(
js/webgl-test-utils.js:  gl.linkProgram(program);
js/webgl-test-utils.js:  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
js/webgl-test-utils.js:      lastError = gl.getProgramInfoLog (program);
js/webgl-test-utils.js:      gl.deleteProgram(program);
js/webgl-test-utils.js:  gl.useProgram(program);
js/webgl-test-utils.js:  var program = gl.createProgram();
js/webgl-test-utils.js:          shaderType = ii ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER;
js/webgl-test-utils.js:        shader = loadShaderFromFile(gl, shader, gl.VERTEX_SHADER, undefined, opt_logShaders);
js/webgl-test-utils.js:        shader = loadShaderFromFile(gl, shader, gl.FRAGMENT_SHADER, undefined, opt_logShaders);
js/webgl-test-utils.js:        shader = loadShader(gl, shader, ii ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER, undefined, opt_logShaders);
js/webgl-test-utils.js:      gl.attachShader(program, shader);
js/webgl-test-utils.js:      gl.bindAttribLocation(
js/webgl-test-utils.js:  gl.transformFeedbackVaryings(program, varyings, bufferMode);
js/webgl-test-utils.js:  gl.linkProgram(program);
js/webgl-test-utils.js:  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
js/webgl-test-utils.js:      lastError = gl.getProgramInfoLog (program);
js/webgl-test-utils.js:      gl.deleteProgram(program);
js/webgl-test-utils.js:  gl.useProgram(program);
js/webgl-test-utils.js:  var vertexObject = gl.createBuffer();
js/webgl-test-utils.js:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
js/webgl-test-utils.js:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
js/webgl-test-utils.js:       1.0 * scale , -1.0 * scale]), gl.STATIC_DRAW);
js/webgl-test-utils.js:  gl.enableVertexAttribArray(positionLocation);
js/webgl-test-utils.js:  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
js/webgl-test-utils.js:    vertexObject = gl.createBuffer();
js/webgl-test-utils.js:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
js/webgl-test-utils.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
js/webgl-test-utils.js:        urx, lly]), gl.STATIC_DRAW);
js/webgl-test-utils.js:    gl.enableVertexAttribArray(options.texcoordLocation);
js/webgl-test-utils.js:    gl.vertexAttribPointer(options.texcoordLocation, 2, gl.FLOAT, false, 0, 0);
js/webgl-test-utils.js:  var buf = gl.createBuffer();
js/webgl-test-utils.js:  gl.bindBuffer(gl.ARRAY_BUFFER, buf);
js/webgl-test-utils.js:  gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);
js/webgl-test-utils.js:  gl.enableVertexAttribArray(positionLocation);
js/webgl-test-utils.js:  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);
js/webgl-test-utils.js:    buf = gl.createBuffer();
js/webgl-test-utils.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
js/webgl-test-utils.js:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
js/webgl-test-utils.js:    gl.enableVertexAttribArray(options.colorLocation);
js/webgl-test-utils.js:    gl.vertexAttribPointer(options.colorLocation, 4, gl.FLOAT, false, 0, 0);
js/webgl-test-utils.js:  buf = gl.createBuffer();
js/webgl-test-utils.js:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buf);
js/webgl-test-utils.js:  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
js/webgl-test-utils.js: * @param {number} type The WebGL type (eg, gl.UNSIGNED_BYTE)
js/webgl-test-utils.js:    case gl.BYTE:
js/webgl-test-utils.js:    case gl.UNSIGNED_BYTE:
js/webgl-test-utils.js:    case gl.SHORT:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_5_6_5:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_4_4_4_4:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_5_5_5_1:
js/webgl-test-utils.js:    case gl.INT:
js/webgl-test-utils.js:    case gl.UNSIGNED_INT:
js/webgl-test-utils.js: * @param {GLenum} type The WebGL type (eg, gl.UNSIGNED_BYTE)
js/webgl-test-utils.js:    case gl.BYTE:
js/webgl-test-utils.js:    case gl.UNSIGNED_BYTE:
js/webgl-test-utils.js:    case gl.SHORT:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_5_6_5:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_4_4_4_4:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_5_5_5_1:
js/webgl-test-utils.js:    case gl.INT:
js/webgl-test-utils.js:    case gl.UNSIGNED_INT:
js/webgl-test-utils.js: * @param {GLenum} format The WebGL format (eg, gl.RGBA)
js/webgl-test-utils.js: * @param {GLenum} type The WebGL type (eg, gl.UNSIGNED_BYTE)
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_5_6_5:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_4_4_4_4:
js/webgl-test-utils.js:    case gl.UNSIGNED_SHORT_5_5_5_1:
js/webgl-test-utils.js:    case gl.UNSIGNED_BYTE:
js/webgl-test-utils.js:    case gl.RGBA:
js/webgl-test-utils.js:    case gl.RGB:
js/webgl-test-utils.js:    case gl.LUMINANCE_ALPHA:
js/webgl-test-utils.js:    case gl.LUMINANCE:
js/webgl-test-utils.js:    case gl.ALPHA:
js/webgl-test-utils.js:  opt_format = opt_format || gl.RGBA;
js/webgl-test-utils.js:  opt_type = opt_type || gl.UNSIGNED_BYTE;
js/webgl-test-utils.js:  var pack = gl.getParameter(gl.UNPACK_ALIGNMENT);
js/webgl-test-utils.js:  gl.bindTexture(gl.TEXTURE_2D, tex);
js/webgl-test-utils.js:  gl.texImage2D(
js/webgl-test-utils.js:      gl.TEXTURE_2D, opt_level, opt_internalFormat, width, height, 0,
js/webgl-test-utils.js:  var tex = gl.createTexture();
js/webgl-test-utils.js:  var program = gl.getParameter(gl.CURRENT_PROGRAM);
js/webgl-test-utils.js:  var colorLocation = gl.getUniformLocation(program, "u_color");
js/webgl-test-utils.js:  gl.uniform4fv(colorLocation, color);
js/webgl-test-utils.js:  var program = gl.getParameter(gl.CURRENT_PROGRAM);
js/webgl-test-utils.js:  var colorLocation = gl.getUniformLocation(program, "u_color");
js/webgl-test-utils.js:  gl.uniform4fv(colorLocation, color);
js/webgl-test-utils.js:  gl.drawArrays(gl.TRIANGLES, 0, 6);
js/webgl-test-utils.js:  gl.drawArrays(gl.TRIANGLES, 0, 6);
js/webgl-test-utils.js:  gl.clearColor(
js/webgl-test-utils.js:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/webgl-test-utils.js:  gl.drawElements(gl.TRIANGLES, gridRes * gridRes * 6, gl.UNSIGNED_SHORT, 0);
js/webgl-test-utils.js:  gl.clearColor(
js/webgl-test-utils.js:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/webgl-test-utils.js:    gl.readPixels(left, bottom, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
js/webgl-test-utils.js:  if (isWebGLContext(gl) && !gl.getParameter(gl.FRAMEBUFFER_BINDING)) {
js/webgl-test-utils.js:    var xr = clipToRange(x, width, 0, gl.canvas.width);
js/webgl-test-utils.js:    var yr = clipToRange(y, height, 0, gl.canvas.height);
js/webgl-test-utils.js:    gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
js/webgl-test-utils.js:    buf = gl.getImageData(x, y, width, height).data;
js/webgl-test-utils.js:  checkCanvasRect(gl, 0, 0, gl.canvas.width, gl.canvas.height, color, msg, errorRange);
js/webgl-test-utils.js: *     The outer dimensions. Default the size of gl.canvas.
js/webgl-test-utils.js:  var outerDimensions = opt_outerDimensions || { width: gl.canvas.width, height: gl.canvas.height };
js/webgl-test-utils.js:  gl.getBufferSubData(target, 0, floatArray);
js/webgl-test-utils.js:    var texture = gl.createTexture();
js/webgl-test-utils.js:    gl.bindTexture(gl.TEXTURE_2D, texture);
js/webgl-test-utils.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/webgl-test-utils.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/webgl-test-utils.js:        gl.bindTexture(gl.TEXTURE_2D, texture);
js/webgl-test-utils.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
js/webgl-test-utils.js:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
js/webgl-test-utils.js:  opt_format = opt_format || gl.RGBA;
js/webgl-test-utils.js:  opt_type = opt_type || gl.UNSIGNED_BYTE;
js/webgl-test-utils.js:  gl.texSubImage2D(gl.TEXTURE_2D, 0, width - 1, height - 1, 1, 1, opt_format, opt_type, buf);
js/webgl-test-utils.js:  if (gl.getError() != gl.NO_ERROR) {
js/webgl-test-utils.js:  gl.texSubImage2D(gl.TEXTURE_2D, 0, width - 1, height, 1, 1, opt_format, opt_type, buf);
js/webgl-test-utils.js:  if (gl.getError() == gl.NO_ERROR) {
js/webgl-test-utils.js:  gl.texSubImage2D(gl.TEXTURE_2D, 0, width, height - 1, 1, 1, opt_format, opt_type, buf);
js/webgl-test-utils.js:  if (gl.getError() == gl.NO_ERROR) {
js/webgl-test-utils.js:    glErrorShouldBeImpl(gl, gl.NO_ERROR, false, "after evaluating: " + evalStr);
js/webgl-test-utils.js:  var err = gl.getError();
js/webgl-test-utils.js:  gl.linkProgram(program);
js/webgl-test-utils.js:  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
js/webgl-test-utils.js:    var error = gl.getProgramInfoLog (program);
js/webgl-test-utils.js:    gl.deleteProgram(program);
js/webgl-test-utils.js:  var shader = gl.createShader(shaderType);
js/webgl-test-utils.js:  gl.shaderSource(shader, shaderSource);
js/webgl-test-utils.js:  var err = gl.getError();
js/webgl-test-utils.js:  if (err != gl.NO_ERROR) {
js/webgl-test-utils.js:  gl.compileShader(shader);
js/webgl-test-utils.js:    var label = shaderType == gl.VERTEX_SHADER ? 'vertex shader' : 'fragment_shader';
js/webgl-test-utils.js:    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
js/webgl-test-utils.js:      lastError = gl.getShaderInfoLog(shader);
js/webgl-test-utils.js:      gl.deleteShader(shader);
js/webgl-test-utils.js:      opt_shaderType = gl.VERTEX_SHADER;
js/webgl-test-utils.js:      opt_shaderType = gl.FRAGMENT_SHADER;
js/webgl-test-utils.js:  var program = gl.createProgram();
js/webgl-test-utils.js:  gl.attachShader(program, loadStandardVertexShader(gl));
js/webgl-test-utils.js:  gl.attachShader(program, loadStandardFragmentShader(gl));
js/webgl-test-utils.js:  gl.bindAttribLocation(program, 0, "a_vertex");
js/webgl-test-utils.js:  gl.bindAttribLocation(program, 1, "a_normal");
js/webgl-test-utils.js:              var program = gl.createProgram();
js/webgl-test-utils.js:              gl.attachShader(program, vs);
js/webgl-test-utils.js:              gl.attachShader(program, fs);
js/webgl-test-utils.js:              gl.bindAttribLocation(program, 0, "a_vertex");
js/webgl-test-utils.js:              gl.bindAttribLocation(program, 1, "a_normal");
js/webgl-test-utils.js:  var program = gl.createProgram();
js/webgl-test-utils.js:      gl, vertexShaderPath, gl.VERTEX_SHADER, opt_errorCallback);
js/webgl-test-utils.js:      gl, fragmentShaderPath, gl.FRAGMENT_SHADER, opt_errorCallback);
js/webgl-test-utils.js:    gl.attachShader(program, vs);
js/webgl-test-utils.js:    gl.attachShader(program, fs);
js/webgl-test-utils.js:    gl.deleteShader(vs);
js/webgl-test-utils.js:    gl.deleteShader(fs);
js/webgl-test-utils.js:  var program = gl.createProgram();
js/webgl-test-utils.js:  gl.attachShader(
js/webgl-test-utils.js:          gl, vertexScriptId, gl.VERTEX_SHADER, opt_errorCallback));
js/webgl-test-utils.js:  gl.attachShader(
js/webgl-test-utils.js:          gl, fragmentScriptId,  gl.FRAGMENT_SHADER, opt_errorCallback));
js/webgl-test-utils.js:  var program = gl.createProgram();
js/webgl-test-utils.js:  gl.attachShader(program, vertexShader);
js/webgl-test-utils.js:  gl.attachShader(program, fragmentShader);
js/webgl-test-utils.js:      gl, vertexShader, gl.VERTEX_SHADER, opt_errorCallback, opt_logShaders);
js/webgl-test-utils.js:      gl, fragmentShader, gl.FRAGMENT_SHADER, opt_errorCallback, opt_logShaders);
js/webgl-test-utils.js:    gl.deleteShader(vs);
js/webgl-test-utils.js:    gl.deleteShader(fs);
js/webgl-test-utils.js:  var program = gl.createProgram();
js/webgl-test-utils.js:  gl.attachShader(program, vertexShader);
js/webgl-test-utils.js:  gl.attachShader(program, fragmentShader);
js/webgl-test-utils.js:  var numVariables = gl.getProgramParameter(program, gl[typeInfo.param]);
js/webgl-test-utils.js: *        type: gl.FLOAT_MAT2,
js/webgl-test-utils.js: *         type: gl.FLOAT,
js/webgl-test-utils.js: *        type: gl.FLOAT_MAT2,
js/webgl-test-utils.js: *         type: gl.FLOAT,
js/webgl-test-utils.js:      gl, getResourcePath() + "vertexShader.vert", gl.VERTEX_SHADER);
js/webgl-test-utils.js:  loadShaderFromFileAsync(gl, getResourcePath() + "vertexShader.vert", gl.VERTEX_SHADER, undefined, undefined, undefined, callback);
js/webgl-test-utils.js:      gl, getResourcePath() + "fragmentShader.frag", gl.FRAGMENT_SHADER);
js/webgl-test-utils.js:  loadShaderFromFileAsync(gl, getResourcePath() + "fragmentShader.frag", gl.FRAGMENT_SHADER, undefined, undefined, undefined, callback);
js/webgl-test-utils.js:  var program = gl.createProgram();
js/webgl-test-utils.js:  gl.attachShader(program, loadUniformBlockVertexShader(gl));
js/webgl-test-utils.js:  gl.attachShader(program, loadUniformBlockFragmentShader(gl));
js/webgl-test-utils.js:  gl.bindAttribLocation(program, 0, "a_vertex");
js/webgl-test-utils.js:  gl.bindAttribLocation(program, 1, "a_normal");
js/webgl-test-utils.js:      gl, getResourcePath() + "uniformBlockShader.vert", gl.VERTEX_SHADER);
js/webgl-test-utils.js:      gl, getResourcePath() + "uniformBlockShader.frag", gl.FRAGMENT_SHADER);
js/webgl-test-utils.js:  var debugShaders = gl.getExtension('WEBGL_debug_shaders');
js/webgl-test-utils.js:  var debugShaders = gl.getExtension('WEBGL_debug_shaders');
js/webgl-test-utils.js:  var supported = gl.getSupportedExtensions();
js/webgl-test-utils.js:    var ext = gl.getExtension(prefixedName);
conformance/more/conformance/quickCheckAPI-B3.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/more/conformance/webGLArrays.html:  buffer = gl.createBuffer();
conformance/more/conformance/webGLArrays.html:  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance/more/conformance/webGLArrays.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/more/conformance/webGLArrays.html:  gl.bufferData(gl.ARRAY_BUFFER, a, gl.STATIC_DRAW);
conformance/more/conformance/webGLArrays.html:  gl.vertexAttribPointer(va, 2, gl.FLOAT, false, 0, 0);
conformance/more/conformance/webGLArrays.html:  gl.enableVertexAttribArray(va);
conformance/more/conformance/webGLArrays.html:  gl.readPixels(8,8,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);
conformance/more/conformance/webGLArrays.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/more/conformance/webGLArrays.html:  gl.readPixels(8,8,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);
conformance/more/conformance/webGLArrays.html:  gl.readPixels(0,8,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);
conformance/more/conformance/webGLArrays.html:  gl.bufferData(gl.ARRAY_BUFFER, a, gl.STATIC_DRAW);
conformance/more/conformance/webGLArrays.html:  gl.vertexAttribPointer(va, 2, gl.FLOAT, false, 0, 0);
conformance/more/conformance/webGLArrays.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/more/conformance/webGLArrays.html:  gl.readPixels(8,8,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);
conformance/more/conformance/webGLArrays.html:  gl.readPixels(0,8,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);
conformance/more/conformance/webGLArrays.html:  gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);
conformance/canvas/canvas-zero-size.html:gl.viewport(0, 0, 0, 0);
conformance/canvas/canvas-zero-size.html:var tex = gl.createTexture();
conformance/canvas/canvas-zero-size.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/canvas/canvas-zero-size.html:gl.texImage2D(
conformance/canvas/canvas-zero-size.html:  gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixel);
conformance/canvas/canvas-zero-size.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/attribs/gl-bindAttribLocation-aliasing.html:var glFragmentShader = wtu.loadShader(gl, wtu.simpleColorFragmentShader, gl.FRAGMENT_SHADER);
conformance/attribs/gl-bindAttribLocation-aliasing.html:var maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
conformance/attribs/gl-bindAttribLocation-aliasing.html:        var glVertexShader = wtu.loadShader(gl, strVertexShader, gl.VERTEX_SHADER);
conformance/attribs/gl-bindAttribLocation-aliasing.html:            var glProgram = gl.createProgram();
conformance/attribs/gl-bindAttribLocation-aliasing.html:            gl.bindAttribLocation(glProgram, l, 'a_1');
conformance/attribs/gl-bindAttribLocation-aliasing.html:            gl.bindAttribLocation(glProgram, l, 'a_2');
conformance/attribs/gl-bindAttribLocation-aliasing.html:            gl.attachShader(glProgram, glVertexShader);
conformance/attribs/gl-bindAttribLocation-aliasing.html:            gl.attachShader(glProgram, glFragmentShader);
conformance/attribs/gl-bindAttribLocation-aliasing.html:            gl.linkProgram(glProgram);
conformance/attribs/gl-bindAttribLocation-aliasing.html:            assertMsg(!gl.getProgramParameter(glProgram, gl.LINK_STATUS), "Link should fail when both types are aliased to location " + l);
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.drawingBufferWidth', 'gl.canvas.width');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.drawingBufferHeight', 'gl.canvas.height');
conformance/canvas/drawingbuffer-test.html:    return gl.getParameter(gl.MAX_VIEWPORT_DIMS);
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.MAX_VIEWPORT_DIMS)[0]', 'maxSize[0]');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.MAX_VIEWPORT_DIMS)[1]', 'maxSize[1]');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.VIEWPORT)[0]', '0');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.VIEWPORT)[1]', '0');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.VIEWPORT)[2]', 'gl.drawingBufferWidth');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.VIEWPORT)[3]', 'gl.drawingBufferHeight');
conformance/canvas/drawingbuffer-test.html:    oldViewport = gl.getParameter(gl.VIEWPORT);
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.VIEWPORT)[0]', 'oldViewport[0]');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.VIEWPORT)[1]', 'oldViewport[1]');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.VIEWPORT)[2]', 'oldViewport[2]');
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getParameter(gl.VIEWPORT)[3]', 'oldViewport[3]');
conformance/canvas/drawingbuffer-test.html://    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
conformance/canvas/drawingbuffer-test.html:    shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/more/conformance/quickCheckAPI-B1.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/glsl/bugs/bool-type-cast-bug-int-float.html:            var uniformLoc = gl.getUniformLocation(program, 'bvalue');
conformance/glsl/bugs/bool-type-cast-bug-int-float.html:            gl.uniform1i(uniformLoc, 0);
conformance/glsl/bugs/bool-type-cast-bug-int-float.html:            gl.uniform1i(uniformLoc, 1);
conformance/glsl/bugs/bool-type-cast-bug-int-float.html:            gl.deleteProgram(program);
conformance/glsl/bugs/bool-type-cast-bug-int-float.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from testing");
conformance/canvas/draw-webgl-to-canvas-test.html:    gl.clearColor(0.25, 0.5, 0.75, 1);
conformance/canvas/draw-webgl-to-canvas-test.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/draw-webgl-to-canvas-test.html:    gl.clearColor(1, 0, 0, 1);
conformance/canvas/draw-webgl-to-canvas-test.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/draw-webgl-to-canvas-test.html:    gl.clearColor(1, 0, 1, 1);
conformance/canvas/draw-webgl-to-canvas-test.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/draw-webgl-to-canvas-test.html:    gl.clearColor(1, 1, 0, 1);
conformance/canvas/draw-webgl-to-canvas-test.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/draw-webgl-to-canvas-test.html:  err = gl.getError();
conformance/more/conformance/quickCheckAPI-G_I.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/more/conformance/quickCheckAPI-D_G.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:var fbo = gl.createFramebuffer();
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:var fboTex = gl.createTexture();
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.activeTexture(gl.TEXTURE1);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.bindTexture(gl.TEXTURE_2D, fboTex);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fboTex, 0);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, fboSize, fboSize, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:  gl.clearColor(0, 0, 1, 1);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:  gl.clearColor(0, 1, 0, 1);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/canvas/framebuffer-bindings-unaffected-on-resize.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/more/demos/video.html:    this.ctx2.texImage2D(this.ctx2.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.video);
conformance/canvas/draw-static-webgl-to-multiple-canvas-test.html:      gl.clearColor(color[i][0], color[i][1], color[i][2], color[i][3]);
conformance/canvas/draw-static-webgl-to-multiple-canvas-test.html:      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/draw-static-webgl-to-multiple-canvas-test.html:  err = gl.getError();
deqp/functional/gles3/es3fPixelBufferObjectTest.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fPixelBufferObjectTest.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fPixelBufferObjectTest.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        assertMsgOptions(gl.getError() === gl.NO_ERROR, 'useProgram failed ', false, true);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        /** @type {WebGLUniformLocation} */ var colorScaleLoc = gl.getUniformLocation(this.m_program.getProgram(), 'u_colorScale');
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.uniform1f(colorScaleLoc, this.m_colorScale);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        /** @type {number} */ var coordLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_position');
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        /** @type {number} */ var colorLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_color');
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.enableVertexAttribArray(colorLoc);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        assertMsgOptions(gl.getError() === gl.NO_ERROR, 'enableVertexAttribArray failed ', false, true);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.enableVertexAttribArray(coordLoc);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        assertMsgOptions(gl.getError() === gl.NO_ERROR, 'enableVertexAttribArray failed ', false, true);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        var pos = gl.createBuffer();
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.bindBuffer(gl.ARRAY_BUFFER, pos);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.vertexAttribPointer(coordLoc, 3, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        var c = gl.createBuffer();
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.bindBuffer(gl.ARRAY_BUFFER, c);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.drawArrays(gl.TRIANGLES, 0, 3);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.disableVertexAttribArray(colorLoc);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.disableVertexAttribArray(coordLoc);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.clearColor(r, g, b, a);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    gl.clearColor(r, g, b, a);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    gl.clearBufferiv(gl.COLOR, 0, new Int32Array([r, g, b, a]));
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    gl.clearBufferuiv(gl.COLOR, 0, new Uint32Array([r, g, b, a]));
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    gl.clearBufferfv(gl.COLOR, 0, new Float32Array([r, g, b, a]));
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        var width = gl.drawingBufferWidth;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        var height = gl.drawingBufferHeight;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                framebuffer = gl.createFramebuffer();
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                renderbuffer = gl.createRenderbuffer();
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                gl.renderbufferStorage(gl.RENDERBUFFER, this.m_renderbufferFormat, width, height);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbuffer);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                gl.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                gl.scissor(clearX, clearY, clearWidth, clearHeight);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            readFormat = gluTextureUtil.mapGLTransferFormat(gl.RGBA, gl.UNSIGNED_BYTE);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            readPixelsFormat = gl.RGBA;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            readPixelsType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readFormat = gluTextureUtil.mapGLTransferFormat(gl.RGBA, gl.UNSIGNED_BYTE);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsFormat = gl.RGBA;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readFormat = gluTextureUtil.mapGLTransferFormat(gl.RGBA_INTEGER, gl.INT);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsFormat = gl.RGBA_INTEGER;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsType = gl.INT;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readFormat = gluTextureUtil.mapGLTransferFormat(gl.RGBA_INTEGER, gl.UNSIGNED_INT);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsFormat = gl.RGBA_INTEGER;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsType = gl.UNSIGNED_INT;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readFormat = gluTextureUtil.mapGLTransferFormat(gl.RGBA, gl.FLOAT);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsFormat = gl.RGBA;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsType = gl.FLOAT;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readFormat = gluTextureUtil.mapGLTransferFormat(gl.RGBA, gl.FLOAT);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsFormat = gl.RGBA;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                    readPixelsType = gl.FLOAT;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            readFormat = gluTextureUtil.mapGLTransferFormat(gl.RGBA, gl.FLOAT);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            readPixelsFormat = gl.RGBA;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            readPixelsType = gl.FLOAT;
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        var pixelBuffer = gl.createBuffer();
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, pixelBuffer);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.bufferData(gl.PIXEL_PACK_BUFFER, readReference.getLevel(0).getDataSize(), gl.STREAM_READ);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.readPixels(0, 0, width, height, readPixelsFormat, readPixelsType, 0);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, bufferData);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.readPixels(0, 0, width, height, readPixelsFormat, readPixelsType, readReference.getLevel(0).getDataPtr());
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.deleteFramebuffer(framebuffer);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.deleteRenderbuffer(renderbuffer);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            if (this.m_renderbufferFormat == gl.RGB10_A2)
deqp/functional/gles3/es3fPixelBufferObjectTest.js:        gl.deleteBuffer(pixelBuffer);
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                renderbufferFormat: gl.NONE
deqp/functional/gles3/es3fPixelBufferObjectTest.js:                renderbufferFormat: gl.NONE
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGBA8,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGBA8I,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGBA8UI,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGBA16I,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGBA16UI,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGBA32I,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGBA32UI,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.SRGB8_ALPHA8,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGB10_A2,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGB10_A2UI,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGBA4,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGB5_A1,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGB8,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RGB565,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RG8,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RG8I,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RG8UI,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RG16I,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RG16UI,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RG32I,
deqp/functional/gles3/es3fPixelBufferObjectTest.js:            gl.RG32UI
conformance/context/context-hidden-alpha.html:    gl.useProgram(prog);
conformance/context/context-hidden-alpha.html:        posCoords_buff = gl.createBuffer();
conformance/context/context-hidden-alpha.html:    gl.bindBuffer(gl.ARRAY_BUFFER, posCoords_buff);
conformance/context/context-hidden-alpha.html:    gl.bufferData(gl.ARRAY_BUFFER, posCoords_arr, gl.STREAM_DRAW);
conformance/context/context-hidden-alpha.html:    gl.enableVertexAttribArray(prog.aPosCoord);
conformance/context/context-hidden-alpha.html:    gl.vertexAttribPointer(prog.aPosCoord, 2, gl.FLOAT, false, 0, 0);
conformance/context/context-hidden-alpha.html:    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
conformance/context/context-hidden-alpha.html:    gl.canvas.width += 1;
conformance/context/context-hidden-alpha.html:    gl.canvas.width -= 1;
conformance/context/context-hidden-alpha.html:    gl.enable(gl.BLEND);
conformance/context/context-hidden-alpha.html:    gl.blendFunc(gl.ZERO, gl.DST_ALPHA);
conformance/context/context-hidden-alpha.html:    gl.clearColor(fColor, fColor, fColor, 0.0);
conformance/context/context-hidden-alpha.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-hidden-alpha.html:    dataURL_pre = gl.canvas.toDataURL();
conformance/context/context-hidden-alpha.html:    WebGLTestUtils.checkCanvasRect(gl, gl.drawingBufferWidth/2,
conformance/context/context-hidden-alpha.html:                                   gl.drawingBufferHeight/2, 1, 1,
conformance/context/context-hidden-alpha.html:    dataURL_post = gl.canvas.toDataURL();
conformance/context/context-hidden-alpha.html:    gl.colorMask(true, true, true, false);
conformance/context/context-hidden-alpha.html:    gl.clearColor(fColor, fColor, fColor, 1.0);
conformance/context/context-hidden-alpha.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-hidden-alpha.html:    gl.colorMask(true, true, true, true);
conformance/context/context-hidden-alpha.html:    dataURL_pre = gl.canvas.toDataURL();
conformance/context/context-hidden-alpha.html:    WebGLTestUtils.checkCanvasRect(gl, gl.drawingBufferWidth/2,
conformance/context/context-hidden-alpha.html:                                   gl.drawingBufferHeight/2, 1, 1,
conformance/context/context-hidden-alpha.html:    dataURL_post = gl.canvas.toDataURL();
conformance/context/context-hidden-alpha.html:    WebGLTestUtils.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
conformance/context/context-hidden-alpha.html:    shouldBe("gl.getParameter(gl.ALPHA_BITS)", "0");
conformance/context/context-hidden-alpha.html:    prog.aPosCoord = gl.getAttribLocation(prog, 'aPosCoord');
conformance/context/context-lost-restored.html:         shouldGenerateGLError(gl, gl.INVALID_OPERATION, "WEBGL_lose_context.restoreContext()");
conformance/context/context-lost-restored.html:    shouldBeTrue("gl.isContextLost()");
conformance/context/context-lost-restored.html:    shouldBe("gl.getError()", "gl.CONTEXT_LOST_WEBGL");
conformance/context/context-lost-restored.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost-restored.html:    shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendFunc(gl.TEXTURE_2D, gl.TEXTURE_CUBE_MAP)");
conformance/context/context-lost-restored.html:        shouldGenerateGLError(gl, gl.NO_ERROR, "WEBGL_lose_context.restoreContext()");
conformance/context/context-lost-restored.html:        shouldBeTrue("gl.isContextLost()");
conformance/context/context-lost-restored.html:        shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost-restored.html:        shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendFunc(gl.TEXTURE_2D, gl.TEXTURE_CUBE_MAP)");
conformance/context/context-lost-restored.html:    shouldBeTrue("gl.isContextLost()");
conformance/context/context-lost-restored.html:    shouldBe("gl.getError()", "gl.CONTEXT_LOST_WEBGL");
conformance/context/context-lost-restored.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost-restored.html:    shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendFunc(gl.TEXTURE_2D, gl.TEXTURE_CUBE_MAP)");
conformance/context/context-lost-restored.html:    gl.clearColor(0, 0, 0, 255);
conformance/context/context-lost-restored.html:    gl.colorMask(1, 1, 1, 0);
conformance/context/context-lost-restored.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/context/context-lost-restored.html:    gl.uniform1i(gl.getUniformLocation(program, "tex"), 0);
conformance/context/context-lost-restored.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost-restored.html:    shouldBeFalse("gl.isContextLost()");
conformance/context/context-lost-restored.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost-restored.html:    shouldBeTrue("gl.isContextLost()");
conformance/context/context-lost-restored.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost-restored.html:        "gl.bindTexture(gl.TEXTURE_2D, texture)",
conformance/context/context-lost-restored.html:        "gl.useProgram(program)",
conformance/context/context-lost-restored.html:        "gl.bindBuffer(gl.ARRAY_BUFFER, bufferObjects[0])",
conformance/context/context-lost-restored.html:    var tex = gl.createTexture();
conformance/context/context-lost-restored.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/context/context-lost-restored.html:    shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.FLOAT, null)");
conformance/context/context-lost-restored.html:    shouldGenerateGLError(gl, gl.NO_ERROR, "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.FLOAT, null)");
conformance/context/context-lost-restored.html:    shouldBeFalse("gl.isContextLost()");
conformance/context/context-lost-restored.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost-restored.html:    testResources(gl.INVALID_OPERATION);
conformance/context/context-lost-restored.html:    testResources(gl.NO_ERROR);
conformance/misc/object-deletion-behaviour.html:var program = gl.createProgram();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.attachShader(program, vertexShader)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.attachShader(program, fragmentShader)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.linkProgram(program)");
conformance/misc/object-deletion-behaviour.html:shouldBeTrue("gl.getProgramParameter(program, gl.LINK_STATUS)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.useProgram(program)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteShader(vertexShader)");
conformance/misc/object-deletion-behaviour.html:shouldBeTrue("gl.isShader(vertexShader)");
conformance/misc/object-deletion-behaviour.html:shouldBeTrue("gl.getShaderParameter(vertexShader, gl.DELETE_STATUS)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.detachShader(program, vertexShader)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isShader(vertexShader)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteShader(fragmentShader)");
conformance/misc/object-deletion-behaviour.html:shouldBeTrue("gl.isShader(fragmentShader)");
conformance/misc/object-deletion-behaviour.html:shouldBeTrue("gl.getShaderParameter(fragmentShader, gl.DELETE_STATUS)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteProgram(program)");
conformance/misc/object-deletion-behaviour.html:shouldBeTrue("gl.isProgram(program)");
conformance/misc/object-deletion-behaviour.html:shouldBeTrue("gl.getProgramParameter(program, gl.DELETE_STATUS)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.useProgram(null)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isProgram(program)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isShader(fragmentShader)");
conformance/misc/object-deletion-behaviour.html:var fbo = gl.createFramebuffer(), fbo2 = gl.createFramebuffer(), fbo3 = gl.createFramebuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:var tex = gl.createTexture();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTexture(gl.TEXTURE_2D, tex)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.TEXTURE_BINDING_2D)", "tex");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)", "tex");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)", "gl.TEXTURE");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteTexture(tex)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)", "gl.NONE");
conformance/misc/object-deletion-behaviour.html:  shouldBeNull("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isTexture(tex)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.TEXTURE_BINDING_2D)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindTexture(gl.TEXTURE_2D, tex)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.TEXTURE_BINDING_2D)");
conformance/misc/object-deletion-behaviour.html:var texCubeMap = gl.createTexture();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCubeMap)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.TEXTURE_BINDING_CUBE_MAP)", "texCubeMap");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteTexture(texCubeMap)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isTexture(texCubeMap)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.TEXTURE_BINDING_CUBE_MAP)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCubeMap)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.TEXTURE_BINDING_CUBE_MAP)");
conformance/misc/object-deletion-behaviour.html:var t = gl.createTexture();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTexture(gl.TEXTURE_2D, t)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteTexture(t)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindTexture(gl.TEXTURE_2D, t)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)");
conformance/misc/object-deletion-behaviour.html:var t2 = gl.createTexture();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.activeTexture(gl.TEXTURE0)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTexture(gl.TEXTURE_2D, t2)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.TEXTURE_BINDING_2D)", "t2");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.activeTexture(gl.TEXTURE1)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTexture(gl.TEXTURE_2D, t2)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.TEXTURE_BINDING_2D)", "t2");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteTexture(t2)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.TEXTURE_BINDING_2D)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.activeTexture(gl.TEXTURE0)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.TEXTURE_BINDING_2D)");
conformance/misc/object-deletion-behaviour.html:var rbo = gl.createRenderbuffer(), rbo2 = gl.createRenderbuffer(), rbo3 = gl.createRenderbuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindRenderbuffer(gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.RENDERBUFFER_BINDING)", "rbo");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)", "rbo");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteRenderbuffer(rbo)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)", "gl.NONE");
conformance/misc/object-deletion-behaviour.html:  shouldBeNull("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isRenderbuffer(rbo)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.RENDERBUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindRenderbuffer(gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.RENDERBUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindRenderbuffer(gl.RENDERBUFFER, rbo2)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.RENDERBUFFER_BINDING)", "rbo2");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteRenderbuffer(rbo3)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.RENDERBUFFER_BINDING)", "rbo2");
conformance/misc/object-deletion-behaviour.html:rbo = gl.createRenderbuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindRenderbuffer(gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(1,0,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,1,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteRenderbuffer(rbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [255,0,0,255], "backbuffer should be red")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [0,255,0,255], "fbo should be green")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,0,1,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [0,0,255,255], "fbo should be blue")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [255,0,0,255], "backbuffer should be red")');
conformance/misc/object-deletion-behaviour.html:rbo = gl.createRenderbuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindRenderbuffer(gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance/misc/object-deletion-behaviour.html:  rbo2 = gl.createRenderbuffer();
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindRenderbuffer(gl.RENDERBUFFER, rbo2)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rbo2)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, rbo2)");
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)", "rbo2");
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)", "rbo2");
conformance/misc/object-deletion-behaviour.html:  shouldNotBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteRenderbuffer(rbo2)");
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)", "gl.NONE");
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)", "gl.NONE");
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)", "rbo");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteRenderbuffer(rbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:tex = gl.createTexture();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTexture(gl.TEXTURE_2D, tex)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null)");
conformance/misc/object-deletion-behaviour.html:if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,1,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteTexture(tex)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 1, 1, [255,0,0,255], "backbuffer should be red")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 1, 1, [0,255,0,255], "fbo should be green")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,0,1,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 1, 1, [0,0,255,255], "fbo should be blue")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [255,0,0,255], "backbuffer should be red")');
conformance/misc/object-deletion-behaviour.html:rbo = gl.createRenderbuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindRenderbuffer(gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo2)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(1,0,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,1,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteRenderbuffer(rbo)");
conformance/misc/object-deletion-behaviour.html:  shouldNotBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo2)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [0,255,0,255], "fbo should be green")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,0,1,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [0,0,255,255], "fbo should be blue")');
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)", "rbo");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:    shouldBeNull("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)");
conformance/misc/object-deletion-behaviour.html:    shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NONE, "gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)");
conformance/misc/object-deletion-behaviour.html:  shouldNotBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [255,0,0,255], "backbuffer should be red")');
conformance/misc/object-deletion-behaviour.html:tex = gl.createTexture();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTexture(gl.TEXTURE_2D, tex)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null)");
conformance/misc/object-deletion-behaviour.html:if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo2)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,1,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteTexture(tex)");
conformance/misc/object-deletion-behaviour.html:  shouldNotBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo2)");
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 1, 1, [0,255,0,255], "fbo should be green")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,0,1,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 1, 1, [0,0,255,255], "fbo should be blue")');
conformance/misc/object-deletion-behaviour.html:  shouldBe("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)", "tex");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:    shouldBeNull("gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)");
conformance/misc/object-deletion-behaviour.html:    shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)");
conformance/misc/object-deletion-behaviour.html:  shouldNotBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [255,0,0,255], "backbuffer should be red")');
conformance/misc/object-deletion-behaviour.html:var buffer = gl.createBuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBuffer(gl.ARRAY_BUFFER, buffer)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.ARRAY_BUFFER_BINDING)", "buffer");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(buffer)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isBuffer(buffer)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindBuffer(gl.ARRAY_BUFFER, buffer)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:var buffer2 = gl.createBuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBuffer(gl.ARRAY_BUFFER, buffer2)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.ARRAY_BUFFER_BINDING)", "buffer2");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBuffer(gl.ARRAY_BUFFER, null)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(buffer2)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isBuffer(buffer2)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindBuffer(gl.ARRAY_BUFFER, buffer2)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:var bufferElement = gl.createBuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferElement)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING)", "bufferElement");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(bufferElement)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isBuffer(bufferElement)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferElement)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:var b = gl.createBuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBuffer(gl.ARRAY_BUFFER, b)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bufferData(gl.ARRAY_BUFFER, 1, gl.STATIC_DRAW)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(b)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindBuffer(gl.ARRAY_BUFFER, b)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bufferData(gl.ARRAY_BUFFER, 1, gl.STATIC_DRAW)");
conformance/misc/object-deletion-behaviour.html:var b1 = gl.createBuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBuffer(gl.ARRAY_BUFFER, b1);");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.enableVertexAttribArray(1);");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.vertexAttribPointer(1, 4, gl.FLOAT, false, 0, 0);");
conformance/misc/object-deletion-behaviour.html:var b2 = gl.createBuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBuffer(gl.ARRAY_BUFFER, b2);");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.enableVertexAttribArray(2);");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.vertexAttribPointer(2, 4, gl.FLOAT, false, 0, 0);");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.enableVertexAttribArray(3);");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.vertexAttribPointer(3, 4, gl.FLOAT, false, 0, 0);");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)", "b1");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getVertexAttrib(2, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)", "b2");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getVertexAttrib(3, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)", "b2");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(b2);");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)", "b1");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getVertexAttrib(2, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getVertexAttrib(3, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteBuffer(b1);");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.FRAMEBUFFER_BINDING)", "fbo");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteFramebuffer(fbo)");
conformance/misc/object-deletion-behaviour.html:shouldBeFalse("gl.isFramebuffer(fbo)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.FRAMEBUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:shouldBeNull("gl.getParameter(gl.FRAMEBUFFER_BINDING)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo2)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.FRAMEBUFFER_BINDING)", "fbo2");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteFramebuffer(fbo3)");
conformance/misc/object-deletion-behaviour.html:shouldBe("gl.getParameter(gl.FRAMEBUFFER_BINDING)", "fbo2");
conformance/misc/object-deletion-behaviour.html:fbo = gl.createFramebuffer();
conformance/misc/object-deletion-behaviour.html:rbo = gl.createRenderbuffer();
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindRenderbuffer(gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16)");
conformance/misc/object-deletion-behaviour.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo)");
conformance/misc/object-deletion-behaviour.html:if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE) {
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(1,0,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, fbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,1,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 16, 16, [0,255,0,255], "fbo should be green")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 16, 16, 1, 1, [0,0,0,0], "outside fbo should be black")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteFramebuffer(fbo)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 300, 150, [255,0,0,255], "backbuffer should be red")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 300, 0, 300, 300, [0,0,0,0], "outside backbuffer should be black")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 150, 300, 300, [0,0,0,0], "outside backbuffer should be black")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clearColor(0,1,0,1)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 300, 150, [0,255,0,255], "fbo should be green")');
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, null)");
conformance/misc/object-deletion-behaviour.html:  shouldGenerateGLError(gl, gl.NO_ERROR, 'wtu.checkCanvasRect(gl, 0, 0, 300, 150, [0,255,0,255], "fbo should be green")');
conformance/context/resources/context-release-upon-reload-child.html:var vertexObject = gl.createBuffer();
conformance/context/resources/context-release-upon-reload-child.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/context/resources/context-release-upon-reload-child.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.75,0, -0.75,-0.75,0, 0.75,-0.75,0 ]), gl.STATIC_DRAW);
conformance/context/resources/context-release-upon-reload-child.html:gl.enableVertexAttribArray(0);
conformance/context/resources/context-release-upon-reload-child.html:gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/context/resources/context-release-upon-reload-child.html:gl.clearColor(0.0, 0.0, 0.0, 1.0);
conformance/context/resources/context-release-upon-reload-child.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/context/resources/context-release-upon-reload-child.html:gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/more/conformance/quickCheckAPI.js:            gl.createBuffer - test(bindBufferGenerator) - gl.deleteBuffer
conformance/misc/webgl-specific.html:gl.useProgram(program);
conformance/misc/webgl-specific.html:var vertexObject = gl.createBuffer();
conformance/misc/webgl-specific.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/misc/webgl-specific.html:gl.enableVertexAttribArray(0);
conformance/misc/webgl-specific.html:gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
conformance/misc/webgl-specific.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setup should succeed");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFunc(gl.CONSTANT_COLOR, gl.CONSTANT_ALPHA)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFunc(gl.ONE_MINUS_CONSTANT_COLOR, gl.CONSTANT_ALPHA)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFunc(gl.CONSTANT_COLOR, gl.ONE_MINUS_CONSTANT_ALPHA)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFunc(gl.ONE_MINUS_CONSTANT_COLOR, gl.ONE_MINUS_CONSTANT_ALPHA)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFunc(gl.CONSTANT_ALPHA, gl.CONSTANT_COLOR)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFunc(gl.CONSTANT_ALPHA, gl.ONE_MINUS_CONSTANT_COLOR)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFunc(gl.ONE_MINUS_CONSTANT_ALPHA, gl.CONSTANT_COLOR)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFunc(gl.ONE_MINUS_CONSTANT_ALPHA, gl.ONE_MINUS_CONSTANT_COLOR)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFuncSeparate(gl.CONSTANT_COLOR, gl.CONSTANT_ALPHA, gl.ONE, gl.ZERO)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFuncSeparate(gl.ONE_MINUS_CONSTANT_COLOR, gl.CONSTANT_ALPHA, gl.ONE, gl.ZERO)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFuncSeparate(gl.CONSTANT_COLOR, gl.ONE_MINUS_CONSTANT_ALPHA, gl.ONE, gl.ZERO)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFuncSeparate(gl.ONE_MINUS_CONSTANT_COLOR, gl.ONE_MINUS_CONSTANT_ALPHA, gl.ONE, gl.ZERO)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFuncSeparate(gl.CONSTANT_ALPHA, gl.CONSTANT_COLOR, gl.ONE, gl.ZERO)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFuncSeparate(gl.CONSTANT_ALPHA, gl.ONE_MINUS_CONSTANT_COLOR, gl.ONE, gl.ZERO)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFuncSeparate(gl.ONE_MINUS_CONSTANT_ALPHA, gl.CONSTANT_COLOR, gl.ONE, gl.ZERO)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.blendFuncSeparate(gl.ONE_MINUS_CONSTANT_ALPHA, gl.ONE_MINUS_CONSTANT_COLOR, gl.ONE, gl.ZERO)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.depthRange(20, 10)");
conformance/misc/webgl-specific.html:gl.enable(gl.STENCIL_TEST);
conformance/misc/webgl-specific.html:shouldBe("!!gl.getParameter(gl.STENCIL_BITS)", "true");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.stencilMask(255)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 0)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.stencilMaskSeparate(gl.FRONT, 1)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 0)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.stencilMaskSeparate(gl.BACK, 1)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 0)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.stencilFunc(gl.ALWAYS, 0, 255)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 0)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 1, 255)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 0)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 1, 255)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 0)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 1, 1)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 0)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 1, 1)");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 0)");
conformance/misc/webgl-specific.html:shouldBeUndefined(gl.INFO_LOG_LENGTH);
conformance/misc/webgl-specific.html:shouldBeUndefined(gl.SHADER_SOURCE_LENGTH);
conformance/misc/webgl-specific.html:shouldBeUndefined(gl.ACTIVE_UNIFORM_MAX_LENGTH);
conformance/misc/webgl-specific.html:shouldBeUndefined(gl.ACTIVE_ATTRIB_MAX_LENGTH);
conformance/misc/webgl-specific.html:shouldBeUndefined(gl.ACTIVE_ATTRIBUTE_MAX_LENGTH);
conformance/misc/webgl-specific.html:shouldBe("gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL)", "gl.BROWSER_DEFAULT_WEBGL");
conformance/misc/webgl-specific.html:gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
conformance/misc/webgl-specific.html:shouldBe("gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL)", "gl.NONE");
conformance/misc/webgl-specific.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "set/get UNPACK_COLORSPACE_CONVERSION_WEBGL should generate no error");
conformance/misc/webgl-specific.html:shouldBeTrue("gl.drawingBufferWidth >= 0 && gl.drawingBufferHeight >= 0");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindAttribLocation(program, 0, 'webgl_a')");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bindAttribLocation(program, 0, '_webgl_a')");
conformance/misc/webgl-specific.html:wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, "gl.lineWidth(NaN)");
conformance/misc/delayed-drawing.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/misc/delayed-drawing.html:var tex = gl.createTexture();
conformance/misc/delayed-drawing.html:var loc = gl.getUniformLocation(program, "tex");
conformance/misc/delayed-drawing.html:gl.uniform1i(loc, 0);
conformance/misc/delayed-drawing.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/misc/delayed-drawing.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/misc/delayed-drawing.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/misc/delayed-drawing.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/misc/delayed-drawing.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors before drawing.");
conformance/misc/delayed-drawing.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from drawing.");
conformance/attribs/gl-matrix-attributes.html:var maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
conformance/attribs/gl-matrix-attributes.html:var glFragmentShader = wtu.loadShader(gl, wtu.simpleColorFragmentShader, gl.FRAGMENT_SHADER);
conformance/attribs/gl-matrix-attributes.html:    var glVertexShader = wtu.loadShader(gl, strVertexShader, gl.VERTEX_SHADER);
conformance/attribs/gl-matrix-attributes.html:        var glProgram = gl.createProgram();
conformance/attribs/gl-matrix-attributes.html:        gl.attachShader(glProgram, glVertexShader);
conformance/attribs/gl-matrix-attributes.html:        gl.attachShader(glProgram, glFragmentShader);
conformance/attribs/gl-matrix-attributes.html:        gl.linkProgram(glProgram);
conformance/attribs/gl-matrix-attributes.html:        if (gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {
conformance/attribs/gl-matrix-attributes.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, 'linkProgram');
conformance/attribs/gl-matrix-attributes.html:        var attribMatrix = gl.getAttribLocation(glProgram, 'matrix');
conformance/attribs/gl-matrix-attributes.html:            var attribVector = gl.getAttribLocation(glProgram, strVector);
conformance/misc/boolean-argument-conversion.html:var uloc = gl.getUniformLocation(program, "u_modelViewProjMatrix");
conformance/misc/boolean-argument-conversion.html:var aloc = gl.getAttribLocation(program, "a_vertex");
conformance/misc/boolean-argument-conversion.html:gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
conformance/misc/boolean-argument-conversion.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from initialization.");
conformance/misc/boolean-argument-conversion.html:  "gl.colorMask(boolArg, boolArg, boolArg, boolArg)"
conformance/misc/boolean-argument-conversion.html:  "gl.depthMask(boolArg)"
conformance/misc/boolean-argument-conversion.html:  "gl.sampleCoverage(1, boolArg)"
conformance/misc/boolean-argument-conversion.html:  "gl.uniformMatrix2fv(uloc, boolArg, zeroFloat32Array(4))"
conformance/misc/boolean-argument-conversion.html:  "gl.uniformMatrix2fv(uloc, boolArg, zeroArray(4))"
conformance/misc/boolean-argument-conversion.html:  "gl.uniformMatrix3fv(uloc, boolArg, zeroFloat32Array(9))"
conformance/misc/boolean-argument-conversion.html:  "gl.uniformMatrix3fv(uloc, boolArg, zeroArray(9))"
conformance/misc/boolean-argument-conversion.html:  "gl.uniformMatrix4fv(uloc, boolArg, zeroFloat32Array(16))"
conformance/misc/boolean-argument-conversion.html:  "gl.uniformMatrix4fv(uloc, boolArg, zeroArray(16))"
conformance/misc/boolean-argument-conversion.html:  "gl.vertexAttribPointer(aloc, 4, gl.FLOAT, boolArg, 4, 0)"
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {count: -1, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {count: 0, type: 'gl.UNSIGNED_BYTE', offset: -1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {count: -1, type: 'gl.UNSIGNED_BYTE', offset: 1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {count: 1, type: 'gl.UNSIGNED_BYTE', offset: -1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {count: '0xffffffff', type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    gl.useProgram(program);
js/tests/out-of-bounds-test.js:    var vertexObject = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
js/tests/out-of-bounds-test.js:    gl.enableVertexAttribArray(0);
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([  ]), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 10000}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 10000000000000}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 1, count: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 100, count: 0}));
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 3}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 3, count: 2}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 10000}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 10000000000000}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 100, count: 0}));
js/tests/out-of-bounds-test.js:    var vbo = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(9*5), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 5*4, 0);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 5*4, 3*4);
js/tests/out-of-bounds-test.js:    gl.enableVertexAttribArray(0);
js/tests/out-of-bounds-test.js:    gl.enableVertexAttribArray(1);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 9}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {offset: 0, count: -500}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {offset: -200, count: 1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {offset: -200, count: -500}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {offset: 0, count: '0xffffffff'}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {offset: '0xffffffff', count: '0xffffffff'}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {offset: '0xffffffff', count: 1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 200}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: '0x7fffffff'}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: '0x7fffffff', count: 1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: '0x7fffffff', count: '0x7fffffff'}));
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
js/tests/out-of-bounds-test.js:    var indexObject = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array([  ]), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 0, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 3, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 10000, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 10000000000000, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 1, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array([ 0, 1, 2 ]), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 3, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 3, type: 'gl.UNSIGNED_BYTE', offset: 2}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 10000, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 10000000000000, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 0, type: 'gl.UNSIGNED_BYTE', offset: 4}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: '0x7fffffff', type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: '0x7fffffff', type: 'gl.UNSIGNED_BYTE', offset: '0x7fffffff'}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, 'gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (new Uint8Array([ 3, 0, 1, 2 ])).subarray(1), gl.STATIC_DRAW)');
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 3, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, 'gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint8Array([ 3, 0, 1]))');
js/tests/out-of-bounds-test.js:    var indexValidationError = wtu.shouldGenerateGLError(gl, [gl.INVALID_OPERATION, gl.NO_ERROR], wtu.replaceParams(callTemplate, {count: 3, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, 'gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, (new Uint8Array([ 3, 0, 1, 2 ])).subarray(1))');
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 3, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 0, type: 'gl.UNSIGNED_BYTE', offset: 0}));
js/tests/out-of-bounds-test.js:    var vbo = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(9*5), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 5*4, 0);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 5*4, 3*4);
js/tests/out-of-bounds-test.js:    gl.enableVertexAttribArray(0);
js/tests/out-of-bounds-test.js:    gl.enableVertexAttribArray(1);
js/tests/out-of-bounds-test.js:    var ebo = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo);
js/tests/out-of-bounds-test.js:        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(
js/tests/out-of-bounds-test.js:            gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(
js/tests/out-of-bounds-test.js:            gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 9, type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 9, type: 'gl.UNSIGNED_SHORT', offset: 1000}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, indexValidationError, wtu.replaceParams(callTemplate, {count: 12, type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, indexValidationError, wtu.replaceParams(callTemplate, {count: 15, type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, indexValidationError, wtu.replaceParams(callTemplate, {count: 18, type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, indexValidationError, wtu.replaceParams(callTemplate, {count: 3, type: 'gl.UNSIGNED_SHORT', offset: 2*15}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, wtu.replaceParams(callTemplate, {count: '0xffffffff', type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 1, type: 'gl.UNSIGNED_SHORT', offset: '0xffffffff'}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: '0x7fffffff', type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 0, type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 6, type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 6, type: 'gl.UNSIGNED_SHORT', offset: 1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 6, type: 'gl.UNSIGNED_SHORT', offset: 2}));
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 6, type: 'gl.UNSIGNED_SHORT', offset: 0}));
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo);
js/tests/out-of-bounds-test.js:    var smallVBO = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ARRAY_BUFFER, smallVBO);
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, 1, gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0x10);
js/tests/out-of-bounds-test.js:    gl.disableVertexAttribArray(0);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {count: 6, type: 'gl.UNSIGNED_SHORT', offset: 2}));
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {count: 6, type: 'gl.UNSIGNED_SHORT', offset: 2}));
js/tests/out-of-bounds-test.js:    var vbo = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(9*3), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
js/tests/out-of-bounds-test.js:    var vbo2 = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ARRAY_BUFFER, vbo2);
js/tests/out-of-bounds-test.js:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
js/tests/out-of-bounds-test.js:    gl.enableVertexAttribArray(0);
js/tests/out-of-bounds-test.js:    gl.enableVertexAttribArray(1);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 10000, primcount: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 1}));
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(1), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 10000, primcount: 0}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 1}));
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(2), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 1}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 2}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 3}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 4}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 10000}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: '0x7fffffff'}));
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(4), gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 2}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 3}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 4}));
js/tests/out-of-bounds-test.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, wtu.replaceParams(callTemplate, {offset: 0, count: 9, primcount: 5}));
js/tests/out-of-bounds-test.js:    var ebo = gl.createBuffer();
js/tests/out-of-bounds-test.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo);
js/tests/out-of-bounds-test.js:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array(
js/tests/out-of-bounds-test.js:        gl.STATIC_DRAW);
js/tests/out-of-bounds-test.js:    callTemplate = wtu.replaceParams(callTemplate, {type: 'gl.UNSIGNED_BYTE', offset: '$(offset)', count: '$(count)', primcount: '$(primcount)'});
conformance/context/context-lost.html:    extension = gl.getExtension(extensionName);
conformance/context/context-lost.html:    // Otherwise gl.getUniform() when context is lost will throw.
conformance/context/context-lost.html:    uniformLocation = gl.getUniformLocation(program, "tex");
conformance/context/context-lost.html:    shouldBeFalse("gl.isContextLost()");
conformance/context/context-lost.html:    buffer = gl.createBuffer();
conformance/context/context-lost.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance/context/context-lost.html:    framebuffer = gl.createFramebuffer();
conformance/context/context-lost.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/context/context-lost.html:    renderbuffer = gl.createRenderbuffer();
conformance/context/context-lost.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance/context/context-lost.html:    shader = gl.createShader(gl.VERTEX_SHADER);
conformance/context/context-lost.html:    texture = gl.createTexture();
conformance/context/context-lost.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/context/context-lost.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost.html:    shouldGenerateGLError(gl, gl.NO_ERROR, "gl.enable(gl.BLEND)");
conformance/context/context-lost.html:    shouldBeTrue("gl.isBuffer(buffer)");
conformance/context/context-lost.html:    shouldBeTrue("gl.isEnabled(gl.BLEND)");
conformance/context/context-lost.html:    shouldBeTrue("gl.isFramebuffer(framebuffer)");
conformance/context/context-lost.html:    shouldBeTrue("gl.isProgram(program)");
conformance/context/context-lost.html:    shouldBeTrue("gl.isRenderbuffer(renderbuffer)");
conformance/context/context-lost.html:    shouldBeTrue("gl.isShader(shader)");
conformance/context/context-lost.html:    shouldBeTrue("gl.isTexture(texture)");
conformance/context/context-lost.html:      shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost.html:      shouldGenerateGLError(gl, gl.NO_ERROR, test);
conformance/context/context-lost.html:    shouldBeTrue("gl.isContextLost()");
conformance/context/context-lost.html:    shouldBe("gl.getError()", "gl.CONTEXT_LOST_WEBGL");
conformance/context/context-lost.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/context/context-lost.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_UNSUPPORTED");
conformance/context/context-lost.html:    shouldBe("gl.getAttribLocation(program, 'u_modelViewProjMatrix')", "-1");
conformance/context/context-lost.html:    shouldBe("gl.getVertexAttribOffset(0, gl.VERTEX_ATTRIB_ARRAY_POINTER)", "0");
conformance/context/context-lost.html:    shouldGenerateGLError(gl, gl.INVALID_OPERATION, "extension.loseContext()");
conformance/context/context-lost.html:        "gl.activeTexture(gl.TEXTURE0)",
conformance/context/context-lost.html:        "gl.attachShader(program, shader)",
conformance/context/context-lost.html:        "gl.bindBuffer(gl.ARRAY_BUFFER, buffer)",
conformance/context/context-lost.html:        "gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)",
conformance/context/context-lost.html:        "gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer)",
conformance/context/context-lost.html:        "gl.bindTexture(gl.TEXTURE_2D, texture)",
conformance/context/context-lost.html:        "gl.blendColor(1.0, 1.0, 1.0, 1.0)",
conformance/context/context-lost.html:        "gl.blendEquation(gl.FUNC_ADD)",
conformance/context/context-lost.html:        "gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD)",
conformance/context/context-lost.html:        "gl.blendFunc(gl.ONE, gl.ONE)",
conformance/context/context-lost.html:        "gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE)",
conformance/context/context-lost.html:        "gl.bufferData(gl.ARRAY_BUFFER, 0, gl.STATIC_DRAW)",
conformance/context/context-lost.html:        "gl.bufferData(gl.ARRAY_BUFFER, arrayBufferView, gl.STATIC_DRAW)",
conformance/context/context-lost.html:        "gl.bufferData(gl.ARRAY_BUFFER, arrayBuffer, gl.STATIC_DRAW)",
conformance/context/context-lost.html:        "gl.bufferSubData(gl.ARRAY_BUFFRE, 0, arrayBufferView)",
conformance/context/context-lost.html:        "gl.bufferSubData(gl.ARRAY_BUFFRE, 0, arrayBuffer)",
conformance/context/context-lost.html:        "gl.clear(gl.COLOR_BUFFER_BIT)",
conformance/context/context-lost.html:        "gl.clearColor(1, 1, 1, 1)",
conformance/context/context-lost.html:        "gl.clearDepth(1)",
conformance/context/context-lost.html:        "gl.clearStencil(0)",
conformance/context/context-lost.html:        "gl.colorMask(1, 1, 1, 1)",
conformance/context/context-lost.html:        "gl.compileShader(shader)",
conformance/context/context-lost.html:        "gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.cullFace(gl.FRONT)",
conformance/context/context-lost.html:        "gl.deleteBuffer(buffer)",
conformance/context/context-lost.html:        "gl.deleteFramebuffer(framebuffer)",
conformance/context/context-lost.html:        "gl.deleteProgram(program)",
conformance/context/context-lost.html:        "gl.deleteRenderbuffer(renderbuffer)",
conformance/context/context-lost.html:        "gl.deleteShader(shader)",
conformance/context/context-lost.html:        "gl.deleteTexture(texture)",
conformance/context/context-lost.html:        "gl.depthFunc(gl.NEVER)",
conformance/context/context-lost.html:        "gl.depthMask(0)",
conformance/context/context-lost.html:        "gl.depthRange(0, 1)",
conformance/context/context-lost.html:        "gl.detachShader(program, shader)",
conformance/context/context-lost.html:        "gl.disable(gl.BLEND)",
conformance/context/context-lost.html:        "gl.disableVertexAttribArray(0)",
conformance/context/context-lost.html:        "gl.drawArrays(gl.POINTS, 0, 0)",
conformance/context/context-lost.html:        "gl.drawElements(gl.POINTS, 0, gl.UNSIGNED_SHORT, 0)",
conformance/context/context-lost.html:        "gl.enable(gl.BLEND)",
conformance/context/context-lost.html:        "gl.enableVertexAttribArray(0)",
conformance/context/context-lost.html:        "gl.finish()",
conformance/context/context-lost.html:        "gl.flush()",
conformance/context/context-lost.html:        "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbuffer)",
conformance/context/context-lost.html:        "gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0)",
conformance/context/context-lost.html:        "gl.frontFace(gl.CW)",
conformance/context/context-lost.html:        "gl.generateMipmap(gl.TEXTURE_2D)",
conformance/context/context-lost.html:        "gl.hint(gl.GENERATE_MIPMAP_HINT, gl.FASTEST)",
conformance/context/context-lost.html:        "gl.lineWidth(0)",
conformance/context/context-lost.html:        "gl.linkProgram(program)",
conformance/context/context-lost.html:        "gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0)",
conformance/context/context-lost.html:        "gl.polygonOffset(0, 0)",
conformance/context/context-lost.html:        "gl.readPixels(0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, arrayBufferView)",
conformance/context/context-lost.html:        "gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 0, 0)",
conformance/context/context-lost.html:        "gl.sampleCoverage(0, 0)",
conformance/context/context-lost.html:        "gl.scissor(0, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.shaderSource(shader, '')",
conformance/context/context-lost.html:        "gl.stencilFunc(gl.NEVER, 0, 0)",
conformance/context/context-lost.html:        "gl.stencilFuncSeparate(gl.FRONT, gl.NEVER, 0, 0)",
conformance/context/context-lost.html:        "gl.stencilMask(0)",
conformance/context/context-lost.html:        "gl.stencilMaskSeparate(gl.FRONT, 0)",
conformance/context/context-lost.html:        "gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP)",
conformance/context/context-lost.html:        "gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP)",
conformance/context/context-lost.html:        "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, arrayBufferView)",
conformance/context/context-lost.html:        "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, imageData)",
conformance/context/context-lost.html:        "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)",
conformance/context/context-lost.html:        "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d)",
conformance/context/context-lost.html:        "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video)",
conformance/context/context-lost.html:        "gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)",
conformance/context/context-lost.html:        "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)",
conformance/context/context-lost.html:        "gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, arrayBufferView)",
conformance/context/context-lost.html:        "gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, imageData)",
conformance/context/context-lost.html:        "gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, image)",
conformance/context/context-lost.html:        "gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d)",
conformance/context/context-lost.html:        "gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, video)",
conformance/context/context-lost.html:        "gl.uniform1f(uniformLocation, 0)",
conformance/context/context-lost.html:        "gl.uniform1fv(uniformLocation, float32array)",
conformance/context/context-lost.html:        "gl.uniform1fv(uniformLocation, [0])",
conformance/context/context-lost.html:        "gl.uniform1i(uniformLocation, 0)",
conformance/context/context-lost.html:        "gl.uniform1iv(uniformLocation, int32array)",
conformance/context/context-lost.html:        "gl.uniform1iv(uniformLocation, [0])",
conformance/context/context-lost.html:        "gl.uniform2f(uniformLocation, 0, 0)",
conformance/context/context-lost.html:        "gl.uniform2fv(uniformLocation, float32array)",
conformance/context/context-lost.html:        "gl.uniform2fv(uniformLocation, [0, 0])",
conformance/context/context-lost.html:        "gl.uniform2i(uniformLocation, 0, 0)",
conformance/context/context-lost.html:        "gl.uniform2iv(uniformLocation, int32array)",
conformance/context/context-lost.html:        "gl.uniform2iv(uniformLocation, [0, 0])",
conformance/context/context-lost.html:        "gl.uniform3f(uniformLocation, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.uniform3fv(uniformLocation, float32array)",
conformance/context/context-lost.html:        "gl.uniform3fv(uniformLocation, [0, 0, 0])",
conformance/context/context-lost.html:        "gl.uniform3i(uniformLocation, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.uniform3iv(uniformLocation, int32array)",
conformance/context/context-lost.html:        "gl.uniform3iv(uniformLocation, [0, 0, 0])",
conformance/context/context-lost.html:        "gl.uniform4f(uniformLocation, 0, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.uniform4fv(uniformLocation, float32array)",
conformance/context/context-lost.html:        "gl.uniform4fv(uniformLocation, [0, 0, 0, 0])",
conformance/context/context-lost.html:        "gl.uniform4i(uniformLocation, 0, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.uniform4iv(uniformLocation, int32array)",
conformance/context/context-lost.html:        "gl.uniform4iv(uniformLocation, [0, 0, 0, 0])",
conformance/context/context-lost.html:        "gl.uniformMatrix2fv(uniformLocation, false, float32array)",
conformance/context/context-lost.html:        "gl.uniformMatrix2fv(uniformLocation, false, [0, 0, 0, 0])",
conformance/context/context-lost.html:        "gl.uniformMatrix3fv(uniformLocation, false, float32array)",
conformance/context/context-lost.html:        "gl.uniformMatrix3fv(uniformLocation, false, [0, 0, 0, 0, 0, 0, 0, 0, 0])",
conformance/context/context-lost.html:        "gl.uniformMatrix4fv(uniformLocation, false, float32array)",
conformance/context/context-lost.html:        "gl.uniformMatrix4fv(uniformLocation, false, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",
conformance/context/context-lost.html:        "gl.useProgram(program)",
conformance/context/context-lost.html:        "gl.validateProgram(program)",
conformance/context/context-lost.html:        "gl.vertexAttrib1f(0, 0)",
conformance/context/context-lost.html:        "gl.vertexAttrib1fv(0, float32array)",
conformance/context/context-lost.html:        "gl.vertexAttrib1fv(0, [0])",
conformance/context/context-lost.html:        "gl.vertexAttrib2f(0, 0, 0)",
conformance/context/context-lost.html:        "gl.vertexAttrib2fv(0, float32array)",
conformance/context/context-lost.html:        "gl.vertexAttrib2fv(0, [0, 0])",
conformance/context/context-lost.html:        "gl.vertexAttrib3f(0, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.vertexAttrib3fv(0, float32array)",
conformance/context/context-lost.html:        "gl.vertexAttrib3fv(0, [0, 0, 0])",
conformance/context/context-lost.html:        "gl.vertexAttrib4f(0, 0, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.vertexAttrib4fv(0, float32array)",
conformance/context/context-lost.html:        "gl.vertexAttrib4fv(0, [0, 0, 0, 0])",
conformance/context/context-lost.html:        "gl.vertexAttribPointer(0, 0, gl.FLOAT, false, 0, 0)",
conformance/context/context-lost.html:        "gl.viewport(0, 0, 0, 0)",
conformance/context/context-lost.html:        "gl.createBuffer()",
conformance/context/context-lost.html:        "gl.createFramebuffer()",
conformance/context/context-lost.html:        "gl.createProgram()",
conformance/context/context-lost.html:        "gl.createRenderbuffer()",
conformance/context/context-lost.html:        "gl.createShader(gl.GL_VERTEX_SHADER)",
conformance/context/context-lost.html:        "gl.createTexture()",
conformance/context/context-lost.html:        "gl.getActiveAttrib(program, 0)",
conformance/context/context-lost.html:        "gl.getActiveUniform(program, 0)",
conformance/context/context-lost.html:        "gl.getAttachedShaders(program)",
conformance/context/context-lost.html:        "gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE)",
conformance/context/context-lost.html:        "gl.getContextAttributes()",
conformance/context/context-lost.html:        "gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)",
conformance/context/context-lost.html:        "gl.getParameter(gl.CURRENT_PROGRAM)",
conformance/context/context-lost.html:        "gl.getProgramInfoLog(program)",
conformance/context/context-lost.html:        "gl.getProgramParameter(program, gl.LINK_STATUS)",
conformance/context/context-lost.html:        "gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_WIDTH)",
conformance/context/context-lost.html:        "gl.getShaderInfoLog(shader)",
conformance/context/context-lost.html:        "gl.getShaderParameter(shader, gl.SHADER_TYPE)",
conformance/context/context-lost.html:        "gl.getShaderSource(shader)",
conformance/context/context-lost.html:        "gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S)",
conformance/context/context-lost.html:        "gl.getUniform(program, uniformLocation)",
conformance/context/context-lost.html:        "gl.getUniformLocation(program, 'vPosition')",
conformance/context/context-lost.html:        "gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)",
conformance/context/context-lost.html:        "gl.getSupportedExtensions()",
conformance/context/context-lost.html:        "gl.getExtension('" + extensionName + "')",
conformance/context/context-lost.html:    shouldBeFalse("gl.isBuffer(buffer)");
conformance/context/context-lost.html:    shouldBeFalse("gl.isEnabled(gl.BLEND)");
conformance/context/context-lost.html:    shouldBeFalse("gl.isFramebuffer(framebuffer)");
conformance/context/context-lost.html:    shouldBeFalse("gl.isProgram(program)");
conformance/context/context-lost.html:    shouldBeFalse("gl.isRenderbuffer(renderbuffer)");
conformance/context/context-lost.html:    shouldBeFalse("gl.isShader(shader)");
conformance/context/context-lost.html:    shouldBeFalse("gl.isTexture(texture)");
conformance/context/context-lost.html:    shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/canvas/viewport-unchanged-upon-resize.html:var vbo = gl.createBuffer();
conformance/canvas/viewport-unchanged-upon-resize.html:gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/canvas/viewport-unchanged-upon-resize.html:gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
conformance/canvas/viewport-unchanged-upon-resize.html:gl.enableVertexAttribArray(0);
conformance/canvas/viewport-unchanged-upon-resize.html:gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/canvas/viewport-unchanged-upon-resize.html:gl.clearColor(0, 0, 1, 1);
conformance/canvas/viewport-unchanged-upon-resize.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/viewport-unchanged-upon-resize.html:gl.useProgram(program);
conformance/canvas/viewport-unchanged-upon-resize.html:gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/canvas/viewport-unchanged-upon-resize.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No GL errors before resizing the canvas");
conformance/canvas/viewport-unchanged-upon-resize.html:var canvas = gl.canvas;
conformance/canvas/viewport-unchanged-upon-resize.html:err = gl.getError();
conformance/canvas/viewport-unchanged-upon-resize.html:if (err == gl.CONTEXT_LOST_WEBGL) {
conformance/canvas/viewport-unchanged-upon-resize.html:  shouldBe("err", "gl.NO_ERROR");
conformance/canvas/viewport-unchanged-upon-resize.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/viewport-unchanged-upon-resize.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/context/premultiplyalpha-test.html:    shouldBe('gl.getContextAttributes().premultipliedAlpha', premultipliedAlpha.toString());
conformance/context/premultiplyalpha-test.html:    shouldBeTrue('gl.getContextAttributes().preserveDrawingBuffer');
conformance/context/premultiplyalpha-test.html:    wtu.log(gl.getContextAttributes());
conformance/context/premultiplyalpha-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/context/premultiplyalpha-test.html:    var tex = gl.createTexture();
conformance/context/premultiplyalpha-test.html:    var loc = gl.getUniformLocation(program, "tex");
conformance/context/premultiplyalpha-test.html:    gl.uniform1i(loc, 0);
conformance/context/premultiplyalpha-test.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/context/premultiplyalpha-test.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/context/premultiplyalpha-test.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/context/premultiplyalpha-test.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/context/premultiplyalpha-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from drawing.");
conformance/context/premultiplyalpha-test.html:      var pngTex = gl.createTexture();
conformance/context/premultiplyalpha-test.html:      // gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
conformance/context/premultiplyalpha-test.html:      wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
conformance/context/premultiplyalpha-test.html:      gl.bindTexture(gl.TEXTURE_2D, pngTex);
conformance/context/premultiplyalpha-test.html:         gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this);
conformance/context/premultiplyalpha-test.html:         gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);
conformance/context/premultiplyalpha-test.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/context/premultiplyalpha-test.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/context/premultiplyalpha-test.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/context/premultiplyalpha-test.html:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/context/premultiplyalpha-test.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from creating copy.");
conformance/context/premultiplyalpha-test.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from 2nd drawing.");
conformance/more/demos/opengl_web.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/more/demos/opengl_web.html:    gl.clearColor(0.0, 0.0, 0.0, 0.0);
conformance/more/demos/opengl_web.html:    gl.enable(gl.DEPTH_TEST);
conformance/more/demos/opengl_web.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/more/demos/opengl_web.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/more/demos/opengl_web.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/more/demos/opengl_web.html:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/more/demos/opengl_web.html:        gl.disable(gl.DEPTH_TEST);
conformance/more/demos/opengl_web.html:        gl.activeTexture(gl.TEXTURE1);
conformance/more/demos/opengl_web.html:        gl.bindTexture(gl.TEXTURE_2D, fbo3.texture);
conformance/more/demos/opengl_web.html:        gl.activeTexture(gl.TEXTURE0);
conformance/more/demos/opengl_web.html:            gl.bindTexture(gl.TEXTURE_2D, fbo.texture);
conformance/more/demos/opengl_web.html:            gl.bindTexture(gl.TEXTURE_2D, fbo2.texture);
conformance/more/demos/opengl_web.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/more/demos/opengl_web.html:    gl.activeTexture(gl.TEXTURE1);
conformance/more/demos/opengl_web.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/demos/opengl_web.html:    gl.activeTexture(gl.TEXTURE0);
conformance/more/demos/opengl_web.html:    gl.bindTexture(gl.TEXTURE_2D, fbo.texture);
conformance/canvas/rapid-resizing.html:    gl.clearColor(0, 0, 0, 1);
conformance/canvas/rapid-resizing.html:    var vertexBuffer = gl.createBuffer();
conformance/canvas/rapid-resizing.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
conformance/canvas/rapid-resizing.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/canvas/rapid-resizing.html:    ]), gl.STATIC_DRAW);
conformance/canvas/rapid-resizing.html:    gl.enableVertexAttribArray(0);
conformance/canvas/rapid-resizing.html:    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/canvas/rapid-resizing.html:    var indexBuffer = gl.createBuffer();
conformance/canvas/rapid-resizing.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
conformance/canvas/rapid-resizing.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([
conformance/canvas/rapid-resizing.html:    ]), gl.STATIC_DRAW);
conformance/canvas/rapid-resizing.html:  gl.viewport(0, 0, largeSize, currentSize);
conformance/canvas/rapid-resizing.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/canvas/rapid-resizing.html:  gl.drawElements(gl.TRIANGLES, 24, gl.UNSIGNED_SHORT, 0);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.viewport(0, 0, width, height);
conformance/canvas/drawingbuffer-static-canvas-test.html:  var vertexObject = gl.createBuffer();
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.enableVertexAttribArray(0);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.enable(gl.DEPTH_TEST);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.clearColor(0, 0, 0, 1);
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBe('gl.drawingBufferWidth', 'gl.canvas.width');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBe('gl.drawingBufferHeight', 'gl.canvas.height');
conformance/canvas/drawingbuffer-static-canvas-test.html:  maxSize = gl.getParameter(gl.MAX_VIEWPORT_DIMS);
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.canvas.width = maxSize[0] * 4;
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.canvas.height = maxSize[1] * 4;
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBeTrue('gl.drawingBufferWidth > 0');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBeTrue('gl.drawingBufferHeight > 0');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBeTrue('gl.drawingBufferWidth <= maxSize[0]');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBeTrue('gl.drawingBufferHeight <= maxSize[1]');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.canvas.width = 50;
conformance/canvas/drawingbuffer-static-canvas-test.html:  gl.canvas.height = 50;
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBeTrue('gl.drawingBufferWidth == 50');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBeTrue('gl.drawingBufferHeight == 50');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/canvas/drawingbuffer-static-canvas-test.html:  shouldBe('gl.getError()', 'gl.NO_ERROR');
deqp/functional/gles3/es3fShaderPackingFunctionTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderPackingFunctionTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderPackingFunctionTests.js:goog.require('framework.opengl.gluVarType');
deqp/functional/gles3/es3fShaderPackingFunctionTests.js:	var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderPackingFunctionTests.js:	var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderPackingFunctionTests.js:	var gluVarType = framework.opengl.gluVarType;
conformance/more/index.html:      <li><a href="http://learningwebgl.com/blog/?p=11">Install a browser with WebGL support</a></li>
conformance/more/index.html:      <li><a href="http://planet-webgl.org">Planet WebGL</a></li>
conformance/more/index.html:      <li><a href="http://learningwebgl.com">Learning WebGL</a></li>
conformance/glsl/variables/gl-frontfacing.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/variables/gl-frontfacing.html:  gl.drawElements(gl.TRIANGLES, gridRes * gridRes * 6, gl.UNSIGNED_SHORT, 0);
conformance/glsl/variables/gl-frontfacing.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
conformance/more/performance/CPUvsGPU.html:  gl.viewport(0,0,256,256);
conformance/more/performance/CPUvsGPU.html:  gl.clearColor(0,0,1,1);
conformance/more/performance/CPUvsGPU.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/more/performance/CPUvsGPU.html:  gl.disable(gl.DEPTH_TEST);
conformance/more/performance/CPUvsGPU.html:  gl.activeTexture(gl.TEXTURE0);
conformance/more/performance/CPUvsGPU.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/performance/CPUvsGPU.html:    gl.bindTexture(gl.TEXTURE_2D, fbo1.texture);
conformance/more/performance/CPUvsGPU.html:    gl.bindTexture(gl.TEXTURE_2D, fbo2.texture);
conformance/more/performance/CPUvsGPU.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/more/performance/CPUvsGPU.html:  gl.bindTexture(gl.TEXTURE_2D, fbo1.texture);
conformance/more/performance/CPUvsGPU.html:  gl.deleteTexture(tex);
conformance/more/performance/jsToGLOverhead.html:            gl.getError();
conformance/more/performance/jsToGLOverhead.html:<h3>1000000x gl.getError() (measuring JS->GL call overhead)</h3>
conformance/canvas/to-data-url-test.html:    gl.clearColor(color[0] / 255, color[1] / 255, color[2] / 255, color[3] / 255);
conformance/canvas/to-data-url-test.html:    gl.scissor(x, y, width, height);
conformance/canvas/to-data-url-test.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/canvas/to-data-url-test.html:    gl.canvas.width = width;
conformance/canvas/to-data-url-test.html:    gl.canvas.height = height;
conformance/canvas/to-data-url-test.html:    gl.viewport(0, 0, width, height);
conformance/canvas/to-data-url-test.html:    gl.enable(gl.SCISSOR_TEST);
conformance/canvas/to-data-url-test.html:    // Performs gl.canvas.toDataURL() internally
conformance/canvas/to-data-url-test.html:    var img = wtu.makeImageFromCanvas(gl.canvas, function() {
conformance/glsl/variables/glsl-built-ins.html:    variable.max = gl.getParameter(gl[toUnderscore(variable.name)]);
conformance/glsl/variables/glsl-built-ins.html:    expectTrue(variable.max >= variable.min, "gl.getParameter(gl." + toUnderscore(variable.name) + ") >= " + variable.min);
conformance/more/performance/bandwidth.html:    var tex = gl.createTexture();
conformance/more/performance/bandwidth.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/performance/bandwidth.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, texArr);
conformance/more/performance/bandwidth.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, texArr);
conformance/more/performance/bandwidth.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 256, 256, gl.RGBA, gl.UNSIGNED_BYTE, texArr);
conformance/more/performance/bandwidth.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
conformance/more/performance/bandwidth.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, img);
conformance/more/performance/bandwidth.html:    var bufs = [gl.createBuffer(), gl.createBuffer()];
conformance/more/performance/bandwidth.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/more/performance/bandwidth.html:            gl.bufferData(gl.ARRAY_BUFFER, bufArr, gl.STATIC_DRAW);
conformance/more/performance/bandwidth.html:            gl.bufferSubData(gl.ARRAY_BUFFER, 0, bufArr);
conformance/more/performance/bandwidth.html:            gl.bufferData(gl.ARRAY_BUFFER, bufArr, gl.STATIC_DRAW);
conformance/more/performance/bandwidth.html:            gl.bufferSubData(gl.ARRAY_BUFFER, 0, bufArr);
conformance/more/performance/bandwidth.html:    gl.disable(gl.DEPTH_TEST);
conformance/more/performance/bandwidth.html:        gl.disableVertexAttribArray(i);
conformance/more/performance/bandwidth.html:    gl.enableVertexAttribArray(v);
conformance/more/performance/bandwidth.html:    gl.vertexAttribPointer(v, 4, gl.FLOAT, false, 0, 0);
conformance/more/performance/bandwidth.html:            gl.drawArrays(gl.TRIANGLES, 0, 256*256);
conformance/more/performance/bandwidth.html:        gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE);
conformance/more/performance/bandwidth.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buf2);
conformance/more/performance/bandwidth.html:    gl.bufferData(gl.ARRAY_BUFFER, bufArr, gl.STATIC_DRAW);
conformance/more/performance/bandwidth.html:            gl.bindBuffer(gl.ARRAY_BUFFER, (i % 2 == 0) ? buf : buf2);
conformance/more/performance/bandwidth.html:            gl.drawArrays(gl.TRIANGLES, 0, 256*256);
conformance/more/performance/bandwidth.html:        gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE);
conformance/more/performance/bandwidth.html:/*    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/performance/bandwidth.html:    gl.vertexAttribPointer(v, 4, gl.FLOAT, false, 0, bufArr);
conformance/more/performance/bandwidth.html:            gl.drawArrays(gl.TRIANGLES, 0, 256*256);
conformance/more/performance/bandwidth.html:        gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE);
conformance/more/performance/bandwidth.html:            gl.vertexAttribPointer(v, 4, gl.FLOAT, false, 0, bufArr);
conformance/more/performance/bandwidth.html:            gl.drawArrays(gl.TRIANGLES, 0, 256*256);
conformance/more/performance/bandwidth.html:        gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE);
conformance/more/performance/bandwidth.html:            gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/more/performance/bandwidth.html:        gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE);
conformance/more/performance/bandwidth.html:            gl.readPixels(0, 0, 256, 256, gl.RGBA, gl.UNSIGNED_BYTE);
conformance/more/performance/bandwidth.html:            gl.getImageData(0, 0, 256, 256);
conformance/more/performance/bandwidth.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/performance/bandwidth.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/performance/bandwidth.html:    bufs.forEach(function(buf){ gl.deleteBuffer(buf) });
conformance/more/performance/bandwidth.html:    gl.deleteTexture(tex);
conformance/glsl/variables/gl-fragcoord-xy-values.html:  var widthPx    = gl.drawingBufferWidth;
conformance/glsl/variables/gl-fragcoord-xy-values.html:  var heightPx   = gl.drawingBufferHeight;
conformance/glsl/variables/gl-fragcoord-xy-values.html:  vxBuffer = gl.createBuffer();
conformance/glsl/variables/gl-fragcoord-xy-values.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vxBuffer);
conformance/glsl/variables/gl-fragcoord-xy-values.html:  gl.enableVertexAttribArray(0);
conformance/glsl/variables/gl-fragcoord-xy-values.html:  gl.vertexAttribPointer(0, floatsPerAttribute, gl.FLOAT, false, 0, 0);
conformance/glsl/variables/gl-fragcoord-xy-values.html:  gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
conformance/glsl/variables/gl-fragcoord-xy-values.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/glsl/variables/gl-fragcoord-xy-values.html:  gl.drawArrays(gl.POINTS, 0, data.length / floatsPerAttribute);
conformance/glsl/variables/gl-fragcoord-xy-values.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
conformance/more/conformance/quickCheckAPI-C.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/glsl/variables/gl-pointcoord.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/variables/gl-pointcoord.html:var canvas = gl.canvas;
conformance/glsl/variables/gl-pointcoord.html:var maxPointSize = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE)[1];
conformance/glsl/variables/gl-pointcoord.html:var pointSizeLoc = gl.getUniformLocation(program, "uPointSize");
conformance/glsl/variables/gl-pointcoord.html:gl.uniform1f(pointSizeLoc, maxPointSize);
conformance/glsl/variables/gl-pointcoord.html:var vertexObject = gl.createBuffer();
conformance/glsl/variables/gl-pointcoord.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/glsl/variables/gl-pointcoord.html:gl.bufferData(
conformance/glsl/variables/gl-pointcoord.html:    gl.ARRAY_BUFFER,
conformance/glsl/variables/gl-pointcoord.html:    gl.STATIC_DRAW);
conformance/glsl/variables/gl-pointcoord.html:gl.enableVertexAttribArray(0);
conformance/glsl/variables/gl-pointcoord.html:gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/glsl/variables/gl-pointcoord.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/variables/gl-pointcoord.html:gl.drawArrays(gl.POINTS, 0, 4);
conformance/glsl/variables/gl-pointcoord.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/variables/gl-pointcoord.html://  gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, b);
conformance/glsl/bugs/modulo-arithmetic-accuracy.html:  gl.clearColor(0.0, 0.0, 0.0, 1.0);
conformance/glsl/bugs/modulo-arithmetic-accuracy.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/bugs/modulo-arithmetic-accuracy.html:  gl.uniform1f(gl.getUniformLocation(program, "divisor"), 3);
conformance/glsl/variables/gl-fragcoord.html:  var vertexObject = gl.createBuffer();
conformance/glsl/variables/gl-fragcoord.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/glsl/variables/gl-fragcoord.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(
conformance/glsl/variables/gl-fragcoord.html:      gl.STATIC_DRAW);
conformance/glsl/variables/gl-fragcoord.html:  gl.enableVertexAttribArray(0);
conformance/glsl/variables/gl-fragcoord.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/glsl/variables/gl-fragcoord.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/variables/gl-fragcoord.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/glsl/variables/gl-fragcoord.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
conformance/glsl/bugs/compare-loop-index-to-uniform.html:  var uniformLoc = gl.getUniformLocation(program, 'uCount');
conformance/glsl/bugs/compare-loop-index-to-uniform.html:  gl.uniform1i(uniformLoc, 5);
conformance/more/conformance/quickCheckAPI-A.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/more/conformance/quickCheckAPI-S_V.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/more/conformance/quickCheckAPI-B2.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/more/functions/uniformf.html:    gl.uniform4fv(foo, [1,2,3,4]);
conformance/more/functions/uniformf.html:    gl.uniform1fv(bar, [2]);
conformance/more/functions/uniformf.html:  gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
conformance/more/functions/uniformf.html:    gl.uniform4f(foo, 2,2,3,4);
conformance/more/functions/uniformf.html:    gl.uniform1f(bar, 3);
conformance/more/functions/uniformf.html:  gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
conformance/more/conformance/quickCheckAPIBadArgs.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/more/functions/uniformfArrayLen1.html:            function(){gl.uniform1fv(uniFloat, [2]);});
conformance/more/functions/uniformfArrayLen1.html:            function(){gl.uniform1fv(uniFloat, [2,3,4,5,6]);});
conformance/more/functions/uniformfArrayLen1.html:            function(){gl.uniform4fv(uniV4, [1, 2, 3, 4]);});
conformance/more/functions/uniformfArrayLen1.html:            function(){gl.uniform4fv(uniV4, [1, 2, 3, 4, 5, 6, 7, 8]);});
conformance/more/functions/uniformfArrayLen1.html:    var numUniforms = gl.getProgramParameter(f.shader.program, gl.ACTIVE_UNIFORMS);
conformance/more/functions/uniformfArrayLen1.html:        var uniformName = gl.getActiveUniform(f.shader.program, i).name;
conformance/more/functions/uniformfArrayLen1.html:            function(){gl.uniform1fv(uniFloat, [2]);});
conformance/more/functions/uniformfArrayLen1.html:            function(){gl.uniform1fv(uniFloat, [2,3,4,5,6]);});
conformance/more/functions/uniformfArrayLen1.html:            function(){gl.uniform4fv(uniV4, [1, 2, 3, 4]);});
conformance/more/functions/uniformfArrayLen1.html:            function(){gl.uniform4fv(uniV4, [1, 2, 3, 4, 5, 6, 7, 8]);});
conformance/more/functions/uniformfArrayLen1.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "buffer = gl.createBuffer()");
conformance/misc/is-object.html:shouldBeFalse("gl.isBuffer(buffer)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindBuffer(gl.ARRAY_BUFFER, buffer)");
conformance/misc/is-object.html:shouldBeTrue("gl.isBuffer(buffer)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "framebuffer = gl.createFramebuffer()");
conformance/misc/is-object.html:shouldBeFalse("gl.isFramebuffer(framebuffer)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)");
conformance/misc/is-object.html:shouldBeTrue("gl.isFramebuffer(framebuffer)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "renderbuffer = gl.createRenderbuffer()");
conformance/misc/is-object.html:shouldBeFalse("gl.isRenderbuffer(renderbuffer)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer)");
conformance/misc/is-object.html:shouldBeTrue("gl.isRenderbuffer(renderbuffer)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "texture = gl.createTexture()");
conformance/misc/is-object.html:shouldBeFalse("gl.isTexture(texture)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.bindTexture(gl.TEXTURE_2D, texture)");
conformance/misc/is-object.html:shouldBeTrue("gl.isTexture(texture)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "program = gl.createProgram()");
conformance/misc/is-object.html:shouldBeTrue("gl.isProgram(program)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteProgram(program)");
conformance/misc/is-object.html:shouldBeFalse("gl.isProgram(program)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "shader = gl.createShader(gl.VERTEX_SHADER)");
conformance/misc/is-object.html:shouldBeTrue("gl.isShader(shader)");
conformance/misc/is-object.html:shouldGenerateGLError(gl, gl.NO_ERROR, "gl.deleteShader(shader)");
conformance/misc/is-object.html:shouldBeFalse("gl.isShader(shader)");
conformance/more/functions/uniformMatrix.html:    gl.uniformMatrix4fv(foo, false, [1,0,0,0, 0,2,0,0, 0,0,3,0, 0,0,0,4]);
conformance/more/functions/uniformMatrix.html:    gl.uniformMatrix2fv(bar, false, [2,1, 2,2]);
conformance/more/functions/uniformMatrix.html:    gl.uniformMatrix3fv(bar3, false, [2,2,2, 2,2,2, 2,1,2]);
conformance/more/functions/uniformMatrix.html:  gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-blob.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-blob.js:        gl.clearDepth(1);
conformance/context/context-release-upon-reload.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
conformance/context/context-release-upon-reload.html:  if(gl.canvas.width != gl.drawingBufferWidth ||
conformance/context/context-release-upon-reload.html:    gl.canvas.height != gl.drawingBufferHeight) {
conformance/context/context-release-upon-reload.html:        gl.drawingBufferWidth + "x" + gl.drawingBufferHeight);
conformance/context/context-release-upon-reload.html:        gl.drawingBufferWidth + "x" + gl.drawingBufferHeight);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-canvas.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-canvas.js:        gl.clearDepth(1);
conformance/context/resources/context-release-child-with-worker.html:var vertexObject = gl.createBuffer();
conformance/context/resources/context-release-child-with-worker.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/context/resources/context-release-child-with-worker.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.75,0, -0.75,-0.75,0, 0.75,-0.75,0 ]), gl.STATIC_DRAW);
conformance/context/resources/context-release-child-with-worker.html:gl.enableVertexAttribArray(0);
conformance/context/resources/context-release-child-with-worker.html:gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/context/resources/context-release-child-with-worker.html:gl.clearColor(0.0, 0.0, 0.0, 1.0);
conformance/context/resources/context-release-child-with-worker.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/context/resources/context-release-child-with-worker.html:gl.drawArrays(gl.TRIANGLES, 0, 3);
deqp/functional/gles3/es3fFboColorbufferTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFboColorbufferTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fFboColorbufferTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFboColorbufferTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fFboColorbufferTests.js:                gl.activeTexture(gl.TEXTURE0 + ndx);
deqp/functional/gles3/es3fFboColorbufferTests.js:                gl.bindTexture(gl.TEXTURE_2D, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:                gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:                gl.bindTexture(gl.TEXTURE_2D_ARRAY, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:                gl.bindTexture(gl.TEXTURE_3D, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.disable(gl.BLEND);
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.clearColor(0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_format, this.m_width, this.m_height);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboColorbufferTests.js:                ctx.clearBufferfv(gl.COLOR, 0, new Float32Array(4));
deqp/functional/gles3/es3fFboColorbufferTests.js:                ctx.clearBufferuiv(gl.COLOR, 0, new Uint32Array(4));
deqp/functional/gles3/es3fFboColorbufferTests.js:                ctx.clearBufferiv(gl.COLOR, 0, new Int32Array(4));
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboColorbufferTests.js:                    ctx.clearBufferfv(gl.COLOR, 0, color);
deqp/functional/gles3/es3fFboColorbufferTests.js:                    ctx.clearBufferuiv(gl.COLOR, 0, color);
deqp/functional/gles3/es3fFboColorbufferTests.js:                    ctx.clearBufferiv(gl.COLOR, 0, color);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, isFilterable ? gl.LINEAR : gl.NEAREST);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, isFilterable ? gl.LINEAR : gl.NEAREST);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
deqp/functional/gles3/es3fFboColorbufferTests.js:            this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboColorbufferTests.js:            var format = gl.RGBA;
deqp/functional/gles3/es3fFboColorbufferTests.js:            var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_2D, tmpTex);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texImage2D(gl.TEXTURE_2D, 0, format, texW, texH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindTexture(gl.TEXTURE_2D, tex0);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.activeTexture(gl.TEXTURE1);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindTexture(gl.TEXTURE_2D, tex1);
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.TEXTURE_CUBE_MAP_POSITIVE_X,
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
deqp/functional/gles3/es3fFboColorbufferTests.js:            gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, isFilterable ? gl.LINEAR : gl.NEAREST);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, isFilterable ? gl.LINEAR : gl.NEAREST);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, layerFbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, cubeGLFaces[ndx], tex, 0);
deqp/functional/gles3/es3fFboColorbufferTests.js:            this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboColorbufferTests.js:            var format = gl.RGBA;
deqp/functional/gles3/es3fFboColorbufferTests.js:            var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_2D, tmpTex);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texImage2D(gl.TEXTURE_2D, 0, format, texW, texH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, isFilterable ? gl.LINEAR : gl.NEAREST);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, isFilterable ? gl.LINEAR : gl.NEAREST);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texImage3D(gl.TEXTURE_2D_ARRAY, 0, this.m_format, size[0], size[1], size[2], 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, layerFbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex, 0, ndx);
deqp/functional/gles3/es3fFboColorbufferTests.js:            this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboColorbufferTests.js:            var format = gl.RGBA;
deqp/functional/gles3/es3fFboColorbufferTests.js:            var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_2D, tmpTex);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texImage2D(gl.TEXTURE_2D, 0, format, texW, texH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_2D_ARRAY, tex);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texImage3D(gl.TEXTURE_3D, 0, this.m_format, size[0], size[1], size[2], 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:                ctx.bindFramebuffer(gl.FRAMEBUFFER, layerFbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:                ctx.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex, 0, ndx);
deqp/functional/gles3/es3fFboColorbufferTests.js:                this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboColorbufferTests.js:            var format = gl.RGBA;
deqp/functional/gles3/es3fFboColorbufferTests.js:            var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_2D, tmpTex);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.texImage2D(gl.TEXTURE_2D, 0, format, texW, texH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fFboColorbufferTests.js:            ctx.bindTexture(gl.TEXTURE_3D, tex);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_format, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fFboColorbufferTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboColorbufferTests.js:        var format = gl.RGBA;
deqp/functional/gles3/es3fFboColorbufferTests.js:        var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.bindTexture(gl.TEXTURE_2D, gridTex);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, format, texW, texH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFboColorbufferTests.js:        ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA32I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA32UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA16I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA16UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA8,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA8I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA8UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.SRGB8_ALPHA8,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGB10_A2,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGB10_A2UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA4,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGB5_A1,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGB8,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGB565,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG32I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG32UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG16I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG16UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG8,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG8I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG8UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R32I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R32UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R16I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R16UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R8,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R8I,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R8UI,
deqp/functional/gles3/es3fFboColorbufferTests.js:        // gl.EXT_color_buffer_float
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA32F,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RGBA16F,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R11F_G11F_B10F,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG32F,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.RG16F,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R32F,
deqp/functional/gles3/es3fFboColorbufferTests.js:        gl.R16F,
deqp/functional/gles3/es3fFboColorbufferTests.js:        // gl.EXT_color_buffer_half_float is not exposed in WebGL 2.0.
deqp/functional/gles3/es3fFboColorbufferTests.js:        // gl.RGB16F
deqp/functional/gles3/es3fFboColorbufferTests.js:            texNpotSizeA, gl.FUNC_ADD, gl.FUNC_ADD, gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE));
deqp/functional/gles3/es3fFboColorbufferTests.js:    const canvas = gl.canvas;
conformance/glsl/bugs/sampler-array-using-loop-index.html:  var loc = gl.getUniformLocation(program, "uni[" + ii + "]");
conformance/glsl/bugs/sampler-array-using-loop-index.html:  gl.activeTexture(gl.TEXTURE0 + ii);
conformance/glsl/bugs/sampler-array-using-loop-index.html:  var tex = gl.createTexture();
conformance/glsl/bugs/sampler-array-using-loop-index.html:  gl.uniform1i(loc, ii);
conformance/glsl/bugs/sampler-array-using-loop-index.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/glsl/misc/shader-with-reserved-words.html:      gl.deleteProgram(program);
conformance/glsl/misc/shader-with-reserved-words.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no GL errors");
conformance/glsl/bugs/sketchfab-lighting-shader-crash.html:gl.canvas.addEventListener("webglcontextlost", function(e) {
conformance/glsl/bugs/sketchfab-lighting-shader-crash.html:    if (!gl.getProgramParameter(program1, gl.LINK_STATUS)) {
conformance/glsl/bugs/sketchfab-lighting-shader-crash.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/more/conformance/quickCheckAPI-L_S.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/glsl/bugs/complex-glsl-does-not-crash.html:    maxVectors: gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),
conformance/glsl/bugs/complex-glsl-does-not-crash.html:    maxVectors: gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS),
conformance/glsl/misc/shader-with-non-reserved-words.html:      gl.deleteProgram(program);
conformance/glsl/misc/shader-with-non-reserved-words.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no GL errors");
conformance/glsl/bugs/qualcomm-loop-with-continue-crash.html:gl.canvas.addEventListener("webglcontextlost", function(e) {
conformance/glsl/bugs/qualcomm-loop-with-continue-crash.html:    if (!gl.getProgramParameter(program1, gl.LINK_STATUS)) {
conformance/glsl/bugs/qualcomm-loop-with-continue-crash.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/more/conformance/quickCheckAPI-B4.html:        // e.g. calling gl.deleteBuffer(rv) after testing gl.createBuffer() above
conformance/glsl/misc/uniform-location-length-limits.html:shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)', 'true');
conformance/glsl/misc/uniform-location-length-limits.html:var uniformLoc = gl.getUniformLocation(program, "identifier128CharactersLong_0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789.identifier64CharactersLong_0123456789012345678901234567890123456.identifier62CharactersLong_01234567890123456789012345678901234");
conformance/glsl/misc/uniform-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance/glsl/misc/uniform-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance/glsl/misc/uniform-location-length-limits.html:shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)', 'true');
conformance/glsl/misc/uniform-location-length-limits.html:var uniformLoc = gl.getUniformLocation(program, "identifier128CharactersLong_0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789.identifier64CharactersLong_0123456789012345678901234567890123456.identifier63CharactersLong_012345678901234567890123456789012345");
conformance/glsl/misc/uniform-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance/misc/uninitialized-test.html:    var texture = gl.createTexture();
conformance/misc/uninitialized-test.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/misc/uninitialized-test.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texWidth, texHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/misc/uninitialized-test.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, badData);
conformance/misc/uninitialized-test.html:    gl.finish(); // make sure it has been uploaded
conformance/misc/uninitialized-test.html:    gl.deleteTexture(texture);
conformance/misc/uninitialized-test.html:    gl.finish(); // make sure it has been deleted
conformance/misc/uninitialized-test.html:    var texture = gl.createTexture();
conformance/misc/uninitialized-test.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/misc/uninitialized-test.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/misc/uninitialized-test.html:    var fb = gl.createFramebuffer();
conformance/misc/uninitialized-test.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/misc/uninitialized-test.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/misc/uninitialized-test.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/uninitialized-test.html:    gl.readPixels(0, 0, texWidth, texHeight, gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance/misc/uninitialized-test.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/misc/uninitialized-test.html:gl.deleteTexture(tex);
conformance/misc/uninitialized-test.html:gl.finish();
conformance/misc/uninitialized-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/misc/uninitialized-test.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/misc/uninitialized-test.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, width/2, height/2, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance/misc/uninitialized-test.html:gl.deleteTexture(tex);
conformance/misc/uninitialized-test.html:gl.finish();
conformance/misc/uninitialized-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/misc/uninitialized-test.html:var fbo = gl.createFramebuffer();
conformance/misc/uninitialized-test.html:gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/misc/uninitialized-test.html:var rbo = gl.createRenderbuffer();
conformance/misc/uninitialized-test.html:gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
conformance/misc/uninitialized-test.html:gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, fboWidth, fboHeight);
conformance/misc/uninitialized-test.html:gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo);
conformance/misc/uninitialized-test.html:shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/uninitialized-test.html:gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/misc/uninitialized-test.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/misc/uninitialized-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/misc/uninitialized-test.html:gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, width, height, 0);
conformance/misc/uninitialized-test.html:gl.deleteTexture(tex);
conformance/misc/uninitialized-test.html:gl.finish();
conformance/misc/uninitialized-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/misc/uninitialized-test.html:var fbo = gl.createFramebuffer();
conformance/misc/uninitialized-test.html:gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/misc/uninitialized-test.html:var rbo = gl.createRenderbuffer();
conformance/misc/uninitialized-test.html:gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
conformance/misc/uninitialized-test.html:gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, fboWidth, fboHeight);
conformance/misc/uninitialized-test.html:gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo);
conformance/misc/uninitialized-test.html:shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/misc/uninitialized-test.html:gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/misc/uninitialized-test.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/misc/uninitialized-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/misc/uninitialized-test.html:gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, x, y, width, height, 0);
conformance/misc/uninitialized-test.html:gl.deleteTexture(tex);
conformance/misc/uninitialized-test.html:gl.finish();
conformance/misc/uninitialized-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/misc/uninitialized-test.html:gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/misc/uninitialized-test.html:gl.clearColor(0.0, 1.0, 0.0, 0.0);
conformance/misc/uninitialized-test.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/misc/uninitialized-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/misc/uninitialized-test.html:gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, width, height, 0);
conformance/misc/uninitialized-test.html:checkNonZeroPixels(tex, width, height, 0, 0, gl.canvas.width, gl.canvas.height, 0, 255, 0, 0);
conformance/misc/uninitialized-test.html:gl.deleteTexture(tex);
conformance/misc/uninitialized-test.html:gl.finish();
conformance/misc/uninitialized-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/more/README.md:  1. <a href="http://learningwebgl.com/blog/?p=11">Install a browser with WebGL support</a>
conformance/more/README.md:  * <a href="http://planet-webgl.org">Planet WebGL</a>
conformance/more/README.md:  * <a href="http://learningwebgl.com">Learning WebGL</a>
conformance/more/functions/bindBufferBadArgs.html:  var b = gl.createBuffer();
conformance/more/functions/bindBufferBadArgs.html:  assertOk("bind buffer", function(){gl.bindBuffer(gl.ARRAY_BUFFER, b)});
conformance/more/functions/bindBufferBadArgs.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/bindBufferBadArgs.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([10]), gl.STATIC_DRAW);
conformance/more/functions/bindBufferBadArgs.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([10]));
conformance/more/functions/bindBufferBadArgs.html:    gl.bindBuffer(gl.ARRAY_BUFFER, 1000000000);
conformance/more/functions/bindBufferBadArgs.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([10]), gl.STATIC_DRAW);
conformance/more/functions/bindBufferBadArgs.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([10]));
conformance/more/functions/bindBufferBadArgs.html:  assertOk("bind to null", function(){gl.bindBuffer(gl.ARRAY_BUFFER, null)});
conformance/more/functions/bindBufferBadArgs.html:  gl.deleteBuffer(b);
conformance/more/functions/bindBufferBadArgs.html:  var b = gl.createBuffer();
conformance/more/functions/bindBufferBadArgs.html:  assertOk("bind buffer", function(){gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, b)});
conformance/more/functions/bindBufferBadArgs.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance/more/functions/bindBufferBadArgs.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Float32Array([10]), gl.STATIC_DRAW);
conformance/more/functions/bindBufferBadArgs.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([10]));
conformance/more/functions/bindBufferBadArgs.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, 1000000000);
conformance/more/functions/bindBufferBadArgs.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Float32Array([10]), gl.STATIC_DRAW);
conformance/more/functions/bindBufferBadArgs.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([10]));
conformance/more/functions/bindBufferBadArgs.html:      function(){gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null)});
conformance/more/functions/bindBufferBadArgs.html:  gl.deleteBuffer(b);
conformance/more/functions/bindBufferBadArgs.html:        function(){gl.bindBuffer(gl.ARRAY_BUFFER, 1);});
conformance/more/functions/bindBufferBadArgs.html:        function(){gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, 1);});
conformance/more/functions/bindBufferBadArgs.html:        function(){gl.bindBuffer(gl.FLOAT, 0);});
conformance/more/functions/bindBufferBadArgs.html:        function(){gl.bindBuffer(gl.ARRAY_BUFFER, "foo");});
conformance/more/functions/bindBufferBadArgs.html:        function(){gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, "foo");});
conformance/context/context-no-alpha-fbo-with-alpha.html:    gl.clearColor(0.0, 0.0, 0.0, 0.7);
conformance/context/context-no-alpha-fbo-with-alpha.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-no-alpha-fbo-with-alpha.html:        var fbo = gl.createFramebuffer();
conformance/context/context-no-alpha-fbo-with-alpha.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/context/context-no-alpha-fbo-with-alpha.html:        var texture = gl.createTexture();
conformance/context/context-no-alpha-fbo-with-alpha.html:        gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/context/context-no-alpha-fbo-with-alpha.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/context/context-no-alpha-fbo-with-alpha.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/context/context-no-alpha-fbo-with-alpha.html:        gl.clearColor(1.0, 0.0, 0.0, 0.5);
conformance/context/context-no-alpha-fbo-with-alpha.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-no-alpha-fbo-with-alpha.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/more/functions/bindFramebufferLeaveNonZero.html:    var fbo = gl.createFramebuffer();
conformance/more/functions/bindFramebufferLeaveNonZero.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.activeTexture(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.attachShader(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.attachShader(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindAttribLocation(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindAttribLocation(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindAttribLocation(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindBuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindBuffer(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindFramebuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindFramebuffer(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindRenderbuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindRenderbuffer(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindTexture(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bindTexture(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendColor(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendColor(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendColor(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendColor(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendEquation(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendEquationSeparate(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendEquationSeparate(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendFunc(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendFunc(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendFuncSeparate(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendFuncSeparate(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendFuncSeparate(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.blendFuncSeparate(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bufferData(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bufferData(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bufferData(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bufferSubData(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bufferSubData(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.bufferSubData(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.checkFramebufferStatus(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.clear(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.clearColor(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.clearColor(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.clearColor(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.clearColor(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.clearDepth(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.clearStencil(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.colorMask(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.colorMask(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.colorMask(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.colorMask(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.compileShader(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexImage2D(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexImage2D(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexImage2D(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexImage2D(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexImage2D(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexImage2D(0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexImage2D(0,0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexImage2D(0,0,0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexSubImage2D(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexSubImage2D(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexSubImage2D(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexSubImage2D(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexSubImage2D(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexSubImage2D(0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexSubImage2D(0,0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.copyTexSubImage2D(0,0,0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.createShader(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.cullFace(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.deleteBuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.deleteFramebuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.deleteProgram(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.deleteRenderbuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.deleteShader(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.deleteTexture(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.depthFunc(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.depthMask(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.depthRange(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.depthRange(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.detachShader(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.detachShader(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.disable(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.disableVertexAttribArray(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.drawArrays(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.drawArrays(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.drawArrays(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.drawElements(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.drawElements(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.drawElements(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.drawElements(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.enable(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.enableVertexAttribArray(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferRenderbuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferRenderbuffer(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferRenderbuffer(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferRenderbuffer(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferTexture2D(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferTexture2D(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferTexture2D(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferTexture2D(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.framebufferTexture2D(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.frontFace(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.generateMipmap(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getActiveAttrib(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getActiveAttrib(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getActiveUniform(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getActiveUniform(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getAttachedShaders(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getAttribLocation(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getAttribLocation(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getBufferParameteri(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getBufferParameteri(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getFramebufferAttachmentParameteri(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getFramebufferAttachmentParameteri(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getFramebufferAttachmentParameteri(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getProgramInfoLog(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getRenderbufferParameteri(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getRenderbufferParameteri(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getShaderInfoLog(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getShaderSource(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getUniformLocation(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getUniformLocation(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.hint(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.hint(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.isBuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.isEnabled(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.isFramebuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.isProgram(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.isRenderbuffer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.isShader(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.isTexture(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.lineWidth(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.linkProgram(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.polygonOffset(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.polygonOffset(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.readPixels(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.readPixels(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.readPixels(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.readPixels(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.readPixels(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.readPixels(0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.renderbufferStorage(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.renderbufferStorage(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.renderbufferStorage(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.renderbufferStorage(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.sampleCoverage(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.sampleCoverage(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.scissor(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.scissor(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.scissor(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.scissor(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.shaderSource(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.shaderSource(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilFunc(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilFunc(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilFunc(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilFuncSeparate(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilFuncSeparate(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilFuncSeparate(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilFuncSeparate(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilMask(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilMaskSeparate(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilMaskSeparate(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilOp(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilOp(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilOp(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilOpSeparate(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilOpSeparate(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilOpSeparate(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.stencilOpSeparate(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texImage2D(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texImage2D(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texImage2D(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texParameteri(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texParameteri(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texParameteri(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(0,0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(0,0,0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.texSubImage2D(0,0,0,0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform1f(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform1f(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform1fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform1fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform1i(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform1i(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform1iv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform1iv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2f(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2f(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2f(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2i(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2i(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2i(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2iv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform2iv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3f(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3f(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3f(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3f(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3i(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3i(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3i(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3i(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3iv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform3iv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4f(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4f(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4f(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4f(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4f(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4i(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4i(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4i(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4i(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4i(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4iv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniform4iv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix2fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix2fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix2fv(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix3fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix3fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix3fv(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix4fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix4fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.uniformMatrix4fv(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.useProgram(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.validateProgram(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib1f(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib1f(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib1fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib1fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib2f(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib2f(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib2f(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib2fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib2fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib3f(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib3f(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib3f(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib3f(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib3fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib3fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib4f(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib4f(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib4f(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib4f(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib4f(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib4fv(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttrib4fv(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttribPointer(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttribPointer(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttribPointer(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttribPointer(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttribPointer(0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.vertexAttribPointer(0,0,0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.viewport(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.viewport(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.viewport(0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.viewport(0,0,0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getParameter(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getProgramParameter(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getProgramParameter(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getShaderParameter(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getShaderParameter(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getTexParameteri(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getTexParameteri(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getUniformi(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getUniformi(0); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getVertexAttribi(); });
conformance/more/conformance/badArgsArityLessThanArgc.html:  assertFail(function(){ gl.getVertexAttribi(0); });
conformance/context/context-attribute-preserve-drawing-buffer.html:  gl.clearColor(1, 0, 0, 1);
conformance/context/context-attribute-preserve-drawing-buffer.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-eviction-with-garbage-collection.html:  var tex = gl.createTexture();
conformance/context/context-eviction-with-garbage-collection.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/context/context-eviction-with-garbage-collection.html:  gl.texImage2D(
conformance/context/context-eviction-with-garbage-collection.html:    gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixel);
conformance/context/context-eviction-with-garbage-collection.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from iteration " + iter);
conformance/context/context-release-with-workers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
conformance/context/context-release-with-workers.html:  if(gl.canvas.width != gl.drawingBufferWidth ||
conformance/context/context-release-with-workers.html:    gl.canvas.height != gl.drawingBufferHeight) {
conformance/context/context-release-with-workers.html:        gl.drawingBufferWidth + "x" + gl.drawingBufferHeight);
conformance/context/context-release-with-workers.html:        gl.drawingBufferWidth + "x" + gl.drawingBufferHeight);
conformance/more/functions/copyTexImage2DBadArgs.html:  var tex = gl.createTexture();
conformance/more/functions/copyTexImage2DBadArgs.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/copyTexImage2DBadArgs.html:  gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/copyTexImage2DBadArgs.html:  gl.deleteTexture(tex);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0, 17,1,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0, 1,17,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16,0, 1,1,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,16, 1,1,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, -1,0, 1,1,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,-1, 1,1,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0, -1,1,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0, 1,-1,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0, 1,1,1);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0, 1,1,-1);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0, 16,16,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 1, gl.RGBA, 0,0, 15,16,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.FLOAT, 0, gl.RGBA, 0,0, 16,16,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.FLOAT, 0,0, 16,16,0);
conformance/more/functions/copyTexImage2DBadArgs.html:        gl.copyTexImage2D(gl.TEXTURE_2D, -1, gl.RGBA, 0,0, 16,16,0);
conformance/more/functions/uniformi.html:    gl.uniform4iv(foo, [1,2,3,4]);
conformance/more/functions/uniformi.html:    gl.uniform1iv(bar, [2]);
conformance/more/functions/uniformi.html:  gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
conformance/more/functions/uniformi.html:    gl.uniform4i(foo, 2,2,3,4);
conformance/more/functions/uniformi.html:    gl.uniform1i(bar, 3);
conformance/more/functions/uniformi.html:  gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
conformance/glsl/bugs/constant-precision-qualifier.html:  if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision == 0) {
conformance/glsl/bugs/constant-precision-qualifier.html:    var uniformLoc = gl.getUniformLocation(program, 'uTest');
conformance/glsl/bugs/constant-precision-qualifier.html:    gl.uniform1f(uniformLoc, 0);
conformance/glsl/bugs/constant-precision-qualifier.html:    uniformLoc = gl.getUniformLocation(program, 'uTest');
conformance/glsl/bugs/constant-precision-qualifier.html:    gl.uniform1f(uniformLoc, 0);
conformance/glsl/bugs/constant-precision-qualifier.html:    uniformLoc = gl.getUniformLocation(program, 'uTestHigh');
conformance/glsl/bugs/constant-precision-qualifier.html:    gl.uniform1f(uniformLoc, 0);
conformance/glsl/bugs/constant-precision-qualifier.html:    uniformLoc = gl.getUniformLocation(program, 'uTest');
conformance/glsl/bugs/constant-precision-qualifier.html:    gl.uniform1f(uniformLoc, 0);
conformance/context/context-size-change.html:    gl.clearColor(0.0, 0.0, 0.0, 1.0);
conformance/context/context-size-change.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-size-change.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/context/context-size-change.html:    gl.clearColor(0.0, 0.0, 0.0, 1.0);
conformance/context/context-size-change.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-size-change.html:    gl.enable(gl.SCISSOR_TEST);
conformance/context/context-size-change.html:    gl.scissor(0, 0, 1, 1);
conformance/context/context-size-change.html:    gl.clearColor(1.0, 1.0, 1.0, 1.0);
conformance/context/context-size-change.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-size-change.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/context/context-size-change.html:    gl.readPixels(2, 2, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/more/functions/drawArrays.html://   log(gl.getShaderInfoLog(prog.shaders[1]));
conformance/more/functions/drawArrays.html:  var v = gl.getAttribLocation(sh, 'Vertex');
conformance/more/functions/drawArrays.html:  var n = gl.getAttribLocation(sh, 'Normal');
conformance/more/functions/drawArrays.html:  var t = gl.getAttribLocation(sh, 'Tex');
conformance/more/functions/drawArrays.html:  assert(0 == gl.getError());
conformance/more/functions/drawArrays.html:  gl.disableVertexAttribArray(v);
conformance/more/functions/drawArrays.html:  gl.disableVertexAttribArray(n);
conformance/more/functions/drawArrays.html:  gl.disableVertexAttribArray(t);
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 5, 1);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 2);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 6);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 1, 5);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 5, 1);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 2);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 6);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 1, 5);});
conformance/more/functions/drawArrays.html:  assertFail(function(){gl.drawArrays(gl.TRIANGLES, 1, 6);});
conformance/more/functions/drawArrays.html:  assertFail(function(){gl.drawArrays(gl.TRIANGLES, 6, 1);});
conformance/more/functions/drawArrays.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo.vbos[1]);
conformance/more/functions/drawArrays.html:  gl.vertexAttribPointer(n, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 5, 1);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 2);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 6);});
conformance/more/functions/drawArrays.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 1, 5);});
conformance/more/functions/drawArrays.html:  assertFail(function(){gl.drawArrays(gl.TRIANGLES, 1, 6);});
conformance/more/functions/drawArrays.html:  assertFail(function(){gl.drawArrays(gl.TRIANGLES, 6, 1);});
conformance/more/functions/bufferSubData.html:    var buf = gl.createBuffer();
conformance/more/functions/bufferSubData.html:    var ebuf = gl.createBuffer();
conformance/more/functions/bufferSubData.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/more/functions/bufferSubData.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebuf);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Float32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 32, new Float32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STATIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STREAM_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Float32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STREAM_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Float32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Int32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Int16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Int8Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint8Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, 12, gl.STATIC_DRAW);
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12);
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STATIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, 12*4, gl.STATIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Float32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 32, new Float32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STATIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, 12*4, gl.STREAM_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Float32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STREAM_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, 12*4, gl.DYNAMIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Float32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Int32Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Int16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Int8Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint8Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Uint16Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(data), gl.STREAM_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Uint16Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(data), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 16, new Uint16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Uint16Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*2);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 16, new Uint16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint16Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STREAM_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 16, new Uint16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint16Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 16, new Uint16Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint16Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_SIZE), 12*2);
conformance/more/functions/bufferSubData.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array(data), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 4, new Uint8Array([1,1,1,1]));
conformance/more/functions/bufferSubData.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint8Array([1,2,3,4]));
conformance/more/functions/bufferSubData.html:    assertEquals(gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_SIZE), 12);
conformance/more/functions/bufferSubData.html:    gl.deleteBuffer(buf);
conformance/more/functions/bufferSubData.html:    gl.deleteBuffer(ebuf);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.enable(gl.DEPTH_TEST);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.enable(gl.STENCIL_TEST);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.clearDepth(clearDepth);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.clearStencil(clearStencil);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    framebuffer = gl.createFramebuffer();
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    var texture = gl.createTexture();
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.canvas.width, gl.canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    fbHasColor = gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE;
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      var depthStencil = gl.createRenderbuffer();
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.bindRenderbuffer(gl.RENDERBUFFER, depthStencil);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, gl.canvas.width, gl.canvas.height);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencil);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      fbHasDepth = gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE;
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, null);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    var vbo = gl.createBuffer();
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.bufferData(gl.ARRAY_BUFFER, colorOffset + colors.byteLength, gl.STATIC_DRAW);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.bufferSubData(gl.ARRAY_BUFFER, colorOffset, colors);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.enableVertexAttribArray(0);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, true, 0, colorOffset);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.enableVertexAttribArray(1);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 3);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeFalse("gl.getContextAttributes().stencil");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.STENCIL_BITS) == 0");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBeTrue("gl.getParameter(gl.ALPHA_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBeTrue("gl.getParameter(gl.ALPHA_BITS) == 0");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.RED_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.GREEN_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.BLUE_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) == 0");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.STENCIL_BITS) == 0");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeNonNull("contextAttribs = gl.getContextAttributes()");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.clearColor(0.5, 0.5, 0.5, 0.5);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.clear(gl.COLOR_BUFFER_BIT);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) >= 16");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) == 0");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.RED_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.GREEN_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.BLUE_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.ALPHA_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeNonNull("contextAttribs = gl.getContextAttributes()");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.depthFunc(gl.NEVER);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.RED_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.GREEN_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.BLUE_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeTrue("gl.getParameter(gl.ALPHA_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) >= 16");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) == 0");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBeTrue("gl.getParameter(gl.STENCIL_BITS) >= 8");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:        shouldBeTrue("gl.getParameter(gl.STENCIL_BITS) == 0");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeNonNull("contextAttribs = gl.getContextAttributes()");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.depthFunc(gl.ALWAYS);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.stencilFunc(gl.NEVER, 1, 1);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    shouldBeNonNull("contextAttribs = gl.getContextAttributes()");
conformance/context/context-attributes-alpha-depth-stencil-antialias.html:    gl.readPixels(0, 0, N, N, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/rendering/out-of-bounds-index-buffers.html:    gl.clearColor(0.0, 0.0, 1.0, 1.0);  // Start with blue to indicate no pixels touched.
conformance/rendering/out-of-bounds-index-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/out-of-bounds-index-buffers.html:    gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_SHORT, /*offset*/0);
conformance/rendering/out-of-bounds-index-buffers.html:    var error = gl.getError();
conformance/rendering/out-of-bounds-index-buffers.html:    if (error === gl.INVALID_OPERATION) {
conformance/rendering/out-of-bounds-index-buffers.html:    } else if (error === gl.NO_ERROR) {
conformance/rendering/out-of-bounds-index-buffers.html:    var glElementArrayBuffer = gl.createBuffer();
conformance/rendering/out-of-bounds-index-buffers.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, glElementArrayBuffer);
conformance/rendering/out-of-bounds-index-buffers.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, quadIndices, gl.STATIC_DRAW);
conformance/rendering/out-of-bounds-index-buffers.html:var glQuadBuffer = gl.createBuffer();
conformance/rendering/out-of-bounds-index-buffers.html:gl.bindBuffer(gl.ARRAY_BUFFER, glQuadBuffer);
conformance/rendering/out-of-bounds-index-buffers.html:gl.bufferData(gl.ARRAY_BUFFER, quadPositions, gl.STATIC_DRAW);
conformance/rendering/out-of-bounds-index-buffers.html:gl.enableVertexAttribArray(0);
conformance/rendering/out-of-bounds-index-buffers.html:gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/out-of-bounds-index-buffers.html:var glVertexBuffer = gl.createBuffer();
conformance/rendering/out-of-bounds-index-buffers.html:gl.bindBuffer(gl.ARRAY_BUFFER, glVertexBuffer);
conformance/rendering/out-of-bounds-index-buffers.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.2, 0.2, 0.2, 0.2]), gl.STATIC_DRAW);
conformance/rendering/out-of-bounds-index-buffers.html:gl.enableVertexAttribArray(1);
conformance/rendering/out-of-bounds-index-buffers.html:gl.vertexAttribPointer(1, 4, gl.FLOAT, false, 0, 0);
conformance/rendering/out-of-bounds-index-buffers.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Shader and buffer setup should generate errors");
deqp/functional/gles3/es3fUniformBlockTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fUniformBlockTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
conformance/rendering/gl-viewport-test-2.html:    var w = gl.canvas.width;
conformance/rendering/gl-viewport-test-2.html:    var h = gl.canvas.height;
conformance/rendering/gl-viewport-test-2.html:    gl.viewport(0, 0, w/2, h/2);
conformance/rendering/gl-viewport-test-2.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
deqp/functional/gles3/es3fNegativeStateApiTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fNegativeStateApiTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('enable', 'Invalid gl.enable() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if cap is not one of the allowed values.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.enable(-1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('disable', 'Invalid gl.disable() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if cap is not one of the allowed values.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.disable(-1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_parameter', 'Invalid gl.getParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not one of the allowed values.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = /** @type{boolean} */ (gl.getParameter(-1));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_indexed_parameter', 'Invalid gl.getIndexedParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if name is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            data = /** @type{number} */ (gl.getIndexedParameter(-1, 0));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is outside of the valid range for the indexed state target.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            maxUniformBufferBindings = /** @type{number} */ (gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            data = /** @type{number} */ (gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, maxUniformBufferBindings));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_attached_shaders', 'Invalid gl.getAttachedShaders() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shaderObject = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getAttachedShaders(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shaderObject);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_shader_parameter', 'Invalid gl.getShaderParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            param = /** @type{number} */ (gl.getShaderParameter(shader, -1));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getShaderParameter(null, gl.SHADER_TYPE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_shader_info_log', 'Invalid gl.getShaderInfoLog() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getShaderInfoLog(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_shader_precision_format', 'Invalid gl.getShaderPrecisionFormat() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if shaderType or precisionType is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            precision = gl.getShaderPrecisionFormat (-1, gl.MEDIUM_FLOAT);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            precision = gl.getShaderPrecisionFormat (gl.VERTEX_SHADER, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            precision = gl.getShaderPrecisionFormat (-1, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_shader_source', 'Invalid gl.getShaderSource() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getShaderSource(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_program_parameter', 'Invalid gl.getProgramParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = /** @type{boolean} */ (gl.getProgramParameter(program, -1));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getProgramParameter(null, gl.LINK_STATUS);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_program_info_log', 'Invalid gl.getProgramInfoLog() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getProgramInfoLog (null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_tex_parameter', 'Invalid gl.getTexParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLTexture} */ var texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target or pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getTexParameter (-1, gl.TEXTURE_MAG_FILTER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getTexParameter (gl.TEXTURE_2D, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getTexParameter (-1, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_uniform', 'Invalid gl.getUniform() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLUniformLocation} */ var unif = gl.getUniformLocation(program.getProgram(), 'vUnif_vec4'); // vec4
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLProgram} */ var programEmpty = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getUniform (null, unif);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if program has not been successfully linked.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = gl.getUniform (programEmpty, unif);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getUniform (program.getProgram(), null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(programEmpty);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_active_uniform', 'Invalid gl.getActiveUniform() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            numActiveUniforms = /** @type{number} */ (gl.getProgramParameter(program.getProgram(), gl.ACTIVE_UNIFORMS));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('// gl.ACTIVE_UNIFORMS = ' + numActiveUniforms + ' (expected 4).');
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getActiveUniform(null, 0);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to the number of active uniform variables in program.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getActiveUniform(program.getProgram(), numActiveUniforms);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_active_uniforms', 'Invalid gl.getActiveUniforms() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeStateApiTests.js:            numActiveUniforms = /** @type{number} */ (gl.getProgramParameter(program.getProgram(), gl.ACTIVE_UNIFORMS));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('// gl.ACTIVE_UNIFORMS = ' + numActiveUniforms + ' (expected 4).');
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getActiveUniforms(null, dummyUniformIndex, gl.UNIFORM_TYPE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if any value in uniformIndices is greater than or equal to the value of gl.ACTIVE_UNIFORMS for program.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:                dummyParamsDst = gl.getActiveUniforms(program.getProgram(), invalidUniformIndices, gl.UNIFORM_TYPE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:                this.expectError(excess == 0 ? gl.NO_ERROR : gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted token.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            dummyParamDst = gl.getActiveUniforms(program.getProgram(), dummyUniformIndex, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_active_uniform_block_parameter', 'Invalid gl.getActiveUniformBlockParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            numActiveBlocks = /** @type{number} */ (gl.getProgramParameter(program.getProgram(), gl.ACTIVE_UNIFORM_BLOCKS));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('// gl.ACTIVE_UNIFORM_BLOCKS = ' + numActiveBlocks + ' (expected 1).');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if uniformBlockIndex is greater than or equal to the value of gl.ACTIVE_UNIFORM_BLOCKS or is not the index of an active uniform block in program.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = gl.getActiveUniformBlockParameter(program.getProgram(), numActiveBlocks, gl.UNIFORM_BLOCK_BINDING);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = gl.getActiveUniformBlockParameter(program.getProgram(), 0, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_active_uniform_block_name', 'Invalid gl.getActiveUniformBlockName() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            numActiveBlocks = /** @type{number} */ (gl.getProgramParameter(program.getProgram(), gl.ACTIVE_UNIFORM_BLOCKS));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('// gl.ACTIVE_UNIFORM_BLOCKS = ' + numActiveBlocks + ' (expected 1).');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if uniformBlockIndex is greater than or equal to the value of gl.ACTIVE_UNIFORM_BLOCKS or is not the index of an active uniform block in program.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            uniformBlockName = gl.getActiveUniformBlockName(program.getProgram(), numActiveBlocks);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_active_attrib', 'Invalid gl.getActiveAttrib() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            numActiveAttributes = /** @type{number} */(gl.getProgramParameter(program.getProgram(), gl.ACTIVE_ATTRIBUTES));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('// gl.ACTIVE_ATTRIBUTES = ' + numActiveAttributes + ' (expected 1).');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getActiveAttrib(null, 0);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.ACTIVE_ATTRIBUTES.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            activeInfo = gl.getActiveAttrib(program.getProgram(), numActiveAttributes);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_uniform_indices', 'Invalid gl.getUniformIndices() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeStateApiTests.js:            numActiveBlocks = /** @type{number} */(gl.getProgramParameter(program.getProgram(), gl.ACTIVE_UNIFORM_BLOCKS));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('// gl.ACTIVE_UNIFORM_BLOCKS = ' + numActiveBlocks);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getUniformIndices(null, uniformName);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_vertex_attrib', 'Invalid gl.getVertexAttrib() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = gl.getVertexAttrib(0, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = gl.getVertexAttrib(maxVertexAttribs, gl.VERTEX_ATTRIB_ARRAY_ENABLED);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_vertex_attrib_offset', 'Invalid gl.getVertexAttribOffset() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            ptr = gl.getVertexAttribOffset(0, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            ptr = gl.getVertexAttribOffset(maxVertexAttribs, gl.VERTEX_ATTRIB_ARRAY_POINTER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_frag_data_location', 'Invalid gl.getFragDataLocation() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if program has not been linked.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFragDataLocation(program, 'gl_FragColor');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_buffer_parameter', 'Invalid gl.getBufferParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, buf);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target or value is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = /** @type{number} */ (gl.getBufferParameter(-1, gl.BUFFER_SIZE));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = /** @type{number} */ (gl.getBufferParameter(gl.ARRAY_BUFFER, -1));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = /** @type{number} */ (gl.getBufferParameter(-1, -1));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the reserved buffer object name 0 is bound to target.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            params = /** @type{number} */ (gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE));
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_framebuffer_attachment_parameter', 'Invalid gl.getFramebufferAttachmentParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            rbo[0] = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            rbo[1] = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindFramebuffer (gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindRenderbuffer (gl.RENDERBUFFER, rbo[0]);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.renderbufferStorage (gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 16, 16);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.framebufferRenderbuffer (gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rbo[0]);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindRenderbuffer (gl.RENDERBUFFER, rbo[1]);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.renderbufferStorage (gl.RENDERBUFFER, gl.STENCIL_INDEX8, 16, 16);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.framebufferRenderbuffer (gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, rbo[1]);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.checkFramebufferStatus (gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFramebufferAttachmentParameter(-1, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE); // TYPE is gl.RENDERBUFFER
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not valid for the value of gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL); // TYPE is gl.RENDERBUFFER
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME); // TYPE is gl.FRAMEBUFFER_DEFAULT
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if attachment is gl.DEPTH_STENCIL_ATTACHMENT and different objects are bound to the depth and stencil attachment points of target.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the value of gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is gl.NONE and pname is not gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME); // TYPE is gl.NONE
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE); // TYPE is gl.NONE
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION or gl.INVALID_ENUM is generated if attachment is not one of the accepted values for the current binding of target.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME); // A FBO is bound so gl.BACK is invalid
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError([gl.INVALID_OPERATION, gl.INVALID_ENUM]);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME); // Default framebuffer is bound so gl.COLOR_ATTACHMENT0 is invalid
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError([gl.INVALID_OPERATION, gl.INVALID_ENUM]);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_renderbuffer_parameter', 'Invalid gl.getRenderbufferParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            rbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.RENDERBUFFER.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getRenderbufferParameter(-1, gl.RENDERBUFFER_WIDTH);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getRenderbufferParameter(gl.RENDERBUFFER, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_internalformat_parameter', 'Invalid gl.getInternalformatParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLRenderbuffer} */ var rbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLFramebuffer} */ var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            /** @type{WebGLTexture} */ var tex = gl.createTexture();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not gl.SAMPLES or gl.NUM_SAMPLE_COUNTS.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getInternalformatParameter (gl.RENDERBUFFER, gl.RGBA8, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if internalformat is not color-, depth-, or stencil-renderable.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getInternalformatParameter (gl.RENDERBUFFER, gl.RG8_SNORM, gl.NUM_SAMPLE_COUNTS);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getInternalformatParameter (gl.RENDERBUFFER, gl.COMPRESSED_RGB8_ETC2, gl.NUM_SAMPLE_COUNTS);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.RENDERBUFFER.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getInternalformatParameter (-1, gl.RGBA8, gl.NUM_SAMPLE_COUNTS);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getInternalformatParameter (gl.FRAMEBUFFER, gl.RGBA8, gl.NUM_SAMPLE_COUNTS);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getInternalformatParameter (gl.TEXTURE_2D, gl.RGBA8, gl.NUM_SAMPLE_COUNTS);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteTexture(tex);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_query', 'Invalid gl.getQuery() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target or pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getQuery (gl.ANY_SAMPLES_PASSED, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getQuery (-1, gl.CURRENT_QUERY);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getQuery (-1, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_query_parameter', 'Invalid gl.getQueryParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            id = gl.createQuery();
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getQueryParameter (null, gl.QUERY_RESULT_AVAILABLE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('// Note: ' + id + ' is not a query object yet, since it hasn\'t been used by gl.beginQuery');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getQueryParameter (id, gl.QUERY_RESULT_AVAILABLE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.beginQuery (gl.ANY_SAMPLES_PASSED, id);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.endQuery (gl.ANY_SAMPLES_PASSED);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getQueryParameter (id, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if id is the name of a currently active query object.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.beginQuery (gl.ANY_SAMPLES_PASSED, id);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getQueryParameter (id, gl.QUERY_RESULT_AVAILABLE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.endQuery (gl.ANY_SAMPLES_PASSED);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteQuery(id);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_sync_parameter', 'Invalid gl.getSyncParameter() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:                gl.getSyncParameter (null, gl.OBJECT_TYPE);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.getSyncParameter (sync, -1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_enabled', 'Invalid gl.isEnabled() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if cap is not an accepted value.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.isEnabled(-1);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.isEnabled(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_buffer', 'Invalid gl.isBuffer() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isBuffer = gl.isBuffer(buffer);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            buffer = gl.createBuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isBuffer = gl.isBuffer(buffer);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isBuffer = gl.isBuffer(buffer);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteBuffer(buffer);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isBuffer = gl.isBuffer(buffer);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_framebuffer', 'Invalid gl.isFramebuffer() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('A name returned by glGenFramebuffers, but not yet bound through a call to gl.bindFramebuffer is not the name of a framebuffer object.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isFbo = gl.isFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isFbo = gl.isFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindFramebuffer (gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isFbo = gl.isFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindFramebuffer (gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isFbo = gl.isFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_program', 'Invalid gl.isProgram() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('A name created with gl.createProgram, and not yet deleted with glDeleteProgram is a name of a program object.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isProgram = gl.isProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            program = gl.createProgram();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isProgram = gl.isProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isProgram = gl.isProgram(program);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_renderbuffer', 'Invalid gl.isRenderbuffer() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('A name returned by glGenRenderbuffers, but not yet bound through a call to gl.bindRenderbuffer or gl.framebufferRenderbuffer is not the name of a renderbuffer object.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isRbo = gl.isRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            rbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isRbo = gl.isRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindRenderbuffer (gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isRbo = gl.isRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindRenderbuffer (gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isRbo = gl.isRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_shader', 'Invalid gl.isShader() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isShader = gl.isProgram(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isShader = gl.isShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteShader (shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isShader = gl.isShader(shader);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_texture', 'Invalid gl.isTexture() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isTexture = gl.isTexture(texture);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isTexture = gl.isTexture(texture);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isTexture = gl.isTexture(texture);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isTexture = gl.isTexture(texture);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_query', 'Invalid gl.isQuery() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('A name returned by glGenQueries, but not yet associated with a query object by calling gl.beginQuery, is not the name of a query object.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isQuery = gl.isQuery(query);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            query = gl.createQuery();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isQuery = gl.isQuery(query);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.beginQuery (gl.ANY_SAMPLES_PASSED, query);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isQuery = gl.isQuery(query);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.endQuery (gl.ANY_SAMPLES_PASSED);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteQuery (query);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isQuery = gl.isQuery(query);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_sampler', 'Invalid gl.isSampler() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isSampler = gl.isSampler(sampler);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            sampler = gl.createSampler();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isSampler = gl.isSampler(sampler);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindSampler(0, sampler);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isSampler = gl.isSampler(sampler);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteSampler(sampler);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isSampler = gl.isSampler(sampler);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_sync', 'Invalid gl.isSync() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            bufferedLogToConsole('A name returned by gl.fenceSync is the name of a sync object.');
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isSync = gl.isSync(sync);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            sync = gl.fenceSync (gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isSync = gl.isSync(sync);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteSync (sync);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isSync = gl.isSync(sync);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_transform_feedback', 'Invalid gl.isTransformFeedback() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isTF = gl.isTransformFeedback(tf);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            tf = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isTF = gl.isTransformFeedback(tf);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindTransformFeedback (gl.TRANSFORM_FEEDBACK, tf);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isTF = gl.isTransformFeedback(tf);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindTransformFeedback (gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteTransformFeedback (tf);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isTF = gl.isTransformFeedback(tf);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeStateApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('is_vertex_array', 'Invalid gl.isVertexArray() usage', gl, function() {
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isVao = gl.isVertexArray(vao);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            vao = gl.createVertexArray();
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isVao = gl.isVertexArray(vao);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindVertexArray (vao);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isVao = gl.isVertexArray(vao);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.bindVertexArray (null);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            gl.deleteVertexArray (vao);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            isVao = gl.isVertexArray(vao);
deqp/functional/gles3/es3fNegativeStateApiTests.js:            this.expectError (gl.NO_ERROR);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  var vertexObject = gl.createBuffer();
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.bufferData(
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:      gl.ARRAY_BUFFER,
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:      gl.STATIC_DRAW);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.enableVertexAttribArray(0);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  var vertexObject = gl.createBuffer();
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.bufferData(
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:      gl.ARRAY_BUFFER,
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:      gl.STATIC_DRAW);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.enableVertexAttribArray(1);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.activeTexture(gl.TEXTURE1);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  var tex2d = gl.createTexture();
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.bindTexture(gl.TEXTURE_2D, tex2d);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  var texCube = gl.createTexture();
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCube);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    gl.texImage2D(targets[ii], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  var tex2dLoc = gl.getUniformLocation(program, "tex2d");
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  var texCubeLoc = gl.getUniformLocation(program, "texCube");
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.uniform1i(tex2dLoc, 1);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.uniform1i(texCubeLoc, 1);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.clearColor(1,0,0,1);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/glsl/misc/glsl-2types-of-textures-on-same-unit.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/misc/shader-precision-format.html:    shouldBeTrue('gl.getShaderPrecisionFormat(' + shadertype + ', ' +
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.VERTEX_SHADER', 'gl.LOW_FLOAT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.VERTEX_SHADER', 'gl.MEDIUM_FLOAT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.VERTEX_SHADER', 'gl.HIGH_FLOAT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.VERTEX_SHADER', 'gl.LOW_INT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.VERTEX_SHADER', 'gl.MEDIUM_INT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.VERTEX_SHADER', 'gl.HIGH_INT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.FRAGMENT_SHADER', 'gl.LOW_FLOAT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.FRAGMENT_SHADER', 'gl.MEDIUM_FLOAT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.FRAGMENT_SHADER', 'gl.HIGH_FLOAT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.FRAGMENT_SHADER', 'gl.LOW_INT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.FRAGMENT_SHADER', 'gl.MEDIUM_INT');
conformance/misc/shader-precision-format.html:verifyShaderPrecisionFormat('gl.FRAGMENT_SHADER', 'gl.HIGH_INT');
conformance/misc/shader-precision-format.html:wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, 'gl.getShaderPrecisionFormat(gl.HIGH_INT, gl.VERTEX_SHADER)');
conformance/misc/shader-precision-format.html:var shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT);
conformance/misc/shader-precision-format.html:var shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT);
conformance/misc/shader-precision-format.html:shaderPrecisionFormat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT);
conformance/misc/shader-precision-format.html:var shaderPrecisionFormat2 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT);
conformance/glsl/misc/shader-uniform-packing-restrictions.html:    maxVectors: gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),
conformance/glsl/misc/shader-uniform-packing-restrictions.html:    maxVectors: gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS),
conformance/glsl/misc/glsl-vertex-branch.html:    var vertexObject = gl.createBuffer();
conformance/glsl/misc/glsl-vertex-branch.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/glsl/misc/glsl-vertex-branch.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -1,-1,0, 1,-1,0 ]), gl.STATIC_DRAW);
conformance/glsl/misc/glsl-vertex-branch.html:    gl.enableVertexAttribArray(0);
conformance/glsl/misc/glsl-vertex-branch.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/glsl/misc/glsl-vertex-branch.html:    var loc = gl.getUniformLocation(program, "redIntensity");
conformance/glsl/misc/glsl-vertex-branch.html:    gl.uniform1f(loc, 0.75);
conformance/glsl/misc/glsl-vertex-branch.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/misc/glsl-vertex-branch.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/glsl/misc/glsl-vertex-branch.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buffer);
conformance/glsl/misc/glsl-vertex-branch.html:    if (gl.getError() != gl.NO_ERROR)
deqp/functional/gles3/es3fFragmentOutputTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fFragmentOutputTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fFragmentOutputTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFragmentOutputTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fFragmentOutputTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fFragmentOutputTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFragmentOutputTests.js:        this.m_framebuffer = gl.createFramebuffer();
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fFragmentOutputTests.js:            this.m_renderbuffer = gl.createRenderbuffer();
deqp/functional/gles3/es3fFragmentOutputTests.js:            /** @type {number} */ var attachment = gl.COLOR_ATTACHMENT0 + bufNdx;
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, this.m_renderbuffer);
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, bufSpec.samples, bufSpec.format, bufSpec.width, bufSpec.height);
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, this.m_renderbuffer);
deqp/functional/gles3/es3fFragmentOutputTests.js:        /** @type {number} */ var fboStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFragmentOutputTests.js:        if (fboStatus == gl.FRAMEBUFFER_UNSUPPORTED)
deqp/functional/gles3/es3fFragmentOutputTests.js:        else if (fboStatus != gl.FRAMEBUFFER_COMPLETE)
deqp/functional/gles3/es3fFragmentOutputTests.js:        // gl.bindRenderbuffer(gl.RENDERBUFFER, null); // TODO: maybe needed?
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFragmentOutputTests.js:            drawBuffers[ndx] = gl.COLOR_ATTACHMENT0 + ndx;
deqp/functional/gles3/es3fFragmentOutputTests.js:        // Render using gl.
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.viewport(0, 0, viewportW, viewportH);
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.drawBuffers(drawBuffers);
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.disable(gl.DITHER); // Dithering causes issues with unorm formats. Those issues could be worked around in threshold, but it makes validation less accurate.
deqp/functional/gles3/es3fFragmentOutputTests.js:            /** @type {number} */ var glScalarType = isFloat ? /* gluShaderUtil.DataType.FLOAT */ gl.FLOAT :
deqp/functional/gles3/es3fFragmentOutputTests.js:                                                     isInt ? /* gluShaderUtil.DataType.INT */ gl.INT :
deqp/functional/gles3/es3fFragmentOutputTests.js:                                                     isUint ? /* gluShaderUtil.DataType.UINT */ gl.UNSIGNED_INT : /* gluShaderUtil.DataType.INVALID */ gl.NONE;
deqp/functional/gles3/es3fFragmentOutputTests.js:                /** @type {number} */ var loc = gl.getAttribLocation(this.m_program.getProgram(), name);
deqp/functional/gles3/es3fFragmentOutputTests.js:                    buffer = gl.createBuffer();
deqp/functional/gles3/es3fFragmentOutputTests.js:                    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fFragmentOutputTests.js:                    gl.enableVertexAttribArray(loc);
deqp/functional/gles3/es3fFragmentOutputTests.js:                        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(inputs[curInVec]), gl.STATIC_DRAW);
deqp/functional/gles3/es3fFragmentOutputTests.js:                        gl.vertexAttribPointer(loc, scalarSize, glScalarType, false, 0, 0); // offset = 0
deqp/functional/gles3/es3fFragmentOutputTests.js:                        gl.bufferData(gl.ARRAY_BUFFER, new Int32Array(inputs[curInVec]), gl.STATIC_DRAW);
deqp/functional/gles3/es3fFragmentOutputTests.js:                        gl.vertexAttribIPointer(loc, scalarSize, glScalarType, 0, 0); // offset = 0
deqp/functional/gles3/es3fFragmentOutputTests.js:        /** @type {number} */ var posLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_position');
deqp/functional/gles3/es3fFragmentOutputTests.js:        buffer = gl.createBuffer();
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.enableVertexAttribArray(posLoc);
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.vertexAttribPointer(posLoc, 4, gl.FLOAT, false, 0, 0); // offset = 0
deqp/functional/gles3/es3fFragmentOutputTests.js:        /** @type {WebGLBuffer} */ var indexObject = gl.createBuffer();
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
deqp/functional/gles3/es3fFragmentOutputTests.js:        gl.drawElements(gl.TRIANGLES, numIndices, gl.UNSIGNED_SHORT, 0); // offset = 0
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.readBuffer(gl.COLOR_ATTACHMENT0 + attachNdx);
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.readPixels(0, 0, attachmentW, attachmentH, transferFmt.format, transferFmt.dataType, rendered.getDataPtr());
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGBA32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGBA16F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.R11F_G11F_B10F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RG32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RG16F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.R32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.R16F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGBA8,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.SRGB8_ALPHA8,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGB10_A2,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGBA4,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGB5_A1,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGB8,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGB565,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RG8,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.R8
deqp/functional/gles3/es3fFragmentOutputTests.js:                                       gl.RGBA32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                                       gl.RGBA16F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                                       gl.R11F_G11F_B10F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                                       gl.RG32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                                       gl.RG16F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                                       gl.R32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:                                       gl.R16F
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGBA32I,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGBA16I,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RGBA8I,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RG32I,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RG16I,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.RG8I,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.R32I,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.R16I,
deqp/functional/gles3/es3fFragmentOutputTests.js:                            gl.R8I
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.RGBA32UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.RGBA16UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.RGBA8UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.RGB10_A2UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.RG32UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.RG16UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.RG8UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.R32UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.R16UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:                           gl.R8UI
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA16F,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R11F_G11F_B10F,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG16F,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R32F,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R16F
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA8,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.SRGB8_ALPHA8,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGB10_A2,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA4,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGB5_A1,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGB8,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGB565,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG8,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R8
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA32I,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA16I,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA8I,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG32I,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG16I,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG8I,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R32I,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R16I,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R8I
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA32UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA16UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGBA8UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RGB10_A2UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG32UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG16UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.RG8UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R32UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R16UI,
deqp/functional/gles3/es3fFragmentOutputTests.js:            gl.R8UI
deqp/functional/gles3/es3fFragmentOutputTests.js:        if (gl.getExtension('EXT_color_buffer_float')) {
deqp/functional/gles3/es3fFragmentOutputTests.js:        if (gl.getExtension('EXT_color_buffer_float')) {
deqp/functional/gles3/es3fFragmentOutputTests.js:        /** @type {boolean} */ var colorBufferFloatSupported = (gl.getExtension('EXT_color_buffer_float') != null);
conformance/glsl/misc/re-compile-re-link.html:var vShader = gl.createShader(gl.VERTEX_SHADER);
conformance/glsl/misc/re-compile-re-link.html:var fShader = gl.createShader(gl.FRAGMENT_SHADER);
conformance/glsl/misc/re-compile-re-link.html:var vShaderB = gl.createShader(gl.VERTEX_SHADER);
conformance/glsl/misc/re-compile-re-link.html:var fShaderB = gl.createShader(gl.FRAGMENT_SHADER);
conformance/glsl/misc/re-compile-re-link.html:var program = gl.createProgram();
conformance/glsl/misc/re-compile-re-link.html:var programB = gl.createProgram();
conformance/glsl/misc/re-compile-re-link.html:gl.attachShader(program, vShader);
conformance/glsl/misc/re-compile-re-link.html:gl.attachShader(program, fShader);
conformance/glsl/misc/re-compile-re-link.html:gl.attachShader(programB, vShaderB);
conformance/glsl/misc/re-compile-re-link.html:gl.attachShader(programB, fShaderB);
conformance/glsl/misc/re-compile-re-link.html:  shouldBeTrue("success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)");
conformance/glsl/misc/re-compile-re-link.html:    debug("error: " + gl.getShaderInfoLog());
conformance/glsl/misc/re-compile-re-link.html:  shouldBeTrue("success = gl.getProgramParameter(prg, gl.LINK_STATUS)");
conformance/glsl/misc/re-compile-re-link.html:    debug("error: " + gl.getProgramInfoLog(prg));
conformance/glsl/misc/re-compile-re-link.html:  gl.shaderSource(vShader, vsSource);
conformance/glsl/misc/re-compile-re-link.html:  gl.compileShader(vShader);
conformance/glsl/misc/re-compile-re-link.html:  gl.shaderSource(fShader, fs1Source);
conformance/glsl/misc/re-compile-re-link.html:  gl.compileShader(fShader);
conformance/glsl/misc/re-compile-re-link.html:  gl.linkProgram(program);
conformance/glsl/misc/re-compile-re-link.html:  gl.useProgram(program);
conformance/glsl/misc/re-compile-re-link.html:  gl.shaderSource(vShaderB, vsSourceB);
conformance/glsl/misc/re-compile-re-link.html:  gl.compileShader(vShaderB);
conformance/glsl/misc/re-compile-re-link.html:  gl.shaderSource(fShaderB, fsSourceB);
conformance/glsl/misc/re-compile-re-link.html:  gl.compileShader(fShaderB);
conformance/glsl/misc/re-compile-re-link.html:  gl.linkProgram(programB);
conformance/glsl/misc/re-compile-re-link.html:  gl.useProgram(programB);
conformance/glsl/misc/re-compile-re-link.html:  gl.shaderSource(fShader, fs2Source);
conformance/glsl/misc/re-compile-re-link.html:  gl.compileShader(fShader);
conformance/glsl/misc/re-compile-re-link.html:  gl.linkProgram(program);
conformance/glsl/misc/re-compile-re-link.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
conformance/more/functions/texSubImage2DHTML.html:var defaultImgUrl = "https://get.webgl.org/conformance-resources/thunderbird-logo-64x64.png";
conformance/more/functions/texSubImage2DHTML.html:    gl.viewport(0,0,canvas.width,canvas.height);
conformance/more/functions/texSubImage2DHTML.html:    gl.clearColor(0,0,1,1);
conformance/more/functions/texSubImage2DHTML.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/more/functions/texSubImage2DHTML.html:    gl.disable(gl.DEPTH_TEST);
conformance/more/functions/texSubImage2DHTML.html:    var tex = gl.createTexture();
conformance/more/functions/texSubImage2DHTML.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/texSubImage2DHTML.html:    var texCubeMap = gl.createTexture();
conformance/more/functions/texSubImage2DHTML.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCubeMap);
conformance/more/functions/texSubImage2DHTML.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/texSubImage2DHTML.html:    gl.deleteTexture(tex);
conformance/more/functions/texSubImage2DHTML.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance/more/functions/texSubImage2DHTML.html:    gl.deleteTexture(texCubeMap);
conformance/more/functions/texSubImage2DHTML.html:    gl.enable(gl.BLEND);
conformance/more/functions/texSubImage2DHTML.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
conformance/more/functions/texSubImage2DHTML.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, img);
conformance/more/functions/texSubImage2DHTML.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/more/functions/texSubImage2DHTML.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/more/functions/texSubImage2DHTML.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/more/functions/texSubImage2DHTML.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/more/functions/texSubImage2DHTML.html:    gl.blendFunc(gl.ONE, gl.ZERO);
conformance/more/functions/texSubImage2DHTML.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/more/functions/texSubImage2DHTML.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/more/functions/texSubImage2DHTML.html:    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
conformance/more/functions/texSubImage2DHTML.html:        gl.TEXTURE_2D,
conformance/more/functions/texSubImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/more/functions/texSubImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/more/functions/texSubImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/more/functions/texSubImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/more/functions/texSubImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/more/functions/texSubImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/more/functions/texSubImage2DHTML.html:                gl.texImage2D(t, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/more/functions/texSubImage2DHTML.html:                gl.texSubImage2D(t, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/more/functions/texSubImage2DHTML.html:                gl.texImage2D(t, 1, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/more/functions/texSubImage2DHTML.html:                gl.texSubImage2D(t, 1, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/more/functions/texSubImage2DHTML.html:      function(){gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);});
conformance/more/functions/texSubImage2DHTML.html:      function(){gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_BYTE, img);});
conformance/more/functions/texSubImage2DHTML.html:      function(){gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);});
conformance/more/functions/texSubImage2DHTML.html:      function(){gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_BYTE, c);});
conformance/glsl/misc/shader-precision-format-obeyed.html:var precision = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
conformance/glsl/misc/shader-with-too-many-uniforms.html:var maxFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
conformance/glsl/misc/shader-with-too-many-uniforms.html:var maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
conformance/more/functions/bindBuffer.html:  var b = gl.createBuffer();
conformance/more/functions/bindBuffer.html:  assert(gl.NO_ERROR == checkError(gl, "genBuffers"));
conformance/more/functions/bindBuffer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, b);
conformance/more/functions/bindBuffer.html:  assert(gl.NO_ERROR == checkError(gl, "bindBuffer"));
conformance/more/functions/bindBuffer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/bindBuffer.html:  assert(gl.NO_ERROR == checkError(gl, "bindBuffer 0"));
conformance/more/functions/bindBuffer.html:  gl.deleteBuffer(b);
conformance/more/functions/bindBuffer.html:  assert(gl.NO_ERROR == checkError(gl, "deleteBuffers"));
conformance/more/functions/bindBuffer.html:  var b = gl.createBuffer();
conformance/more/functions/bindBuffer.html:  assert(gl.NO_ERROR == checkError(gl, "genBuffers"));
conformance/more/functions/bindBuffer.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, b);
conformance/more/functions/bindBuffer.html:  assert(gl.NO_ERROR == checkError(gl, "bindBuffer"));
conformance/more/functions/bindBuffer.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance/more/functions/bindBuffer.html:  assert(gl.NO_ERROR == checkError(gl, "bindBuffer 0"));
conformance/more/functions/bindBuffer.html:  gl.deleteBuffer(b);
conformance/more/functions/bindBuffer.html:  assert(gl.NO_ERROR == checkError(gl, "deleteBuffers"));
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:  var red_loc = gl.getUniformLocation(program, "u_colors[0].color[" + ii  + "]");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:  var green_loc = gl.getUniformLocation(program, "u_colors[0].color[" + (1 - ii) + "]");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:  gl.uniform4fv(red_loc, [1, 0, 0, 1]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:  gl.uniform4fv(green_loc, [0, 1, 0, 1]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:var green_loc = gl.getUniformLocation(program, "u_colors[0].color[0]");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:gl.uniform4fv(green_loc, [0, 1, 0, 1]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:  uniforms.push(gl.getActiveUniform(program, ii).name);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:var loc00 = gl.getUniformLocation(program, "u_colors[0].color1");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:var loc01 = gl.getUniformLocation(program, "u_colors[0].color2");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:var loc10 = gl.getUniformLocation(program, "u_colors[1].color1");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:var loc11 = gl.getUniformLocation(program, "u_colors[1].color2");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:gl.uniform4fv(loc00, [1, 0, 0, 0]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:gl.uniform4fv(loc01, [0, 1, 0, 0]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:gl.uniform4fv(loc10, [0, 0, 0, 0, 0, 0, 1, 0]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:gl.uniform4fv(loc11, [0, 0, 0, 0, 0, 0, 0, 1]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:var loc101 = gl.getUniformLocation(program, "u_colors[1].color1[1]");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:var loc111 = gl.getUniformLocation(program, "u_colors[1].color2[1]");
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:gl.uniform4fv(loc101, [0, 0, 0, 0]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:gl.uniform4fv(loc111, [0, 0, 0, 0]);
conformance/glsl/misc/shader-with-array-of-structs-containing-arrays.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
js/tests/tex-image-and-sub-image-2d-with-image-data.js:          case gl.RED:
js/tests/tex-image-and-sub-image-2d-with-image-data.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.disable(gl.BLEND);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:              ', bindingTarget=' + (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP') +
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-image-data.js:            loc = gl.getUniformLocation(program, "face");
js/tests/tex-image-and-sub-image-2d-with-image-data.js:              case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-image-data.js:              case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-image-data.js:              case gl.RGB_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-image-data.js:              case gl.RGBA_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        var targets = [gl.TEXTURE_2D];
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-image-data.js:            targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/tex-image-and-sub-image-2d-with-image-data.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, sourceSubRectangle[0]);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, sourceSubRectangle[1]);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                    gl.texSubImage2D(targets[tt], 0, 0, 0,
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat], imageData.width, imageData.height, 0,
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                    gl.texSubImage2D(targets[tt], 0, 0, 0, gl[pixelFormat], gl[pixelType], imageData);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat], gl[pixelFormat], gl[pixelType], imageData);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        var width = gl.canvas.width;
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        var height = gl.canvas.height;
js/tests/tex-image-and-sub-image-2d-with-image-data.js:            if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-image-data.js:                gl.uniform1i(loc, targets[tt]);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        runTestOnBindingTarget(gl.TEXTURE_2D, program);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        runTestOnBindingTarget(gl.TEXTURE_CUBE_MAP, program);
js/tests/tex-image-and-sub-image-2d-with-image-data.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
conformance/glsl/misc/large-loop-compile.html:  gl.clearColor(0.0, 1.0, 0.0, 1.0);
conformance/glsl/misc/large-loop-compile.html:  gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fTextureWrapTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fTextureWrapTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fTextureWrapTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fTextureWrapTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fTextureWrapTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fTextureWrapTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fTextureWrapTests.js:        /** @type {number} */ this.m_format = gl.NONE;
deqp/functional/gles3/es3fTextureWrapTests.js:        /** @type {number} */ this.m_dataType = gl.NONE;
deqp/functional/gles3/es3fTextureWrapTests.js:        texWrapCase.m_format = gl.RGBA;
deqp/functional/gles3/es3fTextureWrapTests.js:        texWrapCase.m_dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fTextureWrapTests.js:            assertMsgOptions(this.m_format == gl.NONE && this.m_dataType == gl.NONE, 'init/compressedFormat', false, true);
deqp/functional/gles3/es3fTextureWrapTests.js:        /** @type {glsTextureTestUtil.RandomViewport} */ var viewport = new glsTextureTestUtil.RandomViewport(gl.canvas, Viewport.WIDTH, Viewport.HEIGHT, deString.deStringHash(this.name) + this.m_caseNdx);
deqp/functional/gles3/es3fTextureWrapTests.js:        gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fTextureWrapTests.js:        gl.bindTexture(gl.TEXTURE_2D, this.m_texture.getGLTexture());
deqp/functional/gles3/es3fTextureWrapTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.m_wrapS);
deqp/functional/gles3/es3fTextureWrapTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.m_wrapT);
deqp/functional/gles3/es3fTextureWrapTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.m_minFilter);
deqp/functional/gles3/es3fTextureWrapTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.m_magFilter);
deqp/functional/gles3/es3fTextureWrapTests.js:        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureWrapTests.js:        gl.pixelStorei(gl.PACK_ALIGNMENT, param);
deqp/functional/gles3/es3fTextureWrapTests.js:        /** @type {boolean} */ var isNearestOnly = this.m_minFilter == gl.NEAREST && this.m_magFilter == gl.NEAREST;
deqp/functional/gles3/es3fTextureWrapTests.js:            new WrapMode('clamp', gl.CLAMP_TO_EDGE),
deqp/functional/gles3/es3fTextureWrapTests.js:            new WrapMode('repeat', gl.REPEAT),
deqp/functional/gles3/es3fTextureWrapTests.js:            new WrapMode('mirror', gl.MIRRORED_REPEAT)
deqp/functional/gles3/es3fTextureWrapTests.js:            new FilteringMode('nearest', gl.NEAREST),
deqp/functional/gles3/es3fTextureWrapTests.js:            new FilteringMode('linear', gl.LINEAR)
deqp/functional/gles3/es3fTextureWrapTests.js:                            gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/conformance/getContext.html:  assertEquals("ctx.canvas === canvas", gl.canvas, canvas);
conformance/renderbuffers/feedback-loop.html:    var texture = gl.createTexture();
conformance/renderbuffers/feedback-loop.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/renderbuffers/feedback-loop.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/renderbuffers/feedback-loop.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/renderbuffers/feedback-loop.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/renderbuffers/feedback-loop.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/feedback-loop.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/feedback-loop.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after creating texture");
conformance/renderbuffers/feedback-loop.html:    var framebuffer = gl.createFramebuffer();
conformance/renderbuffers/feedback-loop.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/renderbuffers/feedback-loop.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/renderbuffers/feedback-loop.html:    assertMsg(gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE,
conformance/renderbuffers/feedback-loop.html:    gl.uniform1i(gl.getUniformLocation(program, "u_texture"), 0);
conformance/renderbuffers/feedback-loop.html:    gl.disable(gl.BLEND);
conformance/renderbuffers/feedback-loop.html:    gl.disable(gl.DEPTH_TEST);
conformance/renderbuffers/feedback-loop.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after initWebGL");
conformance/renderbuffers/feedback-loop.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/renderbuffers/feedback-loop.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "after draw with invalid feedback loop");
conformance/renderbuffers/feedback-loop.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/renderbuffers/feedback-loop.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
conformance/renderbuffers/feedback-loop.html:    var texture2 = gl.createTexture();
conformance/renderbuffers/feedback-loop.html:    gl.bindTexture(gl.TEXTURE_2D, texture2);
conformance/renderbuffers/feedback-loop.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/renderbuffers/feedback-loop.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/renderbuffers/feedback-loop.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/renderbuffers/feedback-loop.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/feedback-loop.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/feedback-loop.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/renderbuffers/feedback-loop.html:    gl.activeTexture(gl.TEXTURE1);
conformance/renderbuffers/feedback-loop.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/renderbuffers/feedback-loop.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after draw where framebuffer texture is bound to inactive texture unit");
conformance/renderbuffers/framebuffer-state-restoration.html:  var colorLoc = gl.getUniformLocation(program, "u_color");
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.enable(gl.DEPTH_TEST);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.depthFunc(gl.LESS);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.uniform4fv(colorLoc, [0, 1, 0, 1]);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.uniform4fv(colorLoc, [1, 0, 0, 1]);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.uniform4fv(colorLoc, [0, 1, 0, 1]);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.uniform4fv(colorLoc, [1, 0, 0, 1]);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/renderbuffers/framebuffer-state-restoration.html:  var fbo = gl.createFramebuffer();
conformance/renderbuffers/framebuffer-state-restoration.html:  var tex = gl.createTexture();
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 50, 50, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/renderbuffers/framebuffer-state-restoration.html:  if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-state-restoration.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/renderbuffers/framebuffer-state-restoration.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-state-restoration.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/renderbuffers/framebuffer-state-restoration.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
conformance/more/functions/texImage2D.html:  var tex = gl.createTexture();
conformance/more/functions/texImage2D.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/texImage2D.html:  var texCubeMap = gl.createTexture();
conformance/more/functions/texImage2D.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCubeMap);
conformance/more/functions/texImage2D.html:  gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/texImage2D.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance/more/functions/texImage2D.html:  gl.deleteTexture(tex);
conformance/more/functions/texImage2D.html:  gl.deleteTexture(texCubeMap);
conformance/more/functions/texImage2D.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,1,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texImage2D.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2,1,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0]));
conformance/more/functions/texImage2D.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,2,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0]));
conformance/more/functions/texImage2D.html:    gl.TEXTURE_2D,
conformance/more/functions/texImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/more/functions/texImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/more/functions/texImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/more/functions/texImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/more/functions/texImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/more/functions/texImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/more/functions/texImage2D.html:    assertOk(function(){gl.texImage2D(t, 0, gl.RGBA, 1,1,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));});
conformance/more/functions/texImage2D.html:  assertOk(function(){gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,1,0,gl.RGBA,gl.UNSIGNED_BYTE, null);});
conformance/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance/renderbuffers/framebuffer-test.html:     gl.FRAMEBUFFER,
conformance/renderbuffers/framebuffer-test.html:     gl.COLOR_ATTACHMENT0,
conformance/renderbuffers/framebuffer-test.html:     gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/renderbuffers/framebuffer-test.html:  assertMsg(gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE,
conformance/renderbuffers/framebuffer-test.html:  var tex = gl.createTexture();
conformance/renderbuffers/framebuffer-test.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/renderbuffers/framebuffer-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/renderbuffers/framebuffer-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/renderbuffers/framebuffer-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/framebuffer-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/framebuffer-test.html:  gl.texImage2D(gl.TEXTURE_2D,
conformance/renderbuffers/framebuffer-test.html:                gl.RGBA,           // internalFormat
conformance/renderbuffers/framebuffer-test.html:                gl.RGBA,           // format
conformance/renderbuffers/framebuffer-test.html:                gl.UNSIGNED_BYTE,  // type
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(
conformance/renderbuffers/framebuffer-test.html:      gl.FRAMEBUFFER,
conformance/renderbuffers/framebuffer-test.html:      gl.COLOR_ATTACHMENT0,
conformance/renderbuffers/framebuffer-test.html:      gl.TEXTURE_2D,
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-test.html:      gl.FRAMEBUFFER,
conformance/renderbuffers/framebuffer-test.html:      gl.COLOR_ATTACHMENT0,
conformance/renderbuffers/framebuffer-test.html:      gl.RENDERBUFFER,
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/renderbuffers/framebuffer-test.html:  var rb = gl.createRenderbuffer();
conformance/renderbuffers/framebuffer-test.html:  gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
conformance/renderbuffers/framebuffer-test.html:  gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, canvas.width, canvas.height);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-test.html:      gl.FRAMEBUFFER,
conformance/renderbuffers/framebuffer-test.html:      gl.COLOR_ATTACHMENT0,
conformance/renderbuffers/framebuffer-test.html:      gl.RENDERBUFFER,
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/renderbuffers/framebuffer-test.html:  var fbtex = gl.createTexture();
conformance/renderbuffers/framebuffer-test.html:  gl.bindTexture(gl.TEXTURE_2D, fbtex);
conformance/renderbuffers/framebuffer-test.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/renderbuffers/framebuffer-test.html:  var fb = gl.createFramebuffer();
conformance/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(
conformance/renderbuffers/framebuffer-test.html:     gl.COLOR_ATTACHMENT0,
conformance/renderbuffers/framebuffer-test.html:     gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  assertMsg(gl.checkFramebufferStatus(target) == 0,
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(target, gl.createFramebuffer());
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  assertMsg(fb == gl.getParameter(gl.FRAMEBUFFER_BINDING),
conformance/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(target, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(target, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, 0);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(target, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, fbtex, 0);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, rb);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER,
conformance/renderbuffers/framebuffer-test.html:                                       gl.COLOR_ATTACHMENT0,
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, 0);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbtex, 1);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/renderbuffers/framebuffer-test.html:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/renderbuffers/framebuffer-test.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/renderbuffers/framebuffer-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/rendering/gl-scissor-fbo-test.html:  var tex = gl.createTexture();
conformance/rendering/gl-scissor-fbo-test.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/rendering/gl-scissor-fbo-test.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/rendering/gl-scissor-fbo-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/rendering/gl-scissor-fbo-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/rendering/gl-scissor-fbo-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/rendering/gl-scissor-fbo-test.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/rendering/gl-scissor-fbo-test.html:  var fb = gl.createFramebuffer();
conformance/rendering/gl-scissor-fbo-test.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/rendering/gl-scissor-fbo-test.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/rendering/gl-scissor-fbo-test.html:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/rendering/gl-scissor-fbo-test.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/rendering/gl-scissor-fbo-test.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/rendering/gl-scissor-fbo-test.html:      gl.clearColor(0, 1, 0, 1);
conformance/rendering/gl-scissor-fbo-test.html:      gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-scissor-fbo-test.html:    gl.disable(gl.SCISSOR_TEST);
conformance/rendering/gl-scissor-fbo-test.html:    gl.clearColor(1, 0, 0, 1);
conformance/rendering/gl-scissor-fbo-test.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/rendering/gl-scissor-fbo-test.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-scissor-fbo-test.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb8x8);
conformance/rendering/gl-scissor-fbo-test.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-scissor-fbo-test.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb32x32);
conformance/rendering/gl-scissor-fbo-test.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-scissor-fbo-test.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb32x32);
conformance/rendering/gl-scissor-fbo-test.html:    gl.enable(gl.SCISSOR_TEST);
conformance/rendering/gl-scissor-fbo-test.html:    gl.scissor(scissorX, scissorY, scissorWidth, scissorHeight);
conformance/rendering/gl-scissor-fbo-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/more/functions/texSubImage2DBadArgs.html:    var tex = gl.createTexture();
conformance/more/functions/texSubImage2DBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/texSubImage2DBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/texSubImage2DBadArgs.html:    gl.deleteTexture(tex);
conformance/more/functions/texSubImage2DBadArgs.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2,2,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "not enough data", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,0, 0, 2,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "not enough data", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,0, 0, 1,2,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_ENUM, "bad target", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.FLOAT, 0, 0,0, 1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "width out of range", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,0, 0, 3,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "height out of range", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,0, 0, 1,3,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "dimension out of range", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D,0, 1,1, 2,1, gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "dimension out of range", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D,0, 1,1, 1,2, gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,0, 0, 0,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,0, 0, -1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,0, 0, 1,-1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "negative x", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,-1,1,1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "negative y", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0,1,-1,1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLErrorIn(gl, [gl.INVALID_OPERATION, gl.INVALID_ENUM], "bad format", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, 1,1,gl.FLOAT,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLErrorIn(gl, [gl.INVALID_OPERATION, gl.INVALID_ENUM], "bad type", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, 1,1,gl.RGBA,gl.TEXTURE_2D, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "not enough data", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, 1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "format does not match internal format", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, 1,1,gl.RGB,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0]));
conformance/more/functions/texSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "type does not match original", function(){
conformance/more/functions/texSubImage2DBadArgs.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, 1,1,gl.RGBA,gl.UNSIGNED_SHORT_4_4_4_4, new Uint16Array([0]));
conformance/rendering/gl-scissor-canvas-dimensions.html:  gl.scissor(0, 0, 1, 1);
conformance/rendering/gl-scissor-canvas-dimensions.html:  gl.clearColor(0, 1, 0, 1);
conformance/rendering/gl-scissor-canvas-dimensions.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-scissor-canvas-dimensions.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/rendering/gl-scissor-canvas-dimensions.html:  gl.viewport(0, 0, 32, 32);
conformance/rendering/gl-scissor-canvas-dimensions.html:  gl.enable(gl.SCISSOR_TEST);
conformance/rendering/gl-scissor-canvas-dimensions.html:  gl.clearColor(0, 1, 0, 1);
conformance/rendering/gl-scissor-canvas-dimensions.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-scissor-canvas-dimensions.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/renderbuffers/framebuffer-object-attachment.html:    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance/renderbuffers/framebuffer-object-attachment.html:    var statusAllowed = ((allowedStatuses & ALLOW_COMPLETE) && (status == gl.FRAMEBUFFER_COMPLETE)) ||
conformance/renderbuffers/framebuffer-object-attachment.html:                        ((allowedStatuses & ALLOW_UNSUPPORTED) && (status == gl.FRAMEBUFFER_UNSUPPORTED)) ||
conformance/renderbuffers/framebuffer-object-attachment.html:                        ((allowedStatuses & ALLOW_INCOMPLETE_ATTACHMENT) && (status == gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT));
conformance/renderbuffers/framebuffer-object-attachment.html:    var msg = "gl.checkFramebufferStatus(gl.FRAMEBUFFER) returned " + status;
conformance/renderbuffers/framebuffer-object-attachment.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)
conformance/renderbuffers/framebuffer-object-attachment.html:    var haveDepthBuffer = attachment0 == gl.DEPTH_ATTACHMENT ||
conformance/renderbuffers/framebuffer-object-attachment.html:                          attachment0 == gl.DEPTH_STENCIL_ATTACHMENT ||
conformance/renderbuffers/framebuffer-object-attachment.html:                          attachment1 == gl.DEPTH_ATTACHMENT ||
conformance/renderbuffers/framebuffer-object-attachment.html:                          attachment1 == gl.DEPTH_STENCIL_ATTACHMENT;
conformance/renderbuffers/framebuffer-object-attachment.html:    var haveStencilBuffer = attachment0 == gl.STENCIL_ATTACHMENT ||
conformance/renderbuffers/framebuffer-object-attachment.html:                            attachment0 == gl.DEPTH_STENCIL_ATTACHMENT ||
conformance/renderbuffers/framebuffer-object-attachment.html:                            attachment1 == gl.STENCIL_ATTACHMENT ||
conformance/renderbuffers/framebuffer-object-attachment.html:                            attachment1 == gl.DEPTH_STENCIL_ATTACHMENT;
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeTrue("gl.getParameter(gl.RED_BITS) + gl.getParameter(gl.GREEN_BITS) + gl.getParameter(gl.BLUE_BITS) + gl.getParameter(gl.ALPHA_BITS) >= 16");
conformance/renderbuffers/framebuffer-object-attachment.html:      shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) >= 16");
conformance/renderbuffers/framebuffer-object-attachment.html:      shouldBeTrue("gl.getParameter(gl.DEPTH_BITS) == 0");
conformance/renderbuffers/framebuffer-object-attachment.html:      shouldBeTrue("gl.getParameter(gl.STENCIL_BITS) >= 8");
conformance/renderbuffers/framebuffer-object-attachment.html:      shouldBeTrue("gl.getParameter(gl.STENCIL_BITS) == 0");
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, buffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(width * height * 4));
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment0, gl.RENDERBUFFER, buffer0);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment1, gl.RENDERBUFFER, buffer1);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, internalformat, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    testAttachment(gl.COLOR_ATTACHMENT0, colorBuffer, allowedStatuses);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("depthStencilBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthStencilBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBe("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_WIDTH)", "width");
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBe("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_HEIGHT)", "height");
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBe("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_INTERNAL_FORMAT)", "gl.DEPTH_STENCIL");
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBe("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_RED_SIZE)", "0");
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBe("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_GREEN_SIZE)", "0");
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBe("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_BLUE_SIZE)", "0");
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBe("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_ALPHA_SIZE)", "0");
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBeTrue("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_DEPTH_SIZE) > 0");
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBeTrue("gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_STENCIL_SIZE) > 0");
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    testAttachment(gl.DEPTH_STENCIL_ATTACHMENT, depthStencilBuffer, allowedStatuses);
conformance/renderbuffers/framebuffer-object-attachment.html:        {   firstFormat: gl.DEPTH_COMPONENT16,
conformance/renderbuffers/framebuffer-object-attachment.html:            firstAttach: gl.DEPTH_ATTACHMENT,
conformance/renderbuffers/framebuffer-object-attachment.html:            secondFormat: gl.DEPTH_STENCIL,
conformance/renderbuffers/framebuffer-object-attachment.html:            secondAttach: gl.DEPTH_STENCIL_ATTACHMENT
conformance/renderbuffers/framebuffer-object-attachment.html:        {   firstFormat: gl.DEPTH_STENCIL,
conformance/renderbuffers/framebuffer-object-attachment.html:            firstAttach: gl.DEPTH_STENCIL_ATTACHMENT,
conformance/renderbuffers/framebuffer-object-attachment.html:            secondFormat: gl.DEPTH_COMPONENT16,
conformance/renderbuffers/framebuffer-object-attachment.html:            secondAttach: gl.DEPTH_ATTACHMENT
conformance/renderbuffers/framebuffer-object-attachment.html:            var fbo = gl.createFramebuffer();
conformance/renderbuffers/framebuffer-object-attachment.html:            var tex = gl.createTexture();
conformance/renderbuffers/framebuffer-object-attachment.html:            var firstRb = gl.createRenderbuffer();
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.bindRenderbuffer(gl.RENDERBUFFER, firstRb);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.renderbufferStorage(gl.RENDERBUFFER, test.firstFormat, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, test.firstAttach, gl.RENDERBUFFER, firstRb);
conformance/renderbuffers/framebuffer-object-attachment.html:            shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.enable(gl.DEPTH_TEST);
conformance/renderbuffers/framebuffer-object-attachment.html:            var secondRb = gl.createRenderbuffer();
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.bindRenderbuffer(gl.RENDERBUFFER, secondRb);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.renderbufferStorage(gl.RENDERBUFFER, test.secondFormat, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, test.secondAttach, gl.RENDERBUFFER, secondRb);
conformance/renderbuffers/framebuffer-object-attachment.html:              gl.deleteRenderbuffer(secondRb);
conformance/renderbuffers/framebuffer-object-attachment.html:              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, test.secondAttach, gl.RENDERBUFFER, null);
conformance/renderbuffers/framebuffer-object-attachment.html:            shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/renderbuffers/framebuffer-object-attachment.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.clear(gl.DEPTH_BUFFER_BIT);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.disable(gl.DEPTH_TEST);
conformance/renderbuffers/framebuffer-object-attachment.html:              gl.deleteRenderbuffer(secondRb);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.deleteRenderbuffer(secondRb);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.deleteFramebuffer(fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    var fbo = gl.createFramebuffer();
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    var texture = gl.createTexture();
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/renderbuffers/framebuffer-object-attachment.html:    var renderbuffer = gl.createRenderbuffer();
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkBufferBits(gl.DEPTH_STENCIL_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.deleteRenderbuffer(renderbuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.deleteTexture(texture);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.deleteFramebuffer(fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBeNonNull("depthBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBeNonNull("stencilBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, stencilBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBeNonNull("depthStencilBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, depthStencilBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.DEPTH_ATTACHMENT, depthBuffer, allowedStatusForGoodCase);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.STENCIL_ATTACHMENT, depthBuffer, ALLOW_INCOMPLETE_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.DEPTH_STENCIL_ATTACHMENT, depthBuffer, ALLOW_INCOMPLETE_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.STENCIL_ATTACHMENT, stencilBuffer, allowedStatusForImplDependentCase);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.DEPTH_ATTACHMENT, stencilBuffer, ALLOW_INCOMPLETE_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.DEPTH_STENCIL_ATTACHMENT, stencilBuffer, ALLOW_INCOMPLETE_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.DEPTH_STENCIL_ATTACHMENT, depthStencilBuffer, allowedStatusForGoodCase);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.DEPTH_ATTACHMENT, depthStencilBuffer, ALLOW_INCOMPLETE_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachment(gl.STENCIL_ATTACHMENT, depthStencilBuffer, ALLOW_INCOMPLETE_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachments(gl.DEPTH_ATTACHMENT, depthBuffer, gl.STENCIL_ATTACHMENT, stencilBuffer, allowedStatusForConflictedAttachment);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachments(gl.STENCIL_ATTACHMENT, stencilBuffer, gl.DEPTH_ATTACHMENT, depthBuffer, allowedStatusForConflictedAttachment);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachments(gl.DEPTH_ATTACHMENT, depthBuffer, gl.DEPTH_STENCIL_ATTACHMENT, depthStencilBuffer, allowedStatusForConflictedAttachment);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachments(gl.DEPTH_STENCIL_ATTACHMENT, depthStencilBuffer, gl.DEPTH_ATTACHMENT, depthBuffer, allowedStatusForConflictedAttachment);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachments(gl.DEPTH_ATTACHMENT, depthBuffer, gl.DEPTH_STENCIL_ATTACHMENT, depthStencilBuffer, allowedStatusForConflictedAttachment);
conformance/renderbuffers/framebuffer-object-attachment.html:        testAttachments(gl.DEPTH_STENCIL_ATTACHMENT, depthStencilBuffer, gl.STENCIL_ATTACHMENT, stencilBuffer, allowedStatusForConflictedAttachment);
conformance/renderbuffers/framebuffer-object-attachment.html:        testColorRenderbuffer(gl.RGBA4, allowedStatusForGoodCase);
conformance/renderbuffers/framebuffer-object-attachment.html:        testColorRenderbuffer(gl.RGB5_A1, allowedStatusForGoodCase);
conformance/renderbuffers/framebuffer-object-attachment.html:        testColorRenderbuffer(gl.RGB565, allowedStatusForGoodCase);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("depthBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    return tryDepth(gl.DEPTH_COMPONENT16, gl.DEPTH_ATTACHMENT) || tryDepth(gl.DEPTH_STENCIL, gl.DEPTH_STENCIL_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:                gl.FRAMEBUFFER, depthAttachment, gl.RENDERBUFFER, null);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.FRAMEBUFFER, depthAttachment, gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.renderbufferStorage(gl.RENDERBUFFER, depthFormat, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:        return gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE;
conformance/renderbuffers/framebuffer-object-attachment.html:    var actual = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance/renderbuffers/framebuffer-object-attachment.html:    var msg = "gl.checkFramebufferStatus(gl.FRAMEBUFFER) should be " + wtu.glEnumToString(gl, expected) + " was " + wtu.glEnumToString(gl, actual);
conformance/renderbuffers/framebuffer-object-attachment.html:    if (expected != gl.FRAMEBUFFER_COMPLETE) {
conformance/renderbuffers/framebuffer-object-attachment.html:        (expected != gl.FRAMEBUFFER_COMPLETE &&
conformance/renderbuffers/framebuffer-object-attachment.html:         actual == gl.FRAMBUFFER_UNSUPPORTED)) {
conformance/renderbuffers/framebuffer-object-attachment.html:    var tex = gl.createTexture();
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("depthBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, depthAttachment, gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, depthFormat, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_COMPLETE);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, depthFormat, 32, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo2 = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo2);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 0, 0);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "drawArrays with incomplete framebuffer");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "readPixels from incomplete framebuffer");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 1, 1);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, [gl.INVALID_FRAMEBUFFER_OPERATION, gl.INVALID_OPERATION], "copyTexImage2D from incomplete framebuffer");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 1, 1, 0);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, [gl.INVALID_FRAMEBUFFER_OPERATION, gl.INVALID_OPERATION], "copyTexSubImage2D from incomplete framebuffer");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "clear with incomplete framebuffer");
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_COMPLETE);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, depthFormat, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_COMPLETE);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 0, 0);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_COMPLETE);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("depthBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, depthAttachment, gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, depthFormat, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_COMPLETE);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, depthFormat, 32, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, depthFormat, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_COMPLETE);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 32);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_COMPLETE);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    var tex = gl.createTexture();
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/renderbuffers/framebuffer-object-attachment.html:    checkFramebuffer(gl.FRAMEBUFFER_COMPLETE);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("fbo = gl.createFramebuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/framebuffer-object-attachment.html:    shouldBeNonNull("depthBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, size, size);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "After depth renderbuffer setup");
conformance/renderbuffers/framebuffer-object-attachment.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);
conformance/renderbuffers/framebuffer-object-attachment.html:        shouldBeNonNull("depthStencilBuffer = gl.createRenderbuffer()");
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, depthStencilBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.framebufferRenderbuffer(
conformance/renderbuffers/framebuffer-object-attachment.html:            gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilBuffer);
conformance/renderbuffers/framebuffer-object-attachment.html:        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, size, size);
conformance/renderbuffers/framebuffer-object-attachment.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "After depth+stencil renderbuffer setup");
conformance/renderbuffers/framebuffer-object-attachment.html:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Before ReadPixels from missing attachment");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "After ReadPixels from missing attachment");
conformance/renderbuffers/framebuffer-object-attachment.html:    var tex = gl.createTexture();
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Before CopyTexImage2D from missing attachment");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, size, size, 0);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "After CopyTexImage2D from missing attachment");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Before CopyTexSubImage2D from missing attachment");
conformance/renderbuffers/framebuffer-object-attachment.html:    gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size, size);
conformance/renderbuffers/framebuffer-object-attachment.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "After CopyTexSubImage2D from missing attachment");
conformance/more/functions/texImage2DHTMLBadArgs.html:  var tex = gl.createTexture();
conformance/more/functions/texImage2DHTMLBadArgs.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/texImage2DHTMLBadArgs.html:        function() {gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, b); });
conformance/more/functions/texImage2DHTMLBadArgs.html:        function() {gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, div); });
conformance/more/functions/texImage2DHTMLBadArgs.html:        function() {gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, 0); });
conformance/more/functions/texImage2DHTMLBadArgs.html:        function() {gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, "foo"); });
conformance/more/functions/texImage2DHTMLBadArgs.html:         function() {gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texImage2DHTMLBadArgs.html:        function() {gl.texImage2D(gl.FLOAT, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texImage2DHTMLBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/texImage2DHTMLBadArgs.html:    gl.deleteTexture(tex);
conformance/glsl/misc/attrib-location-length-limits.html:shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)', 'true');
conformance/glsl/misc/attrib-location-length-limits.html:gl.bindAttribLocation(program, 0, attrib256Name);
conformance/glsl/misc/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance/glsl/misc/attrib-location-length-limits.html:var attribLoc = gl.getAttribLocation(program, attrib256Name);
conformance/glsl/misc/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance/glsl/misc/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.NONE);
conformance/glsl/misc/attrib-location-length-limits.html:program = gl.createProgram();
conformance/glsl/misc/attrib-location-length-limits.html:gl.bindAttribLocation(program, 0, attrib257Name);
conformance/glsl/misc/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance/glsl/misc/attrib-location-length-limits.html:shouldBe('gl.getAttribLocation(program, attrib257Name)', '-1');
conformance/glsl/misc/attrib-location-length-limits.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    var tex = gl.createTexture();
conformance/more/functions/copyTexSubImage2DBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    gl.deleteTexture(tex);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0, 16,16, 0);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "width > dst tex width", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0, 17,1);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "height > dst tex height", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0, 1,17);
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 16,0, 1,1);
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,16, 1,1);
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, -1,0, 1,1);
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,-1, 1,1);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "width < 0", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0, -1,1);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "height < 0", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0, 1,-1);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "xoffset < 0", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, -1,0, 0,0, 16,16);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "yoffset < 0", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,-1, 0,0, 16,16);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "dimension out of range", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 4,0, 0,0, 16,16);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "dimension out of range", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,4, 0,0, 16,16);
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, -1,0, 16,16);
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,-1, 16,16);
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0, 16,16);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_ENUM, "bad target", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.FLOAT, 0, 0,0, 0,0, 16,16);
conformance/more/functions/copyTexSubImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "", function(){
conformance/more/functions/copyTexSubImage2DBadArgs.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, -1, 0,0, 0,0, 16,16);
conformance/more/functions/readPixels.html:  assertOk(function(){gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);});
conformance/more/functions/readPixels.html:  assertOk(function(){gl.readPixels(0,0,16,16,gl.RGBA, gl.UNSIGNED_BYTE, id);});
conformance/more/functions/readPixels.html:  assertOk(function(){gl.readPixels(15,15,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);});
conformance/more/functions/readPixels.html:  gl.clearColor(1, 0, 1, 0);
conformance/more/functions/readPixels.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/more/functions/readPixels.html:  gl.readPixels(1,2,1,1,gl.RGBA, gl.UNSIGNED_BYTE, id);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-canvas.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-canvas.js:        gl.clearDepth(1);
conformance/glsl/misc/shader-with-short-circuiting-operators.html:    gl.clearColor(0.0, 0.0, 1.0, 1.0);
conformance/glsl/misc/shader-with-short-circuiting-operators.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance/glsl/misc/shader-with-short-circuiting-operators.html:        gl.deleteProgram(program);
conformance/glsl/misc/shader-with-short-circuiting-operators.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no GL errors");
conformance/more/functions/drawElements.html:  var v = gl.getAttribLocation(sh, 'Vertex');
conformance/more/functions/drawElements.html:  var n = gl.getAttribLocation(sh, 'Normal');
conformance/more/functions/drawElements.html:  var t = gl.getAttribLocation(sh, 'Tex');
conformance/more/functions/drawElements.html:  assert(0 == gl.getError());
conformance/more/functions/drawElements.html:  gl.disableVertexAttribArray(v);
conformance/more/functions/drawElements.html:  gl.disableVertexAttribArray(n);
conformance/more/functions/drawElements.html:  gl.disableVertexAttribArray(t);
conformance/more/functions/drawElements.html:  assert(gl.NO_ERROR == checkError(gl, "vbo.draw"));
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 5, gl.UNSIGNED_SHORT, 1*2);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0*2);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 0, gl.UNSIGNED_SHORT, 2*1);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 1, gl.UNSIGNED_SHORT, 5*2);});
conformance/more/functions/drawElements.html:  assert(gl.NO_ERROR == checkError(gl, "vbo.destroy"));
conformance/more/functions/drawElements.html:  assert(gl.NO_ERROR == checkError(gl, "vbo.draw"));
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 5, gl.UNSIGNED_SHORT, 1*2);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 0, gl.UNSIGNED_SHORT, 2*2);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0*2);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 1, gl.UNSIGNED_SHORT, 5*2);});
conformance/more/functions/drawElements.html:  assertGLError(gl, gl.INVALID_OPERATION, "count + offset out of range",
conformance/more/functions/drawElements.html:      function(){gl.drawElements(gl.TRIANGLES, 1, gl.UNSIGNED_SHORT, 6*2);});
conformance/more/functions/drawElements.html:  assertGLError(gl, gl.INVALID_OPERATION, "count + offset out of range 2",
conformance/more/functions/drawElements.html:      function(){gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 1*2);});
conformance/more/functions/drawElements.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/drawElements.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo.vbos[1]);
conformance/more/functions/drawElements.html:  gl.vertexAttribPointer(n, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 5, gl.UNSIGNED_SHORT, 1*2);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 0, gl.UNSIGNED_SHORT, 2*2);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0*2);});
conformance/more/functions/drawElements.html:  assertOk(function(){gl.drawElements(gl.TRIANGLES, 1, gl.UNSIGNED_SHORT, 5*2);});
conformance/more/functions/drawElements.html:  assertGLError(gl, gl.INVALID_OPERATION, "count + offset out of range 3",
conformance/more/functions/drawElements.html:      function(){gl.drawElements(gl.TRIANGLES, 1, gl.UNSIGNED_SHORT, 6*2);});
conformance/more/functions/drawElements.html:  assertGLError(gl, gl.INVALID_OPERATION, "count + offset out of range 4",
conformance/more/functions/drawElements.html:      function(){gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 1*2);});
conformance/more/functions/drawElements.html:  assert(gl.NO_ERROR == checkError(gl, "vbo.destroy"));
conformance/more/functions/deleteBufferBadArgs.html:  assertThrowNoGLError(gl, "number ", function(){ gl.deleteBuffer(1); });
conformance/more/functions/deleteBufferBadArgs.html:  assertGLError(gl, gl.NO_ERROR, "null", function(){ gl.deleteBuffer(null); });
conformance/more/functions/deleteBufferBadArgs.html:  assertThrowNoGLError(gl, "0", function(){ gl.deleteBuffer(0); });
conformance/more/functions/deleteBufferBadArgs.html:  assertThrowNoGLError(gl, "false", function(){ gl.deleteBuffer(false); });
conformance/more/functions/deleteBufferBadArgs.html:  assertThrowNoGLError(gl, "true", function(){ gl.deleteBuffer(true); });
conformance/more/functions/deleteBufferBadArgs.html:  assertThrowNoGLError(gl, "{}", function(){ gl.deleteBuffer({}); });
conformance/more/functions/deleteBufferBadArgs.html:  var tex = gl.createTexture();
conformance/more/functions/deleteBufferBadArgs.html:  assertThrowNoGLError(gl, "tex as buf", function(){ gl.deleteBuffer(tex); });
conformance/more/functions/deleteBufferBadArgs.html:  var buf = gl.createBuffer();
conformance/more/functions/deleteBufferBadArgs.html:  assertOk(function(){ gl.deleteBuffer(buf); });
conformance/more/functions/deleteBufferBadArgs.html:  assertOk(function(){ gl.deleteBuffer(buf); });
conformance/more/functions/deleteBufferBadArgs.html:  assertOk(function(){ gl.deleteBuffer(buf); });
conformance/more/functions/deleteBufferBadArgs.html:  assertOk(function(){ gl.deleteTexture(tex); });
js/tests/clipping-wide-points.js:        var loc = gl.getUniformLocation(program, 'pointSize');
js/tests/clipping-wide-points.js:        gl.uniform1f(loc, pointSize);
js/tests/clipping-wide-points.js:        gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
js/tests/clipping-wide-points.js:        gl.enableVertexAttribArray(0);
js/tests/clipping-wide-points.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors after setting up program");
js/tests/clipping-wide-points.js:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, data);
js/tests/clipping-wide-points.js:    gl.clear(gl.COLOR_BUFFER_BIT);
js/tests/clipping-wide-points.js:    gl.drawArrays(gl.POINTS, 0, 1);
js/tests/clipping-wide-points.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors after running one test case");
js/tests/clipping-wide-points.js:    var range = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
js/tests/clipping-wide-points.js:    var buffer = gl.createBuffer();
js/tests/clipping-wide-points.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
js/tests/clipping-wide-points.js:    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
js/tests/clipping-wide-points.js:    gl.disable(gl.BLEND);
js/tests/clipping-wide-points.js:    gl.disable(gl.DITHER);
js/tests/clipping-wide-points.js:    gl.disable(gl.DEPTH_TEST);
js/tests/clipping-wide-points.js:    gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/more/functions/bufferDataBadArgs.html:  var buf = gl.createBuffer();
conformance/more/functions/bufferDataBadArgs.html:  var ebuf = gl.createBuffer();
conformance/more/functions/bufferDataBadArgs.html:  gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/more/functions/bufferDataBadArgs.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebuf);
conformance/more/functions/bufferDataBadArgs.html:        function(){gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(0), gl.STATIC_DRAW);});
conformance/more/functions/bufferDataBadArgs.html:        function(){gl.bufferData(gl.TEXTURE_2D, new Float32Array([1,2,3]), gl.STATIC_DRAW);});
conformance/more/functions/bufferDataBadArgs.html://        function(){gl.bufferData(gl.ARRAY_BUFFER, [1,2,3], gl.STATIC_DRAW);});
conformance/more/functions/bufferDataBadArgs.html:        function(){gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1,2,3]), gl.TEXTURE_2D);});
conformance/more/functions/bufferDataBadArgs.html:        function(){gl.bufferData(gl.ARRAY_BUFFER, null, gl.STATIC_DRAW);});
conformance/more/functions/bufferDataBadArgs.html:        function(){gl.bufferData(gl.ARRAY_BUFFER, undefined, gl.STATIC_DRAW);});
conformance/more/functions/bufferDataBadArgs.html:    assertOk(function(){gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Float32Array([1,2,3]), gl.STATIC_DRAW);});
conformance/more/functions/bufferDataBadArgs.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/bufferDataBadArgs.html:    assertFail(function(){gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1,2,3]), gl.STATIC_DRAW);});
conformance/more/functions/bufferDataBadArgs.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance/more/functions/bufferDataBadArgs.html:    assertFail(function(){gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([1,2,3]), gl.STATIC_DRAW);});
conformance/more/functions/bufferDataBadArgs.html:    gl.deleteBuffer(buf);
conformance/more/functions/bufferDataBadArgs.html:    gl.deleteBuffer(ebuf);
conformance/glsl/misc/shader-varying-packing-restrictions.html:var maxVaryingVectors = gl.getParameter(gl.MAX_VARYING_VECTORS);
conformance/more/functions/bufferData.html:  var buf = gl.createBuffer();
conformance/more/functions/bufferData.html:  var ebuf = gl.createBuffer();
conformance/more/functions/bufferData.html:  gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/more/functions/bufferData.html:  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebuf);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ARRAY_BUFFER, 12, gl.STATIC_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([]), gl.STATIC_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STATIC_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STREAM_DRAW);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STREAM_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*4);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(data), gl.STREAM_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(data), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE), 12*2);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STATIC_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STREAM_DRAW);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_USAGE), gl.STREAM_DRAW);
conformance/more/functions/bufferData.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_USAGE), gl.DYNAMIC_DRAW);
conformance/more/functions/bufferData.html:    assertEquals(gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_SIZE), 12*2);
conformance/more/functions/bufferData.html:    gl.deleteBuffer(buf);
conformance/more/functions/bufferData.html:    gl.deleteBuffer(ebuf);
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    this.m_sampler = gl.createSampler();
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    gl.deleteSampler(this.m_sampler);
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.samplerParameteri(this.m_sampler, this.m_valueName, this.m_valueRange[ndx]);
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.samplerParameterf(this.m_sampler, this.m_valueName, this.m_valueRange[ndx]);
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.samplerParameterf(this.m_sampler, this.m_lodTarget, ref);
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.samplerParameteri(this.m_sampler, this.m_lodTarget, ref);
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    var wrapValues = [gl.CLAMP_TO_EDGE, gl.REPEAT, gl.MIRRORED_REPEAT];
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.TEXTURE_WRAP_S, gl.REPEAT, wrapValues));
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.TEXTURE_WRAP_T, gl.REPEAT, wrapValues));
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.TEXTURE_WRAP_R, gl.REPEAT, wrapValues));
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    var magValues = [gl.NEAREST, gl.LINEAR];
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.TEXTURE_MAG_FILTER, gl.LINEAR, magValues));
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    var minValues = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR];
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR, minValues));
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    this.addChild(new es3fSamplerStateQueryTests.SamplerLODCase('sampler_texture_min_lod' , 'TEXTURE_MIN_LOD', gl.TEXTURE_MIN_LOD, -1000));
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    this.addChild(new es3fSamplerStateQueryTests.SamplerLODCase('sampler_texture_max_lod' , 'TEXTURE_MAX_LOD', gl.TEXTURE_MAX_LOD, 1000));
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    var modes = [gl.COMPARE_REF_TO_TEXTURE, gl.NONE];
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.TEXTURE_COMPARE_MODE, gl.NONE, modes));
deqp/functional/gles3/es3fSamplerStateQueryTests.js:    var compareFuncs = [gl.LEQUAL, gl.GEQUAL, gl.LESS, gl.GREATER, gl.EQUAL, gl.NOTEQUAL, gl.ALWAYS, gl.NEVER];
deqp/functional/gles3/es3fSamplerStateQueryTests.js:        gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL, compareFuncs));
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:  var red_loc = gl.getUniformLocation(program, "u_colors[" + ii + "].color");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:  var green_loc = gl.getUniformLocation(program, "u_colors[" + (1 - ii) + "].color");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:  gl.uniform4fv(red_loc, [1, 0, 0, 1]);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:  gl.uniform4fv(green_loc, [0, 1, 0, 1]);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:  uniforms.push(gl.getActiveUniform(program, ii).name);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc00 = gl.getUniformLocation(program, "u_colors[0].color1");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc01 = gl.getUniformLocation(program, "u_colors[0].color2");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc10 = gl.getUniformLocation(program, "u_colors[1].color1");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc11 = gl.getUniformLocation(program, "u_colors[1].color2");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:gl.uniform4fv(loc00, [1, 0, 0, 0]);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:gl.uniform4fv(loc01, [0, 1, 0, 0]);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:gl.uniform4fv(loc10, [0, 0, 1, 0]);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:gl.uniform4fv(loc11, [0, 0, 0, 1]);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc0r = gl.getUniformLocation(program, "u_colors[0].r");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc0g = gl.getUniformLocation(program, "u_colors[0].g");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc0b = gl.getUniformLocation(program, "u_colors[0].b");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc0a = gl.getUniformLocation(program, "u_colors[0].a");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc1r = gl.getUniformLocation(program, "u_colors[1].r");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc1g = gl.getUniformLocation(program, "u_colors[1].g");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc1b = gl.getUniformLocation(program, "u_colors[1].b");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:var loc1a = gl.getUniformLocation(program, "u_colors[1].a");
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:gl.uniform1f(loc0r, 1);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:gl.uniform1f(loc0g, 1);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:gl.uniform1f(loc1b, 1);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:gl.uniform1f(loc1a, 1);
conformance/glsl/misc/shader-with-array-of-structs-uniform.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/rendering/vertex-texture-fetch.html:if (!gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)) {
conformance/rendering/vertex-texture-fetch.html:  var texture = gl.createTexture();
conformance/rendering/vertex-texture-fetch.html:  gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/rendering/vertex-texture-fetch.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/rendering/vertex-texture-fetch.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/rendering/vertex-texture-fetch.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/rendering/vertex-texture-fetch.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/rendering/vertex-texture-fetch.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/rendering/vertex-texture-fetch.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after creating texture");
conformance/rendering/vertex-texture-fetch.html:  gl.uniform1i(gl.getUniformLocation(program, "u_texture"), 0);
conformance/rendering/vertex-texture-fetch.html:  gl.disable(gl.BLEND);
conformance/rendering/vertex-texture-fetch.html:  gl.disable(gl.DEPTH_TEST);
conformance/rendering/vertex-texture-fetch.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after initWebGL");
conformance/rendering/vertex-texture-fetch.html:  gl.disableVertexAttribArray(1);
conformance/rendering/vertex-texture-fetch.html:  gl.vertexAttrib2f(1, 0, 0);
conformance/rendering/vertex-texture-fetch.html:  gl.vertexAttrib2f(1, 1, 0);
conformance/rendering/vertex-texture-fetch.html:  gl.vertexAttrib2f(1, 0, 1);
conformance/rendering/vertex-texture-fetch.html:  gl.vertexAttrib2f(1, 1, 1);
conformance/rendering/vertex-texture-fetch.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
deqp/functional/gles3/es3fInternalFormatQueryTests.js:    var samples = gl.getInternalformatParameter(gl.RENDERBUFFER, this.m_internalFormat, gl.SAMPLES);
deqp/functional/gles3/es3fInternalFormatQueryTests.js:    var maxSamples = /** @type {number} */ (gl.getParameter(gl.MAX_SAMPLES));
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba', gl.RGBA, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgb', gl.RGB, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['r8', gl.R8, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rg8', gl.RG8, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgb8', gl.RGB8, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgb565', gl.RGB565, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba4', gl.RGBA4, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgb5_a1', gl.RGB5_A1, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba8', gl.RGBA8, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgb10_a2', gl.RGB10_A2, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgb10_a2ui', gl.RGB10_A2UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['srgb8_alpha8', gl.SRGB8_ALPHA8, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['r8i', gl.R8I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['r8ui', gl.R8UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['r16i', gl.R16I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['r16ui', gl.R16UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['r32i', gl.R32I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['r32ui', gl.R32UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rg8i', gl.RG8I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rg8ui', gl.RG8UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rg16i', gl.RG16I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rg16ui', gl.RG16UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rg32i', gl.RG32I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rg32ui', gl.RG32UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba8i', gl.RGBA8I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba8ui', gl.RGBA8UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba16i', gl.RGBA16I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba16ui', gl.RGBA16UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba32i', gl.RGBA32I, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['rgba32ui', gl.RGBA32UI, true],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['depth_component16', gl.DEPTH_COMPONENT16, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['depth_component24', gl.DEPTH_COMPONENT24, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['depth_component32f', gl.DEPTH_COMPONENT32F, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['depth24_stencil8', gl.DEPTH24_STENCIL8, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['depth32f_stencil8', gl.DEPTH32F_STENCIL8, false],
deqp/functional/gles3/es3fInternalFormatQueryTests.js:        ['stencil_index8', gl.STENCIL_INDEX8, false]
conformance/glsl/bugs/angle-dx-variable-bug.html:  var vs = gl.createShader(gl.VERTEX_SHADER);
conformance/glsl/bugs/angle-dx-variable-bug.html:  gl.shaderSource(vs, document.getElementById("vs").text);
conformance/glsl/bugs/angle-dx-variable-bug.html:  gl.compileShader(vs);
conformance/glsl/bugs/angle-dx-variable-bug.html:  if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
conformance/glsl/bugs/angle-dx-variable-bug.html:      testFailed("Vertex Shader failed to compile: " + gl.getShaderInfoLog(vs));
conformance/glsl/bugs/angle-dx-variable-bug.html:  var fs = gl.createShader(gl.FRAGMENT_SHADER);
conformance/glsl/bugs/angle-dx-variable-bug.html:  gl.shaderSource(fs, document.getElementById("fs").text);
conformance/glsl/bugs/angle-dx-variable-bug.html:  gl.compileShader(fs);
conformance/glsl/bugs/angle-dx-variable-bug.html:  if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {
conformance/glsl/bugs/angle-dx-variable-bug.html:      testFailed("Fragment Shader failed to compile: " + gl.getShaderInfoLog(fs));
conformance/glsl/bugs/angle-dx-variable-bug.html:  var p = gl.createProgram();
conformance/glsl/bugs/angle-dx-variable-bug.html:  gl.attachShader(p, vs);
conformance/glsl/bugs/angle-dx-variable-bug.html:  gl.attachShader(p, fs);
conformance/glsl/bugs/angle-dx-variable-bug.html:  gl.linkProgram(p);
conformance/glsl/bugs/angle-dx-variable-bug.html:  if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {
conformance/glsl/bugs/angle-dx-variable-bug.html:      testFailed("Program failed to link: " + gl.getProgramInfoLog(p));
conformance/rendering/draw-elements-out-of-bounds.html:OutOfBoundsTest.runDrawElementsTest("gl.drawElements(gl.TRIANGLES, $(count), $(type), $(offset))",
conformance/rendering/polygon-offset.html:    var vertBuf = gl.createBuffer();
conformance/rendering/polygon-offset.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
conformance/rendering/polygon-offset.html:    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
conformance/rendering/polygon-offset.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/rendering/polygon-offset.html:    gl.uniform4fv(colLoc, col);
conformance/rendering/polygon-offset.html:    gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertices.length / 3);
conformance/rendering/polygon-offset.html:    gl.clearColor(col[0], col[1], col[2], col[3]);
conformance/rendering/polygon-offset.html:    gl.clearDepth(z);
conformance/rendering/polygon-offset.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/polygon-offset.html:    var colLoc = gl.getUniformLocation(program, 'col');
conformance/rendering/polygon-offset.html:    gl.enableVertexAttribArray(0);
conformance/rendering/polygon-offset.html:    gl.enable(gl.DEPTH_TEST);
conformance/rendering/polygon-offset.html:    gl.depthFunc(gl.LEQUAL);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0, 10);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0, 0);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(1.0, 0);
conformance/rendering/polygon-offset.html:    gl.enable(gl.POLYGON_OFFSET_FILL);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0, 0);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0, 2);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0, 0);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0.1, 0);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0, 0);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0.1, 0);
conformance/rendering/polygon-offset.html:    gl.polygonOffset(0.1, 1);
conformance/rendering/polygon-offset.html:    gl.disable(gl.POLYGON_OFFSET_FILL);
conformance/rendering/polygon-offset.html:    gl.enable(gl.POLYGON_OFFSET_FILL);
conformance/renderbuffers/renderbuffer-initialization.html:    gl.clearColor(0, 1, 0, 1);
conformance/renderbuffers/renderbuffer-initialization.html:    runTest(gl, gl.canvas.width, gl.canvas.height, 0);
conformance/renderbuffers/renderbuffer-initialization.html:    runTest(gl, gl.canvas.width, gl.canvas.height, 1);
conformance/renderbuffers/renderbuffer-initialization.html:    runTest(gl, gl.canvas.width, gl.canvas.height, 0);
conformance/renderbuffers/renderbuffer-initialization.html:    runTest(gl, gl.canvas.width, gl.canvas.height, 1);
conformance/renderbuffers/renderbuffer-initialization.html:    var clearColor = gl.getParameter(gl.COLOR_CLEAR_VALUE);
conformance/renderbuffers/renderbuffer-initialization.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, 'should be no errors');
conformance/renderbuffers/renderbuffer-initialization.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/renderbuffers/renderbuffer-initialization.html:    var fbo = gl.createFramebuffer();
conformance/renderbuffers/renderbuffer-initialization.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/renderbuffers/renderbuffer-initialization.html:    var colorbuffer = gl.createRenderbuffer();
conformance/renderbuffers/renderbuffer-initialization.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorbuffer);
conformance/renderbuffers/renderbuffer-initialization.html:      gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, width, height);
conformance/renderbuffers/renderbuffer-initialization.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, 'should be no error after renderbufferStorage(internalformat = RGBA4).');
conformance/renderbuffers/renderbuffer-initialization.html:      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorbuffer);
conformance/renderbuffers/renderbuffer-initialization.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/renderbuffers/renderbuffer-initialization.html:    gl.deleteFramebuffer(fbo);
conformance/renderbuffers/renderbuffer-initialization.html:    gl.deleteRenderbuffer(colorbuffer);
conformance/renderbuffers/renderbuffer-initialization.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/renderbuffers/renderbuffer-initialization.html:    gl.canvas.width += 1;
conformance/renderbuffers/renderbuffer-initialization.html:    gl.canvas.height += 1;
deqp/functional/gles3/es3fTextureFormatTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fTextureFormatTests.js:goog.require('framework.opengl.gluStrUtil');
deqp/functional/gles3/es3fTextureFormatTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fTextureFormatTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fTextureFormatTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fTextureFormatTests.js:var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fTextureFormatTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fTextureFormatTests.js:var gluStrUtil = framework.opengl.gluStrUtil;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapS = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapT = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var minFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var magFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_S = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_S, wrapS)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_T = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_T, wrapT)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MIN_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MIN_FILTER, minFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MAG_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MAG_FILTER, magFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.bindTexture(gl.TEXTURE_2D, this.m_texture.getGLTexture());
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapS = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapT = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var minFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var magFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_S = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_S, wrapS)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_T = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_T, wrapT)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MIN_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MIN_FILTER, minFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MAG_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MAG_FILTER, magFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.m_texture.getGLTexture());
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, wrapS);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, wrapT);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, minFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, magFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapS = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapT = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var minFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var magFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_S = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_S, wrapS)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_T = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_T, wrapT)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MIN_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MIN_FILTER, minFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MAG_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MAG_FILTER, magFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.m_texture.getGLTexture());
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, wrapS);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, wrapT);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, minFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, magFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapS = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapT = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var minFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var magFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_S = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_S, wrapS)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_T = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_T, wrapT)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MIN_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MIN_FILTER, minFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MAG_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MAG_FILTER, magFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.bindTexture(gl.TEXTURE_3D, this.m_texture.getGLTexture());
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, wrapS);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, wrapT);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, minFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, magFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapS = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapT = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var minFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var magFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_S = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_S, wrapS)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_T = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_T, wrapT)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MIN_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MIN_FILTER, minFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MAG_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MAG_FILTER, magFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.bindTexture(gl.TEXTURE_2D, this.m_texture.getGLTexture());
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapS = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var wrapT = gl.CLAMP_TO_EDGE;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var minFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    /** @const */ var magFilter = gl.NEAREST;
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_S = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_S, wrapS)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n WRAP_T = " << glu::getTextureParameterValueStr(gl.TEXTURE_WRAP_T, wrapT)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MIN_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MIN_FILTER, minFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    // << "\n MAG_FILTER = " << glu::getTextureParameterValueStr(gl.TEXTURE_MAG_FILTER, magFilter)
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.m_texture.getGLTexture());
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, wrapS);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, wrapT);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, minFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, magFilter);
deqp/functional/gles3/es3fTextureFormatTests.js:        ['alpha', gl.ALPHA, gl.UNSIGNED_BYTE],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['luminance', gl.LUMINANCE, gl.UNSIGNED_BYTE],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['luminance_alpha', gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb_unsigned_short_5_6_5', gl.RGB, gl.UNSIGNED_SHORT_5_6_5],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb_unsigned_byte', gl.RGB, gl.UNSIGNED_BYTE],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba_unsigned_short_4_4_4_4', gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba_unsigned_short_5_5_5_1', gl.RGBA, gl.UNSIGNED_SHORT_5_5_5_1],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba_unsigned_byte', gl.RGBA, gl.UNSIGNED_BYTE]
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_CUBE_MAP',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_CUBE_MAP',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D_ARRAY',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D_ARRAY',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_3D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_3D',
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba32f', gl.RGBA32F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba32i', gl.RGBA32I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba32ui', gl.RGBA32UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba16f', gl.RGBA16F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba16i', gl.RGBA16I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba16ui', gl.RGBA16UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba8', gl.RGBA8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba8i', gl.RGBA8I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba8ui', gl.RGBA8UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['srgb8_alpha8', gl.SRGB8_ALPHA8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb10_a2', gl.RGB10_A2],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb10_a2ui', gl.RGB10_A2UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba4', gl.RGBA4],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb5_a1', gl.RGB5_A1],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgba8_snorm', gl.RGBA8_SNORM],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb8', gl.RGB8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb565', gl.RGB565],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r11f_g11f_b10f', gl.R11F_G11F_B10F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb32f', gl.RGB32F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb32i', gl.RGB32I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb32ui', gl.RGB32UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb16f', gl.RGB16F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb16i', gl.RGB16I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb16ui', gl.RGB16UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb8_snorm', gl.RGB8_SNORM],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb8i', gl.RGB8I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb8ui', gl.RGB8UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['srgb8', gl.SRGB8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rgb9_e5', gl.RGB9_E5],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg32f', gl.RG32F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg32i', gl.RG32I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg32ui', gl.RG32UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg16f', gl.RG16F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg16i', gl.RG16I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg16ui', gl.RG16UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg8', gl.RG8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg8i', gl.RG8I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg8ui', gl.RG8UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['rg8_snorm', gl.RG8_SNORM],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r32f', gl.R32F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r32i', gl.R32I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r32ui', gl.R32UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r16f', gl.R16F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r16i', gl.R16I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r16ui', gl.R16UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r8', gl.R8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r8i', gl.R8I],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r8ui', gl.R8UI],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['r8_snorm', gl.R8_SNORM]
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_CUBE_MAP',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_CUBE_MAP',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D_ARRAY',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D_ARRAY',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_3D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_3D',
deqp/functional/gles3/es3fTextureFormatTests.js:        ['depth_component32f', gl.DEPTH_COMPONENT32F],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['depth_component24', gl.DEPTH_COMPONENT24],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['depth_component16', gl.DEPTH_COMPONENT16],
deqp/functional/gles3/es3fTextureFormatTests.js:        // ['depth32f_stencil8', gl.DEPTH32F_STENCIL8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['depth24_stencil8', gl.DEPTH24_STENCIL8]
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_CUBE_MAP',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_CUBE_MAP',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D_ARRAY',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ' gl.TEXTURE_2D_ARRAY',
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_R11_EAC', 'eac_r11', tcuCompressedTexture.Format.EAC_R11],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_SIGNED_R11_EAC', 'eac_signed_r11', tcuCompressedTexture.Format.EAC_SIGNED_R11],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_RG11_EAC', 'eac_rg11', tcuCompressedTexture.Format.EAC_RG11],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_SIGNED_RG11_EAC', 'eac_signed_rg11', tcuCompressedTexture.Format.EAC_SIGNED_RG11],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_RGB8_ETC2', 'etc2_rgb8', tcuCompressedTexture.Format.ETC2_RGB8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_SRGB8_ETC2', 'etc2_srgb8', tcuCompressedTexture.Format.ETC2_SRGB8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2', 'etc2_rgb8_punchthrough_alpha1', tcuCompressedTexture.Format.ETC2_RGB8_PUNCHTHROUGH_ALPHA1],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2', 'etc2_srgb8_punchthrough_alpha1', tcuCompressedTexture.Format.ETC2_SRGB8_PUNCHTHROUGH_ALPHA1],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_RGBA8_ETC2_EAC', 'etc2_eac_rgba8', tcuCompressedTexture.Format.ETC2_EAC_RGBA8],
deqp/functional/gles3/es3fTextureFormatTests.js:        ['gl.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC', 'etc2_eac_srgb8_alpha8', tcuCompressedTexture.Format.ETC2_EAC_SRGB8_ALPHA8]
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ', gl.TEXTURE_2D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ', gl.TEXTURE_CUBE_MAP',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ', gl.TEXTURE_2D',
deqp/functional/gles3/es3fTextureFormatTests.js:            description: descriptionBase + ', gl.TEXTURE_CUBE_MAP',
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform4fv(58882929, [1,2,3,4]);});
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform4fv(-58882929, [1,2,3,4]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "1fv on 4fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform1fv(uniV4, [1,2,3,4]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "more than enough values 1fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform1fv(uniFloat, [2,3,4,5,6]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "4fv on float",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform4fv(uniFloat, [2,3,4,5]);});
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform4fv(uniV4, [1, 2, 3, 4]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_VALUE, "5 values on 4fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform4fv(uniV4, [1, 2, 3, 4, 5]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "8 values on 4fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform4fv(uniV4, [1, 2, 3, 4, 5, 6, 7, 8]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "3fv on float",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform3fv(uniFloat, [2,3,4]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "2fv on float",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform2fv(uniFloat, [2,3]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "3fv on 4fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform3fv(uniV4, [4,5,6]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "2fv on 4fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform2fv(uniV4, [5,6]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "1fv on 4fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform1fv(uniV4, [6]);});
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform1fv(uniFloat, [2]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_VALUE, "not enough values on 1fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform1fv(uniFloat, []);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_VALUE, "not enough values on 4fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform4fv(uniV4, [3,3,4]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "4iv on 4fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform4iv(uniV4, [1, 2, 3, 4]);});
conformance/more/functions/uniformfBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "1iv on 1fv",
conformance/more/functions/uniformfBadArgs.html:            function(){gl.uniform1iv(uniFloat, [2]);});
conformance/more/functions/uniformfBadArgs.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
deqp/functional/gles3/es3fBuiltinPrecisionTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fBuiltinPrecisionTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
conformance/more/functions/readPixelsBadArgs.html:var defaultImgUrl = "https://get.webgl.org/conformance-resources/opengl_logo.jpg";
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,-1,1, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,1,-1, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(-1,0,1,1, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,-1,1,1, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,16,17, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,17,16, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,0,0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,1,1, gl.FLOAT, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,1,1, gl.ALPHA, gl.FLOAT,
conformance/more/functions/readPixelsBadArgs.html:    var tex = gl.createTexture();
conformance/more/functions/readPixelsBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);});
conformance/more/functions/readPixelsBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,1,1, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:    gl.deleteTexture(tex);
conformance/more/functions/readPixelsBadArgs.html:    var tex = gl.createTexture();
conformance/more/functions/readPixelsBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);});
conformance/more/functions/readPixelsBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/readPixelsBadArgs.html:      function(){gl.readPixels(0,0,1,1, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/more/functions/readPixelsBadArgs.html:    gl.deleteTexture(tex);
conformance/more/functions/texSubImage2D.html:  var tex = gl.createTexture();
conformance/more/functions/texSubImage2D.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/texSubImage2D.html:  var texCubeMap = gl.createTexture();
conformance/more/functions/texSubImage2D.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCubeMap);
conformance/more/functions/texSubImage2D.html:  gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/texSubImage2D.html:  gl.deleteTexture(tex);
conformance/more/functions/texSubImage2D.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance/more/functions/texSubImage2D.html:  gl.deleteTexture(texCubeMap);
conformance/more/functions/texSubImage2D.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2,2,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]));
conformance/more/functions/texSubImage2D.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, 1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2D.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, 2,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0]));
conformance/more/functions/texSubImage2D.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, 1,2,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0,0,0,0,0]));
conformance/more/functions/texSubImage2D.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 1,0, 1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2D.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,1, 1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2D.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 1,1, 1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2D.html:  gl.texImage2D(gl.TEXTURE_2D, 1,gl.RGBA, 1,1,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2D.html:  gl.texSubImage2D(gl.TEXTURE_2D, 1, 0,0, 1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2D.html:    gl.TEXTURE_2D,
conformance/more/functions/texSubImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/more/functions/texSubImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/more/functions/texSubImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/more/functions/texSubImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/more/functions/texSubImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/more/functions/texSubImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/more/functions/texSubImage2D.html:        gl.texImage2D(t, 0, gl.RGBA, 1,1,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2D.html:        gl.texSubImage2D(t, 0, 0,0, 1,1,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array([0,0,0,0]));
conformance/more/functions/texSubImage2DHTMLBadArgs.html:  var tex = gl.createTexture();
conformance/more/functions/texSubImage2DHTMLBadArgs.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/texSubImage2DHTMLBadArgs.html:         function() {gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "y + height > texture height",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 1, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "x + width > texture width",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "negative x",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, -1, 0, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "negative y",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, -1, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "negative level",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, -1, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_BYTE, b); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_BYTE, div); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_BYTE, 0); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0,0, 0, gl.RGBA, gl.UNSIGNED_BYTE, "foo"); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_ENUM, "bad target",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.FLOAT, 0, 0,0, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:         function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "format not same as original",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGB, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "type not same as original",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:         function() {gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGB, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "format not same as original RGB",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "type not same as original RGB",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGB, gl.UNSIGNED_SHORT_5_6_5, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:         function() {gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "format not same as original RGBA 4_4_4_4",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGB, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "type not same as original RGBA 4_4_4_4",
conformance/more/functions/texSubImage2DHTMLBadArgs.html:        function() {gl.texSubImage2D(gl.TEXTURE_2D, 0, 0,0, gl.RGBA, gl.UNSIGNED_BYTE, c); });
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/texSubImage2DHTMLBadArgs.html:    gl.deleteTexture(tex);
conformance/glsl/misc/shader-with-similar-uniform-array-names.html:  var loc1 = gl.getUniformLocation(program, "u_name[0]");
conformance/glsl/misc/shader-with-similar-uniform-array-names.html:  var loc2 = gl.getUniformLocation(program, "u_nameCollision[0]");
conformance/glsl/misc/shader-with-similar-uniform-array-names.html:  var loc3 = gl.getUniformLocation(program, "u_nameCollision2[0]");
conformance/glsl/misc/shader-with-similar-uniform-array-names.html:  gl.uniform4fv(loc1, [1, 0, 0, 0]);
conformance/glsl/misc/shader-with-similar-uniform-array-names.html:  gl.uniform4fv(loc2, [0, 1, 0, 0]);
conformance/glsl/misc/shader-with-similar-uniform-array-names.html:  gl.uniform4fv(loc3, [0, 0, 0, 1]);
conformance/glsl/misc/shader-with-similar-uniform-array-names.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/more/functions/texImage2DBadArgs.html:    var tex = gl.createTexture();
conformance/more/functions/texImage2DBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/texImage2DBadArgs.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/texImage2DBadArgs.html:    gl.deleteTexture(tex);
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "not enough data", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2,1,0,gl.RGBA,gl.UNSIGNED_BYTE, data);
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "not enough data", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,2,0,gl.RGBA,gl.UNSIGNED_BYTE, data);
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_ENUM, "bad target", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.FLOAT, 0, gl.RGBA, 1,1,0,gl.RGBA,gl.UNSIGNED_BYTE, null);
conformance/more/functions/texImage2DBadArgs.html:    assertGLErrorIn(gl, [gl.INVALID_ENUM, gl.INVALID_VALUE],
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.FLOAT, 1,1,0,gl.FLOAT,gl.UNSIGNED_BYTE, null);
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "border > 0", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,1,48,gl.RGBA,gl.UNSIGNED_BYTE, null);
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0,0,gl.RGBA,gl.UNSIGNED_BYTE, null);
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "negative width", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, -1,1,0,gl.RGBA,gl.UNSIGNED_BYTE, null);
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "negative height", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,-1,0,gl.RGBA,gl.UNSIGNED_BYTE, null);
conformance/more/functions/texImage2DBadArgs.html:    assertGLErrorIn(gl, [gl.INVALID_ENUM, gl.INVALID_OPERATION], "bad format", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,1,0,gl.FLOAT,gl.UNSIGNED_BYTE, null);
conformance/more/functions/texImage2DBadArgs.html:    assertGLErrorIn(gl, [gl.INVALID_ENUM, gl.INVALID_OPERATION], "bad type", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,1,0,gl.RGBA,gl.TEXTURE_2D, null);
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "not enough data", function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,1,0,gl.RGBA,gl.UNSIGNED_BYTE, new Uint8Array(3));
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "format and type incompatible",function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1,1,0,gl.RGBA,gl.UNSIGNED_SHORT_5_6_5, null);
conformance/more/functions/texImage2DBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "format and type incompatible",function(){
conformance/more/functions/texImage2DBadArgs.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1,1,0,gl.RGB,gl.UNSIGNED_SHORT_4_4_4_4, null);
conformance/rendering/point-specific-shader-variables.html:var vertexObject = gl.createBuffer();
conformance/rendering/point-specific-shader-variables.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/rendering/point-specific-shader-variables.html:gl.bufferData(gl.ARRAY_BUFFER, vertData, gl.STATIC_DRAW);
conformance/rendering/point-specific-shader-variables.html:gl.enableVertexAttribArray(0);
conformance/rendering/point-specific-shader-variables.html:gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/point-specific-shader-variables.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/point-specific-shader-variables.html:gl.useProgram(prog_overwrite);
conformance/rendering/point-specific-shader-variables.html:gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/rendering/point-specific-shader-variables.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/point-specific-shader-variables.html:gl.useProgram(prog_branch);
conformance/rendering/point-specific-shader-variables.html:gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/rendering/point-specific-shader-variables.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/point-specific-shader-variables.html:gl.useProgram(prog_cond_overwrite);
conformance/rendering/point-specific-shader-variables.html:gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/rendering/point-specific-shader-variables.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/point-specific-shader-variables.html:gl.useProgram(prog_cond_branch);
conformance/rendering/point-specific-shader-variables.html:gl.drawArrays(gl.TRIANGLES, 0, 3);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fNegativeShaderApiTests.js:            'create_shader', 'Invalid gl.createShader() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.createShader(-1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('attach_shader', 'Invalid gl.attachShader() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLShader} */ var shader1 = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLShader} */ var shader2 = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if shader is already attached to program.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.attachShader(program, shader1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                    this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.attachShader(program, shader1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                    this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if a shader of the same type as shader is already attached to program.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.attachShader(program, shader2);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                    this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteShader(shader1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteShader(shader2);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('detach_shader', 'Invalid gl.detachShader() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if shader is not attached to program.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.detachShader(program, shader);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('link_program', 'Invalid gl.linkProgram() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if program is the currently active program object and transform feedback mode is active.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.endTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('use_program', 'Invalid gl.useProgram() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback mode is active and not paused.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program1.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program1.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program1.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program2.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program2.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.endTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('bind_sampler', 'Invalid gl.bindSampler() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                maxTexImageUnits = /** @type {number} */ (gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                sampler = gl.createSampler();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if unit is greater than or equal to the value of gl.MAX_COMBIED_TEXTURE_IMAGE_UNITS.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindSampler(maxTexImageUnits, sampler);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if sampler has been deleted by a call to glDeleteSamplers.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteSampler(sampler);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindSampler(1, sampler);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_sampler_parameteriv', 'Invalid gl.getSamplerParameter() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                sampler = gl.createSampler();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                params = /** @type {number} */ (gl.getSamplerParameter(sampler, -1));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteSampler(sampler);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('get_sampler_parameterfv', 'Invalid gl.getSamplerParameter() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                sampler = gl.createSampler();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                params = /** @type {number} */ (gl.getSamplerParameter(sampler, -1));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteSampler(sampler);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('sampler_parameteri', 'Invalid gl.samplerParameteri() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                sampler = gl.createSampler();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if params should have a defined constant value (based on the value of pname) and does not.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, -1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteSampler(sampler);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:            'sampler_parameteriv', 'Invalid gl.samplerParameteri() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                sampler = gl.createSampler();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if params should have a defined constant value (based on the value of pname) and does not.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, params);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteSampler(sampler);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                sampler = gl.createSampler();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if params should have a defined constant value (based on the value of pname) and does not.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.samplerParameterf(sampler, gl.TEXTURE_WRAP_S, -1.0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteSampler(sampler);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:            'get_attrib_location', 'Invalid gl.getAttribLocation() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLProgram} */ var programEmpty = gl.createProgram();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLShader} */ var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if program has not been successfully linked.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindAttribLocation(programEmpty, 0, 'test');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.getAttribLocation(programEmpty, 'test');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteShader(shader);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteProgram(programEmpty);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:            'get_uniform_location', 'Invalid gl.getUniformLocation() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLProgram} */ var programEmpty = gl.createProgram();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if program has not been successfully linked.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.getUniformLocation(programEmpty, 'test');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteProgram(programEmpty);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:            'bind_attrib_location', 'Invalid gl.bindAttribLocation() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLProgram} */ var program = gl.createProgram();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                var maxIndex = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindAttribLocation(program, maxIndex, 'test');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if name starts with the reserved prefix \'gl.\'.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindAttribLocation(program, maxIndex-1, 'gl_test');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteProgram(program);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('uniform_block_binding', 'Invalid gl.uniformBlockBinding() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                maxUniformBufferBindings = /** @type {number} */ (gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                numActiveUniforms = /** @type {number} */ (gl.getProgramParameter(program.getProgram(), gl.ACTIVE_UNIFORMS));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                numActiveBlocks = /** @type {number} */ (gl.getProgramParameter(program.getProgram(), gl.ACTIVE_UNIFORM_BLOCKS));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('// gl.MAX_UNIFORM_BUFFER_BINDINGS = ' + maxUniformBufferBindings);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('// gl.ACTIVE_UNIFORMS = ' + numActiveUniforms);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('// gl.ACTIVE_UNIFORM_BLOCKS = ' + numActiveBlocks);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if uniformBlockIndex is not an active uniform block index of program.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformBlockBinding(program.getProgram(), -1, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformBlockBinding(program.getProgram(), 5, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if uniformBlockBinding is greater than or equal to the value of gl.MAX_UNIFORM_BUFFER_BINDINGS.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformBlockBinding(program.getProgram(), maxUniformBufferBindings, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                    gl.uniformBlockBinding(null, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var vec4_v = gl.getUniformLocation(program.getProgram(), 'vec4_v'); // vec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var ivec4_f = gl.getUniformLocation(program.getProgram(), 'ivec4_f'); // ivec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var uvec4_f = gl.getUniformLocation(program.getProgram(), 'uvec4_f'); // uvec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var sampler_f = gl.getUniformLocation(program.getProgram(), 'sampler_f'); // sampler2D
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the size of the uniform variable declared in the shader does not match the size indicated by the glUniform command.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1f(vec4_v, 0.0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2f(vec4_v, 0.0, 0.0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3f(vec4_v, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4f(vec4_v, 0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}f is used to load a uniform variable of type int, ivec2, ivec3, ivec4, unsigned int, uvec2, uvec3, uvec4.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4f(ivec4_f, 0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4f(uvec4_f, 0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if a sampler is loaded using a command other than glUniform1i and glUniform1iv.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1f(sampler_f, 0.0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var vec4_v = gl.getUniformLocation(program.getProgram(), 'vec4_v'); // vec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var ivec4_f = gl.getUniformLocation(program.getProgram(), 'ivec4_f'); // ivec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var uvec4_f = gl.getUniformLocation(program.getProgram(), 'uvec4_f'); // uvec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var sampler_f = gl.getUniformLocation(program.getProgram(), 'sampler_f'); // sampler2D
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the size of the uniform variable declared in the shader does not match the size indicated by the glUniform command.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1fv(vec4_v, new Float32Array(1));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2fv(vec4_v, new Float32Array(2));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3fv(vec4_v, new Float32Array(3));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4fv(vec4_v, new Float32Array(4));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}fv is used to load a uniform variable of type /** @type {number} */ var , ivec2, ivec3, ivec4, unsigned /** @type {number} */ var , uvec2, uvec3, uvec4.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4fv(ivec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4fv(uvec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if a sampler is loaded using a command other than glUniform1i and glUniform1iv.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1fv(sampler_f, new Float32Array(1));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var vec4_v = gl.getUniformLocation(program.getProgram(), 'vec4_v'); // vec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if count is greater than 1 and the indicated uniform variable is not an array variable.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1fv(vec4_v, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2fv(vec4_v, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3fv(vec4_v, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4fv(vec4_v, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var vec4_v = gl.getUniformLocation(program.getProgram(), 'vec4_v'); // vec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var ivec4_f = gl.getUniformLocation(program.getProgram(), 'ivec4_f'); // ivec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var uvec4_f = gl.getUniformLocation(program.getProgram(), 'uvec4_f'); // uvec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var sampler_f = gl.getUniformLocation(program.getProgram(), 'sampler_f'); // sampler2D
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the size of the uniform variable declared in the shader does not match the size indicated by the glUniform command.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1i(ivec4_f, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2i(ivec4_f, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3i(ivec4_f, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4i(ivec4_f, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}i is used to load a uniform variable of type unsigned /** @type {number} */ var , uvec2, uvec3, uvec4, or an array of these.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1i(uvec4_f, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2i(uvec4_f, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3i(uvec4_f, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4i(uvec4_f, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}i is used to load a uniform variable of type /** @type {number} */ var , vec2, vec3, or vec4.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1i(vec4_v, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2i(vec4_v, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3i(vec4_v, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4i(vec4_v, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var vec4_v = gl.getUniformLocation(program.getProgram(), 'vec4_v'); // vec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var ivec4_f = gl.getUniformLocation(program.getProgram(), 'ivec4_f'); // ivec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var uvec4_f = gl.getUniformLocation(program.getProgram(), 'uvec4_f'); // uvec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var sampler_f = gl.getUniformLocation(program.getProgram(), 'sampler_f'); // sampler2D
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the size of the uniform variable declared in the shader does not match the size indicated by the glUniform command.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1iv(ivec4_f, data1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2iv(ivec4_f, data2);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3iv(ivec4_f, data3);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4iv(ivec4_f, data4);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}iv is used to load a uniform variable of type /** @type {number} */ var , vec2, vec3, or vec4.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1iv(vec4_v, data1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2iv(vec4_v, data2);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3iv(vec4_v, data3);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4iv(vec4_v, data4);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}iv is used to load a uniform variable of type unsigned /** @type {number} */ var , uvec2, uvec3 or uvec4.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1iv(uvec4_f, data1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2iv(uvec4_f, data2);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3iv(uvec4_f, data3);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4iv(uvec4_f, data4);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var ivec4_f = gl.getUniformLocation(program.getProgram(), 'ivec4_f'); // ivec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if count is greater than 1 and the indicated uniform variable is not an array variable.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1iv(ivec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2iv(ivec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3iv(ivec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4iv(ivec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var vec4_v = gl.getUniformLocation(program.getProgram(), 'vec4_v'); // vec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var ivec4_f = gl.getUniformLocation(program.getProgram(), 'ivec4_f'); // ivec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var uvec4_f = gl.getUniformLocation(program.getProgram(), 'uvec4_f'); // uvec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var sampler_f = gl.getUniformLocation(program.getProgram(), 'sampler_f'); // sampler2D
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the size of the uniform variable declared in the shader does not match the size indicated by the glUniform command.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1ui(uvec4_f, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2ui(uvec4_f, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3ui(uvec4_f, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4ui(uvec4_f, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}i is used to load a uniform variable of type /** @type {number} */ var , ivec2, ivec3, ivec4, or an array of these.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1ui(ivec4_f, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2ui(ivec4_f, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3ui(ivec4_f, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4ui(ivec4_f, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}i is used to load a uniform variable of type /** @type {number} */ var , vec2, vec3, or vec4.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1ui(vec4_v, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2ui(vec4_v, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3ui(vec4_v, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4ui(vec4_v, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if a sampler is loaded using a command other than glUniform1i and glUniform1iv.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1ui(sampler_f, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var vec4_v = gl.getUniformLocation(program.getProgram(), 'vec4_v'); // vec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var ivec4_f = gl.getUniformLocation(program.getProgram(), 'ivec4_f'); // ivec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var uvec4_f = gl.getUniformLocation(program.getProgram(), 'uvec4_f'); // uvec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var sampler_f = gl.getUniformLocation(program.getProgram(), 'sampler_f'); // sampler2D
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the size of the uniform variable declared in the shader does not match the size indicated by the glUniform command.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1uiv(uvec4_f, data1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2uiv(uvec4_f, data2);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3uiv(uvec4_f, data3);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4uiv(uvec4_f, data4);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}uiv is used to load a uniform variable of type /** @type {number} */ var , vec2, vec3, or vec4.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1uiv(vec4_v, data1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2uiv(vec4_v, data2);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3uiv(vec4_v, data3);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4uiv(vec4_v, data4);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if glUniform{1234}uiv is used to load a uniform variable of type /** @type {number} */ var , ivec2, ivec3 or ivec4.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1uiv(ivec4_f, data1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2uiv(ivec4_f, data2);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3uiv(ivec4_f, data3);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4uiv(ivec4_f, data4);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if a sampler is loaded using a command other than glUniform1i and glUniform1iv.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1uiv(sampler_f, data1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var uvec4_f = gl.getUniformLocation(program.getProgram(), 'uvec4_f'); // uvec4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if count is greater than 1 and the indicated uniform variable is not an array variable.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform1uiv(uvec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform2uiv(uvec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform3uiv(uvec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniform4uiv(uvec4_f, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var mat4_v = gl.getUniformLocation(program.getProgram(), 'mat4_v'); // mat4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var sampler_f = gl.getUniformLocation(program.getProgram(), 'sampler_f'); // sampler2D
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the size of the uniform variable declared in the shader does not match the size indicated by the glUniform command.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2fv(mat4_v, false, data4);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3fv(mat4_v, false, data9);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4fv(mat4_v, false, data16);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2x3fv(mat4_v, false, data6);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3x2fv(mat4_v, false, data6);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2x4fv(mat4_v, false, data8);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4x2fv(mat4_v, false, data8);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3x4fv(mat4_v, false, data12);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4x3fv(mat4_v, false, data12);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if a sampler is loaded using a command other than glUniform1i and glUniform1iv.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2fv(sampler_f, false, data4);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3fv(sampler_f, false, data9);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4fv(sampler_f, false, data16);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2x3fv(sampler_f, false, data6);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3x2fv(sampler_f, false, data6);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2x4fv(sampler_f, false, data8);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4x2fv(sampler_f, false, data8);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3x4fv(sampler_f, false, data12);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4x3fv(sampler_f, false, data12);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type {WebGLUniformLocation} */ var mat4_v = gl.getUniformLocation(program.getProgram(), 'mat4_v'); // mat4
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if count is greater than 1 and the indicated uniform variable is not an array variable.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2x3fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3x2fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix2x4fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4x2fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix3x4fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.uniformMatrix4x3fv(mat4_v, false, data);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('bind_transform_feedback', 'Invalid gl.bindTransformFeedback() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID[0] = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID[1] = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.TRANSFORM_FEEDBACK.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(-1, tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the transform feedback operation is active on the currently bound transform feedback object, and is not paused.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID[1]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.endTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID[1]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('begin_transform_feedback', 'Invalid gl.beginTransformFeedback() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID[0] = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID[1] = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if primitiveMode is not one of gl.POINTS, gl.LINES, or gl.TRIANGLES.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(-1);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback is already active.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.POINTS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if any binding point used in transform feedback mode does not have a buffer object bound.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                /** @type{WebGLBuffer} */ var dummyBuf = gl.createBuffer()
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, dummyBuf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if no binding points would be used because no program object is active.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if no binding points would be used because the active program object has specified no varying variables to record.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), [], gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.endTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteBuffer(dummyBuf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID[1]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('pause_transform_feedback', 'Invalid gl.pauseTransformFeedback() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID[0] = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID[1] = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the currently bound transform feedback object is not active or is paused.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.endTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID[1]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('resume_transform_feedback', 'Invalid gl.resumeTransformFeedback() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID[0] = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID[1] = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the currently bound transform feedback object is not active or is not paused.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.resumeTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.resumeTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.resumeTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.endTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID[0]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID[1]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('end_transform_feedback', 'Invalid gl.endTransformFeedback() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback is not active.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.endTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.endTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.linkProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                    gl.getTransformFeedbackVarying(null, 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater or equal to the value of gl.TRANSFORM_FEEDBACK_VARYINGS.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                maxTransformFeedbackVaryings = /** @type {number} */ (gl.getProgramParameter(program.getProgram(), gl.TRANSFORM_FEEDBACK_VARYINGS));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                name = gl.getTransformFeedbackVarying(program.getProgram(), maxTransformFeedbackVaryings);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION or gl.INVALID_VALUE is generated program has not been linked.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                name = gl.getTransformFeedbackVarying(programInvalid.getProgram(), 0);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError([gl.INVALID_OPERATION, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('transform_feedback_varyings', 'Invalid gl.transformFeedbackVaryings() usage', gl,
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                    gl.transformFeedbackVaryings(null, tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if bufferMode is gl.SEPARATE_ATTRIBS and count is greater than gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS.');
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                maxTransformFeedbackSeparateAttribs = /** @type {number} */ (gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS));
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.transformFeedbackVaryings(program.getProgram(), tfVarying, gl.SEPARATE_ATTRIBS);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeShaderApiTests.js:                this.expectError(gl.NO_ERROR);
js/tests/gl-vertex-attrib.js:  debug("Checking gl.vertexAttrib.");
js/tests/gl-vertex-attrib.js:  var numVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib1fv(ii, [1]);
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '1');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib1fv(ii, new Float32Array([-1]));
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '-1');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib2fv(ii, [1, 2]);
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '1');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '2');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib2fv(ii, new Float32Array([1, -2]));
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '1');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '-2');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib3fv(ii, [1, 2, 3]);
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '1');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '2');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '3');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib3fv(ii, new Float32Array([1, -2, 3]));
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '1');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '-2');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '3');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib4fv(ii, [1, 2, 3, 4]);
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '1');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '2');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '3');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '4');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib4fv(ii, new Float32Array([1, 2, -3, 4]));
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '1');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '2');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '-3');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '4');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib1f(ii, 5);
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '5');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib2f(ii, 6, 7);
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '6');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '7');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '0');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib3f(ii, 7, 8, 9);
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '7');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '8');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '9');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '1');
js/tests/gl-vertex-attrib.js:    gl.vertexAttrib4f(ii, 6, 7, 8, 9);
js/tests/gl-vertex-attrib.js:    shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Float32Array');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '6');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '7');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '8');
js/tests/gl-vertex-attrib.js:    shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '9');
js/tests/gl-vertex-attrib.js:      gl.vertexAttribI4i(ii, -1, 0, 1, 2);
js/tests/gl-vertex-attrib.js:      shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Int32Array');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '-1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '0');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '2');
js/tests/gl-vertex-attrib.js:      gl.vertexAttribI4ui(ii, 0, 1, 2, 3);
js/tests/gl-vertex-attrib.js:      shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Uint32Array');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '0');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '2');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '3');
js/tests/gl-vertex-attrib.js:      gl.vertexAttribI4iv(ii, [-1, 0, 1, 2]);
js/tests/gl-vertex-attrib.js:      shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Int32Array');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '-1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '0');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '2');
js/tests/gl-vertex-attrib.js:      gl.vertexAttribI4iv(ii, new Int32Array([1, 0, -1, 2]));
js/tests/gl-vertex-attrib.js:      shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Int32Array');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '0');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '-1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '2');
js/tests/gl-vertex-attrib.js:      gl.vertexAttribI4uiv(ii, [0, 1, 2, 3]);
js/tests/gl-vertex-attrib.js:      shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Uint32Array');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '0');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '2');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '3');
js/tests/gl-vertex-attrib.js:      gl.vertexAttribI4uiv(ii, new Uint32Array([0, 2, 1, 3]));
js/tests/gl-vertex-attrib.js:      shouldBeType('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)', 'Uint32Array');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[0]', '0');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[1]', '2');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[2]', '1');
js/tests/gl-vertex-attrib.js:      shouldBe('gl.getVertexAttrib(' + ii + ', gl.CURRENT_VERTEX_ATTRIB)[3]', '3');
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-vertex-attrib.js:  gl.getVertexAttrib(numVertexAttribs, gl.CURRENT_VERTEX_ATTRIB);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib1fv(numVertexAttribs, [1]);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib1fv(numVertexAttribs, new Float32Array([-1]));
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib2fv(numVertexAttribs, [1, 2]);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib2fv(numVertexAttribs, new Float32Array([1, -2]));
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib3fv(numVertexAttribs, [1, 2, 3]);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib3fv(numVertexAttribs, new Float32Array([1, -2, 3]));
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib4fv(numVertexAttribs, [1, 2, 3, 4]);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib4fv(numVertexAttribs, new Float32Array([1, 2, -3, 4]));
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib1f(numVertexAttribs, 5);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib2f(numVertexAttribs, 6, 7);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib3f(numVertexAttribs, 7, 8, 9);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib4f(numVertexAttribs, 6, 7, 8, 9);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4i(numVertexAttribs, -1, 0, 1, 2);
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4ui(numVertexAttribs, 0, 1, 2, 3);
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4iv(numVertexAttribs, [-1, 0, 1, 2]);
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4iv(numVertexAttribs, new Int32Array([1, 0, -1, 2]));
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4uiv(numVertexAttribs, [0, 1, 2, 3]);
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4uiv(numVertexAttribs, new Uint32Array([0, 2, 1, 3]));
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib1fv(numVertexAttribs, []);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib1fv(numVertexAttribs, new Float32Array([]));
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib2fv(numVertexAttribs, [1]);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib2fv(numVertexAttribs, new Float32Array([1]));
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib3fv(numVertexAttribs, [1, 2]);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib3fv(numVertexAttribs, new Float32Array([1, -2]));
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib4fv(numVertexAttribs, [1, 2, 3]);
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:  gl.vertexAttrib4fv(numVertexAttribs, new Float32Array([1, 2, -3]));
js/tests/gl-vertex-attrib.js:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4iv(numVertexAttribs, [-1, 0, 1]);
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4iv(numVertexAttribs, new Int32Array([1, 0, -1]));
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4uiv(numVertexAttribs, [0, 1, 2]);
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-vertex-attrib.js:    gl.vertexAttribI4uiv(numVertexAttribs, new Uint32Array([0, 2, 1]));
js/tests/gl-vertex-attrib.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
deqp/functional/gles3/fboinvalidate/format_02.html:var extention = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/fboinvalidate/sub.html:var extention = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/es3fShaderMatrixTest.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderMatrixTest.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderMatrixTest.js:                var loc = gl.getUniformLocation(programId, "u_in" + inNdx);
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT:        gl.uniform1f(loc, s_constInFloat[inNdx]);                       break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_VEC2:   gl.uniform2fv(loc, s_constInVec2[inNdx]);           break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_VEC3:   gl.uniform3fv(loc, s_constInVec3[inNdx]);           break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_VEC4:   gl.uniform4fv(loc, s_constInVec4[inNdx]);           break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT2:   gl.uniformMatrix2fv (loc, true, s_constInMat2x2[inNdx]);  break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT2X3: gl.uniformMatrix2x3fv(loc, true, s_constInMat2x3[inNdx]); break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT2X4: gl.uniformMatrix2x4fv(loc, true, s_constInMat2x4[inNdx]); break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT3X2: gl.uniformMatrix3x2fv(loc, true, s_constInMat3x2[inNdx]); break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT3:   gl.uniformMatrix3fv (loc, true, s_constInMat3x3[inNdx]);  break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT3X4: gl.uniformMatrix3x4fv(loc, true, s_constInMat3x4[inNdx]); break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT4X2: gl.uniformMatrix4x2fv(loc, true, s_constInMat4x2[inNdx]); break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT4X3: gl.uniformMatrix4x3fv(loc, true, s_constInMat4x3[inNdx]); break;
deqp/functional/gles3/es3fShaderMatrixTest.js:                    case gluShaderUtil.DataType.FLOAT_MAT4:   gl.uniformMatrix4fv (loc, true, s_constInMat4x4[inNdx]);  break;
conformance/more/functions/vertexAttribPointerBadArgs.html:  assert(0 == gl.getError());
conformance/more/functions/vertexAttribPointerBadArgs.html:  var vbo = gl.createBuffer();
conformance/more/functions/vertexAttribPointerBadArgs.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/more/functions/vertexAttribPointerBadArgs.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(4), gl.STATIC_DRAW);
conformance/more/functions/vertexAttribPointerBadArgs.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, -4);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 1200);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 3);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(0, 3, gl.FLOAT, false, -1, 0);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(0, 5, gl.FLOAT, false, 0, 0);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 1, 0);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(0, 3, gl.TEXTURE_2D, false, 0, 0);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(-1, 3, gl.FLOAT, false, 0, 0);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(-8693948, 3, gl.FLOAT, false, 0, 0);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(8693948, 3, gl.FLOAT, false, 0, 0);});
conformance/more/functions/vertexAttribPointerBadArgs.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/vertexAttribPointerBadArgs.html:  //    function(){gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);});
conformance/more/functions/vertexAttribPointerBadArgs.html:      function(){gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 16);});
conformance/more/functions/vertexAttribPointerBadArgs.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/more/functions/vertexAttribPointerBadArgs.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/vertexAttribPointerBadArgs.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/vertexAttribPointerBadArgs.html:  gl.deleteBuffer(vbo);
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isBuffer(gl.createFramebuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isBuffer(gl.createProgram())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isBuffer(gl.createRenderbuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isBuffer(gl.createShader(gl.VERTEX_SHADER))");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isBuffer(gl.createTexture())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isFramebuffer(gl.createBuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isFramebuffer(gl.createProgram())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isFramebuffer(gl.createRenderbuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isFramebuffer(gl.createShader(gl.VERTEX_SHADER))");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isFramebuffer(gl.createTexture())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isProgram(gl.createBuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isProgram(gl.createFramebuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isProgram(gl.createRenderbuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isProgram(gl.createShader(gl.VERTEX_SHADER))");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isProgram(gl.createTexture())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isRenderbuffer(gl.createBuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isRenderbuffer(gl.createFramebuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isRenderbuffer(gl.createProgram())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isRenderbuffer(gl.createShader(gl.VERTEX_SHADER))");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isRenderbuffer(gl.createTexture())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isShader(gl.createBuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isShader(gl.createFramebuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isShader(gl.createProgram())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isShader(gl.createRenderbuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isShader(gl.createTexture())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isTexture(gl.createBuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isTexture(gl.createFramebuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isTexture(gl.createProgram())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isTexture(gl.createRenderbuffer())");
conformance/more/functions/isTestsBadArgs.html:    shouldThrow("gl.isTexture(gl.createShader(gl.VERTEX_SHADER))");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isBuffer(null)",            "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isBuffer(undefined)",       "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isFramebuffer(null)",       "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isFramebuffer(undefined)",  "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isProgram(null)",           "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isProgram(undefined)",      "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isRenderbuffer(null)",      "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isRenderbuffer(undefined)", "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isShader(null)",            "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isShader(undefined)",       "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isTexture(null)",           "false");
conformance/more/functions/isTestsBadArgs.html:    shouldBe("gl.isTexture(undefined)",      "false");
conformance/more/functions/texImage2DHTML.html:var defaultImgUrl = "https://get.webgl.org/conformance-resources/thunderbird-logo-64x64.png";
conformance/more/functions/texImage2DHTML.html:    gl.viewport(0,0,canvas.width,canvas.height);
conformance/more/functions/texImage2DHTML.html:    gl.clearColor(0,0,1,1);
conformance/more/functions/texImage2DHTML.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/more/functions/texImage2DHTML.html:    gl.disable(gl.DEPTH_TEST);
conformance/more/functions/texImage2DHTML.html:    var tex = gl.createTexture();
conformance/more/functions/texImage2DHTML.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/texImage2DHTML.html:    var texCubeMap = gl.createTexture();
conformance/more/functions/texImage2DHTML.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCubeMap);
conformance/more/functions/texImage2DHTML.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/texImage2DHTML.html:    gl.deleteTexture(tex);
conformance/more/functions/texImage2DHTML.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance/more/functions/texImage2DHTML.html:    gl.deleteTexture(texCubeMap);
conformance/more/functions/texImage2DHTML.html:    gl.enable(gl.BLEND);
conformance/more/functions/texImage2DHTML.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
conformance/more/functions/texImage2DHTML.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/more/functions/texImage2DHTML.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/more/functions/texImage2DHTML.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/more/functions/texImage2DHTML.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/more/functions/texImage2DHTML.html:    gl.blendFunc(gl.ONE, gl.ZERO);
conformance/more/functions/texImage2DHTML.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/more/functions/texImage2DHTML.html:    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
conformance/more/functions/texImage2DHTML.html:        gl.TEXTURE_2D,
conformance/more/functions/texImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/more/functions/texImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/more/functions/texImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/more/functions/texImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/more/functions/texImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/more/functions/texImage2DHTML.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/more/functions/texImage2DHTML.html:        assertOk(function(){gl.texImage2D(t, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);});
conformance/more/functions/texImage2DHTML.html:        assertOk(function(){gl.texImage2D(t, 1, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);});
conformance/more/functions/texImage2DHTML.html:      function(){gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);});
conformance/more/functions/texImage2DHTML.html:      function(){gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);});
conformance/rendering/culling.html:    var vertBuf = gl.createBuffer();
conformance/rendering/culling.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
conformance/rendering/culling.html:    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
conformance/rendering/culling.html:    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/culling.html:    gl.uniform4fv(colLoc, col);
conformance/rendering/culling.html:    gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertices.length / 2);
conformance/rendering/culling.html:    gl.clearColor(col[0], col[1], col[2], col[3]);
conformance/rendering/culling.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/culling.html:    var colLoc = gl.getUniformLocation(program, 'col');
conformance/rendering/culling.html:    gl.enableVertexAttribArray(0);
conformance/rendering/culling.html:    gl.enable(gl.CULL_FACE);
conformance/rendering/culling.html:        gl.cullFace(gl[t.cullFace]);
conformance/rendering/culling.html:        gl.frontFace(gl[t.frontFace]);
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "bad transpose 4fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix4fv(fm4, true, [1,0,0,0, 0,2,0,0, 0,0,3,0, 0,0,0,4]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "bad transpose 3fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix3fv(fm3, true, [1,0,0, 0,2,0, 0,0,3]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "bad transpose 2fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix2fv(fm2, true, [1,0, 0,2]);});
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix4fv(588939, false, [1,0,0,0, 0,2,0,0, 0,0,3,0, 0,0,0,4]);});
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix4fv(-588939, false, [1,0,0,0, 0,2,0,0, 0,0,3,0, 0,0,0,4]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "17 values to 4fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix4fv(fm4, false, [0,1,0,0,0, 0,2,0,0, 0,0,3,0, 0,0,0,4]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "5 values to 2fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix2fv(fm2, false, [0,2,1, 2,2]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "10 values to 3fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix3fv(fm3, false, [0,2,2,2, 2,2,2, 2,1,2]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "too few values to 4fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix4fv(fm4, false, [0,0,0, 0,2,0,0, 0,0,3,0, 0,0,0,4]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "too few values to 2fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix2fv(fm2, false, [1, 2,2]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "too few values to 2fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix2fv(fm2, false, []);});
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix2fv(fm2, false, "fm4");});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_VALUE, "too few values to 3fv",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix3fv(fm3, false, [2,2, 2,2,2, 2,1,2]);});
conformance/more/functions/uniformMatrixBadArgs.html:    gl.uniformMatrix4fv(fm4, false, [1,0,0,0, 0,2,0,0, 0,0,3,0, 0,0,0,4]);
conformance/more/functions/uniformMatrixBadArgs.html:    gl.uniformMatrix2fv(fm2, false, [2,1, 2,2]);
conformance/more/functions/uniformMatrixBadArgs.html:    gl.uniformMatrix3fv(fm3, false, [2,2,2, 2,2,2, 2,1,2]);
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "3fv on mat4",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix3fv(fm4, false, [1,0,0, 0,2,0, 0,0,3]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "3fv on mat2",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix3fv(fm2, false, [0,2,1, 0,2,2, 0,0,0]);});
conformance/more/functions/uniformMatrixBadArgs.html:    assertGLError(gl, gl.INVALID_OPERATION, "2fv om mat3",
conformance/more/functions/uniformMatrixBadArgs.html:        function(){gl.uniformMatrix2fv(fm3, false, [2,2, 2,2]);});
conformance/more/functions/uniformMatrixBadArgs.html:             gl.NO_ERROR == checkError(gl, "getUniform loc0"));
conformance/more/functions/uniformMatrixBadArgs.html:             gl.NO_ERROR == checkError(gl, "getUniform loc1"));
conformance/more/functions/uniformMatrixBadArgs.html:             gl.NO_ERROR == checkError(gl, "getUniform loc1"));
conformance/more/functions/uniformMatrixBadArgs.html:      assertGLError(gl, gl.INVALID_VALUE, "set array of first array of 2 matrixes plus 1 value",
conformance/more/functions/uniformMatrixBadArgs.html:  gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
conformance/rendering/draw-with-changing-start-vertex-bug.html:var quadBuffer = gl.createBuffer();
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.bufferData(gl.ARRAY_BUFFER, quadData, gl.STATIC_DRAW);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.enableVertexAttribArray(0);
conformance/rendering/draw-with-changing-start-vertex-bug.html:var testBuffer = gl.createBuffer();
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.bindBuffer(gl.ARRAY_BUFFER, testBuffer);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.bufferData(gl.ARRAY_BUFFER, testData, gl.STATIC_DRAW);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.vertexAttribPointer(1, 1, gl.FLOAT, false, 0, 0);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.enableVertexAttribArray(1);
conformance/rendering/draw-with-changing-start-vertex-bug.html:var expectedBuffer = gl.createBuffer();
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.bindBuffer(gl.ARRAY_BUFFER, expectedBuffer);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.bufferData(gl.ARRAY_BUFFER, testData, gl.DYNAMIC_DRAW);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.vertexAttribPointer(2, 1, gl.FLOAT, false, 0, 0);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.enableVertexAttribArray(2);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/rendering/draw-with-changing-start-vertex-bug.html:gl.drawArrays(gl.TRIANGLES, 1, 6);
conformance/more/functions/vertexAttribPointer.html://   log(gl.getShaderInfoLog(prog.shaders[1]));
conformance/more/functions/vertexAttribPointer.html:  var v = gl.getAttribLocation(sh, 'Vertex');
conformance/more/functions/vertexAttribPointer.html:  var n = gl.getAttribLocation(sh, 'Normal');
conformance/more/functions/vertexAttribPointer.html:  var t = gl.getAttribLocation(sh, 'Tex');
conformance/more/functions/vertexAttribPointer.html:  assert(0 == gl.getError());
conformance/more/functions/vertexAttribPointer.html:  gl.disableVertexAttribArray(v);
conformance/more/functions/vertexAttribPointer.html:  gl.disableVertexAttribArray(n);
conformance/more/functions/vertexAttribPointer.html:  gl.disableVertexAttribArray(t);
conformance/more/functions/vertexAttribPointer.html:  var vbo = gl.createBuffer();
conformance/more/functions/vertexAttribPointer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/more/functions/vertexAttribPointer.html:  gl.bufferData(gl.ARRAY_BUFFER, vertsArr, gl.STATIC_DRAW);
conformance/more/functions/vertexAttribPointer.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/vertexAttribPointer.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 4);
conformance/more/functions/vertexAttribPointer.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/vertexAttribPointer.html:  gl.deleteBuffer(vbo);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('scissor', 'Invalid gl.scissor() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if either width or height is negative.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.scissor(0, 0, -1, 0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.scissor(0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.scissor(0, 0, -1, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('depth_func', 'Invalid gl.depthFunc() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if func is not an accepted value.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.depthFunc(-1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('viewport', 'Invalid gl.viewport() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if either width or height is negative.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.viewport(0, 0, -1, 1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.viewport(0, 0, 1, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.viewport(0, 0, -1, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('stencil_func', 'Invalid gl.stencilFunc() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if func is not one of the eight accepted values.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilFunc(-1, 0, 1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('stencil_func_separate', 'Invalid gl.stencilFuncSeparate() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if face is not gl.FRONT, gl.BACK, or gl.FRONT_AND_BACK.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilFuncSeparate(-1, gl.NEVER, 0, 1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if func is not one of the eight accepted values.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilFuncSeparate(gl.FRONT, -1, 0, 1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('stencil_op', 'Invalid gl.stencilOp() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if sfail, dpfail, or dppass is any value other than the defined symbolic constant values.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilOp(-1, gl.ZERO, gl.REPLACE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilOp(gl.KEEP, -1, gl.REPLACE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilOp(gl.KEEP, gl.ZERO, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('stencil_op_separate', 'Invalid gl.stencilOpSeparate() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if face is any value other than gl.FRONT, gl.BACK, or gl.FRONT_AND_BACK.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilOpSeparate(-1, gl.KEEP, gl.ZERO, gl.REPLACE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if sfail, dpfail, or dppass is any value other than the eight defined symbolic constant values.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilOpSeparate(gl.FRONT, -1, gl.ZERO, gl.REPLACE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilOpSeparate(gl.FRONT, gl.KEEP, -1, gl.REPLACE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.ZERO, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('stencil_mask_separate', 'Invalid gl.stencilMaskSeparate() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if face is not gl.FRONT, gl.BACK, or gl.FRONT_AND_BACK.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.stencilMaskSeparate(-1, 0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('blend_equation', 'Invalid gl.blendEquation() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not gl.FUNC_ADD, gl.FUNC_SUBTRACT, gl.FUNC_REVERSE_SUBTRACT, gl.MAX or gl.MIN.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendEquation(-1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('blend_equation_separate', 'Invalid gl.blendEquationSeparate() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if modeRGB is not gl.FUNC_ADD, gl.FUNC_SUBTRACT, gl.FUNC_REVERSE_SUBTRACT, gl.MAX or gl.MIN.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendEquationSeparate(-1, gl.FUNC_ADD);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if modeAlpha is not gl.FUNC_ADD, gl.FUNC_SUBTRACT, gl.FUNC_REVERSE_SUBTRACT, gl.MAX or gl.MIN.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendEquationSeparate(gl.FUNC_ADD, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('blend_func', 'Invalid gl.blendFunc() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if either sfactor or dfactor is not an accepted value.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendFunc(-1, gl.ONE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendFunc(gl.ONE, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('blend_func_separate', 'Invalid gl.blendFuncSeparate() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if srcRGB, dstRGB, srcAlpha, or dstAlpha is not an accepted value.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendFuncSeparate(-1, gl.ONE, gl.SRC_COLOR, gl.ONE_MINUS_SRC_COLOR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendFuncSeparate(gl.ZERO, -1, gl.SRC_COLOR, gl.ONE_MINUS_SRC_COLOR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendFuncSeparate(gl.ZERO, gl.ONE, -1, gl.ONE_MINUS_SRC_COLOR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.blendFuncSeparate(gl.ZERO, gl.ONE, gl.SRC_COLOR, -1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('cull_face', 'Invalid gl.cullFace() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.cullFace(-1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('front_face', 'Invalid gl.frontFace() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.frontFace(-1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('line_width', 'Invalid gl.lineWidth() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width is less than or equal to 0.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.lineWidth(0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.lineWidth(-1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('begin_query', 'Invalid gl.beginQuery() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            ids[0] = gl.createQuery();
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            ids[1] = gl.createQuery();
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            ids[2] = gl.createQuery();
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(-1, ids[0]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.beginQuery is executed while a query object of the same target is already active.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.ANY_SAMPLES_PASSED, ids[0]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.ANY_SAMPLES_PASSED, ids[1]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            // \note gl.ANY_SAMPLES_PASSED and gl.ANY_SAMPLES_PASSED_CONSERVATIVE alias to the same target for the purposes of this error.
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.ANY_SAMPLES_PASSED_CONSERVATIVE, ids[1]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, ids[1]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, ids[2]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.endQuery(gl.ANY_SAMPLES_PASSED);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:                gl.beginQuery(gl.ANY_SAMPLES_PASSED, null);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the name has since been deleted with gl.deleteQuery.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.deleteQuery(ids[2]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.ANY_SAMPLES_PASSED, ids[2]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if id is the name of an already active query object.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.ANY_SAMPLES_PASSED, ids[0]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, ids[0]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if id refers to an existing query object whose type does not does not match target.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.endQuery(gl.ANY_SAMPLES_PASSED);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, ids[0]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.deleteQuery(ids[0]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.deleteQuery(ids[1]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.deleteQuery(ids[2]);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('end_query', 'Invalid gl.endQuery() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            id = gl.createQuery();
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.endQuery(-1);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.endQuery is executed when a query object of the same target is not active.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.endQuery(gl.ANY_SAMPLES_PASSED);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.beginQuery(gl.ANY_SAMPLES_PASSED, id);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.endQuery(gl.ANY_SAMPLES_PASSED);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.deleteQuery(id);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('fence_sync', 'Invalid gl.fenceSync() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if condition is not gl.SYNC_GPU_COMMANDS_COMPLETE.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.fenceSync(-1, 0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if flags is not zero.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0x0010);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('wait_sync', 'Invalid gl.waitSync() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            /** @type{WebGLSync} */ var sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:                gl.waitSync(null, 0, gl.TIMEOUT_IGNORED);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if flags is not zero.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.waitSync(sync, 0x0010, gl.TIMEOUT_IGNORED);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if timeout is not gl.TIMEOUT_IGNORED.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.waitSync(sync, 0, 0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.deleteSync(sync);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('client_wait_sync', 'Invalid gl.clientWaitSync() usage', gl, function() {
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            /** @type{WebGLSync} */ var sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:                gl.clientWaitSync (null, 0, 0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if flags contains any unsupported flag.');
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.clientWaitSync(sync, 0x00000004, 0);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeFragmentApiTests.js:            gl.deleteSync(sync);
conformance/glsl/misc/glsl-function-nodes.html:    var vertexObject = gl.createBuffer();
conformance/glsl/misc/glsl-function-nodes.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/glsl/misc/glsl-function-nodes.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/glsl/misc/glsl-function-nodes.html:    gl.enableVertexAttribArray(0);
conformance/glsl/misc/glsl-function-nodes.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/glsl/misc/glsl-function-nodes.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/misc/glsl-function-nodes.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/glsl/misc/glsl-function-nodes.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buffer);
conformance/glsl/misc/glsl-function-nodes.html:    if (gl.getError() != gl.NO_ERROR)
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:          case gl.RED:
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:              (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY'));
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.texImage3D(bindingTarget, 0, gl[internalFormat], image.width, image.height, 1 /* depth */, 0,
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        gl.texSubImage3D(bindingTarget, 0, 0, 0, 0, image.width, image.height, 1 /* depth */,
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        runTestOnBindingTarget(image, gl.TEXTURE_3D, program);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        runTestOnBindingTarget(image, gl.TEXTURE_2D_ARRAY, program);
js/tests/tex-image-and-sub-image-3d-with-svg-image.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttrib1f(index, value[0]);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttrib2f(index, value[0], value[1]);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttrib3f(index, value[0], value[1], value[2]);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttrib4f(index, value[0], value[1], value[2], value[3]);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttrib1fv(index, value.slice(0, 1));
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttrib2fv(index, value.slice(0, 2));
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttrib3fv(index, value.slice(0, 3));
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttrib4fv(index, value.slice(0, 4));
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttribI4i(index, v[0], v[1], v[2], v[3]);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttribI4iv(index, v);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttribI4ui(index, v[0], v[1], v[2], v[3]);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.vertexAttribI4uiv(index, v);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    this.m_bufID = gl.createBuffer();
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, this.m_bufID);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(fullscreenQuad), gl.STATIC_DRAW);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:        gl.deleteBuffer(this.m_bufID);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    var positionIndex = gl.getAttribLocation(this.m_program.getProgram(), 'a_position');
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    var valueIndex = gl.getAttribLocation(this.m_program.getProgram(), 'a_value');
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.clearColor(0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.viewport(0, 0, RENDER_SIZE, RENDER_SIZE);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, this.m_bufID);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.vertexAttribPointer(positionIndex, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.enableVertexAttribArray(positionIndex);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fDefaultVertexAttributeTests.js:    gl.disableVertexAttribArray(positionIndex);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:var prog = gl.getParameter(gl.CURRENT_PROGRAM);
conformance/glsl/misc/glsl-long-variable-names.html:var valueLoc = gl.getUniformLocation(prog, "value01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getProgramParameter(prog, gl.ACTIVE_UNIFORMS)", "1");
conformance/glsl/misc/glsl-long-variable-names.html:var activeUniform = gl.getActiveUniform(prog, 0);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("activeUniform.type", "gl.FLOAT");
conformance/glsl/misc/glsl-long-variable-names.html:gl.uniform1f(valueLoc, 1.0);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:var prog = gl.getParameter(gl.CURRENT_PROGRAM);
conformance/glsl/misc/glsl-long-variable-names.html:var redLoc = gl.getUniformLocation(prog, "color01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567[0]");
conformance/glsl/misc/glsl-long-variable-names.html:var greenLoc = gl.getUniformLocation(prog, "color01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567[1]");
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getProgramParameter(prog, gl.ACTIVE_UNIFORMS)", "1");
conformance/glsl/misc/glsl-long-variable-names.html:var activeUniform = gl.getActiveUniform(prog, 0);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("activeUniform.type", "gl.FLOAT");
conformance/glsl/misc/glsl-long-variable-names.html:gl.uniform1f(redLoc, 1.0);
conformance/glsl/misc/glsl-long-variable-names.html:gl.uniform1f(greenLoc, 0.0);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:var prog = gl.getParameter(gl.CURRENT_PROGRAM);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:var prog = gl.getParameter(gl.CURRENT_PROGRAM);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:var prog = gl.getParameter(gl.CURRENT_PROGRAM);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getProgramParameter(prog, gl.ACTIVE_ATTRIBUTES)", "1");
conformance/glsl/misc/glsl-long-variable-names.html:var activeAttrib = gl.getActiveAttrib(prog, 0);
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("activeAttrib.type", "gl.FLOAT_VEC3");
conformance/glsl/misc/glsl-long-variable-names.html:shouldBe("gl.getError()", "gl.NO_ERROR");
conformance/glsl/misc/glsl-long-variable-names.html:    var vertexObject = gl.createBuffer();
conformance/glsl/misc/glsl-long-variable-names.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/glsl/misc/glsl-long-variable-names.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/glsl/misc/glsl-long-variable-names.html:    gl.enableVertexAttribArray(0);
conformance/glsl/misc/glsl-long-variable-names.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/glsl/misc/glsl-long-variable-names.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/glsl/misc/glsl-long-variable-names.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-image.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-image.js:        gl.clearDepth(1);
deqp/functional/gles3/fboinvalidate/target.html:var extention = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/es3fOcclusionQueryTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fOcclusionQueryTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.m_buffer = gl.createBuffer();
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, this.m_buffer);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.vertexAttribPointer(0, ELEMENTS_PER_VERTEX, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    var colorUnif = gl.getUniformLocation(this.m_program.getProgram(), 'u_color');
deqp/functional/gles3/es3fOcclusionQueryTests.js:    var targetW = gl.drawingBufferWidth;
deqp/functional/gles3/es3fOcclusionQueryTests.js:    var targetH = gl.drawingBufferHeight;
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.clearColor(0, 0, 0, 1);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.clearDepth(1);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.clearStencil(0);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.enableVertexAttribArray(0);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.uniform4f(colorUnif, DEPTH_WRITE_COLOR[0], DEPTH_WRITE_COLOR[1], DEPTH_WRITE_COLOR[2], DEPTH_WRITE_COLOR[3]);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(occluderVertices), gl.STATIC_DRAW);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.drawArrays(gl.TRIANGLES, 0, 3 * this.m_numOccludersPerDraw);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.scissor(scissorBoxX, scissorBoxY, scissorBoxW, scissorBoxH);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.clearDepth(0);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.clearColor(DEPTH_CLEAR_COLOR[0], DEPTH_CLEAR_COLOR[1], DEPTH_CLEAR_COLOR[2], DEPTH_CLEAR_COLOR[3]);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.stencilFunc(gl.ALWAYS, 1, 0xFF);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.uniform4f(colorUnif, STENCIL_WRITE_COLOR[0], STENCIL_WRITE_COLOR[1], STENCIL_WRITE_COLOR[2], STENCIL_WRITE_COLOR[3]);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(occluderVertices), gl.STATIC_DRAW);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.drawArrays(gl.TRIANGLES, 0, 3 * this.m_numOccludersPerDraw);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.scissor(scissorBoxX, scissorBoxY, scissorBoxW, scissorBoxH);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.clearStencil(1);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.clearColor(STENCIL_CLEAR_COLOR[0], STENCIL_CLEAR_COLOR[1], STENCIL_CLEAR_COLOR[2], STENCIL_CLEAR_COLOR[3]);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.clear(gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fOcclusionQueryTests.js:                gl.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:        gl.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:        gl.scissor(scissorBoxX, scissorBoxY, scissorBoxW, scissorBoxH);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.m_query = gl.createQuery();
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.beginQuery(this.m_queryMode, this.m_query);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.stencilFunc(gl.EQUAL, 0, 0xFF);
deqp/functional/gles3/es3fOcclusionQueryTests.js:            gl.uniform4f(colorUnif, TARGET_COLOR[0], TARGET_COLOR[1], TARGET_COLOR[2], TARGET_COLOR[3]);
deqp/functional/gles3/es3fOcclusionQueryTests.js:            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(targetVertices), gl.STATIC_DRAW);
deqp/functional/gles3/es3fOcclusionQueryTests.js:            gl.drawArrays(gl.TRIANGLES, 0, 3 * this.m_numTargetsPerDraw);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.endQuery(this.m_queryMode);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    var resultAvailable = /** @type {boolean} */ (gl.getQueryParameter(this.m_query, gl.QUERY_RESULT_AVAILABLE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    var result = /** @type {number} */ (gl.getQueryParameter(this.m_query, gl.QUERY_RESULT));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    gl.deleteQuery(this.m_query);
deqp/functional/gles3/es3fOcclusionQueryTests.js:    if (this.m_queryMode == gl.ANY_SAMPLES_PASSED_CONSERVATIVE) {
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor', 'scissor', 1, 10, 1.6, 1, 1, 0.3, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_write', 'depth_write', 8, 10, 1.6, 1, 7, 0.3, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_clear', 'depth_clear', 5, 10, 1.6, 1, 5, 0.2, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('stencil_write', 'stencil_write', 8, 10, 2.0, 1, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('stencil_clear', 'stencil_clear', 5, 10, 2.0, 1, 3, 0.3, gl.ANY_SAMPLES_PASSED, OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_write', 'scissor_depth_write', 5, 10, 1.6, 2, 5, 0.3, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_clear', 'scissor_depth_clear', 7, 10, 1.6, 2, 5, 1.0, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_stencil_write', 'scissor_stencil_write', 4, 10, 1.6, 2, 5, 0.3, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_stencil_clear', 'scissor_stencil_clear', 4, 10, 1.6, 2, 5, 1.0, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_write_depth_clear', 'depth_write_depth_clear', 7, 10, 1.6, 1, 5, 0.2, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_write_stencil_write', 'depth_write_stencil_write', 8, 10, 1.6, 1, 5, 0.3, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_write_stencil_clear', 'depth_write_stencil_clear', 8, 10, 1.6, 1, 5, 0.3, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_clear_stencil_write', 'depth_clear_stencil_write', 8, 10, 1.6, 1, 5, 0.3, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_clear_stencil_clear', 'depth_clear_stencil_clear', 12, 10, 1.6, 1, 5, 0.2, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('stencil_write_stencil_clear', 'stencil_write_stencil_clear', 5, 10, 2.0, 1, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_write_depth_clear', 'scissor_depth_write_depth_clear', 5, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_write_stencil_write', 'scissor_depth_write_stencil_write', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_write_stencil_clear', 'scissor_depth_write_stencil_clear', 6, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_clear_stencil_write', 'scissor_depth_clear_stencil_write', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_clear_stencil_clear', 'scissor_depth_clear_stencil_clear', 5, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_stencil_write_stencil_clear', 'scissor_stencil_write_stencil_clear', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_write_depth_clear_stencil_write', 'depth_write_depth_clear_stencil_write', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_write_depth_clear_stencil_clear', 'depth_write_depth_clear_stencil_clear', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_write_stencil_write_stencil_clear', 'depth_write_stencil_write_stencil_clear', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_clear_stencil_write_stencil_clear', 'depth_clear_stencil_write_stencil_clear', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_write_depth_clear_stencil_write', 'scissor_depth_write_depth_clear_stencil_write', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_write_depth_clear_stencil_clear', 'scissor_depth_write_depth_clear_stencil_clear', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_write_stencil_write_stencil_clear', 'scissor_depth_write_stencil_write_stencil_clear', 5, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('scissor_depth_clear_stencil_write_stencil_clear', 'scissor_depth_clear_stencil_write_stencil_clear', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('depth_write_depth_clear_stencil_write_stencil_clear', 'depth_write_depth_clear_stencil_write_stencil_clear', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED, OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('all_occluders', 'all_occluders', 7, 10, 1.6, 3, 5, 0.6, gl.ANY_SAMPLES_PASSED, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor', 'conservative_scissor', 1, 10, 1.6, 1, 1, 0.3, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_write', 'conservative_depth_write', 8, 10, 1.6, 1, 7, 0.3, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_clear', 'conservative_depth_clear', 5, 10, 1.6, 1, 5, 0.2, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_stencil_write', 'conservative_stencil_write', 8, 10, 2.0, 1, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_stencil_clear', 'conservative_stencil_clear', 5, 10, 2.0, 1, 3, 0.3, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_write', 'conservative_scissor_depth_write', 5, 10, 1.6, 2, 5, 0.3, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_clear', 'conservative_scissor_depth_clear', 7, 10, 1.6, 2, 5, 1.0, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_stencil_write', 'conservative_scissor_stencil_write', 4, 10, 1.6, 2, 5, 0.3, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_stencil_clear', 'conservative_scissor_stencil_clear', 4, 10, 1.6, 2, 5, 1.0, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_write_depth_clear', 'conservative_depth_write_depth_clear', 7, 10, 1.6, 1, 5, 0.2, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_write_stencil_write', 'conservative_depth_write_stencil_write', 8, 10, 1.6, 1, 5, 0.3, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_write_stencil_clear', 'conservative_depth_write_stencil_clear', 8, 10, 1.6, 1, 5, 0.3, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_clear_stencil_write', 'conservative_depth_clear_stencil_write', 8, 10, 1.6, 1, 5, 0.3, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_clear_stencil_clear', 'conservative_depth_clear_stencil_clear', 12, 10, 1.6, 1, 5, 0.2, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_stencil_write_stencil_clear', 'conservative_stencil_write_stencil_clear', 5, 10, 2.0, 1, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_write_depth_clear', 'conservative_scissor_depth_write_depth_clear', 5, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_write_stencil_write', 'conservative_scissor_depth_write_stencil_write', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_write_stencil_clear', 'conservative_scissor_depth_write_stencil_clear', 6, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_clear_stencil_write', 'conservative_scissor_depth_clear_stencil_write', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_clear_stencil_clear', 'conservative_scissor_depth_clear_stencil_clear', 5, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_stencil_write_stencil_clear', 'conservative_scissor_stencil_write_stencil_clear', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_write_depth_clear_stencil_write', 'conservative_depth_write_depth_clear_stencil_write', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_write_depth_clear_stencil_clear', 'conservative_depth_write_depth_clear_stencil_clear', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_write_stencil_write_stencil_clear', 'conservative_depth_write_stencil_write_stencil_clear', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_clear_stencil_write_stencil_clear', 'conservative_depth_clear_stencil_write_stencil_clear', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_write_depth_clear_stencil_write', 'conservative_scissor_depth_write_depth_clear_stencil_write', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_write_depth_clear_stencil_clear', 'conservative_scissor_depth_write_depth_clear_stencil_clear', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_write_stencil_write_stencil_clear', 'conservative_scissor_depth_write_stencil_write_stencil_clear', 5, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_scissor_depth_clear_stencil_write_stencil_clear', 'conservative_scissor_depth_clear_stencil_write_stencil_clear', 4, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_depth_write_depth_clear_stencil_write_stencil_clear', 'conservative_depth_write_depth_clear_stencil_write_stencil_clear', 7, 10, 1.6, 2, 5, 0.4, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
deqp/functional/gles3/es3fOcclusionQueryTests.js:    this.addChild(new es3fOcclusionQueryTests.OcclusionQueryCase('conservative_all_occluders', 'conservative_all_occluders', 7, 10, 1.6, 3, 5, 0.6, gl.ANY_SAMPLES_PASSED_CONSERVATIVE, OCCLUDER_SCISSOR | OCCLUDER_DEPTH_WRITE | OCCLUDER_DEPTH_CLEAR | OCCLUDER_STENCIL_WRITE | OCCLUDER_STENCIL_CLEAR));
js/tests/gl-object-get-calls.js:      var err = gl.getError();
js/tests/gl-object-get-calls.js:      if (err != gl.INVALID_ENUM) {
js/tests/gl-object-get-calls.js:var bufferTypes = [gl.ARRAY_BUFFER, gl.ELEMENT_ARRAY_BUFFER];
js/tests/gl-object-get-calls.js:  bufferTypes = bufferTypes.concat([gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, gl.PIXEL_PACK_BUFFER, gl.PIXEL_UNPACK_BUFFER, gl.TRANSFORM_FEEDBACK_BUFFER, gl.UNIFORM_BUFFER]);
js/tests/gl-object-get-calls.js:  var buffer = gl.createBuffer();
js/tests/gl-object-get-calls.js:  gl.bindBuffer(bufferType, buffer);
js/tests/gl-object-get-calls.js:  gl.bufferData(bufferType, 16, gl.DYNAMIC_DRAW);
js/tests/gl-object-get-calls.js:  var expression1 = "gl.getBufferParameter(gl." + wtu.glEnumToString(gl, bufferType) + ", gl.BUFFER_SIZE)";
js/tests/gl-object-get-calls.js:  var expression2 = "gl.getBufferParameter(gl." + wtu.glEnumToString(gl, bufferType) + ", gl.BUFFER_USAGE)";
js/tests/gl-object-get-calls.js:  shouldBe(expression2, 'gl.DYNAMIC_DRAW');
js/tests/gl-object-get-calls.js:  testInvalidArgument("getBufferParameter", "parameter", [gl.BUFFER_SIZE, gl.BUFFER_USAGE], function(bufferType) {
js/tests/gl-object-get-calls.js:      return gl.getBufferParameter(bufferType, parameter);
js/tests/gl-object-get-calls.js:  gl.bindBuffer(bufferType, null);
js/tests/gl-object-get-calls.js:      return gl.getBufferParameter(target, gl.BUFFER_SIZE);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  var texture = gl.createTexture();
js/tests/gl-object-get-calls.js:  var anotherTexture = gl.createTexture();
js/tests/gl-object-get-calls.js:  gl.bindTexture(gl.TEXTURE_2D, texture);
js/tests/gl-object-get-calls.js:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE,
js/tests/gl-object-get-calls.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
js/tests/gl-object-get-calls.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
js/tests/gl-object-get-calls.js:  gl.bindTexture(gl.TEXTURE_2D, null);
js/tests/gl-object-get-calls.js:  var framebuffer = gl.createFramebuffer();
js/tests/gl-object-get-calls.js:  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
js/tests/gl-object-get-calls.js:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
js/tests/gl-object-get-calls.js:    gl.bindTexture(gl.TEXTURE_2D, anotherTexture);
js/tests/gl-object-get-calls.js:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE,
js/tests/gl-object-get-calls.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
js/tests/gl-object-get-calls.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
js/tests/gl-object-get-calls.js:    gl.bindTexture(gl.TEXTURE_2D, null);
js/tests/gl-object-get-calls.js:    colorAttachmentsNum = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
js/tests/gl-object-get-calls.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + colorAttachmentsNum - 1, gl.TEXTURE_2D, anotherTexture, 0);
js/tests/gl-object-get-calls.js:  var renderbuffer = gl.createRenderbuffer();
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 2, 2);
js/tests/gl-object-get-calls.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, 2, 2);
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
js/tests/gl-object-get-calls.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
js/tests/gl-object-get-calls.js:  shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
js/tests/gl-object-get-calls.js:  // The for loop tests two color attachments for WebGL 2: the first one (gl.COLOR_ATTACHMENT0)
js/tests/gl-object-get-calls.js:  // and the last one (gl.COLOR_ATTACHMENT0 + gl.MAX_COLOR_ATTACHMENTS - 1).
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.TEXTURE');
js/tests/gl-object-get-calls.js:      shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)', 'texture');
js/tests/gl-object-get-calls.js:      shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)', 'anotherTexture');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)', '0');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)', '0');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE)');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE)');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE)');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)');
js/tests/gl-object-get-calls.js:      shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ' + ii + ', gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER)', '0');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.RENDERBUFFER');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)', 'renderbuffer');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.RENDERBUFFER');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)', 'renderbuffer');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.RENDERBUFFER');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)', 'renderbuffer');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)');
js/tests/gl-object-get-calls.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)');
js/tests/gl-object-get-calls.js:      [ gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING,
js/tests/gl-object-get-calls.js:        gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
js/tests/gl-object-get-calls.js:        return gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT, parameter);
js/tests/gl-object-get-calls.js:  var validTargetsForFBAttachment = [gl.FRAMEBUFFER];
js/tests/gl-object-get-calls.js:    validTargetsForFBAttachment = validTargetsForFBAttachment.concat([gl.READ_FRAMEBUFFER, gl.DRAW_FRAMEBUFFER]);
js/tests/gl-object-get-calls.js:        return gl.getFramebufferAttachmentParameter(target, gl.COLOR_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
js/tests/gl-object-get-calls.js:      gl.COLOR_ATTACHMENT0,
js/tests/gl-object-get-calls.js:      gl.DEPTH_ATTACHMENT,
js/tests/gl-object-get-calls.js:      gl.STENCIL_ATTACHMENT,
js/tests/gl-object-get-calls.js:      gl.DEPTH_STENCIL_ATTACHMENT
js/tests/gl-object-get-calls.js:    for (var ii = 1; ii < gl.getParameter(gl.MAX_COLOR_ATTACHMENTS); ++ii) {
js/tests/gl-object-get-calls.js:      validAttachmentsForFBAttachment[validAttachmentsForFBAttachment.length] = gl.COLOR_ATTACHMENT0 + ii;
js/tests/gl-object-get-calls.js:        return gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, attachment, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
js/tests/gl-object-get-calls.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
js/tests/gl-object-get-calls.js:    shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.FRAMEBUFFER_DEFAULT');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.FRAMEBUFFER_DEFAULT');
js/tests/gl-object-get-calls.js:      shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.FRAMEBUFFER_DEFAULT');
js/tests/gl-object-get-calls.js:      shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.NONE');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)');
js/tests/gl-object-get-calls.js:    shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)');
js/tests/gl-object-get-calls.js:      shouldBeNonZero('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)');
js/tests/gl-object-get-calls.js:      wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:      wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE)');
js/tests/gl-object-get-calls.js:      wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE)');
js/tests/gl-object-get-calls.js:      wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.STENCIL, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING)');
js/tests/gl-object-get-calls.js:          return gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.BACK, parameter);
js/tests/gl-object-get-calls.js:          return gl.getFramebufferAttachmentParameter(target, gl.BACK, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
js/tests/gl-object-get-calls.js:        [ gl.BACK,
js/tests/gl-object-get-calls.js:          gl.DEPTH,
js/tests/gl-object-get-calls.js:          gl.STENCIL
js/tests/gl-object-get-calls.js:          return gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, attachment, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:var standardProgram = gl.createProgram();
js/tests/gl-object-get-calls.js:gl.attachShader(standardProgram, standardVert);
js/tests/gl-object-get-calls.js:gl.attachShader(standardProgram, standardFrag);
js/tests/gl-object-get-calls.js:gl.linkProgram(standardProgram);
js/tests/gl-object-get-calls.js:var shaders = gl.getAttachedShaders(standardProgram);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldThrow('gl.getAttachedShaders(null)');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldThrow('gl.getAttachedShaders(standardVert)');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(standardProgram, gl.DELETE_STATUS)', 'false');
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(standardProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:shouldBe('typeof gl.getProgramParameter(standardProgram, gl.VALIDATE_STATUS)', '"boolean"');
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(standardProgram, gl.ATTACHED_SHADERS)', '2');
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(standardProgram, gl.ACTIVE_ATTRIBUTES)', '2');
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(standardProgram, gl.ACTIVE_UNIFORMS)', '1');
js/tests/gl-object-get-calls.js:  var buffer = gl.createBuffer();
js/tests/gl-object-get-calls.js:  gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buffer);
js/tests/gl-object-get-calls.js:  gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 1024, gl.DYNAMIC_DRAW);
js/tests/gl-object-get-calls.js:  gl.transformFeedbackVaryings(uniformBlockProgram, transformFeedbackVars, gl.INTERLEAVED_ATTRIBS);
js/tests/gl-object-get-calls.js:  gl.linkProgram(uniformBlockProgram);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getProgramParameter(uniformBlockProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getError()', 'gl.NO_ERROR');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getProgramParameter(uniformBlockProgram, gl.ACTIVE_UNIFORM_BLOCKS)', '1');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getProgramParameter(uniformBlockProgram, gl.TRANSFORM_FEEDBACK_VARYINGS)', '2');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getProgramParameter(uniformBlockProgram, gl.TRANSFORM_FEEDBACK_BUFFER_MODE)', 'gl.INTERLEAVED_ATTRIBS');
js/tests/gl-object-get-calls.js:    gl.DELETE_STATUS,
js/tests/gl-object-get-calls.js:    gl.LINK_STATUS,
js/tests/gl-object-get-calls.js:    gl.VALIDATE_STATUS,
js/tests/gl-object-get-calls.js:    gl.ATTACHED_SHADERS,
js/tests/gl-object-get-calls.js:    gl.ACTIVE_ATTRIBUTES,
js/tests/gl-object-get-calls.js:    gl.ACTIVE_UNIFORMS
js/tests/gl-object-get-calls.js:      gl.ACTIVE_UNIFORM_BLOCKS,
js/tests/gl-object-get-calls.js:      gl.TRANSFORM_FEEDBACK_VARYINGS,
js/tests/gl-object-get-calls.js:      gl.TRANSFORM_FEEDBACK_BUFFER_MODE
js/tests/gl-object-get-calls.js:      return gl.getProgramParameter(program, parameter);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_WIDTH)', '2');
js/tests/gl-object-get-calls.js:shouldBe('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_HEIGHT)', '2');
js/tests/gl-object-get-calls.js:shouldBeNonZero('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_INTERNAL_FORMAT)');
js/tests/gl-object-get-calls.js:shouldBeNonZero('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_DEPTH_SIZE)');
js/tests/gl-object-get-calls.js:var colorbuffer = gl.createRenderbuffer();
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 2, 2);
js/tests/gl-object-get-calls.js:shouldBeNonZero('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_RED_SIZE)');
js/tests/gl-object-get-calls.js:shouldBeNonZero('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_GREEN_SIZE)');
js/tests/gl-object-get-calls.js:shouldBeNonZero('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_BLUE_SIZE)');
js/tests/gl-object-get-calls.js:shouldBeNonZero('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_ALPHA_SIZE)');
js/tests/gl-object-get-calls.js:  gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA4, 2, 2);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_SAMPLES)', '4');
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_WIDTH,
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_HEIGHT,
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_INTERNAL_FORMAT,
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_RED_SIZE,
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_GREEN_SIZE,
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_BLUE_SIZE,
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_ALPHA_SIZE,
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_DEPTH_SIZE,
js/tests/gl-object-get-calls.js:    gl.RENDERBUFFER_STENCIL_SIZE
js/tests/gl-object-get-calls.js:  validArrayForRenderbuffer[validArrayForRenderbuffer.length] = gl.RENDERBUFFER_SAMPLES;
js/tests/gl-object-get-calls.js:      return gl.getRenderbufferParameter(gl.RENDERBUFFER, parameter);
js/tests/gl-object-get-calls.js:    [ gl.RENDERBUFFER ],
js/tests/gl-object-get-calls.js:      return gl.getRenderbufferParameter(target, gl.RENDERBUFFER_WIDTH);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getShaderParameter(standardVert, gl.SHADER_TYPE)', 'gl.VERTEX_SHADER');
js/tests/gl-object-get-calls.js:shouldBe('gl.getShaderParameter(standardVert, gl.DELETE_STATUS)', 'false');
js/tests/gl-object-get-calls.js:shouldBe('gl.getShaderParameter(standardVert, gl.COMPILE_STATUS)', 'true');
js/tests/gl-object-get-calls.js:    [ gl.DELETE_STATUS,
js/tests/gl-object-get-calls.js:      gl.COMPILE_STATUS,
js/tests/gl-object-get-calls.js:      gl.SHADER_TYPE
js/tests/gl-object-get-calls.js:      return gl.getShaderParameter(standardVert, parameter);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
js/tests/gl-object-get-calls.js:gl.bindTexture(gl.TEXTURE_2D, texture);
js/tests/gl-object-get-calls.js:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/gl-object-get-calls.js:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/gl-object-get-calls.js:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/gl-object-get-calls.js:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/gl-object-get-calls.js:shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER)', 'gl.NEAREST');
js/tests/gl-object-get-calls.js:shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER)', 'gl.NEAREST');
js/tests/gl-object-get-calls.js:shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S)', 'gl.CLAMP_TO_EDGE');
js/tests/gl-object-get-calls.js:shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T)', 'gl.CLAMP_TO_EDGE');
js/tests/gl-object-get-calls.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL, 0);
js/tests/gl-object-get-calls.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);
js/tests/gl-object-get-calls.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
js/tests/gl-object-get-calls.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL, 10);
js/tests/gl-object-get-calls.js:  gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MAX_LOD, 10);
js/tests/gl-object-get-calls.js:  gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_LOD, 0);
js/tests/gl-object-get-calls.js:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_BASE_LEVEL)', '0');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC)', 'gl.LEQUAL');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE)', 'gl.COMPARE_REF_TO_TEXTURE');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAX_LEVEL)', '10');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAX_LOD)', '10');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_LOD)', '0');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_R)', 'gl.CLAMP_TO_EDGE');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_IMMUTABLE_FORMAT)', 'false');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_IMMUTABLE_LEVELS)', '0');
js/tests/gl-object-get-calls.js:    gl.TEXTURE_MAG_FILTER,
js/tests/gl-object-get-calls.js:    gl.TEXTURE_MIN_FILTER,
js/tests/gl-object-get-calls.js:    gl.TEXTURE_WRAP_S,
js/tests/gl-object-get-calls.js:    gl.TEXTURE_WRAP_T,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_BASE_LEVEL,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_COMPARE_FUNC,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_COMPARE_MODE,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_MAX_LEVEL,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_MAX_LOD,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_MIN_LOD,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_WRAP_R,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_IMMUTABLE_FORMAT,
js/tests/gl-object-get-calls.js:      gl.TEXTURE_IMMUTABLE_LEVELS,
js/tests/gl-object-get-calls.js:      return gl.getTexParameter(gl.TEXTURE_2D, parameter);
js/tests/gl-object-get-calls.js:var validTargetsForTexture = [ gl.TEXTURE_2D, gl.TEXTURE_CUBE_MAP];
js/tests/gl-object-get-calls.js:  validTargetsForTexture = validTargetsForTexture.concat([ gl.TEXTURE_3D, gl.TEXTURE_2D_ARRAY]);
js/tests/gl-object-get-calls.js:      return gl.getTexParameter(target, gl.TEXTURE_MAG_FILTER);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(boolProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:var bvalLoc = gl.getUniformLocation(boolProgram, "bval");
js/tests/gl-object-get-calls.js:var bval2Loc = gl.getUniformLocation(boolProgram, "bval2");
js/tests/gl-object-get-calls.js:var bval3Loc = gl.getUniformLocation(boolProgram, "bval3");
js/tests/gl-object-get-calls.js:var bval4Loc = gl.getUniformLocation(boolProgram, "bval4");
js/tests/gl-object-get-calls.js:gl.useProgram(boolProgram);
js/tests/gl-object-get-calls.js:gl.uniform1i(bvalLoc, 1);
js/tests/gl-object-get-calls.js:gl.uniform2i(bval2Loc, 1, 0);
js/tests/gl-object-get-calls.js:gl.uniform3i(bval3Loc, 1, 0, 1);
js/tests/gl-object-get-calls.js:gl.uniform4i(bval4Loc, 1, 0, 1, 0);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(boolProgram, bvalLoc)', 'true');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(boolProgram, bval2Loc)', '[true, false]');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(boolProgram, bval3Loc)', '[true, false, true]');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(boolProgram, bval4Loc)', '[true, false, true, false]');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(intProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:var ivalLoc = gl.getUniformLocation(intProgram, "ival");
js/tests/gl-object-get-calls.js:var ival2Loc = gl.getUniformLocation(intProgram, "ival2");
js/tests/gl-object-get-calls.js:var ival3Loc = gl.getUniformLocation(intProgram, "ival3");
js/tests/gl-object-get-calls.js:var ival4Loc = gl.getUniformLocation(intProgram, "ival4");
js/tests/gl-object-get-calls.js:gl.useProgram(intProgram);
js/tests/gl-object-get-calls.js:gl.uniform1i(ivalLoc, 1);
js/tests/gl-object-get-calls.js:gl.uniform2i(ival2Loc, 2, 3);
js/tests/gl-object-get-calls.js:gl.uniform3i(ival3Loc, 4, 5, 6);
js/tests/gl-object-get-calls.js:gl.uniform4i(ival4Loc, 7, 8, 9, 10);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(intProgram, ivalLoc)', '1');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(intProgram, ival2Loc)', '[2, 3]');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(intProgram, ival3Loc)', '[4, 5, 6]');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(intProgram, ival4Loc)', '[7, 8, 9, 10]');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(floatProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:var fvalLoc = gl.getUniformLocation(floatProgram, "fval");
js/tests/gl-object-get-calls.js:var fval2Loc = gl.getUniformLocation(floatProgram, "fval2");
js/tests/gl-object-get-calls.js:var fval3Loc = gl.getUniformLocation(floatProgram, "fval3");
js/tests/gl-object-get-calls.js:var fval4Loc = gl.getUniformLocation(floatProgram, "fval4");
js/tests/gl-object-get-calls.js:gl.useProgram(floatProgram);
js/tests/gl-object-get-calls.js:gl.uniform1f(fvalLoc, 11);
js/tests/gl-object-get-calls.js:gl.uniform2f(fval2Loc, 12, 13);
js/tests/gl-object-get-calls.js:gl.uniform3f(fval3Loc, 14, 15, 16);
js/tests/gl-object-get-calls.js:gl.uniform4f(fval4Loc, 17, 18, 19, 20);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(floatProgram, fvalLoc)', '11');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(floatProgram, fval2Loc)', '[12, 13]');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(floatProgram, fval3Loc)', '[14, 15, 16]');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(floatProgram, fval4Loc)', '[17, 18, 19, 20]');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(samplerProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:var s2DValLoc = gl.getUniformLocation(samplerProgram, "s2D");
js/tests/gl-object-get-calls.js:var sCubeValLoc = gl.getUniformLocation(samplerProgram, "sCube");
js/tests/gl-object-get-calls.js:gl.useProgram(samplerProgram);
js/tests/gl-object-get-calls.js:gl.uniform1i(s2DValLoc, 0);
js/tests/gl-object-get-calls.js:gl.uniform1i(sCubeValLoc, 1);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(samplerProgram, s2DValLoc)', '0');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(samplerProgram, sCubeValLoc)', '1');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getProgramParameter(matProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:var mval2Loc = gl.getUniformLocation(matProgram, "mval2");
js/tests/gl-object-get-calls.js:var mval3Loc = gl.getUniformLocation(matProgram, "mval3");
js/tests/gl-object-get-calls.js:var mval4Loc = gl.getUniformLocation(matProgram, "mval4");
js/tests/gl-object-get-calls.js:gl.useProgram(matProgram);
js/tests/gl-object-get-calls.js:gl.uniformMatrix2fv(mval2Loc, false, [1, 2, 3, 4]);
js/tests/gl-object-get-calls.js:gl.uniformMatrix3fv(mval3Loc, false, [5, 6, 7, 8, 9, 10, 11, 12, 13]);
js/tests/gl-object-get-calls.js:gl.uniformMatrix4fv(mval4Loc, false, [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(matProgram, mval2Loc)', '[1, 2, 3, 4]');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(matProgram, mval3Loc)', '[5, 6, 7, 8, 9, 10, 11, 12, 13]');
js/tests/gl-object-get-calls.js:shouldBe('gl.getUniform(matProgram, mval4Loc)', '[14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getProgramParameter(uintProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:  var uvalLoc = gl.getUniformLocation(uintProgram, "uval");
js/tests/gl-object-get-calls.js:  var uval2Loc = gl.getUniformLocation(uintProgram, "uval2");
js/tests/gl-object-get-calls.js:  var uval3Loc = gl.getUniformLocation(uintProgram, "uval3");
js/tests/gl-object-get-calls.js:  var uval4Loc = gl.getUniformLocation(uintProgram, "uval4");
js/tests/gl-object-get-calls.js:  gl.useProgram(uintProgram);
js/tests/gl-object-get-calls.js:  gl.uniform1ui(uvalLoc, 1);
js/tests/gl-object-get-calls.js:  gl.uniform2ui(uval2Loc, 2, 3);
js/tests/gl-object-get-calls.js:  gl.uniform3ui(uval3Loc, 4, 5, 6);
js/tests/gl-object-get-calls.js:  gl.uniform4ui(uval4Loc, 7, 8, 9, 10);
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(uintProgram, uvalLoc)', '1');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(uintProgram, uval2Loc)', '[2, 3]');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(uintProgram, uval3Loc)', '[4, 5, 6]');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(uintProgram, uval4Loc)', '[7, 8, 9, 10]');
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getProgramParameter(matForWebGL2Program, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:  var mval2x3Loc = gl.getUniformLocation(matForWebGL2Program, "mval2x3");
js/tests/gl-object-get-calls.js:  var mval2x4Loc = gl.getUniformLocation(matForWebGL2Program, "mval2x4");
js/tests/gl-object-get-calls.js:  var mval3x2Loc = gl.getUniformLocation(matForWebGL2Program, "mval3x2");
js/tests/gl-object-get-calls.js:  var mval3x4Loc = gl.getUniformLocation(matForWebGL2Program, "mval3x4");
js/tests/gl-object-get-calls.js:  var mval4x2Loc = gl.getUniformLocation(matForWebGL2Program, "mval4x2");
js/tests/gl-object-get-calls.js:  var mval4x3Loc = gl.getUniformLocation(matForWebGL2Program, "mval4x3");
js/tests/gl-object-get-calls.js:  gl.useProgram(matForWebGL2Program);
js/tests/gl-object-get-calls.js:  gl.uniformMatrix2x3fv(mval2x3Loc, false, [1, 2, 3, 4, 5, 6]);
js/tests/gl-object-get-calls.js:  gl.uniformMatrix2x4fv(mval2x4Loc, false, [7, 8, 9, 10, 11, 12, 13, 14]);
js/tests/gl-object-get-calls.js:  gl.uniformMatrix3x2fv(mval3x2Loc, false, [15, 16, 17, 18, 19, 20]);
js/tests/gl-object-get-calls.js:  gl.uniformMatrix3x4fv(mval3x4Loc, false, [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]);
js/tests/gl-object-get-calls.js:  gl.uniformMatrix4x2fv(mval4x2Loc, false, [33, 34, 35, 36, 37, 38, 39, 40]);
js/tests/gl-object-get-calls.js:  gl.uniformMatrix4x3fv(mval4x3Loc, false, [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]);
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(matForWebGL2Program, mval2x3Loc)', '[1, 2, 3, 4, 5, 6]');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(matForWebGL2Program, mval2x4Loc)', '[7, 8, 9, 10, 11, 12, 13, 14]');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(matForWebGL2Program, mval3x2Loc)', '[15, 16, 17, 18, 19, 20]');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(matForWebGL2Program, mval3x4Loc)', '[21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(matForWebGL2Program, mval4x2Loc)', '[33, 34, 35, 36, 37, 38, 39, 40]');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(matForWebGL2Program, mval4x3Loc)', '[41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]');
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getProgramParameter(samplerForWebGL2Program, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:  var s3DValLoc = gl.getUniformLocation(samplerForWebGL2Program, "s3D");
js/tests/gl-object-get-calls.js:  var s2DArrayValLoc = gl.getUniformLocation(samplerForWebGL2Program, "s2DArray");
js/tests/gl-object-get-calls.js:  gl.useProgram(samplerForWebGL2Program);
js/tests/gl-object-get-calls.js:  gl.uniform1i(s3DValLoc, 0);
js/tests/gl-object-get-calls.js:  gl.uniform1i(s2DArrayValLoc, 1);
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(samplerForWebGL2Program, s3DValLoc)', '0');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getUniform(samplerForWebGL2Program, s2DArrayValLoc)', '1');
js/tests/gl-object-get-calls.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:var buffer = gl.createBuffer();
js/tests/gl-object-get-calls.js:gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
js/tests/gl-object-get-calls.js:gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);
js/tests/gl-object-get-calls.js:gl.enableVertexAttribArray(1);
js/tests/gl-object-get-calls.js:gl.vertexAttribPointer(1, 4, gl.FLOAT, false, 0, 0);
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)', 'buffer');
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED)', 'true');
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_SIZE)', '4');
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_STRIDE)', '0');
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_TYPE)', 'gl.FLOAT');
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED)', 'false');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_DIVISOR)', '0');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_INTEGER)', 'false');
js/tests/gl-object-get-calls.js:  gl.vertexAttribDivisor(1, 2);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_DIVISOR)', '2');
js/tests/gl-object-get-calls.js:gl.vertexAttribPointer(1, 4, gl.FLOAT, false, 36, 12);
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_STRIDE)', '36');
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttribOffset(1, gl.VERTEX_ATTRIB_ARRAY_POINTER)', '12');
js/tests/gl-object-get-calls.js:gl.disableVertexAttribArray(1);
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED)', 'false');
js/tests/gl-object-get-calls.js:gl.vertexAttrib4f(1, 5, 6, 7, 8);
js/tests/gl-object-get-calls.js:shouldBe('gl.getVertexAttrib(1, gl.CURRENT_VERTEX_ATTRIB)', '[5, 6, 7, 8]');
js/tests/gl-object-get-calls.js:  gl.bufferData(gl.ARRAY_BUFFER, intArray, gl.DYNAMIC_DRAW);
js/tests/gl-object-get-calls.js:  gl.enableVertexAttribArray(1);
js/tests/gl-object-get-calls.js:  gl.vertexAttribIPointer(1, 4, gl.INT, false, 0, 0);
js/tests/gl-object-get-calls.js:  shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_TYPE)', 'gl.INT');
js/tests/gl-object-get-calls.js:  shouldBe('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_INTEGER)', 'true');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:    gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,
js/tests/gl-object-get-calls.js:    gl.VERTEX_ATTRIB_ARRAY_ENABLED,
js/tests/gl-object-get-calls.js:    gl.VERTEX_ATTRIB_ARRAY_SIZE,
js/tests/gl-object-get-calls.js:    gl.VERTEX_ATTRIB_ARRAY_STRIDE,
js/tests/gl-object-get-calls.js:    gl.VERTEX_ATTRIB_ARRAY_TYPE,
js/tests/gl-object-get-calls.js:    gl.VERTEX_ATTRIB_ARRAY_NORMALIZED,
js/tests/gl-object-get-calls.js:    gl.CURRENT_VERTEX_ATTRIB
js/tests/gl-object-get-calls.js:  validArrayForVertexAttrib[validArrayForVertexAttrib.length] = gl.VERTEX_ATTRIB_ARRAY_DIVISOR;
js/tests/gl-object-get-calls.js:  validArrayForVertexAttrib[validArrayForVertexAttrib.length] = gl.VERTEX_ATTRIB_ARRAY_INTEGER;
js/tests/gl-object-get-calls.js:      return gl.getVertexAttrib(1, parameter);
js/tests/gl-object-get-calls.js:var numVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
js/tests/gl-object-get-calls.js:wtu.shouldGenerateGLError(gl, gl.INVALID_VALUE, 'gl.getVertexAttrib(' + numVertexAttribs + ', gl.CURRENT_VERTEX_ATTRIB)');
js/tests/gl-object-get-calls.js:gl.deleteTexture(texture);
js/tests/gl-object-get-calls.js:shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.NONE');
js/tests/gl-object-get-calls.js:gl.deleteRenderbuffer(renderbuffer);
js/tests/gl-object-get-calls.js:gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION);
js/tests/gl-object-get-calls.js:shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)', 'gl.NONE');
js/tests/gl-object-get-calls.js:gl.deleteBuffer(buffer);
js/tests/gl-object-get-calls.js:shouldBeNull('gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)');
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:    shouldBeNonNull('gl.getInternalformatParameter(gl.RENDERBUFFER, gl.R32I, gl.SAMPLES)');
js/tests/gl-object-get-calls.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-object-get-calls.js:        [ gl.RENDERBUFFER ],
js/tests/gl-object-get-calls.js:            return gl.getInternalformatParameter(target, gl.R32I, gl.SAMPLES);
js/tests/gl-object-get-calls.js:        [ gl.SAMPLES ],
js/tests/gl-object-get-calls.js:            return gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA4, pname);
js/tests/gl-object-get-calls.js:        gl.R8, gl.R8_SNORM, gl.RG8, gl.RG8_SNORM,
js/tests/gl-object-get-calls.js:        gl.RGB8, gl.RGB8_SNORM, gl.RGB565, gl.RGBA4,
js/tests/gl-object-get-calls.js:        gl.RGB5_A1, gl.RGBA8, gl.RGBA8_SNORM, gl.RGB10_A2,
js/tests/gl-object-get-calls.js:        gl.RGB10_A2UI, gl.SRGB8, gl.SRGB8_ALPHA8, gl.R16F,
js/tests/gl-object-get-calls.js:        gl.RG16F, gl.RGB16F, gl.RGBA16F, gl.R32F,
js/tests/gl-object-get-calls.js:        gl.RG32F, gl.RGB32F, gl.RGBA32F, gl.R11F_G11F_B10F,
js/tests/gl-object-get-calls.js:        gl.RGB9_E5, gl.R8I, gl.R8UI, gl.R16I,
js/tests/gl-object-get-calls.js:        gl.R16UI, gl.R32I, gl.R32UI, gl.RG8I,
js/tests/gl-object-get-calls.js:        gl.RG8UI, gl.RG16I, gl.RG16UI, gl.RG32I,
js/tests/gl-object-get-calls.js:        gl.RG32UI, gl.RGB8I, gl.RGB8UI, gl.RGB16I,
js/tests/gl-object-get-calls.js:        gl.RGB16UI, gl.RGB32I, gl.RGB32UI, gl.RGBA8I,
js/tests/gl-object-get-calls.js:        gl.RGBA8UI, gl.RGBA16I, gl.RGBA16UI, gl.RGBA32I,
js/tests/gl-object-get-calls.js:        gl.RGBA32UI, gl.RGB, gl.RGBA, gl.DEPTH_STENCIL, gl.DEPTH_COMPONENT16,
js/tests/gl-object-get-calls.js:        gl.DEPTH_COMPONENT24, gl.DEPTH_COMPONENT32F, gl.DEPTH24_STENCIL8,
js/tests/gl-object-get-calls.js:        gl.DEPTH32F_STENCIL8, gl.STENCIL_INDEX8
js/tests/gl-object-get-calls.js:            return gl.getInternalformatParameter(gl.RENDERBUFFER, internalformat, gl.SAMPLES);
js/tests/gl-object-get-calls.js:    var buffer = gl.createBuffer();
js/tests/gl-object-get-calls.js:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buffer);
js/tests/gl-object-get-calls.js:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 64, gl.DYNAMIC_DRAW);
js/tests/gl-object-get-calls.js:    gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer, 4, 8);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0)', 'buffer');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, 0)', '8');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_START, 0)', '4');
js/tests/gl-object-get-calls.js:    var buffer1 = gl.createBuffer();
js/tests/gl-object-get-calls.js:    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer1);
js/tests/gl-object-get-calls.js:    gl.bufferData(gl.UNIFORM_BUFFER, 64, gl.DYNAMIC_DRAW);
js/tests/gl-object-get-calls.js:    var offsetUniform = gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT);
js/tests/gl-object-get-calls.js:    gl.bindBufferRange(gl.UNIFORM_BUFFER, 1, buffer1, offsetUniform, 8);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1)', 'buffer1');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getIndexedParameter(gl.UNIFORM_BUFFER_SIZE, 1)', '8');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getIndexedParameter(gl.UNIFORM_BUFFER_START, 1)', 'offsetUniform');
js/tests/gl-object-get-calls.js:    gl.bindBufferBase(gl.UNIFORM_BUFFER, 1, null);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, 1)', 'null');
js/tests/gl-object-get-calls.js:        gl.TRANSFORM_FEEDBACK_BUFFER_BINDING,
js/tests/gl-object-get-calls.js:        gl.TRANSFORM_FEEDBACK_BUFFER_SIZE,
js/tests/gl-object-get-calls.js:        gl.TRANSFORM_FEEDBACK_BUFFER_START,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BUFFER_BINDING,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BUFFER_SIZE,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BUFFER_START
js/tests/gl-object-get-calls.js:            return gl.getIndexedParameter(target, 0);
js/tests/gl-object-get-calls.js:    var sampler = gl.createSampler();
js/tests/gl-object-get-calls.js:    gl.samplerParameteri(sampler, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL);
js/tests/gl-object-get-calls.js:    gl.samplerParameteri(sampler, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
js/tests/gl-object-get-calls.js:    gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/gl-object-get-calls.js:    gl.samplerParameterf(sampler, gl.TEXTURE_MAX_LOD, 10);
js/tests/gl-object-get-calls.js:    gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/gl-object-get-calls.js:    gl.samplerParameterf(sampler, gl.TEXTURE_MIN_LOD, 0);
js/tests/gl-object-get-calls.js:    gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
js/tests/gl-object-get-calls.js:    gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/gl-object-get-calls.js:    gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_COMPARE_FUNC)', 'gl.LEQUAL');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_COMPARE_MODE)', 'gl.COMPARE_REF_TO_TEXTURE');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_MAG_FILTER)', 'gl.NEAREST');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_MAX_LOD)', '10');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_MIN_FILTER)', 'gl.NEAREST');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_MIN_LOD)', '0');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_WRAP_R)', 'gl.CLAMP_TO_EDGE');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_WRAP_S)', 'gl.CLAMP_TO_EDGE');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSamplerParameter(sampler, gl.TEXTURE_WRAP_T)', 'gl.CLAMP_TO_EDGE');
js/tests/gl-object-get-calls.js:        gl.TEXTURE_COMPARE_FUNC,
js/tests/gl-object-get-calls.js:        gl.TEXTURE_COMPARE_MODE,
js/tests/gl-object-get-calls.js:        gl.TEXTURE_MAG_FILTER,
js/tests/gl-object-get-calls.js:        gl.TEXTURE_MAX_LOD,
js/tests/gl-object-get-calls.js:        gl.TEXTURE_MIN_FILTER,
js/tests/gl-object-get-calls.js:        gl.TEXTURE_MIN_LOD,
js/tests/gl-object-get-calls.js:        gl.TEXTURE_WRAP_R,
js/tests/gl-object-get-calls.js:        gl.TEXTURE_WRAP_S,
js/tests/gl-object-get-calls.js:        gl.TEXTURE_WRAP_T
js/tests/gl-object-get-calls.js:            return gl.getSamplerParameter(sampler, pname);
js/tests/gl-object-get-calls.js:    var sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSyncParameter(sync, gl.OBJECT_TYPE)', 'gl.SYNC_FENCE');
js/tests/gl-object-get-calls.js:    var sync_status = gl.getSyncParameter(sync, gl.SYNC_STATUS);
js/tests/gl-object-get-calls.js:      case gl.UNSIGNALED:
js/tests/gl-object-get-calls.js:        testPassed('gl.getSyncParameter(sync, gl.SYNC_CONDITION) is gl.UNSIGNALED');
js/tests/gl-object-get-calls.js:      case gl.SIGNALED:
js/tests/gl-object-get-calls.js:        testPassed('gl.getSyncParameter(sync, gl.SYNC_CONDITION) is gl.SIGNALED');
js/tests/gl-object-get-calls.js:        testFailed('gl.getSyncParameter(sync, gl.SYNC_CONDITION) was ' + sync_status +
js/tests/gl-object-get-calls.js:                   ', expected gl.UNSIGNALED or gl.SIGNALED');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSyncParameter(sync, gl.SYNC_CONDITION)', 'gl.SYNC_GPU_COMMANDS_COMPLETE');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getSyncParameter(sync, gl.SYNC_FLAGS)', '0');
js/tests/gl-object-get-calls.js:        gl.OBJECT_TYPE,
js/tests/gl-object-get-calls.js:        gl.SYNC_STATUS,
js/tests/gl-object-get-calls.js:        gl.SYNC_CONDITION,
js/tests/gl-object-get-calls.js:        gl.SYNC_FLAGS
js/tests/gl-object-get-calls.js:            return gl.getSyncParameter(sync, pname);
js/tests/gl-object-get-calls.js:    var query = gl.createQuery();
js/tests/gl-object-get-calls.js:    gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, query);
js/tests/gl-object-get-calls.js:    gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)', 'false');
js/tests/gl-object-get-calls.js:        gl.QUERY_RESULT,
js/tests/gl-object-get-calls.js:        gl.QUERY_RESULT_AVAILABLE
js/tests/gl-object-get-calls.js:            return gl.getQueryParameter(query, pname);
js/tests/gl-object-get-calls.js:    var vertShader = gl.createShader(gl.VERTEX_SHADER);
js/tests/gl-object-get-calls.js:    gl.shaderSource(vertShader, baseVertShader);
js/tests/gl-object-get-calls.js:    gl.compileShader(vertShader);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)', 'true');
js/tests/gl-object-get-calls.js:    var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
js/tests/gl-object-get-calls.js:    gl.shaderSource(fragShader, baseFragShader);
js/tests/gl-object-get-calls.js:    gl.compileShader(fragShader);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)', 'true');
js/tests/gl-object-get-calls.js:    var program = gl.createProgram();
js/tests/gl-object-get-calls.js:    gl.attachShader(program, vertShader);
js/tests/gl-object-get-calls.js:    gl.attachShader(program, fragShader);
js/tests/gl-object-get-calls.js:    gl.linkProgram(program);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)','true');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFragDataLocation(program, "vertexColor")', '-1');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFragDataLocation(program, "modelViewMatrix")', '-1');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFragDataLocation(program, "projectionMatrix")', '-1');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFragDataLocation(program, "position")', '-1');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getFragDataLocation(program, "fragColor")', '0');
js/tests/gl-object-get-calls.js:    gl.linkProgram(program);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getProgramParameter(program, gl.LINK_STATUS)', 'true');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getError()', 'gl.NO_ERROR');
js/tests/gl-object-get-calls.js:    var numActiveUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
js/tests/gl-object-get-calls.js:    var blockIndex = gl.getUniformBlockIndex(program, "Transform");
js/tests/gl-object-get-calls.js:    var types = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_TYPE);
js/tests/gl-object-get-calls.js:    var sizes = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_SIZE);
js/tests/gl-object-get-calls.js:    var blockIndices = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_BLOCK_INDEX);
js/tests/gl-object-get-calls.js:    var offsets = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_OFFSET);
js/tests/gl-object-get-calls.js:    var arrayStrides = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_ARRAY_STRIDE);
js/tests/gl-object-get-calls.js:    var matrixStrides = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_MATRIX_STRIDE);
js/tests/gl-object-get-calls.js:    var rowMajors = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_IS_ROW_MAJOR);
js/tests/gl-object-get-calls.js:      if (types[i] != gl.FLOAT_MAT4 && types[i] != gl.FLOAT_MAT3)
js/tests/gl-object-get-calls.js:        gl.UNIFORM_TYPE,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_SIZE,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BLOCK_INDEX,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_OFFSET,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_ARRAY_STRIDE,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_MATRIX_STRIDE,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_IS_ROW_MAJOR
js/tests/gl-object-get-calls.js:            return gl.getActiveUniforms(program, uniformIndices, pname);
js/tests/gl-object-get-calls.js:    gl.linkProgram(program);
js/tests/gl-object-get-calls.js:    shouldBeTrue('gl.getProgramParameter(program, gl.LINK_STATUS)');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getUniformBlockIndex(program, "Transform")', '0');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getUniformBlockIndex(program, "u_modelViewMatrix")', 'gl.INVALID_INDEX');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getUniformBlockIndex(program, "normal")', 'gl.INVALID_INDEX');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getUniformBlockIndex(program, "u_normal")', 'gl.INVALID_INDEX');
js/tests/gl-object-get-calls.js:    gl.linkProgram(noUniformProgram);
js/tests/gl-object-get-calls.js:    shouldBeTrue('gl.getProgramParameter(noUniformProgram, gl.LINK_STATUS)');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getUniformBlockIndex(noUniformProgram, "u_modelViewProjMatrix")', 'gl.INVALID_INDEX');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getUniformBlockIndex(noUniformProgram, "u_normal")', 'gl.INVALID_INDEX');
js/tests/gl-object-get-calls.js:    gl.linkProgram(program);
js/tests/gl-object-get-calls.js:    shouldBeTrue('gl.getProgramParameter(program, gl.LINK_STATUS)');
js/tests/gl-object-get-calls.js:    shouldBeEqualToString('gl.getActiveUniformBlockName(program, 0)', 'Transform');
js/tests/gl-object-get-calls.js:    shouldBeNull('gl.getActiveUniformBlockName(program, -1)');
js/tests/gl-object-get-calls.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-object-get-calls.js:    shouldBeNull('gl.getActiveUniformBlockName(program, 1)');
js/tests/gl-object-get-calls.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-object-get-calls.js:    shouldBeNull('gl.getActiveUniformBlockName(program, gl.INVALID_INDEX)');
js/tests/gl-object-get-calls.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-object-get-calls.js:    var noLinkProgram = gl.createProgram();
js/tests/gl-object-get-calls.js:    shouldBeFalse('gl.getProgramParameter(noLinkProgram, gl.LINK_STATUS)');
js/tests/gl-object-get-calls.js:    wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.getActiveUniformBlockName(noLinkProgram, 0)');
js/tests/gl-object-get-calls.js:    gl.linkProgram(noUniformProgram);
js/tests/gl-object-get-calls.js:    shouldBeTrue('gl.getProgramParameter(noUniformProgram, gl.LINK_STATUS)');
js/tests/gl-object-get-calls.js:    shouldBeNull('gl.getActiveUniformBlockName(noUniformProgram, -1)');
js/tests/gl-object-get-calls.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-object-get-calls.js:    shouldBeNull('gl.getActiveUniformBlockName(noUniformProgram, 0)');
js/tests/gl-object-get-calls.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-object-get-calls.js:    shouldBeNull('gl.getActiveUniformBlockName(noUniformProgram, gl.INVALID_INDEX)');
js/tests/gl-object-get-calls.js:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
js/tests/gl-object-get-calls.js:    gl.linkProgram(program);
js/tests/gl-object-get-calls.js:    shouldBeTrue('gl.getProgramParameter(program, gl.LINK_STATUS)');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_BINDING)', '0');
js/tests/gl-object-get-calls.js:    gl.uniformBlockBinding(program, 0, 1);
js/tests/gl-object-get-calls.js:    shouldBe('gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_BINDING)', '1');
js/tests/gl-object-get-calls.js:    shouldBeTrue('gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_DATA_SIZE) >= 164');
js/tests/gl-object-get-calls.js:    shouldBe('gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS)', '3');
js/tests/gl-object-get-calls.js:    shouldBeTrue('gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER)');
js/tests/gl-object-get-calls.js:    shouldBeFalse('gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER)');
js/tests/gl-object-get-calls.js:    var indices = gl.getActiveUniformBlockParameter(program, 0, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES);
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BLOCK_BINDING,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BLOCK_DATA_SIZE,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER,
js/tests/gl-object-get-calls.js:        gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
js/tests/gl-object-get-calls.js:            return gl.getActiveUniformBlockParameter(program, 0, pname);
js/tests/gl-object-get-calls.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/rendering/negative-one-index.html:    var vertexObject = gl.createBuffer();
conformance/rendering/negative-one-index.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/rendering/negative-one-index.html:    gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
conformance/rendering/negative-one-index.html:    gl.enableVertexAttribArray(0);
conformance/rendering/negative-one-index.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/rendering/negative-one-index.html:    var indexBuffer = gl.createBuffer();
conformance/rendering/negative-one-index.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
conformance/rendering/negative-one-index.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/rendering/negative-one-index.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/negative-one-index.html:    gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:          case gl.RED:
js/tests/tex-image-and-sub-image-2d-with-canvas.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas.js:          case gl.RG:
js/tests/tex-image-and-sub-image-2d-with-canvas.js:          case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:      if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-canvas.js:              ' with flipY=' + flipY + ' bindingTarget=' + (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP') +
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        var targets = [gl.TEXTURE_2D];
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat], canvas.width, canvas.height, 0,
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                gl.texSubImage2D(targets[tt], 0, 0, 0, gl[pixelFormat], gl[pixelType], canvas);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat], gl[pixelFormat], gl[pixelType], canvas);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        var width = gl.canvas.width;
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        var height = gl.canvas.height;
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            loc = gl.getUniformLocation(program, "face");
js/tests/tex-image-and-sub-image-2d-with-canvas.js:              case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas.js:              case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas.js:              case gl.RGB_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas.js:              case gl.RGBA_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                gl.uniform1i(loc, targets[tt]);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                    gl.texSubImage2D(targets[tt], 0, 0, 0, 1, 1, gl[pixelFormat], gl[pixelType], pixels);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Texture should be backed by floats");
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                    gl.texSubImage2D(targets[tt], 0, 0, 0, 1, 1, gl[pixelFormat], gl[pixelType], pixels);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Texture should be backed by half-floats");
js/tests/tex-image-and-sub-image-2d-with-canvas.js:          var m = wtu.makeImageFromCanvas(gl.canvas);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            if (bindingTarget == gl.TEXTURE_2D) {
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                      gl.deleteTexture(texture);
js/tests/tex-image-and-sub-image-2d-with-canvas.js:        runTexImageTest(gl.TEXTURE_2D).then(function(val) {
js/tests/tex-image-and-sub-image-2d-with-canvas.js:            runTexImageTest(gl.TEXTURE_CUBE_MAP).then(function(val) {
js/tests/tex-image-and-sub-image-2d-with-canvas.js:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
conformance/more/functions/vertexAttribBadArgs.html://   log(gl.getShaderInfoLog(prog.shaders[1]));
conformance/more/functions/vertexAttribBadArgs.html:  var v = gl.getAttribLocation(sh, 'Vertex');
conformance/more/functions/vertexAttribBadArgs.html:  var n = gl.getAttribLocation(sh, 'Normal');
conformance/more/functions/vertexAttribBadArgs.html:  var t = gl.getAttribLocation(sh, 'Tex');
conformance/more/functions/vertexAttribBadArgs.html:  assert(0 == gl.getError());
conformance/more/functions/vertexAttribBadArgs.html:  gl.disableVertexAttribArray(v);
conformance/more/functions/vertexAttribBadArgs.html:  gl.disableVertexAttribArray(n);
conformance/more/functions/vertexAttribBadArgs.html:  gl.disableVertexAttribArray(t);
conformance/more/functions/vertexAttribBadArgs.html:  var vbo = gl.createBuffer();
conformance/more/functions/vertexAttribBadArgs.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/more/functions/vertexAttribBadArgs.html:  gl.bufferData(gl.ARRAY_BUFFER, vertsArr, gl.STATIC_DRAW);
conformance/more/functions/vertexAttribBadArgs.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/vertexAttribBadArgs.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/vertexAttribBadArgs.html:      function(){gl.vertexAttrib1f(-1, 1);});
conformance/more/functions/vertexAttribBadArgs.html:      function(){gl.vertexAttrib1f(-69092342, 1);});
conformance/more/functions/vertexAttribBadArgs.html:      function(){gl.vertexAttrib1f(58928938, 1);});
conformance/more/functions/vertexAttribBadArgs.html:      function(){gl.vertexAttrib1fv(v, [1,2,3,4,5]);});
conformance/more/functions/vertexAttribBadArgs.html:      function(){gl.vertexAttrib1fv(v, []);});
conformance/more/functions/vertexAttribBadArgs.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 3);});
conformance/rendering/point-size.html:gl.disable(gl.BLEND);
conformance/rendering/point-size.html:var vbo = gl.createBuffer();
conformance/rendering/point-size.html:gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/rendering/point-size.html:gl.bufferData(gl.ARRAY_BUFFER, colorOffset + colors.byteLength, gl.STATIC_DRAW);
conformance/rendering/point-size.html:gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
conformance/rendering/point-size.html:gl.bufferSubData(gl.ARRAY_BUFFER, colorOffset, colors);
conformance/rendering/point-size.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/point-size.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/rendering/point-size.html:    gl.enableVertexAttribArray(0);
conformance/rendering/point-size.html:    gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, true, 0, colorOffset);
conformance/rendering/point-size.html:    gl.enableVertexAttribArray(1);
conformance/rendering/point-size.html:    var locPointSize = gl.getUniformLocation(program, 'pointSize');
conformance/rendering/point-size.html:    shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/rendering/point-size.html:    gl.uniform1f(locPointSize, 1.0);
conformance/rendering/point-size.html:    gl.drawArrays(gl.POINTS, 0, vertices.length / 3);
conformance/rendering/point-size.html:    shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/rendering/point-size.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/point-size.html:    var pointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
conformance/rendering/point-size.html:        gl.uniform1f(locPointSize, 2.0);
conformance/rendering/point-size.html:        gl.drawArrays(gl.POINTS, 0, vertices.length / 3);
conformance/rendering/point-size.html:        shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/rendering/point-size.html:shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/rendering/point-size.html:shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform4iv(58882929, [1,2,3,4]);});
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform4iv(-58882929, [1,2,3,4]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "more than 1 value to 1iv",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform1iv(uniInt, [2,3,4,5,6]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "4iv on int",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform4iv(uniInt, [2,3,4,5]);});
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform4iv(uniIV4, [1, 2, 3, 4]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_VALUE, "5 values on 4iv",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform4iv(uniIV4, [1, 2, 3, 4, 5]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "8 values on 4iv",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform4iv(uniIV4, [1, 2, 3, 4, 5, 6, 7, 8]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "3iv on int",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform3iv(uniInt, [2,3,4]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "2iv on int",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform2iv(uniInt, [2,3]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "3iv on 4iv",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform3iv(uniIV4, [4,5,6]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "2iv on 4iv",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform2iv(uniIV4, [5,6]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "1iv on 4iv",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform1iv(uniIV4, [6]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_VALUE, "not enough values",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform1iv(uniInt, []);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "1fv on int",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform1fv(uniInt, [2]);});
conformance/more/functions/uniformiBadArgs.html:        assertGLError(gl, gl.INVALID_OPERATION, "4fv on ivec4",
conformance/more/functions/uniformiBadArgs.html:            function(){gl.uniform4fv(uniIV4, [2,3,4,5]);});
conformance/more/functions/uniformiBadArgs.html:        gl.uniform1iv(uniInt, [2]);
conformance/more/functions/uniformiBadArgs.html:        gl.uniform4iv(uniIV4, [1, 2, 3, 4]);
conformance/more/functions/uniformiBadArgs.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, d);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.uniform1i(gl.getUniformLocation(programID, 'u_sampler'), 0);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.uniform4fv(gl.getUniformLocation(programID, 'u_scale'), this.m_lookupParams.scale);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.uniform4fv(gl.getUniformLocation(programID, 'u_bias'), this.m_lookupParams.bias);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {number} */ var positionLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_position');
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {WebGLUniformLocation} */ var samplerLoc = gl.getUniformLocation(this.m_program.getProgram(), 'u_sampler');
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {WebGLUniformLocation} */ var sizeLoc = gl.getUniformLocation(this.m_program.getProgram(), 'u_texSize');
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {WebGLUniformLocation} */ var lodLoc = gl.getUniformLocation(this.m_program.getProgram(), 'u_lod');
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.uniform1i(samplerLoc, 0);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.clearColor(0.5, 0.5, 0.5, 1.0);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.viewport(0, 0, 1, 1);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {WebGLBuffer} */ var triangleGlBuffer = gl.createBuffer();
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, triangleGlBuffer);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangle), gl.STATIC_DRAW);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.vertexAttribPointer(positionLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.enableVertexAttribArray(positionLoc);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        texId = gl.createTexture();
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.bindTexture(textureTarget, texId);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.texParameteri(textureTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.texParameteri(textureTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.texParameteri(textureTarget, gl.TEXTURE_BASE_LEVEL, testSize.lodBase);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.texParameteri(textureTarget, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.uniform3iv(sizeLoc, testSize.expectedSize);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.uniform1iv(lodLoc, [testSize.lod]);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.texStorage3D(textureTarget, levels, this.m_textureSpec.format, testSize.textureSize[0], testSize.textureSize[1], testSize.textureSize[2]);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.uniform2iv(sizeLoc, testSize.expectedSize.slice(0,2));
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.uniform1iv(lodLoc, [testSize.lod]);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.texStorage2D(textureTarget, levels, this.m_textureSpec.format, testSize.textureSize[0], testSize.textureSize[1]);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.uniform3iv(sizeLoc, expectedSize);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.uniform1iv(lodLoc, [testSize.lod]);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                gl.texStorage3D(textureTarget, levels, this.m_textureSpec.format, testSize.textureSize[0], testSize.textureSize[1], testSize.textureSize[2]);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.drawArrays(gl.TRIANGLES, 0, 3);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.finish();
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.bindTexture(textureTarget, null);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.deleteTexture(texId);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        gl.useProgram(null);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                return gl.TEXTURE_2D;
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                return gl.TEXTURE_CUBE_MAP;
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                return gl.TEXTURE_2D_ARRAY;
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:                return gl.TEXTURE_3D;
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8, 256, 256, 1, 1, samplerLinearNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA16F, 256, 256, 1, 1, samplerLinearNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8I, 256, 256, 1, 1, samplerNearestNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8UI, 256, 256, 1, 1, samplerNearestNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DMipmapFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8, 256, 256, 1, 9, samplerLinearMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DMipmapFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA16F, 256, 256, 1, 9, samplerLinearMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DMipmapInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8I, 256, 256, 1, 9, samplerNearestMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DMipmapUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8UI, 256, 256, 1, 9, samplerNearestMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DShadow = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.DEPTH_COMPONENT16, 256, 256, 1, 9, samplerShadowNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DMipmapShadow = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.DEPTH_COMPONENT16, 256, 256, 1, 9, samplerShadowMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DTexelFetchFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8, 256, 256, 1, 9, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DTexelFetchFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA16F, 256, 256, 1, 9, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DTexelFetchInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8I, 256, 256, 1, 9, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DTexelFetchUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D, gl.RGBA8UI, 256, 256, 1, 9, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.RGBA8, 256, 256, 1, 1, samplerLinearNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.RGBA16F, 256, 256, 1, 1, samplerLinearNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.RGBA8I, 256, 256, 1, 1, samplerNearestNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.RGBA8UI, 256, 256, 1, 1, samplerNearestNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeMipmapFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.RGBA8, 256, 256, 1, 9, samplerLinearMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeMipmapFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.RGBA16F, 128, 128, 1, 8, samplerLinearMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeMipmapInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.RGBA8I, 256, 256, 1, 9, samplerNearestMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeMipmapUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.RGBA8UI, 256, 256, 1, 9, samplerNearestMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeShadow = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.DEPTH_COMPONENT16, 256, 256, 1, 1, samplerShadowNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var texCubeMipmapShadow = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_CUBE_MAP, gl.DEPTH_COMPONENT16, 256, 256, 1, 9, samplerShadowMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8, 128, 128, 4, 1, samplerLinearNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA16F, 128, 128, 4, 1, samplerLinearNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8I, 128, 128, 4, 1, samplerNearestNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8UI, 128, 128, 4, 1, samplerNearestNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayMipmapFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8, 128, 128, 4, 8, samplerLinearMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayMipmapFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA16F, 128, 128, 4, 8, samplerLinearMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayMipmapInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8I, 128, 128, 4, 8, samplerNearestMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayMipmapUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8UI, 128, 128, 4, 8, samplerNearestMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayShadow = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.DEPTH_COMPONENT16, 128, 128, 4, 1, samplerShadowNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayMipmapShadow = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.DEPTH_COMPONENT16, 128, 128, 4, 8, samplerShadowMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayTexelFetchFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8, 128, 128, 4, 8, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayTexelFetchFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA16F, 128, 128, 4, 8, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayTexelFetchInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8I, 128, 128, 4, 8, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex2DArrayTexelFetchUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_2D_ARRAY, gl.RGBA8UI, 128, 128, 4, 8, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8, 64, 32, 32, 1, samplerLinearNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA16F, 64, 32, 32, 1, samplerLinearNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8I, 64, 32, 32, 1, samplerNearestNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8UI, 64, 32, 32, 1, samplerNearestNoMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DMipmapFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8, 64, 32, 32, 7, samplerLinearMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DMipmapFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA16F, 64, 32, 32, 7, samplerLinearMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DMipmapInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8I, 64, 32, 32, 7, samplerNearestMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DMipmapUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8UI, 64, 32, 32, 7, samplerNearestMipmap);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DTexelFetchFixed = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8, 64, 32, 32, 7, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DTexelFetchFloat = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA16F, 64, 32, 32, 7, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DTexelFetchInt = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8I, 64, 32, 32, 7, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        /** @type {es3fShaderTextureFunctionTests.TextureSpec} */ var tex3DTexelFetchUint = new es3fShaderTextureFunctionTests.TextureSpec(es3fShaderTextureFunctionTests.TextureType.TEXTURETYPE_3D, gl.RGBA8UI, 64, 32, 32, 7, samplerTexelFetch);
deqp/functional/gles3/es3fShaderTextureFunctionTests.js:        const canvas = gl.canvas;
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  var pointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  var vs = wtu.loadShaderFromScript(gl, "vs", gl.VERTEX_SHADER);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  var fs = wtu.loadShaderFromScript(gl, "fs", gl.FRAGMENT_SHADER);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.useProgram(program);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.clearColor(0, 0, 0, 1.0);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.disable(gl.DEPTH_TEST);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  var uni = gl.getUniformLocation(program, 'u_pointSize');
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.uniform1f(uni, Math.min(20.0, pointSizeRange[1]));
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  var buffer = gl.createBuffer();
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.enableVertexAttribArray(0);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/point-with-gl-pointcoord-in-fragment-shader.html:  gl.drawArrays(gl.POINTS, 0, 1);
conformance/extensions/webgl-draw-buffers-max-draw-buffers.html:  ext = gl.getExtension("WEBGL_draw_buffers");
conformance/extensions/webgl-draw-buffers-max-draw-buffers.html:    maxDrawBuffers = gl.getParameter(ext.MAX_DRAW_BUFFERS_WEBGL);
conformance/extensions/webgl-draw-buffers-max-draw-buffers.html:  gl.deleteProgram(program);
conformance/extensions/webgl-draw-buffers-max-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-draw-buffers-max-draw-buffers.html:  gl.deleteProgram(program);
conformance/extensions/webgl-draw-buffers-max-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
deqp/functional/gles3/es3fTextureFilteringTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fTextureFilteringTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fTextureFilteringTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fTextureFilteringTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fTextureFilteringTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fTextureFilteringTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fTextureFilteringTests.js:                TEX2D_VIEWPORT_WIDTH, gl.canvas.width
deqp/functional/gles3/es3fTextureFilteringTests.js:                TEX2D_VIEWPORT_HEIGHT, gl.canvas.height
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.deleteTexture(this.m_textures[0].getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.canvas, TEX2D_VIEWPORT_WIDTH,
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.bindTexture(gl.TEXTURE_2D, curCase.texture.getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.m_minFilter
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.m_magFilter
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.m_wrapS);
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.m_wrapT);
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFilteringTests.js:            this.m_minFilter == gl.NEAREST && this.m_magFilter == gl.NEAREST;
deqp/functional/gles3/es3fTextureFilteringTests.js:                if (gl.getParameter(gl.SAMPLES) == 0)
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.deleteTexture(this.m_textures[0].getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.canvas, viewportSize,
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, curCase.texture.getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, this.m_minFilter
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, this.m_magFilter
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this.m_wrapS
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this.m_wrapT
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE,
deqp/functional/gles3/es3fTextureFilteringTests.js:            var isNearestOnly = this.m_minFilter == gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:                this.m_magFilter == gl.NEAREST;
deqp/functional/gles3/es3fTextureFilteringTests.js:            if (gl.getParameter(gl.SAMPLES) == 0)
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.deleteTexture(this.m_gradientTex.getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.deleteTexture(this.m_gridTex.getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.canvas, TEX3D_VIEWPORT_WIDTH,
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.bindTexture(gl.TEXTURE_2D_ARRAY, curCase.texture.getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, this.m_minFilter
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, this.m_magFilter
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, this.m_wrapS);
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, this.m_wrapT);
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFilteringTests.js:        var isNearestOnly = this.m_minFilter == gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:            this.m_magFilter == gl.NEAREST;
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.deleteTexture(this.m_gradientTex.getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.deleteTexture(this.m_gridTex.getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.canvas, TEX3D_VIEWPORT_WIDTH,
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.bindTexture(gl.TEXTURE_3D, curCase.texture.getGLTexture());
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, this.m_minFilter
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(
deqp/functional/gles3/es3fTextureFilteringTests.js:            gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, this.m_magFilter
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, this.m_wrapS);
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, this.m_wrapT);
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, this.m_wrapR);
deqp/functional/gles3/es3fTextureFilteringTests.js:        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureFilteringTests.js:        var isNearestOnly = this.m_minFilter == gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:            this.m_magFilter == gl.NEAREST;
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'clamp', mode: gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'repeat', mode: gl.REPEAT
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'mirror', mode: gl.MIRRORED_REPEAT
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'nearest', mode: gl.NEAREST
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'linear', mode: gl.LINEAR
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'nearest_mipmap_nearest', mode: gl.NEAREST_MIPMAP_NEAREST
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'linear_mipmap_nearest', mode: gl.LINEAR_MIPMAP_NEAREST
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'nearest_mipmap_linear', mode: gl.NEAREST_MIPMAP_LINEAR
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'linear_mipmap_linear', mode: gl.LINEAR_MIPMAP_LINEAR
deqp/functional/gles3/es3fTextureFilteringTests.js:                   name: 'nearest', mode: gl.NEAREST
deqp/functional/gles3/es3fTextureFilteringTests.js:                   name: 'linear', mode: gl.LINEAR
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'rgba16f', format: gl.RGBA16F
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'r11f_g11f_b10f', format: gl.R11F_G11F_B10F
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'rgb9_e5', format: gl.RGB9_E5
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'rgba8', format: gl.RGBA8
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'rgba8_snorm', format: gl.RGBA8_SNORM
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'rgb565', format: gl.RGB565
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'rgba4', format: gl.RGBA4
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'rgb5_a1', format: gl.RGB5_A1
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'srgb8_alpha8', format: gl.SRGB8_ALPHA8
deqp/functional/gles3/es3fTextureFilteringTests.js:                name: 'rgb10_a2', format: gl.RGB10_A2
deqp/functional/gles3/es3fTextureFilteringTests.js:                 var isMipmap = minFilter != gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:                    minFilter != gl.LINEAR;
deqp/functional/gles3/es3fTextureFilteringTests.js:                var magFilter = isMipmap ? gl.LINEAR : minFilter;
deqp/functional/gles3/es3fTextureFilteringTests.js:                var wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                var wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                format = gl.RGBA8;
deqp/functional/gles3/es3fTextureFilteringTests.js:                isMipmap = minFilter != gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:                    minFilter != gl.LINEAR;
deqp/functional/gles3/es3fTextureFilteringTests.js:                magFilter = isMipmap ? gl.LINEAR : minFilter;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                        format = gl.RGBA8;
deqp/functional/gles3/es3fTextureFilteringTests.js:                isMipmap = minFilter != gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:                    minFilter != gl.LINEAR;
deqp/functional/gles3/es3fTextureFilteringTests.js:                magFilter = isMipmap ? gl.LINEAR : minFilter;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                var format = gl.RGBA8;
deqp/functional/gles3/es3fTextureFilteringTests.js:                isMipmap = minFilter != gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:                    minFilter != gl.LINEAR;
deqp/functional/gles3/es3fTextureFilteringTests.js:                magFilter = isMipmap ? gl.LINEAR : minFilter;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                        format = gl.RGBA8;
deqp/functional/gles3/es3fTextureFilteringTests.js:            var filter = isLinear ? gl.LINEAR : gl.NEAREST;
deqp/functional/gles3/es3fTextureFilteringTests.js:                    filter, filter, gl.REPEAT, gl.REPEAT,
deqp/functional/gles3/es3fTextureFilteringTests.js:                    true, gl.RGBA8, 63, 63
deqp/functional/gles3/es3fTextureFilteringTests.js:                isMipmap = minFilter != gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:                    minFilter != gl.LINEAR;
deqp/functional/gles3/es3fTextureFilteringTests.js:                magFilter = isMipmap ? gl.LINEAR : minFilter;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                format = gl.RGBA8;
deqp/functional/gles3/es3fTextureFilteringTests.js:                isMipmap = minFilter != gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:                    minFilter != gl.LINEAR;
deqp/functional/gles3/es3fTextureFilteringTests.js:                magFilter = isMipmap ? gl.LINEAR : minFilter;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                        format = gl.RGBA8;
deqp/functional/gles3/es3fTextureFilteringTests.js:                isMipmap = minFilter != gl.NEAREST &&
deqp/functional/gles3/es3fTextureFilteringTests.js:                    minFilter != gl.LINEAR;
deqp/functional/gles3/es3fTextureFilteringTests.js:                magFilter = isMipmap ? gl.LINEAR : minFilter;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                /** @type {number} */ var wrapR = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                format = gl.RGBA8;
deqp/functional/gles3/es3fTextureFilteringTests.js:                    minFilter != gl.NEAREST && minFilter != gl.LINEAR;
deqp/functional/gles3/es3fTextureFilteringTests.js:                    isMipmap ? gl.LINEAR : minFilter;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                wrapR = gl.REPEAT;
deqp/functional/gles3/es3fTextureFilteringTests.js:                            format = gl.RGBA8;
deqp/functional/gles3/es3fTextureFilteringTests.js:        const canvas = gl.canvas;
deqp/functional/gles3/es3fShaderStructTests.js:// goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderStructTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fShaderStructTests.js:	// var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderStructTests.js:	var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fShaderStructTests.js:			this.m_brickTexture = gluTexture.texture2DFromInternalFormat(gl, gl.RGBA8, 256, 256);
deqp/functional/gles3/es3fShaderStructTests.js:		/** @type {WebGLUniformLocation} */ var loc = gl.getUniformLocation(programID, name);
deqp/functional/gles3/es3fShaderStructTests.js:		gl.uniform2fv(loc, vec);
deqp/functional/gles3/es3fShaderStructTests.js:		/** @type {WebGLUniformLocation} */ var loc = gl.getUniformLocation(programID, name);
deqp/functional/gles3/es3fShaderStructTests.js:		gl.uniform3fv(loc, vec);
deqp/functional/gles3/es3fShaderStructTests.js:		/** @type {WebGLUniformLocation} */ var loc = gl.getUniformLocation(programID, name);
deqp/functional/gles3/es3fShaderStructTests.js:		gl.uniform1i(loc, value);
deqp/functional/gles3/es3fShaderStructTests.js:		/** @type {WebGLUniformLocation} */ var loc = gl.getUniformLocation(programID, name);
deqp/functional/gles3/es3fShaderStructTests.js:		gl.uniform1f(loc, value);
deqp/functional/gles3/es3fShaderStructTests.js:		/** @type {WebGLUniformLocation} */ var loc = gl.getUniformLocation(programID, name);
deqp/functional/gles3/es3fShaderStructTests.js:		gl.uniform1fv(loc, vec);
conformance/extensions/webgl-debug-renderer-info.html:    ext = gl.getExtension("WEBGL_debug_renderer_info");
conformance/extensions/webgl-debug-renderer-info.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/webgl-debug-renderer-info.html:    gl.getParameter(UNMASKED_VENDOR_WEBGL);
conformance/extensions/webgl-debug-renderer-info.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "UNMASKED_VENDOR_WEBGL should not be queryable if extension is disabled");
conformance/extensions/webgl-debug-renderer-info.html:    gl.getParameter(UNMASKED_RENDERER_WEBGL);
conformance/extensions/webgl-debug-renderer-info.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "UNMASKED_RENDERER_WEBGL should not be queryable if extension is disabled");
conformance/extensions/webgl-debug-renderer-info.html:    gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);
conformance/extensions/webgl-debug-renderer-info.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "UNMASKED_VENDOR_WEBGL query should succeed if extension is enable");
conformance/extensions/webgl-debug-renderer-info.html:    gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);
conformance/extensions/webgl-debug-renderer-info.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "UNMASKED_RENDERER_WEBGL query should succeed if extension is enable");
deqp/functional/gles3/fboinvalidate/format_01.html:var extention = gl.getExtension('EXT_color_buffer_float');
conformance/extensions/oes-texture-float-linear.html:    if (!gl.getExtension(extensionTypeName)) {
conformance/extensions/oes-standard-derivatives.html:        ext = gl.getExtension("OES_standard_derivatives");
conformance/extensions/oes-standard-derivatives.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/oes-standard-derivatives.html:    gl.getParameter(FRAGMENT_SHADER_DERIVATIVE_HINT_OES);
conformance/extensions/oes-standard-derivatives.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "FRAGMENT_SHADER_DERIVATIVE_HINT_OES should not be queryable if extension is disabled");
conformance/extensions/oes-standard-derivatives.html:    gl.hint(FRAGMENT_SHADER_DERIVATIVE_HINT_OES, gl.DONT_CARE);
conformance/extensions/oes-standard-derivatives.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "hint should not accept FRAGMENT_SHADER_DERIVATIVE_HINT_OES if extension is disabled");
conformance/extensions/oes-standard-derivatives.html:    gl.getParameter(ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES);
conformance/extensions/oes-standard-derivatives.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "FRAGMENT_SHADER_DERIVATIVE_HINT_OES query should succeed if extension is enabled");
conformance/extensions/oes-standard-derivatives.html:    if (gl.getParameter(ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES) == gl.DONT_CARE) {
conformance/extensions/oes-standard-derivatives.html:    gl.hint(ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, gl.DONT_CARE);
conformance/extensions/oes-standard-derivatives.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "hint should accept FRAGMENT_SHADER_DERIVATIVE_HINT_OES");
conformance/extensions/oes-standard-derivatives.html:        gl.hint(ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, gl[mode]);
conformance/extensions/oes-standard-derivatives.html:        if (gl.getParameter(ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES) != gl[mode]) {
conformance/extensions/oes-standard-derivatives.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/extensions/oes-standard-derivatives.html:    gl.hint(ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, gl.NICEST);
conformance/extensions/oes-standard-derivatives.html:        gl.bindBuffer(gl.ARRAY_BUFFER, quadParameters[0]);
conformance/extensions/oes-standard-derivatives.html:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/extensions/oes-standard-derivatives.html:           1.0, -1.0, br]), gl.STATIC_DRAW);
conformance/extensions/oes-standard-derivatives.html:        gl.vertexAttribPointer(positionLoc, 3, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-standard-derivatives.html:    gl.getExtension("OES_standard_derivatives").myProperty = 2;
conformance/extensions/oes-standard-derivatives.html:    shouldBe('gl.getExtension("OES_standard_derivatives").myProperty', '2');
conformance/more/functions/drawArraysOutOfBounds.html:  gl.disableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.disableVertexAttribArray(n);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.disableVertexAttribArray(t);
conformance/more/functions/drawArraysOutOfBounds.html:  var b = gl.createBuffer();
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, b);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([]), gl.STATIC_DRAW);
conformance/more/functions/drawArraysOutOfBounds.html:  assertOk(function(){gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);})
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "zero size array",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 1);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.deleteBuffer(b);
conformance/more/functions/drawArraysOutOfBounds.html:  var b = gl.createBuffer();
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, b);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([]), gl.STATIC_DRAW);
conformance/more/functions/drawArraysOutOfBounds.html:  assertOk(function(){gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "zero size array",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "zero size array 10000",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 10000);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "zero size array 10000000000000",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 10000000000000);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "zero size array fraction",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 1.6);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative offset",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, -1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "count out of range",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative count",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, -1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "positive count, negative offset",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, -1, 1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative count, positive offset",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 1, -1);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.deleteBuffer(b);
conformance/more/functions/drawArraysOutOfBounds.html:  var b = gl.createBuffer();
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, b);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bufferData(gl.ARRAY_BUFFER, vertsA, gl.STATIC_DRAW);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "3 element array",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 3, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "3 element array 10000",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 10000);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "3 element array 10000000000000",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 10000000000000);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "fractional count",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 3, 1.6);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative offset",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, -1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "count out of range",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 4);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative count",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, -1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "positive count, negative offset",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, -1, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative count, positive offset",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 1, -1);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.deleteBuffer(b);
conformance/more/functions/drawArraysOutOfBounds.html:  bs.push(gl.createBuffer());
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[bs.length-1]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bufferData(gl.ARRAY_BUFFER, vertsA, gl.STATIC_DRAW);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  bs.push(gl.createBuffer());
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[bs.length-1]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bufferData(gl.ARRAY_BUFFER, normalsA, gl.STATIC_DRAW);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(n, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  bs.push(gl.createBuffer());
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[bs.length-1]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bufferData(gl.ARRAY_BUFFER, texcoordsA, gl.STATIC_DRAW);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(t, 2, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(n);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(t);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 1",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 3, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  bs.push(gl.createBuffer());
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[bs.length-1]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verts.concat(verts)), gl.STATIC_DRAW);
conformance/more/functions/drawArraysOutOfBounds.html:  bs.push(gl.createBuffer());
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[bs.length-1]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texcoords.concat(texcoords)), gl.STATIC_DRAW);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[1]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(n, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[2]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(t, 2, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(n);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(t);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 2",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 3, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 3",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 4, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[0]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[3]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(n, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[2]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(t, 2, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(n);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(t);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 4",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 3, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 5",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 4, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[0]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[1]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(n, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[4]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(t, 2, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(n);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(t);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 6",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 3, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 7",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 3, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[3]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[3]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(n, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, bs[2]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(t, 2, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(n);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(t);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 8",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 4, 1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative count",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, -1, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "zero count???",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 4);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "multi array 9",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 1, 4);});
conformance/more/functions/drawArraysOutOfBounds.html:  bs.forEach(function(b){ gl.deleteBuffer(b) });
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "1",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 6, 1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative count",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 2, -1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "3",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 7);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "4",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 1, 6);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "1",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 6, 1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_VALUE, "negative count",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 2, -1);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "2",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 7);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "3",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 1, 6);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo.vbos[0]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "offset too big",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo.vbos[1]);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(sh2.attrib('Vertex'), 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(sh2.attrib('Vertex'));
conformance/more/functions/drawArraysOutOfBounds.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "offset too big 2",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 3);});
conformance/more/functions/drawArraysOutOfBounds.html:  gl.vertexAttribPointer(prog.attrib('Vertex'), 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/drawArraysOutOfBounds.html:  gl.enableVertexAttribArray(prog.attrib('Vertex'));
conformance/more/functions/drawArraysOutOfBounds.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 2);});
conformance/more/functions/drawArraysOutOfBounds.html:  assertGLError(gl, gl.INVALID_OPERATION, "offset too big 3",
conformance/more/functions/drawArraysOutOfBounds.html:      function(){gl.drawArrays(gl.TRIANGLES, 0, 3);});
conformance/extensions/webgl-debug-shaders.html:    ext = gl.getExtension("WEBGL_debug_shaders");
conformance/extensions/webgl-debug-shaders.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/webgl-debug-shaders.html:        type: gl.VERTEX_SHADER
conformance/extensions/webgl-debug-shaders.html:        type: gl.FRAGMENT_SHADER
conformance/extensions/webgl-debug-shaders.html:        program = gl.createProgram();
conformance/extensions/webgl-debug-shaders.html:            shader = gl.createShader(info.type);
conformance/extensions/webgl-debug-shaders.html:            gl.shaderSource(shader, info.source);
conformance/extensions/webgl-debug-shaders.html:            gl.compileShader(shader);
conformance/extensions/webgl-debug-shaders.html:            shouldBeTrue("gl.getShaderParameter(shader, gl.COMPILE_STATUS)");
conformance/extensions/webgl-debug-shaders.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "No gl error should occur");
conformance/extensions/webgl-debug-shaders.html:            gl.attachShader(program, shader);
conformance/extensions/webgl-debug-shaders.html:        gl.linkProgram(program);
conformance/extensions/webgl-debug-shaders.html:        shouldBeTrue("gl.getProgramParameter(program, gl.LINK_STATUS)");
conformance/extensions/webgl-debug-shaders.html:    shader = gl.createShader(gl.FRAGMENT_SHADER);
conformance/extensions/webgl-debug-shaders.html:    gl.shaderSource(shader, "void main() { gl_FragColor = vec4(gl_FragCoord.x, 0.0, 0.0, 1.0); }");
conformance/extensions/webgl-debug-shaders.html:    gl.compileShader(shader);
conformance/extensions/webgl-debug-shaders.html:    shouldBeTrue("gl.getShaderParameter(shader, gl.COMPILE_STATUS)");
conformance/extensions/webgl-debug-shaders.html:    gl.shaderSource(shader, "void main() { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); }");
conformance/extensions/webgl-debug-shaders.html:    gl.compileShader(shader);
conformance/extensions/webgl-debug-shaders.html:    shouldBeTrue("gl.getShaderParameter(shader, gl.COMPILE_STATUS)");
js/tests/tex-image-and-sub-image-3d-with-video.js:          case gl.RED:
js/tests/tex-image-and-sub-image-3d-with-video.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-video.js:              (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY') +
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-3d-with-video.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
js/tests/tex-image-and-sub-image-3d-with-video.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, sourceSubRectangle[0]);
js/tests/tex-image-and-sub-image-3d-with-video.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, sourceSubRectangle[1]);
js/tests/tex-image-and-sub-image-3d-with-video.js:            gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
js/tests/tex-image-and-sub-image-3d-with-video.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-3d-with-video.js:            gl.texSubImage3D(bindingTarget, 0, 0, 0, 0,
js/tests/tex-image-and-sub-image-3d-with-video.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, 0);
js/tests/tex-image-and-sub-image-3d-with-video.js:        var rCoordLocation = gl.getUniformLocation(program, 'uRCoord');
js/tests/tex-image-and-sub-image-3d-with-video.js:        gl.uniform1f(rCoordLocation, rTextureCoord);
js/tests/tex-image-and-sub-image-3d-with-video.js:        wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
js/tests/tex-image-and-sub-image-3d-with-video.js:            if (bindingTarget == gl.TEXTURE_3D) {
js/tests/tex-image-and-sub-image-3d-with-video.js:        runTexImageTest(gl.TEXTURE_3D).then(function(val) {
js/tests/tex-image-and-sub-image-3d-with-video.js:            runTexImageTest(gl.TEXTURE_2D_ARRAY).then(function(val) {
js/tests/tex-image-and-sub-image-3d-with-video.js:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/framework/opengl/gluDrawUtil.js:goog.provide('framework.opengl.gluDrawUtil');
deqp/framework/opengl/gluDrawUtil.js:goog.require('framework.opengl.gluShaderProgram');
deqp/framework/opengl/gluDrawUtil.js:var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/framework/opengl/gluDrawUtil.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/framework/opengl/gluDrawUtil.js:    var type = dataType === undefined ? gl.FLOAT : dataType;
deqp/framework/opengl/gluDrawUtil.js:            var location = gl.getAttribLocation(program, cur.name);
deqp/framework/opengl/gluDrawUtil.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elemBuffer);
deqp/framework/opengl/gluDrawUtil.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
deqp/framework/opengl/gluDrawUtil.js:        gl.drawArrays(gluDrawUtil.getPrimitiveGLType(gl, primitives.type), 0, primitives.numElements);
deqp/framework/opengl/gluDrawUtil.js:  assertMsgOptions(gl.getError() === gl.NO_ERROR, 'drawArrays', false, true);
deqp/framework/opengl/gluDrawUtil.js:        gl.disableVertexAttribArray(vertexArrays[i].location);
deqp/framework/opengl/gluDrawUtil.js:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/framework/opengl/gluDrawUtil.js:    gl.drawElements(mode, primitives.indices.length, gl.UNSIGNED_SHORT, offset);
deqp/framework/opengl/gluDrawUtil.js:        case gluDrawUtil.primitiveType.TRIANGLES: return gl.TRIANGLES;
deqp/framework/opengl/gluDrawUtil.js:        case gluDrawUtil.primitiveType.TRIANGLE_STRIP: return gl.TRIANGLE_STRIP;
deqp/framework/opengl/gluDrawUtil.js:        case gluDrawUtil.primitiveType.TRIANGLE_FAN: return gl.TRIANGLE_FAN;
deqp/framework/opengl/gluDrawUtil.js:        case gluDrawUtil.primitiveType.LINES: return gl.LINES;
deqp/framework/opengl/gluDrawUtil.js:        case gluDrawUtil.primitiveType.LINE_STRIP: return gl.LINE_STRIP;
deqp/framework/opengl/gluDrawUtil.js:        case gluDrawUtil.primitiveType.LINE_LOOP: return gl.LINE_LOOP;
deqp/framework/opengl/gluDrawUtil.js:        case gluDrawUtil.primitiveType.POINTS: return gl.POINTS;
deqp/framework/opengl/gluDrawUtil.js://        case gluDrawUtil.primitiveType.PATCHES: return gl.PATCHES;
deqp/framework/opengl/gluDrawUtil.js:    /** @type {WebGLBuffer} */ var indexObject = gl.createBuffer();
deqp/framework/opengl/gluDrawUtil.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
deqp/framework/opengl/gluDrawUtil.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'bindBuffer', false, true);
deqp/framework/opengl/gluDrawUtil.js:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(primitives.indices), gl.STATIC_DRAW);
deqp/framework/opengl/gluDrawUtil.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'bufferData', false, true);
deqp/framework/opengl/gluDrawUtil.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
deqp/framework/opengl/gluDrawUtil.js:        case gl.BYTE: typedArray = new Int8Array(vertexArray.data); break;
deqp/framework/opengl/gluDrawUtil.js:        case gl.UNSIGNED_BYTE: typedArray = new Uint8Array(vertexArray.data); break;
deqp/framework/opengl/gluDrawUtil.js:        case gl.SHORT: typedArray = new Int16Array(vertexArray.data); break;
deqp/framework/opengl/gluDrawUtil.js:        case gl.UNSIGNED_SHORT: typedArray = new Uint16Array(vertexArray.data); break;
deqp/framework/opengl/gluDrawUtil.js:        case gl.INT: typedArray = new Int32Array(vertexArray.data); break;
deqp/framework/opengl/gluDrawUtil.js:        case gl.UNSIGNED_INT: typedArray = new Uint32Array(vertexArray.data); break;
deqp/framework/opengl/gluDrawUtil.js:    /** @type {WebGLBuffer} */ var buffer = gl.createBuffer();
deqp/framework/opengl/gluDrawUtil.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/framework/opengl/gluDrawUtil.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'bindBuffer', false, true);
deqp/framework/opengl/gluDrawUtil.js:    gl.bufferData(gl.ARRAY_BUFFER, typedArray, gl.STATIC_DRAW);
deqp/framework/opengl/gluDrawUtil.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'bufferData', false, true);
deqp/framework/opengl/gluDrawUtil.js:    gl.enableVertexAttribArray(vertexArray.location);
deqp/framework/opengl/gluDrawUtil.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'enableVertexAttribArray', false, true);
deqp/framework/opengl/gluDrawUtil.js:    if (vertexArray.type === gl.FLOAT) {
deqp/framework/opengl/gluDrawUtil.js:        gl.vertexAttribPointer(vertexArray.location, vertexArray.components, vertexArray.type, false, vertexArray.stride, vertexArray.offset);
deqp/framework/opengl/gluDrawUtil.js:        gl.vertexAttribIPointer(vertexArray.location, vertexArray.components, vertexArray.type, vertexArray.stride, vertexArray.offset);
deqp/framework/opengl/gluDrawUtil.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'vertexAttribPointer', false, true);
deqp/framework/opengl/gluDrawUtil.js:    gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, this.buffer);
deqp/framework/opengl/gluDrawUtil.js:    return gluDrawUtil.vabFromBindingPointAndArrayPointer(bindingPoint, arrayPointer, gl.INT);
deqp/framework/opengl/gluDrawUtil.js:    return gluDrawUtil.vabFromBindingPointAndArrayPointer(bindingPoint, arrayPointer, gl.UNSIGNED_INT);
conformance/more/functions/bufferSubDataBadArgs.html:    var buf = gl.createBuffer();
conformance/more/functions/bufferSubDataBadArgs.html:    var ebuf = gl.createBuffer();
conformance/more/functions/bufferSubDataBadArgs.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/more/functions/bufferSubDataBadArgs.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebuf);
conformance/more/functions/bufferSubDataBadArgs.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STREAM_DRAW);
conformance/more/functions/bufferSubDataBadArgs.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STREAM_DRAW);
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array(0));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ARRAY_BUFFER, 0, 12);});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.TEXTURE_2D, 0, new Float32Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ARRAY_BUFFER, 0, [1,2,3]);});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Float32Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, -1, new Uint16Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 24, new Uint16Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 2400000, new Uint16Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 19, new Uint16Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint16Array(data.concat([1])));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 18, new Uint16Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint16Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/bufferSubDataBadArgs.html:      function(){gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance/more/functions/bufferSubDataBadArgs.html:        function(){gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, new Uint16Array([1,2,3]));});
conformance/more/functions/bufferSubDataBadArgs.html:    gl.deleteBuffer(buf);
conformance/more/functions/bufferSubDataBadArgs.html:    gl.deleteBuffer(ebuf);
deqp/framework/opengl/gluPixelTransfer.js:goog.provide('framework.opengl.gluPixelTransfer');
deqp/framework/opengl/gluPixelTransfer.js:goog.require('framework.opengl.gluTextureUtil');
deqp/framework/opengl/gluPixelTransfer.js:var gluPixelTransfer = framework.opengl.gluPixelTransfer;
deqp/framework/opengl/gluPixelTransfer.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
conformance/more/functions/copyTexSubImage2D.html:  var tex = gl.createTexture();
conformance/more/functions/copyTexSubImage2D.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/copyTexSubImage2D.html:  var texCubeMap = gl.createTexture();
conformance/more/functions/copyTexSubImage2D.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCubeMap);
conformance/more/functions/copyTexSubImage2D.html:  gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/copyTexSubImage2D.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance/more/functions/copyTexSubImage2D.html:  gl.deleteTexture(tex);
conformance/more/functions/copyTexSubImage2D.html:  gl.deleteTexture(texCubeMap);
conformance/more/functions/copyTexSubImage2D.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0,16,16,0);
conformance/more/functions/copyTexSubImage2D.html:  gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0,1,1);
conformance/more/functions/copyTexSubImage2D.html:  gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0,2,1);
conformance/more/functions/copyTexSubImage2D.html:  gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0,1,2);
conformance/more/functions/copyTexSubImage2D.html:  gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 0,0,16,16);
conformance/more/functions/copyTexSubImage2D.html:  gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0, 15,15,1,1);
conformance/more/functions/copyTexSubImage2D.html:  gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 1,1, 0,0,15,15);
conformance/more/functions/copyTexSubImage2D.html:  gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 15,15, 0,0,1,1);
conformance/more/functions/copyTexSubImage2D.html:    gl.TEXTURE_2D,
conformance/more/functions/copyTexSubImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/more/functions/copyTexSubImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/more/functions/copyTexSubImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/more/functions/copyTexSubImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/more/functions/copyTexSubImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/more/functions/copyTexSubImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/more/functions/copyTexSubImage2D.html:        gl.copyTexImage2D(t, 0, gl.RGBA, 0,0,1,1,0);
conformance/more/functions/copyTexSubImage2D.html:        gl.copyTexSubImage2D(t, 0, 0,0,0,0,1,1);
conformance/more/functions/copyTexSubImage2D.html:    gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/more/functions/copyTexSubImage2D.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/more/functions/copyTexSubImage2D.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/more/functions/copyTexSubImage2D.html:    gl.clearColor(0.0, 0.0, 0.0, 0.0);
conformance/more/functions/copyTexSubImage2D.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/more/functions/copyTexSubImage2D.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, document.getElementById('gl'));
conformance/more/functions/copyTexSubImage2D.html:    gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/more/functions/copyTexSubImage2D.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/more/functions/copyTexSubImage2D.html:    gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0,0,0,0,16,16);
conformance/more/functions/copyTexSubImage2D.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/more/functions/copyTexSubImage2D.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/more/functions/copyTexSubImage2D.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/more/functions/copyTexSubImage2D.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/more/functions/copyTexSubImage2D.html:    gl.clearColor(0.0, 0.0, 1.0, 1.0);
conformance/more/functions/copyTexSubImage2D.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/more/functions/copyTexSubImage2D.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/more/functions/copyTexSubImage2D.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/rendering/triangle.html:    var vertexObject = gl.createBuffer();
conformance/rendering/triangle.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/rendering/triangle.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/rendering/triangle.html:    gl.enableVertexAttribArray(0);
conformance/rendering/triangle.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/rendering/triangle.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/triangle.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/more/functions/copyTexImage2D.html:  var tex = gl.createTexture();
conformance/more/functions/copyTexImage2D.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/copyTexImage2D.html:  var texCubeMap = gl.createTexture();
conformance/more/functions/copyTexImage2D.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCubeMap);
conformance/more/functions/copyTexImage2D.html:  gl.bindTexture(gl.TEXTURE_2D, null);
conformance/more/functions/copyTexImage2D.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance/more/functions/copyTexImage2D.html:  gl.deleteTexture(tex);
conformance/more/functions/copyTexImage2D.html:  gl.deleteTexture(texCubeMap);
conformance/more/functions/copyTexImage2D.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0,1,1,0);
conformance/more/functions/copyTexImage2D.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0,2,1,0);
conformance/more/functions/copyTexImage2D.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0,1,2,0);
conformance/more/functions/copyTexImage2D.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0,16,16,0);
conformance/more/functions/copyTexImage2D.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 15,15,1,1,0);
conformance/more/functions/copyTexImage2D.html:    gl.TEXTURE_2D,
conformance/more/functions/copyTexImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/more/functions/copyTexImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/more/functions/copyTexImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/more/functions/copyTexImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/more/functions/copyTexImage2D.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/more/functions/copyTexImage2D.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/more/functions/copyTexImage2D.html:    assertOk(function(){gl.copyTexImage2D(t, 0, gl.RGBA, 0,0,1,1,0);});
conformance/more/functions/copyTexImage2D.html:    gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/more/functions/copyTexImage2D.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/more/functions/copyTexImage2D.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/more/functions/copyTexImage2D.html:    gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0,0,16,16,0);
conformance/more/functions/copyTexImage2D.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/more/functions/copyTexImage2D.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/more/functions/copyTexImage2D.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/more/functions/copyTexImage2D.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/more/functions/copyTexImage2D.html:    gl.clearColor(0.0, 0.0, 1.0, 1.0);
conformance/more/functions/copyTexImage2D.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/more/functions/copyTexImage2D.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/more/functions/copyTexImage2D.html:    gl.readPixels(0,0,1,1,gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/extensions/oes-texture-float.html:  if (!gl.getExtension("OES_texture_float")) {
conformance/extensions/oes-texture-float.html:      runTextureCreationTest(testProgram, true, gl.RGBA, 4, [10000, 10000, 10000, 10000]);
conformance/extensions/oes-texture-float.html:      runTextureCreationTest(testProgram, true, gl.RGB, 3, [10000, 10000, 10000, 1]);
conformance/extensions/oes-texture-float.html:      runTextureCreationTest(testProgram, true, gl.LUMINANCE, 1, [10000, 10000, 10000, 1]);
conformance/extensions/oes-texture-float.html:      runTextureCreationTest(testProgram, true, gl.ALPHA, 1, [0, 0, 0, 10000]);
conformance/extensions/oes-texture-float.html:      runTextureCreationTest(testProgram, true, gl.LUMINANCE_ALPHA, 2, [10000, 10000, 10000, 10000]);
conformance/extensions/oes-texture-float.html:      runRenderTargetAndReadbackTest(testProgram, gl.RGBA, 4, [10000, 10000, 10000, 10000], 0);
conformance/extensions/oes-texture-float.html:      runRenderTargetAndReadbackTest(testProgram, gl.RGB, 3, [10000, 10000, 10000, 1], 0);
conformance/extensions/oes-texture-float.html:      runRenderTargetAndReadbackTest(testProgram, gl.RGBA, 4, [10000, 10000, 10000, 10000], 1);
conformance/extensions/oes-texture-float.html:      runRenderTargetAndReadbackTest(testProgram, gl.RGBA, 4, [10000, 10000, 10000, 10000], 0.5);
conformance/extensions/oes-texture-float.html:    var texture = gl.createTexture();
conformance/extensions/oes-texture-float.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/extensions/oes-texture-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/oes-texture-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/oes-texture-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/oes-texture-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/oes-texture-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texture parameter setup should succeed");
conformance/extensions/oes-texture-float.html:    var format = opt_format || gl.RGBA;
conformance/extensions/oes-texture-float.html:    gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, gl.FLOAT, data);
conformance/extensions/oes-texture-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "floating-point texture allocation must be disallowed if OES_texture_float isn't enabled");
conformance/extensions/oes-texture-float.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "floating-point texture allocation should succeed if OES_texture_float is enabled");
conformance/extensions/oes-texture-float.html:    gl.uniform4fv(gl.getUniformLocation(testProgram, "subtractor"), subtractor);
conformance/extensions/oes-texture-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/oes-texture-float.html:    gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, gl.FLOAT, null);
conformance/extensions/oes-texture-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "floating-point texture allocation should succeed if OES_texture_float is enabled");
conformance/extensions/oes-texture-float.html:    var fbo = gl.createFramebuffer();
conformance/extensions/oes-texture-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/extensions/oes-texture-float.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/extensions/oes-texture-float.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/extensions/oes-texture-float.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/extensions/oes-texture-float.html:        gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/extensions/oes-texture-float.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height * texSubImageCover, format, gl.FLOAT, data);
conformance/extensions/oes-texture-float.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D should succeed if OES_texture_float is enabled");
conformance/extensions/oes-texture-float.html:        gl.bindTexture(gl.TEXTURE_2D, null);
conformance/extensions/oes-texture-float.html:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/extensions/oes-texture-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "rendering to floating-point texture should succeed");
conformance/extensions/oes-texture-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/oes-texture-float.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/extensions/oes-texture-float.html:    gl.useProgram(testProgram);
conformance/extensions/oes-texture-float.html:    gl.uniform1i(gl.getUniformLocation(testProgram, "tex"), 0);
conformance/extensions/oes-texture-float.html:    gl.uniform4fv(gl.getUniformLocation(testProgram, "subtractor"), subtractor);
conformance/extensions/oes-texture-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "rendering from floating-point texture should succeed");
conformance/extensions/oes-texture-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/extensions/oes-texture-float.html:    var implFormat = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);
conformance/extensions/oes-texture-float.html:    var implType = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);
conformance/extensions/oes-texture-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "getParameter of IMPLEMENTATION_COLOR_READ_{FORMAT|TYPE} should succeed");
conformance/extensions/oes-texture-float.html:    if ((implFormat == gl.RGBA || implFormat == gl.RGB) && implType == gl.FLOAT) {
conformance/extensions/oes-texture-float.html:    var arraySize = (implFormat == gl.RGBA) ? 4 : 3
conformance/extensions/oes-texture-float.html:    gl.readPixels(0, 0, 1, 1, implFormat, implType , buf);
conformance/extensions/oes-texture-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readPixels from floating-point renderbuffer should succeed");
conformance/extensions/oes-texture-float.html:    gl.getExtension("OES_texture_float").myProperty = 2;
conformance/extensions/oes-texture-float.html:    shouldBe('gl.getExtension("OES_texture_float").myProperty', '2');
conformance/rendering/more-than-65536-indices.html:gl.bindBuffer(gl.ARRAY_BUFFER, bufferObjects[0]);
conformance/rendering/more-than-65536-indices.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/rendering/more-than-65536-indices.html:       1, -1]), gl.STATIC_DRAW);
conformance/rendering/more-than-65536-indices.html:gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/more-than-65536-indices.html:gl.bindBuffer(gl.ARRAY_BUFFER, bufferObjects[1]);
conformance/rendering/more-than-65536-indices.html:gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array([
conformance/rendering/more-than-65536-indices.html:      0, 255, 0, 255]), gl.STATIC_DRAW);
conformance/rendering/more-than-65536-indices.html:gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, true, 0, 0);
conformance/rendering/more-than-65536-indices.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after program setup");
conformance/rendering/more-than-65536-indices.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after creating texture");
conformance/rendering/more-than-65536-indices.html:var indexBuffer = gl.createBuffer();
conformance/rendering/more-than-65536-indices.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
conformance/rendering/more-than-65536-indices.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setting up indices");
conformance/rendering/more-than-65536-indices.html:  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/rendering/more-than-65536-indices.html:  gl.drawElements(gl[mode], numPoints - (skip + 1) * 6, gl.UNSIGNED_BYTE, skip * 6);
conformance/rendering/more-than-65536-indices.html:  gl.drawElements(gl[mode], numPoints, gl.UNSIGNED_BYTE, 0);
conformance/rendering/more-than-65536-indices.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
deqp/functional/gles3/es3fTextureStateQuery.js:    this.m_texture = gl.createTexture();
deqp/functional/gles3/es3fTextureStateQuery.js:    gl.bindTexture(this.m_textureTarget, this.m_texture);
deqp/functional/gles3/es3fTextureStateQuery.js:    gl.bindTexture(this.m_textureTarget, null);
deqp/functional/gles3/es3fTextureStateQuery.js:    gl.deleteTexture(this.m_texture);
deqp/functional/gles3/es3fTextureStateQuery.js:    this.check(glsStateQuery.compare(gl.isTexture(this.m_texture), true), 'gl.isTexture() should have returned true');
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.texParameteri(this.m_textureTarget, this.m_valueName, this.m_valueRange[ndx]);
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.texParameterf(this.m_textureTarget, this.m_valueName, this.m_valueRange[ndx]);
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.texParameterf(this.m_textureTarget, this.m_lodTarget, ref);
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.texParameteri(this.m_textureTarget, this.m_lodTarget, ref);
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.texParameteri(this.m_textureTarget, this.m_levelTarget, ref);
deqp/functional/gles3/es3fTextureStateQuery.js:            gl.texParameterf(this.m_textureTarget, this.m_levelTarget, ref + nonSignificantOffsets[i]);
deqp/functional/gles3/es3fTextureStateQuery.js:    this.check(glsStateQuery.verifyTexture(this.m_textureTarget, gl.TEXTURE_IMMUTABLE_LEVELS, 0));
deqp/functional/gles3/es3fTextureStateQuery.js:        var textureID = gl.createTexture();
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.bindTexture(this.m_textureTarget, textureID);
deqp/functional/gles3/es3fTextureStateQuery.js:        if (this.m_textureTarget == gl.TEXTURE_2D_ARRAY || this.m_textureTarget == gl.TEXTURE_3D)
deqp/functional/gles3/es3fTextureStateQuery.js:            gl.texStorage3D(this.m_textureTarget, level, gl.RGB8, 256, 256, 256);
deqp/functional/gles3/es3fTextureStateQuery.js:            gl.texStorage2D(this.m_textureTarget, level, gl.RGB8, 256, 256);
deqp/functional/gles3/es3fTextureStateQuery.js:        this.check(glsStateQuery.verifyTexture(this.m_textureTarget, gl.TEXTURE_IMMUTABLE_LEVELS, level));
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.deleteTexture(textureID);
deqp/functional/gles3/es3fTextureStateQuery.js:    this.check(glsStateQuery.verifyTexture(this.m_textureTarget, gl.TEXTURE_IMMUTABLE_LEVELS, 0));
deqp/functional/gles3/es3fTextureStateQuery.js:        var textureID = gl.createTexture();
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.bindTexture(this.m_textureTarget, textureID);
deqp/functional/gles3/es3fTextureStateQuery.js:        if (this.m_textureTarget == gl.TEXTURE_2D_ARRAY || this.m_textureTarget == gl.TEXTURE_3D)
deqp/functional/gles3/es3fTextureStateQuery.js:            gl.texStorage3D(this.m_textureTarget, 1, format, 32, 32, 32);
deqp/functional/gles3/es3fTextureStateQuery.js:            gl.texStorage2D(this.m_textureTarget, 1, format, 32, 32);
deqp/functional/gles3/es3fTextureStateQuery.js:        this.check(glsStateQuery.verifyTexture(this.m_textureTarget, gl.TEXTURE_IMMUTABLE_FORMAT, 1));
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.deleteTexture(textureID);
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.RGBA32I, gl.RGBA32UI, gl.RGBA16I, gl.RGBA16UI, gl.RGBA8, gl.RGBA8I,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.RGBA8UI, gl.SRGB8_ALPHA8, gl.RGB10_A2, gl.RGB10_A2UI, gl.RGBA4,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.RGB5_A1, gl.RGB8, gl.RGB565, gl.RG32I, gl.RG32UI, gl.RG16I, gl.RG16UI,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.RG8, gl.RG8I, gl.RG8UI, gl.R32I, gl.R32UI, gl.R16I, gl.R16UI, gl.R8,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.R8I, gl.R8UI,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.RGBA32F, gl.RGBA16F, gl.RGBA8_SNORM, gl.RGB32F,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.RGB32I, gl.RGB32UI, gl.RGB16F, gl.RGB16I, gl.RGB16UI, gl.RGB8_SNORM,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.RGB8I, gl.RGB8UI, gl.SRGB8, gl.R11F_G11F_B10F, gl.RGB9_E5, gl.RG32F,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.RG16F, gl.RG8_SNORM, gl.R32F, gl.R16F, gl.R8_SNORM
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.DEPTH_COMPONENT32F, gl.DEPTH_COMPONENT24, gl.DEPTH_COMPONENT16,
deqp/functional/gles3/es3fTextureStateQuery.js:        gl.DEPTH32F_STENCIL8, gl.DEPTH24_STENCIL8
deqp/functional/gles3/es3fTextureStateQuery.js:    if (this.m_textureTarget != gl.TEXTURE_3D)
deqp/functional/gles3/es3fTextureStateQuery.js:        ['texture_2d', gl.TEXTURE_2D],
deqp/functional/gles3/es3fTextureStateQuery.js:        ['texture_3d', gl.TEXTURE_3D],
deqp/functional/gles3/es3fTextureStateQuery.js:        ['texture_2d_array', gl.TEXTURE_2D_ARRAY],
deqp/functional/gles3/es3fTextureStateQuery.js:        ['texture_cube_map', gl.TEXTURE_CUBE_MAP]
deqp/functional/gles3/es3fTextureStateQuery.js:    var wrapValues = [gl.CLAMP_TO_EDGE, gl.REPEAT, gl.MIRRORED_REPEAT];
deqp/functional/gles3/es3fTextureStateQuery.js:    var magValues = [gl.NEAREST, gl.LINEAR];
deqp/functional/gles3/es3fTextureStateQuery.js:    var minValues = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR];
deqp/functional/gles3/es3fTextureStateQuery.js:    var modes = [gl.COMPARE_REF_TO_TEXTURE, gl.NONE];
deqp/functional/gles3/es3fTextureStateQuery.js:    var compareFuncs = [gl.LEQUAL, gl.GEQUAL, gl.LESS, gl.GREATER, gl.EQUAL, gl.NOTEQUAL, gl.ALWAYS, gl.NEVER];
deqp/functional/gles3/es3fTextureStateQuery.js:            target, gl.TEXTURE_WRAP_S, gl.REPEAT, wrapValues));
deqp/functional/gles3/es3fTextureStateQuery.js:        if (target == gl.TEXTURE_2D ||
deqp/functional/gles3/es3fTextureStateQuery.js:            target == gl.TEXTURE_3D ||
deqp/functional/gles3/es3fTextureStateQuery.js:            target == gl.TEXTURE_CUBE_MAP)
deqp/functional/gles3/es3fTextureStateQuery.js:                target, gl.TEXTURE_WRAP_T, gl.REPEAT, wrapValues));
deqp/functional/gles3/es3fTextureStateQuery.js:        if (target == gl.TEXTURE_3D)
deqp/functional/gles3/es3fTextureStateQuery.js:                target, gl.TEXTURE_WRAP_R, gl.REPEAT, wrapValues));
deqp/functional/gles3/es3fTextureStateQuery.js:            target, gl.TEXTURE_MAG_FILTER, gl.LINEAR, magValues));
deqp/functional/gles3/es3fTextureStateQuery.js:            target, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR, minValues));
deqp/functional/gles3/es3fTextureStateQuery.js:        state.addChild(new es3fTextureStateQuery.TextureLODCase(name + '_texture_min_lod' , 'TEXTURE_MIN_LOD', target, gl.TEXTURE_MIN_LOD, -1000));
deqp/functional/gles3/es3fTextureStateQuery.js:        state.addChild(new es3fTextureStateQuery.TextureLODCase(name + '_texture_max_lod' , 'TEXTURE_MAX_LOD', target, gl.TEXTURE_MAX_LOD, 1000));
deqp/functional/gles3/es3fTextureStateQuery.js:        state.addChild(new es3fTextureStateQuery.TextureLevelCase(name + '_texture_base_level' , 'TEXTURE_BASE_LEVEL', target, gl.TEXTURE_BASE_LEVEL, 0));
deqp/functional/gles3/es3fTextureStateQuery.js:        state.addChild(new es3fTextureStateQuery.TextureLevelCase(name + '_texture_max_level' , 'TEXTURE_MAX_LEVEL', target, gl.TEXTURE_MAX_LEVEL, 1000));
deqp/functional/gles3/es3fTextureStateQuery.js:            target, gl.TEXTURE_COMPARE_MODE, gl.NONE, modes));
deqp/functional/gles3/es3fTextureStateQuery.js:            target, gl.TEXTURE_COMPARE_FUNC, gl.LEQUAL, compareFuncs));
conformance/rendering/gl-drawelements.html:gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
conformance/rendering/gl-drawelements.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/rendering/gl-drawelements.html:gl.enableVertexAttribArray(0);
conformance/rendering/gl-drawelements.html:gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/rendering/gl-drawelements.html:gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
conformance/rendering/gl-drawelements.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([ 0, 1, 2]), gl.STATIC_DRAW);
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 0)");
conformance/rendering/gl-drawelements.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array([ 0, 1, 2, 0]), gl.STATIC_DRAW);
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_BYTE, 0)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(desktopGL.QUAD_STRIP, 4, gl.UNSIGNED_BYTE, 0)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(desktopGL.QUADS, 4, gl.UNSIGNED_BYTE, 0)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(desktopGL.POLYGON, 4, gl.UNSIGNED_BYTE, 0)");
conformance/rendering/gl-drawelements.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array([ 0, 1, 2]), gl.STATIC_DRAW);
conformance/rendering/gl-drawelements.html:                          wtu.getDefault3DContextVersion() > 1 ? gl.NO_ERROR : gl.INVALID_ENUM,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 3, gl.FLOAT, 0)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 3, gl.SHORT, 0)");
conformance/rendering/gl-drawelements.html:gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0,1,2,2000, 40802, 5887992]), gl.STATIC_DRAW);
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 1)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.NO_ERROR,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 2, gl.UNSIGNED_SHORT, 2)");
conformance/rendering/gl-drawelements.html:var indexValidationError = wtu.shouldGenerateGLError(gl, [gl.INVALID_OPERATION, gl.NO_ERROR],
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 2)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 3)");
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 7, gl.UNSIGNED_SHORT, 0)");
conformance/rendering/gl-drawelements.html:wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION,
conformance/rendering/gl-drawelements.html:                          "gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 2)");
js/tests/tex-image-and-sub-image-3d-with-image.js:        case gl.RED:
js/tests/tex-image-and-sub-image-3d-with-image.js:        case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-image.js:        case gl.RG:
js/tests/tex-image-and-sub-image-3d-with-image.js:        case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-3d-with-image.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
js/tests/tex-image-and-sub-image-3d-with-image.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, sourceSubRectangle[0]);
js/tests/tex-image-and-sub-image-3d-with-image.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, sourceSubRectangle[1]);
js/tests/tex-image-and-sub-image-3d-with-image.js:            gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
js/tests/tex-image-and-sub-image-3d-with-image.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat], uploadWidth, uploadHeight, depth, 0,
js/tests/tex-image-and-sub-image-3d-with-image.js:            gl.texSubImage3D(bindingTarget, 0, 0, 0, 0, uploadWidth, uploadHeight, depth,
js/tests/tex-image-and-sub-image-3d-with-image.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat], uploadWidth, uploadHeight, depth, 0,
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-3d-with-image.js:        gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, 0);
js/tests/tex-image-and-sub-image-3d-with-image.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors from texture upload");
js/tests/tex-image-and-sub-image-3d-with-image.js:                  (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY'));
js/tests/tex-image-and-sub-image-3d-with-image.js:            wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
js/tests/tex-image-and-sub-image-3d-with-image.js:            runOneIteration(image, cases[i].sub, cases[i].flipY, gl.TEXTURE_3D,
js/tests/tex-image-and-sub-image-3d-with-image.js:            runOneIteration(image, cases[i].sub, cases[i].flipY, gl.TEXTURE_2D_ARRAY,
js/tests/tex-image-and-sub-image-3d-with-image.js:                  (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY') +
js/tests/tex-image-and-sub-image-3d-with-image.js:            var rCoordLocation = gl.getUniformLocation(program, 'uRCoord');
js/tests/tex-image-and-sub-image-3d-with-image.js:            gl.uniform1f(rCoordLocation, rTextureCoord);
js/tests/tex-image-and-sub-image-3d-with-image.js:            wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
js/tests/tex-image-and-sub-image-3d-with-image.js:            runOneIteration(image, false, cases[i].flipY, gl.TEXTURE_3D,
js/tests/tex-image-and-sub-image-3d-with-image.js:            runOneIteration(image, true, cases[i].flipY, gl.TEXTURE_3D,
js/tests/tex-image-and-sub-image-3d-with-image.js:            runOneIteration(image, false, cases[i].flipY, gl.TEXTURE_2D_ARRAY,
js/tests/tex-image-and-sub-image-3d-with-image.js:            runOneIteration(image, true, cases[i].flipY, gl.TEXTURE_2D_ARRAY,
js/tests/tex-image-and-sub-image-3d-with-image.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/functional/gles3/es3fDrawTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fDrawTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fDrawTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fDrawTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fDrawTests.js:goog.require('framework.opengl.gluVarType');
deqp/functional/gles3/es3fDrawTests.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/functional/gles3/es3fDrawTests.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/functional/gles3/es3fDrawTests.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fDrawTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fDrawTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fDrawTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fDrawTests.js:    var gluVarType = framework.opengl.gluVarType;
deqp/functional/gles3/es3fDrawTests.js:    var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/functional/gles3/es3fDrawTests.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/functional/gles3/es3fDrawTests.js:        var renderTargetWidth = Math.min(1024, gl.canvas.width);
deqp/functional/gles3/es3fDrawTests.js:        var renderTargetHeight = Math.min(1024, gl.canvas.height);
deqp/functional/gles3/es3fDrawTests.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, positionBuf);
deqp/functional/gles3/es3fDrawTests.js:        ctx.bufferData(gl.ARRAY_BUFFER, vertexPositions, gl.STATIC_DRAW);
deqp/functional/gles3/es3fDrawTests.js:        ctx.vertexAttribPointer(posLocation, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fDrawTests.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, offsetBuf);
deqp/functional/gles3/es3fDrawTests.js:        ctx.bufferData(gl.ARRAY_BUFFER, offsets, gl.STATIC_DRAW);
deqp/functional/gles3/es3fDrawTests.js:        ctx.vertexAttribPointer(offsetLocation, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fDrawTests.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, colorBuf);
deqp/functional/gles3/es3fDrawTests.js:        ctx.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
deqp/functional/gles3/es3fDrawTests.js:        ctx.vertexAttribPointer(colorLocation, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fDrawTests.js:            ctx.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuf);
deqp/functional/gles3/es3fDrawTests.js:            ctx.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
deqp/functional/gles3/es3fDrawTests.js:        ctx.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fDrawTests.js:            ctx.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, this.m_gridSide * this.m_gridSide);
deqp/functional/gles3/es3fDrawTests.js:            ctx.drawArraysInstanced(gl.TRIANGLES, 0, 6, this.m_gridSide * this.m_gridSide);
conformance/rendering/framebuffer-texture-switch.html:var fb = gl.createFramebuffer();
conformance/rendering/framebuffer-texture-switch.html:gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/rendering/framebuffer-texture-switch.html:var tex2 = gl.createTexture();
conformance/rendering/framebuffer-texture-switch.html:gl.bindTexture(gl.TEXTURE_2D, tex2);
conformance/rendering/framebuffer-texture-switch.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/rendering/framebuffer-texture-switch.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/rendering/framebuffer-texture-switch.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/rendering/framebuffer-texture-switch.html:var tex1 = gl.createTexture();
conformance/rendering/framebuffer-texture-switch.html:gl.bindTexture(gl.TEXTURE_2D, tex1);
conformance/rendering/framebuffer-texture-switch.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/rendering/framebuffer-texture-switch.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/rendering/framebuffer-texture-switch.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/rendering/framebuffer-texture-switch.html:gl.clearColor(1.0, 1.0, 1.0, 1.0);
conformance/rendering/framebuffer-texture-switch.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/rendering/framebuffer-texture-switch.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex1, 0);
conformance/rendering/framebuffer-texture-switch.html:            shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/rendering/framebuffer-texture-switch.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/framebuffer-texture-switch.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex2, 0);
conformance/rendering/framebuffer-texture-switch.html:            shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/rendering/framebuffer-texture-switch.html:        gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/rendering/framebuffer-texture-switch.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors at the end of the test.");
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.ARRAY_BUFFER, gl.COPY_READ_BUFFER,
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.TRANSFORM_FEEDBACK_BUFFER, gl.UNIFORM_BUFFER,
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.COPY_WRITE_BUFFER, gl.ELEMENT_ARRAY_BUFFER,
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.PIXEL_PACK_BUFFER, gl.PIXEL_UNPACK_BUFFER
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        var bufferId = gl.createBuffer();
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.bindBuffer(this.m_bufferTarget, bufferId);
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.bindBuffer(this.m_bufferTarget, null);
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.deleteBuffer(bufferId);
deqp/functional/gles3/es3fBufferObjectQueryTests.js:    var size = /** type {number} */ (gl.getBufferParameter(this.m_bufferTarget, gl.BUFFER_SIZE));
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.bufferData(this.m_bufferTarget, len, gl.STREAM_DRAW);
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        size = /** type {number} */ (gl.getBufferParameter(this.m_bufferTarget, gl.BUFFER_SIZE));
deqp/functional/gles3/es3fBufferObjectQueryTests.js:    var usage = /** type {number} */ (gl.getBufferParameter(this.m_bufferTarget, gl.BUFFER_USAGE));
deqp/functional/gles3/es3fBufferObjectQueryTests.js:    this.check(usage == gl.STATIC_DRAW, 'Initial usage should be STATIC_DRAW; got ' + wtu.glEnumToString(gl, usage));
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.STREAM_DRAW, gl.STREAM_READ,
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.STREAM_COPY, gl.STATIC_DRAW,
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.STATIC_READ, gl.STATIC_COPY,
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.DYNAMIC_DRAW, gl.DYNAMIC_READ,
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.DYNAMIC_COPY
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        gl.bufferData(this.m_bufferTarget, 16, usages[ndx]);
deqp/functional/gles3/es3fBufferObjectQueryTests.js:        usage = /** type {number} */ (gl.getBufferParameter(this.m_bufferTarget, gl.BUFFER_USAGE));
js/tests/iterable-test.js:        var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
js/tests/iterable-test.js:      var tex = gl.createTexture();
js/tests/iterable-test.js:      gl.bindTexture(gl.TEXTURE_2D, tex);
js/tests/iterable-test.js:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize, textureSize, 0, gl.RGBA, gl.UNSIGNED_BYTE,
js/tests/iterable-test.js:      gl.clear(gl.COLOR_BUFFER_BIT);
js/tests/iterable-test.js:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
js/tests/iterable-test.js:      gl.clear(gl.COLOR_BUFFER_BIT);
js/tests/iterable-test.js:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
js/tests/iterable-test.js:    var readBackBuf = new Uint8Array(gl.canvas.width * gl.canvas.height * 4);
js/tests/iterable-test.js:    gl.useProgram(program);
js/tests/iterable-test.js:    gl.clearColor(1.0, 0.0, 0.0, 1.0);
js/tests/iterable-test.js:    gl.clear(gl.COLOR_BUFFER_BIT);
js/tests/iterable-test.js:    var vertexObject = gl.createBuffer();
js/tests/iterable-test.js:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
js/tests/iterable-test.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,2.5,0, 1.5,1.5,0, 2.5,1.5,0 ]), gl.STATIC_DRAW);
js/tests/iterable-test.js:    gl.enableVertexAttribArray(0);
js/tests/iterable-test.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
js/tests/iterable-test.js:    gl.vertexAttrib3f(1, 0.0, 0.0, 1.0);
js/tests/iterable-test.js:    gl.uniformMatrix4fv(uniforms.u_modelViewProjMatrix.location, false, identityMat);
js/tests/iterable-test.js:          gl.drawArrays(gl.TRIANGLES, 0, 3);
js/tests/iterable-test.js:              0, 0, gl.canvas.width, gl.canvas.height,
conformance/rendering/line-loop-tri-fan.html:    gl.readPixels(0, 0, w, w, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/rendering/line-loop-tri-fan.html:    gl.readPixels(0, 0, w, w, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/rendering/line-loop-tri-fan.html:    gl.clearColor(0, 0, 0, 1);
conformance/rendering/line-loop-tri-fan.html:    gl.enableVertexAttribArray(0);
conformance/rendering/line-loop-tri-fan.html:    var vertBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/line-loop-tri-fan.html:    var indBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawArrays(gl.LINE_LOOP, 0, vertices.length / 2);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawElements(gl.LINE_LOOP, indices.length, gl.UNSIGNED_SHORT, 0);
conformance/rendering/line-loop-tri-fan.html:    vertBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/line-loop-tri-fan.html:    indBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawArrays(gl.LINE_LOOP, 3, vertices.length / 2 - 3);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawElements(gl.LINE_LOOP, indices.length - 3, gl.UNSIGNED_SHORT, 3 * 2);
conformance/rendering/line-loop-tri-fan.html:    vertBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/line-loop-tri-fan.html:    indBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawElements(gl.LINE_LOOP, indices.length, gl.UNSIGNED_SHORT, 0);
conformance/rendering/line-loop-tri-fan.html:    vertBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/line-loop-tri-fan.html:    indBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawArrays(gl.TRIANGLE_FAN, 0, vertices.length / 2);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawElements(gl.TRIANGLE_FAN, indices.length, gl.UNSIGNED_SHORT, 0);
conformance/rendering/line-loop-tri-fan.html:    vertBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/line-loop-tri-fan.html:    indBuf = gl.createBuffer();
conformance/rendering/line-loop-tri-fan.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indBuf);
conformance/rendering/line-loop-tri-fan.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawArrays(gl.TRIANGLE_FAN, 3, vertices.length / 2 - 3);
conformance/rendering/line-loop-tri-fan.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/line-loop-tri-fan.html:    gl.drawElements(gl.TRIANGLE_FAN, indices.length - 3, gl.UNSIGNED_SHORT, 3 * 2);
conformance/rendering/gl-scissor-test.html:    gl.disable(gl.SCISSOR_TEST);
conformance/rendering/gl-scissor-test.html:    gl.clearColor(0,0,0,0);
conformance/rendering/gl-scissor-test.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-scissor-test.html:    gl.enable(gl.SCISSOR_TEST);
conformance/rendering/gl-scissor-test.html:      gl.scissor(ii, ii, 1, 1);
conformance/rendering/gl-scissor-test.html:      gl.clearColor(0, 1, 0, 1);
conformance/rendering/gl-scissor-test.html:      gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-scissor-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/rendering/default-texture-draw-bug.html:var canvas = gl.canvas;
conformance/rendering/default-texture-draw-bug.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/rendering/default-texture-draw-bug.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/rendering/default-texture-draw-bug.html:        gl.clearColor(1.0, 1.0, 1.0, 1.0);
conformance/rendering/default-texture-draw-bug.html:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/default-texture-draw-bug.html:        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance/more/functions/isTests.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/more/functions/isTests.html:    var prog = gl.createProgram();
conformance/more/functions/isTests.html:    var sh1 = gl.createShader(gl.VERTEX_SHADER);
conformance/more/functions/isTests.html:    var sh2 = gl.createShader(gl.FRAGMENT_SHADER);
conformance/more/functions/isTests.html:    var buf = gl.createBuffer();
conformance/more/functions/isTests.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/more/functions/isTests.html:    assert("tex", gl.isTexture(tex));
conformance/more/functions/isTests.html:    assert("fbo", gl.isFramebuffer(fbo.fbo));
conformance/more/functions/isTests.html:    assert("rbo", gl.isRenderbuffer(fbo.rbo));
conformance/more/functions/isTests.html:    assert("prog", gl.isProgram(prog));
conformance/more/functions/isTests.html:    assert("sh1", gl.isShader(sh1));
conformance/more/functions/isTests.html:    assert("sh2", gl.isShader(sh2));
conformance/more/functions/isTests.html:    assert("buf", gl.isBuffer(buf));
conformance/more/functions/isTests.html:    gl.deleteTexture(tex);
conformance/more/functions/isTests.html:    gl.deleteFramebuffer(fbo.fbo);
conformance/more/functions/isTests.html:    gl.deleteRenderbuffer(fbo.rbo);
conformance/more/functions/isTests.html:    gl.deleteProgram(prog);
conformance/more/functions/isTests.html:    gl.deleteShader(sh1);
conformance/more/functions/isTests.html:    gl.deleteShader(sh2);
conformance/more/functions/isTests.html:    gl.deleteBuffer(buf);
conformance/more/functions/isTests.html:    assert("tex", !gl.isTexture(tex));
conformance/more/functions/isTests.html:    assert("fbo", !gl.isFramebuffer(fbo.fbo));
conformance/more/functions/isTests.html:    assert("rbo", !gl.isRenderbuffer(fbo.rbo));
conformance/more/functions/isTests.html:    assert("prog", !gl.isProgram(prog));
conformance/more/functions/isTests.html:    assert("sh1", !gl.isShader(sh1));
conformance/more/functions/isTests.html:    assert("sh2", !gl.isShader(sh2));
conformance/more/functions/isTests.html:    assert("buf", !gl.isBuffer(buf));
js/tests/tex-input-validation.js:shouldBeNonNull("tex = gl.createTexture()");
js/tests/tex-input-validation.js:gl.bindTexture(gl.TEXTURE_2D, tex);
js/tests/tex-input-validation.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/tex-input-validation.js:  gl.texParameteri(testCase.target, testCase.pname, testCase.param);
js/tests/tex-input-validation.js:  gl.texParameterf(testCase.target, testCase.pname, testCase.param);
js/tests/tex-input-validation.js:  gl.getTexParameter(testCase.target, testCase.pname);
js/tests/tex-input-validation.js:  gl.texImage2D(testCase.target, level, testCase.internalFormat, width, height, testCase.border, testCase.format, testCase.type, null);
js/tests/tex-input-validation.js:  gl.texSubImage2D(testCase.target, level, xoffset, yoffset, width, height, testCase.format, testCase.type, array);
js/tests/tex-input-validation.js:  gl.renderbufferStorage(gl.RENDERBUFFER, testCase.colorBufferFormat, width, height);
js/tests/tex-input-validation.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/tex-input-validation.js:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
js/tests/tex-input-validation.js:  gl.copyTexImage2D(testCase.target, level, testCase.internalFormat, x, y, width, height, testCase.border);
js/tests/tex-input-validation.js:  var type = gl.UNSIGNED_BYTE;
js/tests/tex-input-validation.js:  gl.renderbufferStorage(gl.RENDERBUFFER, testCase.colorBufferFormat, width, height);
js/tests/tex-input-validation.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/tex-input-validation.js:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
js/tests/tex-input-validation.js:  gl.texImage2D(testCase.target, level, testCase.internalFormat, xoffset + width, yoffset + height, border, testCase.internalFormat, type, null);
js/tests/tex-input-validation.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/tex-input-validation.js:  gl.copyTexSubImage2D(testCase.target, level, xoffset, yoffset, x, y, width, height);
js/tests/tex-input-validation.js:  var target = gl.TEXTURE_2D;
js/tests/tex-input-validation.js:  var type = gl.UNSIGNED_BYTE;
js/tests/tex-input-validation.js:  var msg = " colorBufferFormat: " + enumToString(testCase.contextAlpha ? gl.RGBA : gl.RGB) +
js/tests/tex-input-validation.js:  shouldBeNonNull("tex = gl.createTexture()");
js/tests/tex-input-validation.js:  gl.bindTexture(target, tex);
js/tests/tex-input-validation.js:    gl.texImage2D(target, level, testCase.internalFormat, xoffset + width, yoffset + height, border, testCase.internalFormat, type, null);
js/tests/tex-input-validation.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/tex-input-validation.js:    gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
js/tests/tex-input-validation.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/tex-input-validation.js:    gl.copyTexImage2D(target, level, testCase.internalFormat, x, y, width, height, border);
js/tests/tex-input-validation.js:  gl.texImage3D(testCase.target, level, testCase.internalFormat, width, height, depth, testCase.border, testCase.format, testCase.type, null);
js/tests/tex-input-validation.js:  gl.texSubImage3D(testCase.target, level, xoffset, yoffset, zoffset, width, height, depth, testCase.format, testCase.type, array);
js/tests/tex-input-validation.js:    pname: gl.TEXTURE_WRAP_T,
js/tests/tex-input-validation.js:    param: gl.REPEAT,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    pname: gl.TEXTURE_WRAP_T,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    pname: gl.TEXTURE_WRAP_T,
js/tests/tex-input-validation.js:    param: gl.REPEAT,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM }
js/tests/tex-input-validation.js:    pname: gl.TEXTURE_WRAP_T,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    pname: gl.TEXTURE_WRAP_T,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM }
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: [gl.INVALID_ENUM, gl.INVALID_VALUE] },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_VALUE },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGB,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_OPERATION },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:      format: gl.RGBA,
js/tests/tex-input-validation.js:      type: gl.BYTE,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:      format: gl.RGBA,
js/tests/tex-input-validation.js:      type: gl.BYTE,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_OPERATION },
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:      internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:      format: gl.RGBA,
js/tests/tex-input-validation.js:      type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM }
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:      expectedError: [gl.INVALID_ENUM, gl.INVALID_OPERATION] },
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      format: gl.RGBA,
js/tests/tex-input-validation.js:      type: gl.BYTE,
js/tests/tex-input-validation.js:      expectedError: [gl.INVALID_ENUM, gl.INVALID_OPERATION] }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      format: gl.RED,
js/tests/tex-input-validation.js:      type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_OPERATION },
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:      format: gl.RGBA,
js/tests/tex-input-validation.js:      type: gl.BYTE,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_OPERATION },
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:      format: gl.RGBA,
js/tests/tex-input-validation.js:      type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:shouldBeNonNull("fbo = gl.createFramebuffer()");
js/tests/tex-input-validation.js:gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
js/tests/tex-input-validation.js:shouldBeNonNull("colorBuffer = gl.createRenderbuffer()");
js/tests/tex-input-validation.js:gl.bindRenderbuffer(gl.RENDERBUFFER, colorBuffer);
js/tests/tex-input-validation.js:gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorBuffer);
js/tests/tex-input-validation.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    colorBufferFormat: gl.RGB565,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    colorBufferFormat: gl.RGB565,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_VALUE },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    colorBufferFormat: gl.RGB565,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_OPERATION },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    colorBufferFormat: gl.RGB565,
js/tests/tex-input-validation.js:    internalFormat: gl.RGB,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR }
js/tests/tex-input-validation.js:    { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:      colorBufferFormat: gl.RGB5_A1,
js/tests/tex-input-validation.js:      internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:      expectedError: gl.INVALID_ENUM }
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    colorBufferFormat: gl.RGB5_A1,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    colorBufferFormat: gl.RGB565,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_OPERATION }
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR },
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_OPERATION },
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR },
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_OPERATION }
js/tests/tex-input-validation.js:shouldBeNonNull("tex = gl.createTexture()");
js/tests/tex-input-validation.js:gl.bindTexture(gl.TEXTURE_3D, tex);
js/tests/tex-input-validation.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGB,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_OPERATION },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_OPERATION},
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR }
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_2D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    internalFormat: gl.RG,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_VALUE},
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RG8,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    internalFormat: gl.RGBA,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.INT,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_OPERATION},
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    expectedError: gl.INVALID_ENUM },
js/tests/tex-input-validation.js:  { target: gl.TEXTURE_3D,
js/tests/tex-input-validation.js:    format: gl.RGBA,
js/tests/tex-input-validation.js:    type: gl.UNSIGNED_BYTE,
js/tests/tex-input-validation.js:    expectedError: gl.NO_ERROR }
deqp/functional/gles3/fbocolorbuffer/tex3d_04.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/fbocolorbuffer/tex2darray_01.html:var ext = gl.getExtension('EXT_color_buffer_float');
conformance/rendering/point-no-attributes.html:gl.drawArrays(gl.POINTS, 0, 1);
conformance/rendering/point-no-attributes.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
deqp/functional/gles3/fbocolorbuffer/texcube_05.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/framework/opengl/gluTexture.js:goog.provide('framework.opengl.gluTexture');
deqp/framework/opengl/gluTexture.js:goog.require('framework.opengl.gluTextureUtil');
deqp/framework/opengl/gluTexture.js:var gluTexture = framework.opengl.gluTexture;
deqp/framework/opengl/gluTexture.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/framework/opengl/gluTexture.js:    this.m_glTexture = gl.createTexture();
deqp/framework/opengl/gluTexture.js:    gl.bindTexture(gl.TEXTURE_2D, this.m_glTexture);
deqp/framework/opengl/gluTexture.js:        gl.compressedTexImage2D(gl.TEXTURE_2D, levelNdx, compressedFormat,
deqp/framework/opengl/gluTexture.js:        case tcuTexture.CubeFace.CUBEFACE_NEGATIVE_X: return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
deqp/framework/opengl/gluTexture.js:        case tcuTexture.CubeFace.CUBEFACE_POSITIVE_X: return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
deqp/framework/opengl/gluTexture.js:        case tcuTexture.CubeFace.CUBEFACE_NEGATIVE_Y: return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
deqp/framework/opengl/gluTexture.js:        case tcuTexture.CubeFace.CUBEFACE_POSITIVE_Y: return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
deqp/framework/opengl/gluTexture.js:        case tcuTexture.CubeFace.CUBEFACE_NEGATIVE_Z: return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
deqp/framework/opengl/gluTexture.js:        case tcuTexture.CubeFace.CUBEFACE_POSITIVE_Z: return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
deqp/framework/opengl/gluTexture.js:    gl.bindTexture(gl.TEXTURE_2D, this.m_glTexture);
deqp/framework/opengl/gluTexture.js:    gl.pixelStorei(gl.UNPACK_ALIGNMENT, gluTexture.computePixelStore(this.m_refTexture.getFormat()));
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Setting pixel store failed', false, true);
deqp/framework/opengl/gluTexture.js:        gl.texImage2D(gl.TEXTURE_2D, levelNdx, this.m_format, access.getWidth(), access.getHeight(), 0 /* border */, transferFormat.format, transferFormat.dataType, access.getDataPtr());
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Texture upload failed', false, true);
deqp/framework/opengl/gluTexture.js:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.m_glTexture);
deqp/framework/opengl/gluTexture.js:    gl.pixelStorei(gl.UNPACK_ALIGNMENT, gluTexture.computePixelStore(this.m_refTexture.getFormat()));
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Setting pixel store failed', false, true);
deqp/framework/opengl/gluTexture.js:            gl.texImage2D(gluTexture.cubeFaceToGLFace(tcuTexture.CubeFace[face]), levelNdx, this.m_format, access.getWidth(), access.getHeight(), 0 /* border */, transferFormat.format, transferFormat.dataType, access.getDataPtr());
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Texture upload failed', false, true);
deqp/framework/opengl/gluTexture.js:    if (!gl.texImage3D)
deqp/framework/opengl/gluTexture.js:        throw new Error('gl.TexImage3D() is not supported');
deqp/framework/opengl/gluTexture.js:    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.m_glTexture);
deqp/framework/opengl/gluTexture.js:    gl.pixelStorei(gl.UNPACK_ALIGNMENT, gluTexture.computePixelStore(this.m_refTexture.getFormat()));
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Texture upload failed', false, true);
deqp/framework/opengl/gluTexture.js:        gl.texImage3D(gl.TEXTURE_2D_ARRAY, levelNdx, this.m_format, access.getWidth(), access.getHeight(), access.getDepth(), 0 /* border */, transferFormat.format, transferFormat.dataType, access.getDataPtr());
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Texture upload failed', false, true);
deqp/framework/opengl/gluTexture.js:    if (!gl.texImage3D)
deqp/framework/opengl/gluTexture.js:        throw new Error('gl.TexImage3D() is not supported');
deqp/framework/opengl/gluTexture.js:    gl.bindTexture(gl.TEXTURE_3D, this.m_glTexture);
deqp/framework/opengl/gluTexture.js:    gl.pixelStorei(gl.UNPACK_ALIGNMENT, gluTexture.computePixelStore(this.m_refTexture.getFormat()));
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Texture upload failed', false, true);
deqp/framework/opengl/gluTexture.js:        gl.texImage3D(gl.TEXTURE_3D, levelNdx, this.m_format, access.getWidth(), access.getHeight(), access.getDepth(), 0 /* border */, transferFormat.format, transferFormat.dataType, access.getDataPtr());
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Texture upload failed', false, true);
deqp/framework/opengl/gluTexture.js:    gl.bindTexture(gl.TEXTURE_2D, this.m_glTexture);
deqp/framework/opengl/gluTexture.js:    gl.compressedTexImage2D(gl.TEXTURE_2D, level, this.m_format, source.m_width, source.m_height, 0 /* border */, source.m_data);
deqp/framework/opengl/gluTexture.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Texture upload failed', false, true);
deqp/framework/opengl/gluTexture.js:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.m_glTexture);
deqp/framework/opengl/gluTexture.js:        gl.compressedTexImage2D(gluTexture.cubeFaceToGLFace(tcuTexture.CubeFace[face]), 0, this.m_format,
deqp/framework/opengl/gluTexture.js:        assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Texture upload failed', false, true);
deqp/functional/gles3/fbocolorbuffer/tex2darray_05.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/fbocolorbuffer/tex2darray_00.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/fbocolorbuffer/tex2darray_02.html:var ext = gl.getExtension('EXT_color_buffer_float');
conformance/more/functions/vertexAttrib.html://   log(gl.getShaderInfoLog(prog.shaders[1]));
conformance/more/functions/vertexAttrib.html:  var v = gl.getAttribLocation(sh, 'Vertex');
conformance/more/functions/vertexAttrib.html:  var n = gl.getAttribLocation(sh, 'Normal');
conformance/more/functions/vertexAttrib.html:  var t = gl.getAttribLocation(sh, 'Tex');
conformance/more/functions/vertexAttrib.html:  assert(0 == gl.getError());
conformance/more/functions/vertexAttrib.html:  gl.disableVertexAttribArray(v);
conformance/more/functions/vertexAttrib.html:  gl.disableVertexAttribArray(n);
conformance/more/functions/vertexAttrib.html:  gl.disableVertexAttribArray(t);
conformance/more/functions/vertexAttrib.html:  var vbo = gl.createBuffer();
conformance/more/functions/vertexAttrib.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/more/functions/vertexAttrib.html:  gl.bufferData(gl.ARRAY_BUFFER, vertsArr, gl.STATIC_DRAW);
conformance/more/functions/vertexAttrib.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/vertexAttrib.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 3);});
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib1fv(v, [1]);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib2fv(v, [1,2]);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib3fv(v, [1,2,3]);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib4fv(v, [1,2,3,4]);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib1f(v, 1);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib2f(v, 1,2);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib3f(v, 1,2,3);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib4f(v, 1,2,3,4);
conformance/more/functions/vertexAttrib.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 3);});
conformance/more/functions/vertexAttrib.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/vertexAttrib.html:  gl.deleteBuffer(vbo);
conformance/more/functions/vertexAttrib.html:  var vbo = gl.createBuffer();
conformance/more/functions/vertexAttrib.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/more/functions/vertexAttrib.html:  gl.bufferData(gl.ARRAY_BUFFER, vertsArr, gl.STATIC_DRAW);
conformance/more/functions/vertexAttrib.html:  gl.enableVertexAttribArray(v);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib1fv(v, [1]);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib2fv(v, [1,2]);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib3fv(v, [1,2,3]);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib4fv(v, [1,2,3,4]);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib1f(v, 1);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib2f(v, 1,2);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib3f(v, 1,2,3);
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib4f(v, 1,2,3,4);
conformance/more/functions/vertexAttrib.html:  assertOk(function(){gl.vertexAttribPointer(v, 3, gl.FLOAT, false, 0, 0);});
conformance/more/functions/vertexAttrib.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 3);});
conformance/more/functions/vertexAttrib.html:  gl.vertexAttrib4fv(v, [1,2,3,4]);
conformance/more/functions/vertexAttrib.html:  assertOk(function(){gl.drawArrays(gl.TRIANGLES, 0, 3);});
conformance/more/functions/vertexAttrib.html:  gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/more/functions/vertexAttrib.html:  gl.deleteBuffer(vbo);
deqp/functional/gles3/fboinvalidate/default.html:var extention = gl.getExtension('EXT_color_buffer_float');
conformance/rendering/framebuffer-switch.html:var tex1 = gl.createTexture();
conformance/rendering/framebuffer-switch.html:gl.bindTexture(gl.TEXTURE_2D, tex1);
conformance/rendering/framebuffer-switch.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/rendering/framebuffer-switch.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/rendering/framebuffer-switch.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/rendering/framebuffer-switch.html:var fb1 = gl.createFramebuffer();
conformance/rendering/framebuffer-switch.html:gl.bindFramebuffer(gl.FRAMEBUFFER, fb1);
conformance/rendering/framebuffer-switch.html:gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex1, 0);
conformance/rendering/framebuffer-switch.html:var tex2 = gl.createTexture();
conformance/rendering/framebuffer-switch.html:gl.bindTexture(gl.TEXTURE_2D, tex2);
conformance/rendering/framebuffer-switch.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/rendering/framebuffer-switch.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/rendering/framebuffer-switch.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/rendering/framebuffer-switch.html:var fb2 = gl.createFramebuffer();
conformance/rendering/framebuffer-switch.html:gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/rendering/framebuffer-switch.html:gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex2, 0);
conformance/rendering/framebuffer-switch.html:gl.bindTexture(gl.TEXTURE_2D, tex1);
conformance/rendering/framebuffer-switch.html:gl.clearColor(1.0, 1.0, 1.0, 1.0);
conformance/rendering/framebuffer-switch.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/rendering/framebuffer-switch.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fb1);
conformance/rendering/framebuffer-switch.html:            shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/rendering/framebuffer-switch.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/framebuffer-switch.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/rendering/framebuffer-switch.html:            shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/rendering/framebuffer-switch.html:        gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/rendering/framebuffer-switch.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors at the end of the test.");
conformance/rendering/draw-arrays-out-of-bounds.html:OutOfBoundsTest.runDrawArraysTest('gl.drawArrays(gl.TRIANGLES, $(offset), $(count))',
conformance/rendering/gl-drawarrays.html:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/gl-drawarrays.html:        gl.drawArrays(mode, 0, count);
conformance/rendering/gl-drawarrays.html:    var vertexObject = gl.createBuffer();
conformance/rendering/gl-drawarrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/rendering/gl-drawarrays.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/rendering/gl-drawarrays.html:    gl.enableVertexAttribArray(0);
conformance/rendering/gl-drawarrays.html:    checkDrawArrays(gl.TRIANGLES, 3,
conformance/rendering/gl-drawarrays.html:                    gl.INVALID_OPERATION, "gl.DrawArrays with no buffer attached to VAO should return INVALID_OPERATION");
conformance/rendering/gl-drawarrays.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/rendering/gl-drawarrays.html:    checkDrawArrays(gl.TRIANGLES, 3,
conformance/rendering/gl-drawarrays.html:                    gl.NO_ERROR, "can call gl.DrawArrays with gl.TRIANGLES");
conformance/rendering/gl-drawarrays.html:        gl.INVALID_ENUM, "gl.DrawArrays with QUAD_STRIP should return INVALID_ENUM");
conformance/rendering/gl-drawarrays.html:        gl.INVALID_ENUM, "gl.DrawArrays with QUADS should return INVALID_ENUM");
conformance/rendering/gl-drawarrays.html:        gl.INVALID_ENUM, "gl.DrawArrays with POLYGON should return INVALID_ENUM");
conformance/rendering/simple.html:  gl.useProgram(program);
conformance/rendering/simple.html:  var loc = gl.getAttribLocation(program, "a_Position");
conformance/rendering/simple.html:  var vertexObject = gl.createBuffer();
conformance/rendering/simple.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/rendering/simple.html:  gl.bufferData(
conformance/rendering/simple.html:    gl.ARRAY_BUFFER,
conformance/rendering/simple.html:    gl.STATIC_DRAW);
conformance/rendering/simple.html:  gl.enableVertexAttribArray(loc);
conformance/rendering/simple.html:  gl.vertexAttribPointer(loc, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/simple.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/rendering/simple.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/rendering/simple.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-image-data.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-image-data.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-image-data.js:        gl.disable(gl.BLEND);
conformance/extensions/webgl-compressed-texture-atc.html:    supportedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
conformance/extensions/webgl-compressed-texture-atc.html:    supportedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
conformance/extensions/webgl-compressed-texture-atc.html:    gl.viewport(0, 0, width, height);
conformance/extensions/webgl-compressed-texture-atc.html:    var tex = gl.createTexture();
conformance/extensions/webgl-compressed-texture-atc.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-compressed-texture-atc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-atc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-atc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-atc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "trying to generate mipmaps from compressed texture");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-atc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width + 4, height, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height + 4, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 4, height, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 4, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 1, height, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 2, height, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 1, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 2, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, -1, format, 1, height, 0, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "cannot specify negative mip level");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, format, data);
conformance/extensions/webgl-compressed-texture-atc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "compressedTexSubImage2D not allowed");
conformance/extensions/webgl-compressed-texture-atc.html:    gl.readPixels(
conformance/extensions/webgl-compressed-texture-atc.html:            0, 0, actualWidth, actualHeight, gl.RGBA, gl.UNSIGNED_BYTE, actual);
conformance/extensions/oes-texture-float-with-image-data.html:    if (!gl.getExtension("OES_texture_float")) {
conformance/rendering/many-draw-calls.html:gl.useProgram(program);
conformance/rendering/many-draw-calls.html:var vertexObject = gl.createBuffer();
conformance/rendering/many-draw-calls.html:gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/rendering/many-draw-calls.html:gl.enableVertexAttribArray(0);
conformance/rendering/many-draw-calls.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/rendering/many-draw-calls.html:    1.0, -1.0 ]), gl.STATIC_DRAW);
conformance/rendering/many-draw-calls.html:gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/rendering/many-draw-calls.html:gl.clearColor(0.3, 0.3, 0.3, 1.0);
conformance/rendering/many-draw-calls.html:var transformLoc = gl.getUniformLocation(program, 'transformMatrix');
conformance/rendering/many-draw-calls.html:var offsetLoc = gl.getUniformLocation(program, 'positionOffset');
conformance/rendering/many-draw-calls.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/many-draw-calls.html:      gl.uniformMatrix4fv(transformLoc, false, transformMatrix);
conformance/rendering/many-draw-calls.html:      gl.uniform3f(offsetLoc, offset[0], offset[1], offset[2]);
conformance/rendering/many-draw-calls.html:      gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/extensions/webgl-shared-resources.html:      buf = gl.createBuffer();
conformance/extensions/webgl-shared-resources.html:      gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/extensions/webgl-shared-resources.html:      gl.bufferData(gl.ARRAY_BUFFER, 16, gl.STATIC_DRAW);
conformance/extensions/webgl-shared-resources.html:      gl.bindBuffer(gl.ARRAY_BUFFER, buf);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.bufferData(gl.ARRAY_BUFFER, 16, gl.STATIC_DRAW)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE)");
conformance/extensions/webgl-shared-resources.html:      // a program is to call gl.useProgram and you can't call gl.useProgram on an invalid program.
conformance/extensions/webgl-shared-resources.html:      programShader = gl.getAttachedShaders(program)[0];
conformance/extensions/webgl-shared-resources.html:      uniformLocation = gl.getUniformLocation(program, "u_color");
conformance/extensions/webgl-shared-resources.html:      gl.useProgram(program);
conformance/extensions/webgl-shared-resources.html:      if (expectedError == gl.NO_ERROR) {
conformance/extensions/webgl-shared-resources.html:        uniformLocation = gl.getUniformLocation(program, 'u_color');
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.uniform4f(uniformLocation, 0, 1, 2, 3)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.detachShader(program, programShader)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.attachShader(program, programShader)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.bindAttribLocation(program, 0, 'foo')");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.linkProgram(program)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getProgramParameter(program, gl.LINK_STATUS)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getProgramInfoLog(program)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getAttachedShaders(program)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getAttribLocation(program, 'foo')");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getUniformLocation(program, 'foo')");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getActiveAttrib(program, 0)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getActiveUniform(program, 0)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getUniform(program, uniformLocation)");
conformance/extensions/webgl-shared-resources.html:      rb = gl.createRenderbuffer();
conformance/extensions/webgl-shared-resources.html:      gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
conformance/extensions/webgl-shared-resources.html:      gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16);
conformance/extensions/webgl-shared-resources.html:      fb = gl.createFramebuffer();
conformance/extensions/webgl-shared-resources.html:      gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
conformance/extensions/webgl-shared-resources.html:       gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-shared-resources.html:       shouldGenerateGLError(gl, expectedError, "gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb)");
conformance/extensions/webgl-shared-resources.html:       gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 16, 16)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_WIDTH)");
conformance/extensions/webgl-shared-resources.html:      shader = gl.createShader(gl.VERTEX_SHADER);
conformance/extensions/webgl-shared-resources.html:      gl.shaderSource(shader, shaderSource);
conformance/extensions/webgl-shared-resources.html:      shaderProgram = gl.createProgram();
conformance/extensions/webgl-shared-resources.html:      gl.attachShader(shaderProgram, shader);
conformance/extensions/webgl-shared-resources.html:      gl.detachShader(shaderProgram, shader);  // you can't attach if a shader is already attached.
conformance/extensions/webgl-shared-resources.html:      gl.attachShader(shaderProgram, shader);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.shaderSource(shader, 'foo')");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.compileShader(shader)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getShaderParameter(shader, gl.COMPILE_STATUS)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getShaderInfoLog(shader)");
conformance/extensions/webgl-shared-resources.html:      tex = gl.createTexture();
conformance/extensions/webgl-shared-resources.html:      gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-shared-resources.html:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/extensions/webgl-shared-resources.html:      gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.generateMipmap(gl.TEXTURE_2D)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 16, 16, 0)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 16, 16)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, expectedError, "gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S)");
conformance/extensions/webgl-shared-resources.html:    info.modificationFunctions(gl.INVALID_OPERATION);
conformance/extensions/webgl-shared-resources.html:    info.implicitBindFunctions(gl.INVALID_OPERATION);
conformance/extensions/webgl-shared-resources.html:    info.queryFunctions(gl.INVALID_OPERATION);
conformance/extensions/webgl-shared-resources.html:      info.queryFunctions(gl.INVALID_OPERATION);
conformance/extensions/webgl-shared-resources.html:      info.modificationFunctions(gl.INVALID_OPERATION);
conformance/extensions/webgl-shared-resources.html:      info.queryFunctions(gl.NO_ERROR);
conformance/extensions/webgl-shared-resources.html:      info.modificationFunctions(gl.INVALID_OPERATION);
conformance/extensions/webgl-shared-resources.html:        info.queryFunctions(gl.INVALID_OPERATION);
conformance/extensions/webgl-shared-resources.html:        info.modificationFunctions(gl.INVALID_OPERATION);
conformance/extensions/webgl-shared-resources.html:        info.queryFunctions(gl.NO_ERROR);
conformance/extensions/webgl-shared-resources.html:        info.modificationFunctions(gl.NO_ERROR);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.delete" + type + "(resource)");
conformance/extensions/webgl-shared-resources.html:// TODO: fix spec then comment this in      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.bind" + type + "(gl." + target + ", resource)");  // You can't bind a deleted resource
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "ext.releaseSharedResource(resource)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.delete" + type + "(resource)");
conformance/extensions/webgl-shared-resources.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error deleting exclusively acquired resource");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.delete" + type + "(resource)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.delete" + type + "(resource)");
conformance/extensions/webgl-shared-resources.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no error bind read only acquired resource");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.delete" + type + "(resource)");  // We're READ_ONLY so this should fail
conformance/extensions/webgl-shared-resources.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no error from 1st acquire request");
conformance/extensions/webgl-shared-resources.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "should be INVALID_OPERATION from 2nd acquire request");
conformance/extensions/webgl-shared-resources.html:    var rb = gl.createRenderbuffer();
conformance/extensions/webgl-shared-resources.html:    var fb = gl.createFramebuffer();
conformance/extensions/webgl-shared-resources.html:    var elementBuf = gl.createBuffer();
conformance/extensions/webgl-shared-resources.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuf);
conformance/extensions/webgl-shared-resources.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 3, 4, 5]), gl.STATIC_DRAW);
conformance/extensions/webgl-shared-resources.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
conformance/extensions/webgl-shared-resources.html:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, width, height);
conformance/extensions/webgl-shared-resources.html:    var destTex = gl.createTexture();
conformance/extensions/webgl-shared-resources.html:    gl.bindTexture(gl.TEXTURE_2D, destTex);
conformance/extensions/webgl-shared-resources.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/extensions/webgl-shared-resources.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-shared-resources.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-shared-resources.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-shared-resources.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-shared-resources.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-shared-resources.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance/extensions/webgl-shared-resources.html:    // It's not clear if gl.RGBA4 must be framebuffer complete.
conformance/extensions/webgl-shared-resources.html:    var canCheckRenderbuffer = (gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE);
conformance/extensions/webgl-shared-resources.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, destTex, 0);
conformance/extensions/webgl-shared-resources.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "setup");
conformance/extensions/webgl-shared-resources.html:    shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:    var tex = gl.createTexture();
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      gl.bindBuffer(gl.ARRAY_BUFFER, buffers[0]);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      gl.bindBuffer(gl.ARRAY_BUFFER, buffers[1]);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      gl.useProgram(program);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0)");
conformance/extensions/webgl-shared-resources.html:      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuf);
conformance/extensions/webgl-shared-resources.html:      gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0)");
conformance/extensions/webgl-shared-resources.html:      gl2.bindBuffer(gl.ARRAY_BUFFER, buffers[0]);
conformance/extensions/webgl-shared-resources.html:      gl2.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/webgl-shared-resources.html:      gl2.bindBuffer(gl.ARRAY_BUFFER, buffers[1]);
conformance/extensions/webgl-shared-resources.html:      gl2.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/webgl-shared-resources.html:      gl2.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl2, gl2.NO_ERROR, "gl2.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:      shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:      shouldBeTrue("gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:      shouldBeTrue("gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:      gl.activeTexture(gl.TEXTURE1);
conformance/extensions/webgl-shared-resources.html:      gl.bindTexture(gl.TEXTURE_2D, destTex);
conformance/extensions/webgl-shared-resources.html:      gl.activeTexture(gl.TEXTURE0);
conformance/extensions/webgl-shared-resources.html:      shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:      shouldBeTrue("gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/extensions/webgl-shared-resources.html:      shouldBeTrue("gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:        shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:        shouldBeTrue("gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:        shouldBeTrue("gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:        gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.clear(gl.COLOR_BUFFER_BIT)");
conformance/extensions/webgl-shared-resources.html:        shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:        shouldBeTrue("gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:        shouldBeTrue("gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.NO_ERROR, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rb);
conformance/extensions/webgl-shared-resources.html:        shouldGenerateGLError(gl, gl.NO_ERROR, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, destTex, 0);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, destTex, 0);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4))");
conformance/extensions/webgl-shared-resources.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      gl.useProgram(program);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      gl.bindBuffer(gl.ARRAY_BUFFER, buffers[0]);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.INVALID_OPERATION, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:      gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-shared-resources.html:      var shaders = gl.getAttachedShaders(program);
conformance/extensions/webgl-shared-resources.html:      shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawArrays(gl.TRIANGLES, 0, 6)");
conformance/extensions/webgl-shared-resources.html:    shouldGenerateGLError(gl, gl.INVALID_OPERATION, "ext.releaseSharedResource(tex3)");
conformance/extensions/webgl-shared-resources.html:    shouldGenerateGLError(gl, gl.INVALID_OPERATION, "ext.acquireSharedResource(tex3, ext.READ_ONLY, makeFailCallback('should not be able to acquire resource from other context'))");
conformance/extensions/webgl-shared-resources.html:    var tex = gl.createTexture();
conformance/extensions/webgl-shared-resources.html:    shouldGenerateGLError(gl, gl.NO_ERROR, "ext2.releaseSharedResource(tex)");
conformance/extensions/webgl-shared-resources.html:    shouldGenerateGLError(gl, gl.NO_ERROR, 'ext.cancelAcquireSharedResource(id)');
conformance/extensions/webgl-shared-resources.html:    var tex = gl.createTexture();
conformance/extensions/webgl-shared-resources.html:    var tex2 = gl.createTexture();
conformance/extensions/webgl-shared-resources.html:      shouldBeTrue('gl.isContextLost()');
conformance/extensions/webgl-draw-buffers.html:  ext = gl.getExtension("WEBGL_draw_buffers");
conformance/extensions/webgl-draw-buffers.html:  var supported = gl.getSupportedExtensions();
conformance/extensions/webgl-draw-buffers.html:      gl.getParameter(c.enum);
conformance/extensions/webgl-draw-buffers.html:      wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, c.name + " should not be queryable if extension is disabled");
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-draw-buffers.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "before getParameter");
conformance/extensions/webgl-draw-buffers.html:      expectTrue(c.expectedFn(gl.getParameter(ext[c.name])), "gl.getParameter(ext." + c.name + ")" + c.passMsg);
conformance/extensions/webgl-draw-buffers.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, c.name + " query should succeed if extension is enabled");
conformance/extensions/webgl-draw-buffers.html:  shouldBeTrue("gl.getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) >= gl.getParameter(ext.MAX_DRAW_BUFFERS_WEBGL)");
conformance/extensions/webgl-draw-buffers.html:  shouldBe("gl.getParameter(ext.DRAW_BUFFER0_WEBGL)", "gl.BACK");
conformance/extensions/webgl-draw-buffers.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "ext.drawBuffersWEBGL([])");
conformance/extensions/webgl-draw-buffers.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "ext.drawBuffersWEBGL([gl.NONE, gl.NONE])");
conformance/extensions/webgl-draw-buffers.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, "ext.drawBuffersWEBGL([ext.COLOR_ATTACHMENT0_WEBGL])");
conformance/extensions/webgl-draw-buffers.html:  shouldBe("gl.getParameter(ext.DRAW_BUFFER0_WEBGL)", "gl.BACK");
conformance/extensions/webgl-draw-buffers.html:  wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "ext.drawBuffersWEBGL([gl.NONE])");
conformance/extensions/webgl-draw-buffers.html:  shouldBe("gl.getParameter(ext.DRAW_BUFFER0_WEBGL)", "gl.NONE");
conformance/extensions/webgl-draw-buffers.html:  wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "ext.drawBuffersWEBGL([gl.BACK])");
conformance/extensions/webgl-draw-buffers.html:  shouldBe("gl.getParameter(ext.DRAW_BUFFER0_WEBGL)", "gl.BACK");
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-draw-buffers.html:    gl.deleteProgram(program);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-draw-buffers.html:  var sub = {numDrawingBuffers: gl.getParameter(ext.MAX_DRAW_BUFFERS_WEBGL)};
conformance/extensions/webgl-draw-buffers.html:  gl.deleteProgram(program);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-draw-buffers.html:  gl.useProgram(programWithMaxDrawBuffersEqualOne);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteProgram(programWithMaxDrawBuffersEqualOne);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-draw-buffers.html:  var tex = gl.createTexture();
conformance/extensions/webgl-draw-buffers.html:  var fb = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 1, gl.TEXTURE_2D, tex, 0);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "should not be able to attach to gl.COLOR_ATTACHMENT1");
conformance/extensions/webgl-draw-buffers.html:  gl.deleteFramebuffer(fb);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteTexture(tex);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-draw-buffers.html:    array.push(gl.COLOR_ATTACHMENT0 + ii);
conformance/extensions/webgl-draw-buffers.html:  var maxDrawingBuffers = gl.getParameter(ext.MAX_DRAW_BUFFERS_WEBGL);
conformance/extensions/webgl-draw-buffers.html:  var maxColorAttachments = gl.getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL);
conformance/extensions/webgl-draw-buffers.html:  var tex = gl.createTexture();
conformance/extensions/webgl-draw-buffers.html:  var fb = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + maxColorAttachments, gl.TEXTURE_2D, tex, 0);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "should not be able to attach pass the max attachment point: gl.COLOR_ATTACHMENT0 + " + maxColorAttachments);
conformance/extensions/webgl-draw-buffers.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + maxColorAttachments - 1, gl.TEXTURE_2D, tex, 0);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to attach to the max attachment point: gl.COLOR_ATTACHMENT0 + " + (maxColorAttachments - 1));
conformance/extensions/webgl-draw-buffers.html:  ext.drawBuffersWEBGL(makeArray(maxDrawingBuffers, gl.NONE));
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffersWEBGL with array NONE of size " + maxColorAttachments);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffersWEBGL with array attachments of size " + maxColorAttachments);
conformance/extensions/webgl-draw-buffers.html:  bufs[0] = gl.NONE;
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffersWEBGL with mixed array attachments of size " + maxColorAttachments);
conformance/extensions/webgl-draw-buffers.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "should not be able to call drawBuffersWEBGL with out of order attachments of size " + maxColorAttachments);
conformance/extensions/webgl-draw-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffersWEBGL with short array of attachments of size " + bufs.length);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteFramebuffer(fb);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteTexture(tex);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-draw-buffers.html:  var fb = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers.html:  var fb2 = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers.html:  var halfFB1 = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers.html:  var halfFB2 = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers.html:  var endsFB = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers.html:  var middleFB = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers.html:  var maxDrawingBuffers = gl.getParameter(ext.MAX_DRAW_BUFFERS_WEBGL);
conformance/extensions/webgl-draw-buffers.html:  var maxColorAttachments = gl.getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL);
conformance/extensions/webgl-draw-buffers.html:  var maxUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
conformance/extensions/webgl-draw-buffers.html:  var nones = makeArray(maxUsable, gl.NONE);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    var tex = gl.createTexture();
conformance/extensions/webgl-draw-buffers.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-draw-buffers.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/extensions/webgl-draw-buffers.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-draw-buffers.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-draw-buffers.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-draw-buffers.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ii, gl.TEXTURE_2D, tex, 0);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ii, gl.TEXTURE_2D, tex, 0);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, ii < half ? halfFB1 : halfFB2);
conformance/extensions/webgl-draw-buffers.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ii, gl.TEXTURE_2D, tex, 0);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, (ii == 0 || ii == (maxUsable - 1)) ? endsFB : middleFB);
conformance/extensions/webgl-draw-buffers.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + ii, gl.TEXTURE_2D, tex, 0);
conformance/extensions/webgl-draw-buffers.html:    var location = gl.getUniformLocation(drawProgram, "u_colors[" + ii + "]");
conformance/extensions/webgl-draw-buffers.html:    gl.uniform4fv(location, floatColor);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/webgl-draw-buffers.html:    gl.useProgram(checkProgram);
conformance/extensions/webgl-draw-buffers.html:      gl.bindTexture(gl.TEXTURE_2D, attachment.texture);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, testFB);
conformance/extensions/webgl-draw-buffers.html:      debug("attachment: " + index + " = " + wtu.glEnumToString(gl, gl.getParameter(ext.DRAW_BUFFER0_WEBGL + index)) +
conformance/extensions/webgl-draw-buffers.html:            ", " + wtu.glEnumToString(gl, gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + index, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)));
conformance/extensions/webgl-draw-buffers.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(0, 0, 0, 0);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, testFB);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(0, 1, 0, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.useProgram(drawProgram);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, testFB);
conformance/extensions/webgl-draw-buffers.html:  gl.useProgram(drawProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.clearColor(0, 1, 0, 1);
conformance/extensions/webgl-draw-buffers.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no GL error setting up the program");
conformance/extensions/webgl-draw-buffers.html:    gl.useProgram(noWriteProgram);
conformance/extensions/webgl-draw-buffers.html:    gl.deleteProgram(noWriteProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.useProgram(redProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.useProgram(redProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.useProgram(redProgramWithExtension);
conformance/extensions/webgl-draw-buffers.html:        bufs1[ii] = gl.NONE;
conformance/extensions/webgl-draw-buffers.html:        bufs2[ii] = gl.NONE;
conformance/extensions/webgl-draw-buffers.html:        bufs3[ii] = gl.NONE;
conformance/extensions/webgl-draw-buffers.html:        bufs4[ii] = gl.NONE;
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(1, 0, 0, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(0, 1, 0, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    gl.useProgram(drawProgram);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(1, 0, 0, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(0, 0, 1, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    gl.useProgram(drawProgram);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(1, 0, 0, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(1, 0, 1, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(0, 0, 0, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.useProgram(drawProgram);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, halfFB1);
conformance/extensions/webgl-draw-buffers.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, halfFB2);
conformance/extensions/webgl-draw-buffers.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, endsFB);
conformance/extensions/webgl-draw-buffers.html:      gl.bindFramebuffer(gl.FRAMEBUFFER, middleFB);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.clearColor(1, 0, 0, 1);
conformance/extensions/webgl-draw-buffers.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers.html:  gl.useProgram(drawProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  gl.useProgram(drawProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:    shouldBe("gl.getParameter(ext.DRAW_BUFFER0_WEBGL + " + ii + ")", "gl.COLOR_ATTACHMENT0 + " + ii);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers.html:    shouldBe("gl.getParameter(ext.DRAW_BUFFER0_WEBGL + " + ii + ")", "gl.NONE");
conformance/extensions/webgl-draw-buffers.html:  gl.bindTexture(gl.TEXTURE_2D, attachments[0].texture);
conformance/extensions/webgl-draw-buffers.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width * 2, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/extensions/webgl-draw-buffers.html:  shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers.html:  shouldBeTrue("gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/webgl-draw-buffers.html:  gl.deleteFramebuffer(fb);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteFramebuffer(fb2);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteFramebuffer(halfFB1);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteFramebuffer(halfFB2);
conformance/extensions/webgl-draw-buffers.html:    gl.deleteTexture(attachment.texture);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteProgram(checkProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteProgram(redProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteProgram(redProgramWithExtension);
conformance/extensions/webgl-draw-buffers.html:  gl.deleteProgram(drawProgram);
conformance/extensions/webgl-draw-buffers.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/webgl-draw-buffers.html:  gl.clearColor(1, 1, 0, 1);
conformance/extensions/webgl-draw-buffers.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:  ext.drawBuffersWEBGL([gl.NONE]);
conformance/extensions/webgl-draw-buffers.html:  gl.clearColor(1, 0, 1, 1);
conformance/extensions/webgl-draw-buffers.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    gl.clearColor(1, 0, 0, 1);
conformance/extensions/webgl-draw-buffers.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/webgl-draw-buffers.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/webgl-compressed-texture-s3tc.html:    supportedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
conformance/extensions/webgl-compressed-texture-s3tc.html:    supportedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.viewport(0, 0, width, height);
conformance/extensions/webgl-compressed-texture-s3tc.html:    var tex = gl.createTexture();
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc.html:            var tex1 = gl.createTexture();
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.bindTexture(gl.TEXTURE_2D, tex1);
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texStorage2D(gl.TEXTURE_2D, 1, format, width, height);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "allocating compressed texture via texStorage2D");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.compressedTexSubImage2D(
conformance/extensions/webgl-compressed-texture-s3tc.html:                gl.TEXTURE_2D, 0, test.subX0, test.subY0, test.subWidth, test.subHeight, format, test.subData);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture data via compressedTexSubImage2D");
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad 1");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.deleteTexture(tex1);
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.texStorage2D(gl.TEXTURE_2D, 1, format, width, height);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "allocating compressed texture via texStorage2D");
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture data via compressedTexSubImage2D");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "trying to generate mipmaps from compressed texture");
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after clearing generateMipmap error");
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad 1");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad 2");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height, 1, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "non 0 border");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width + 4, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height + 4, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 4, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 4, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 1, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 2, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 1, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 2, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.compressedTexImage2D(gl.TEXTURE_2D, 1, format, 1, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "valid dimensions for level > 0");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.compressedTexImage2D(gl.TEXTURE_2D, 1, format, 2, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "valid dimensions for level > 0");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.compressedTexImage2D(gl.TEXTURE_2D, 1, format, width, 1, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "valid dimensions for level > 0");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.compressedTexImage2D(gl.TEXTURE_2D, 1, format, width, 2, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "valid dimensions for level > 0");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, wrongFormat, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "format does not match");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 4, 0, width, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "dimension out of range");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 4, width, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "dimension out of range");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width + 4, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height + 4, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width - 4, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height - 4, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width - 1, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width - 2, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height - 1, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height - 2, format, data);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 1, 0, 4, 4, format, subData);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid offset");
conformance/extensions/webgl-compressed-texture-s3tc.html:        gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 1, 4, 4, format, subData);
conformance/extensions/webgl-compressed-texture-s3tc.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid offset");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, xoff, yoff, 4, 4, format, subData);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad");
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-s3tc.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-s3tc.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad");
conformance/extensions/webgl-compressed-texture-s3tc.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, actual);
conformance/extensions/webgl-compressed-texture-s3tc.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "reading back pixels");
conformance/extensions/oes-texture-float-with-image.html:    if (!gl.getExtension("OES_texture_float")) {
deqp/functional/gles3/fbocolorbuffer/tex2d_04.html:var ext = gl.getExtension('EXT_color_buffer_float');
conformance/extensions/webgl-compressed-texture-etc.html:    var tex = gl.createTexture();
conformance/extensions/webgl-compressed-texture-etc.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-compressed-texture-etc.html:    var haveExt = gl.getSupportedExtensions().indexOf("WEBGL_compressed_texture_etc") >= 0;
conformance/extensions/webgl-compressed-texture-etc.html:    WEBGL_compressed_texture_etc = gl.getExtension("WEBGL_compressed_texture_etc");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGB_S3TC_DXT1_EXT, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGBA_S3TC_DXT1_EXT, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGBA_S3TC_DXT5_EXT, 4, 4, 0, new Uint8Array(16))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, ETC1_RGB8_OES, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGB_PVRTC_4BPPV1_IMG, 8, 8, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGBA_PVRTC_4BPPV1_IMG, 8, 8, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_3D, 0, COMPRESSED_R11_EAC, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexSubImage2D(gl.TEXTURE_3D, 0, 0, 0, 4, 4, COMPRESSED_R11_EAC, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    var expected = isPositive ? gl.NO_ERROR : gl.INVALID_ENUM;
conformance/extensions/webgl-compressed-texture-etc.html:    var expectedSub = isPositive ? gl.NO_ERROR : [gl.INVALID_ENUM, gl.INVALID_OPERATION];
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_R11_EAC, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expectedSub, "gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, COMPRESSED_R11_EAC, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_SIGNED_R11_EAC, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RG11_EAC, 4, 4, 0, new Uint8Array(16))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_SIGNED_RG11_EAC, 4, 4, 0, new Uint8Array(16))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGB8_ETC2, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_SRGB8_ETC2, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, 4, 4, 0, new Uint8Array(8))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGBA8_ETC2_EAC, 4, 4, 0, new Uint8Array(16))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, expected, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_SRGB8_ALPHA8_ETC2_EAC, 4, 4, 0, new Uint8Array(16))");
conformance/extensions/webgl-compressed-texture-etc.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "formats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS)");
conformance/extensions/webgl-compressed-texture-etc.html:      wtu.shouldThrowOrGenerateGLError(gl, gl.INVALID_OPERATION, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_R11_EAC, 4, 4, 0, 0, null)");
conformance/extensions/webgl-compressed-texture-etc.html:      wtu.shouldThrowOrGenerateGLError(gl, gl.INVALID_OPERATION, "gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, COMPRESSED_R11_EAC, 0, null)");
conformance/extensions/webgl-compressed-texture-etc.html:      wtu.shouldThrowOrGenerateGLError(gl, gl.INVALID_OPERATION, "gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, COMPRESSED_R11_EAC, 4, 4, 4, 0, 0, null)");
conformance/extensions/webgl-compressed-texture-etc.html:      wtu.shouldThrowOrGenerateGLError(gl, gl.INVALID_OPERATION, "gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 0, 0, 0, COMPRESSED_R11_EAC, 0, null)");
conformance/extensions/webgl-compressed-texture-etc.html:      shouldThrow("gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_R11_EAC, 4, 4, 0, null)");
conformance/extensions/webgl-compressed-texture-etc.html:      shouldThrow("gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, COMPRESSED_R11_EAC, null)");
conformance/extensions/webgl-compressed-texture-etc.html:      shouldThrow("gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, COMPRESSED_R11_EAC, 4, 4, 4, 0, null)");
conformance/extensions/webgl-compressed-texture-etc.html:      shouldThrow("gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 0, 0, 0, COMPRESSED_R11_EAC, null)");
deqp/functional/gles3/fbocolorbuffer/tex2d_02.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/framework/opengl/gluObjectWrapper.js:goog.provide('framework.opengl.gluObjectWrapper');
deqp/framework/opengl/gluObjectWrapper.js:    var gluObjectWrapper = framework.opengl.gluObjectWrapper;
deqp/framework/opengl/gluObjectWrapper.js:            /** @type {gluObjectWrapper.funcGenT} */(gl.createFramebuffer),
deqp/framework/opengl/gluObjectWrapper.js:            /** @type {gluObjectWrapper.funcDelT} */(gl.deleteFramebuffer)
deqp/functional/gles3/fbocolorbuffer/tex3d_05.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/fbocolorbuffer/tex3d_00.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/framework/opengl/gluVarTypeUtil.js:goog.provide('framework.opengl.gluVarTypeUtil');
deqp/framework/opengl/gluVarTypeUtil.js:goog.require('framework.opengl.gluShaderUtil');
deqp/framework/opengl/gluVarTypeUtil.js:goog.require('framework.opengl.gluVarType');
deqp/framework/opengl/gluVarTypeUtil.js:    var gluVarTypeUtil = framework.opengl.gluVarTypeUtil;
deqp/framework/opengl/gluVarTypeUtil.js:    var gluVarType = framework.opengl.gluVarType;
deqp/framework/opengl/gluVarTypeUtil.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/framework/opengl/gluShaderUtil.js:goog.provide('framework.opengl.gluShaderUtil');
deqp/framework/opengl/gluShaderUtil.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/framework/opengl/gluShaderUtil.js:    var glslversion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT: return gluShaderUtil.DataType.FLOAT;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_VEC2: return gluShaderUtil.DataType.FLOAT_VEC2;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_VEC3: return gluShaderUtil.DataType.FLOAT_VEC3;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_VEC4: return gluShaderUtil.DataType.FLOAT_VEC4;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT2: return gluShaderUtil.DataType.FLOAT_MAT2;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT2x3: return gluShaderUtil.DataType.FLOAT_MAT2X3;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT2x4: return gluShaderUtil.DataType.FLOAT_MAT2X4;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT3x2: return gluShaderUtil.DataType.FLOAT_MAT3X2;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT3: return gluShaderUtil.DataType.FLOAT_MAT3;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT3x4: return gluShaderUtil.DataType.FLOAT_MAT3X4;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT4x2: return gluShaderUtil.DataType.FLOAT_MAT4X2;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT4x3: return gluShaderUtil.DataType.FLOAT_MAT4X3;
deqp/framework/opengl/gluShaderUtil.js:        case gl.FLOAT_MAT4: return gluShaderUtil.DataType.FLOAT_MAT4;
deqp/framework/opengl/gluShaderUtil.js:        case gl.INT: return gluShaderUtil.DataType.INT;
deqp/framework/opengl/gluShaderUtil.js:        case gl.INT_VEC2: return gluShaderUtil.DataType.INT_VEC2;
deqp/framework/opengl/gluShaderUtil.js:        case gl.INT_VEC3: return gluShaderUtil.DataType.INT_VEC3;
deqp/framework/opengl/gluShaderUtil.js:        case gl.INT_VEC4: return gluShaderUtil.DataType.INT_VEC4;
deqp/framework/opengl/gluShaderUtil.js:        case gl.UNSIGNED_INT: return gluShaderUtil.DataType.UINT;
deqp/framework/opengl/gluShaderUtil.js:        case gl.UNSIGNED_INT_VEC2: return gluShaderUtil.DataType.UINT_VEC2;
deqp/framework/opengl/gluShaderUtil.js:        case gl.UNSIGNED_INT_VEC3: return gluShaderUtil.DataType.UINT_VEC3;
deqp/framework/opengl/gluShaderUtil.js:        case gl.UNSIGNED_INT_VEC4: return gluShaderUtil.DataType.UINT_VEC4;
deqp/framework/opengl/gluShaderUtil.js:        case gl.BOOL: return gluShaderUtil.DataType.BOOL;
deqp/framework/opengl/gluShaderUtil.js:        case gl.BOOL_VEC2: return gluShaderUtil.DataType.BOOL_VEC2;
deqp/framework/opengl/gluShaderUtil.js:        case gl.BOOL_VEC3: return gluShaderUtil.DataType.BOOL_VEC3;
deqp/framework/opengl/gluShaderUtil.js:        case gl.BOOL_VEC4: return gluShaderUtil.DataType.BOOL_VEC4;
deqp/framework/opengl/gluShaderUtil.js:        case gl.SAMPLER_2D: return gluShaderUtil.DataType.SAMPLER_2D;
deqp/framework/opengl/gluShaderUtil.js:        case gl.SAMPLER_CUBE: return gluShaderUtil.DataType.SAMPLER_CUBE;
deqp/framework/opengl/gluShaderUtil.js:        case gl.SAMPLER_2D_ARRAY: return gluShaderUtil.DataType.SAMPLER_2D_ARRAY;
deqp/framework/opengl/gluShaderUtil.js:        case gl.SAMPLER_3D: return gluShaderUtil.DataType.SAMPLER_3D;
deqp/framework/opengl/gluShaderUtil.js:        case gl.SAMPLER_2D_SHADOW: return gluShaderUtil.DataType.SAMPLER_2D_SHADOW;
deqp/framework/opengl/gluShaderUtil.js:        case gl.SAMPLER_CUBE_SHADOW: return gluShaderUtil.DataType.SAMPLER_CUBE_SHADOW;
deqp/framework/opengl/gluShaderUtil.js:        case gl.SAMPLER_2D_ARRAY_SHADOW: return gluShaderUtil.DataType.SAMPLER_2D_ARRAY_SHADOW;
deqp/framework/opengl/gluShaderUtil.js:        case gl.INT_SAMPLER_2D: return gluShaderUtil.DataType.INT_SAMPLER_2D;
deqp/framework/opengl/gluShaderUtil.js:        case gl.INT_SAMPLER_CUBE: return gluShaderUtil.DataType.INT_SAMPLER_CUBE;
deqp/framework/opengl/gluShaderUtil.js:        case gl.INT_SAMPLER_2D_ARRAY: return gluShaderUtil.DataType.INT_SAMPLER_2D_ARRAY;
deqp/framework/opengl/gluShaderUtil.js:        case gl.INT_SAMPLER_3D: return gluShaderUtil.DataType.INT_SAMPLER_3D;
deqp/framework/opengl/gluShaderUtil.js:        case gl.UNSIGNED_INT_SAMPLER_2D: return gluShaderUtil.DataType.UINT_SAMPLER_2D;
deqp/framework/opengl/gluShaderUtil.js:        case gl.UNSIGNED_INT_SAMPLER_CUBE: return gluShaderUtil.DataType.UINT_SAMPLER_CUBE;
deqp/framework/opengl/gluShaderUtil.js:        case gl.UNSIGNED_INT_SAMPLER_2D_ARRAY: return gluShaderUtil.DataType.UINT_SAMPLER_2D_ARRAY;
deqp/framework/opengl/gluShaderUtil.js:        case gl.UNSIGNED_INT_SAMPLER_3D: return gluShaderUtil.DataType.UINT_SAMPLER_3D;
conformance/rendering/gl-clear.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/rendering/gl-clear.html:gl.clearColor(1,1,1,1);
conformance/rendering/gl-clear.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-clear.html:gl.clearColor(0,0,0,0);
conformance/rendering/gl-clear.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-clear.html:gl.colorMask(false, false, false, true);
conformance/rendering/gl-clear.html:gl.clearColor(1,1,1,1);
conformance/rendering/gl-clear.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-clear.html:var tex = gl.createTexture();
conformance/rendering/gl-clear.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/rendering/gl-clear.html:  gl.texImage2D(
conformance/rendering/gl-clear.html:      gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/rendering/gl-clear.html:gl.disable(gl.DEPTH_TEST);
conformance/rendering/gl-clear.html:gl.disable(gl.BLEND);
conformance/rendering/gl-clear.html:gl.colorMask(true, true, true, true);
conformance/rendering/gl-clear.html:gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/rendering/gl-clear.html:gl.colorMask(false, false, false, true);
conformance/rendering/gl-clear.html:gl.clearColor(1,1,1,1);
conformance/rendering/gl-clear.html:gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/fbocolorbuffer/tex2darray_04.html:var ext = gl.getExtension('EXT_color_buffer_float');
conformance/extensions/oes-texture-float-with-canvas.html:    if (!gl.getExtension("OES_texture_float")) {
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-video.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-video.js:        gl.clearDepth(1);
deqp/functional/gles3/fbocolorbuffer/tex2darray_03.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:goog.provide('framework.opengl.simplereference.sglrReferenceUtils');
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:    var sglrReferenceUtils = framework.opengl.simplereference.sglrReferenceUtils;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_BYTE: return rrVertexAttrib.VertexAttribType.PURE_UINT8;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_SHORT: return rrVertexAttrib.VertexAttribType.PURE_UINT16;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_INT: return rrVertexAttrib.VertexAttribType.PURE_UINT32;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.BYTE: return rrVertexAttrib.VertexAttribType.PURE_INT8;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.SHORT: return rrVertexAttrib.VertexAttribType.PURE_INT16;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.INT: return rrVertexAttrib.VertexAttribType.PURE_INT32;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.FLOAT:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.HALF_FLOAT:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            /* Not supported in WebGL 1/2 case gl.FIXED:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.DOUBLE:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_BYTE:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_SHORT:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_INT:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_INT_2_10_10_10_REV:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.BYTE:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.SHORT:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.INT:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.INT_2_10_10_10_REV:
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.BGRA: return 4;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.TRIANGLES: return rrRenderer.PrimitiveType.TRIANGLES;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.TRIANGLE_STRIP: return rrRenderer.PrimitiveType.TRIANGLE_STRIP;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.TRIANGLE_FAN: return rrRenderer.PrimitiveType.TRIANGLE_FAN;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.LINES: return rrRenderer.PrimitiveType.LINES;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.LINE_STRIP: return rrRenderer.PrimitiveType.LINE_STRIP;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.LINE_LOOP: return rrRenderer.PrimitiveType.LINE_LOOP;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.POINTS: return rrRenderer.PrimitiveType.POINTS;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_BYTE: return rrDefs.IndexType.INDEXTYPE_UINT8;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_SHORT: return rrDefs.IndexType.INDEXTYPE_UINT16;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.UNSIGNED_INT: return rrDefs.IndexType.INDEXTYPE_UINT32;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ALWAYS: return rrRenderState.TestFunc.ALWAYS;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.EQUAL: return rrRenderState.TestFunc.EQUAL;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.GEQUAL: return rrRenderState.TestFunc.GEQUAL;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.GREATER: return rrRenderState.TestFunc.GREATER;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.LEQUAL: return rrRenderState.TestFunc.LEQUAL;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.LESS: return rrRenderState.TestFunc.LESS;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.NEVER: return rrRenderState.TestFunc.NEVER;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.NOTEQUAL: return rrRenderState.TestFunc.NOTEQUAL;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.KEEP: return rrRenderState.StencilOp.KEEP;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ZERO: return rrRenderState.StencilOp.ZERO;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.REPLACE: return rrRenderState.StencilOp.REPLACE;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.INCR: return rrRenderState.StencilOp.INCR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.DECR: return rrRenderState.StencilOp.DECR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.INCR_WRAP: return rrRenderState.StencilOp.INCR_WRAP;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.DECR_WRAP: return rrRenderState.StencilOp.DECR_WRAP;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.INVERT: return rrRenderState.StencilOp.INVERT;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.FUNC_ADD: return rrRenderState.BlendEquation.ADD;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.FUNC_SUBTRACT: return rrRenderState.BlendEquation.SUBTRACT;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.FUNC_REVERSE_SUBTRACT: return rrRenderState.BlendEquation.REVERSE_SUBTRACT;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.MIN: return rrRenderState.BlendEquation.MIN;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.MAX: return rrRenderState.BlendEquation.MAX;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.MULTIPLY_KHR: return rrRenderState.BlendEquationAdvanced.MULTIPLY;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.SCREEN_KHR: return rrRenderState.BlendEquationAdvanced.SCREEN;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.OVERLAY_KHR: return rrRenderState.BlendEquationAdvanced.OVERLAY;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.DARKEN_KHR: return rrRenderState.BlendEquationAdvanced.DARKEN;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.LIGHTEN_KHR: return rrRenderState.BlendEquationAdvanced.LIGHTEN;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.COLORDODGE_KHR: return rrRenderState.BlendEquationAdvanced.COLORDODGE;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.COLORBURN_KHR: return rrRenderState.BlendEquationAdvanced.COLORBURN;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.HARDLIGHT_KHR: return rrRenderState.BlendEquationAdvanced.HARDLIGHT;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.SOFTLIGHT_KHR: return rrRenderState.BlendEquationAdvanced.SOFTLIGHT;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.DIFFERENCE_KHR: return rrRenderState.BlendEquationAdvanced.DIFFERENCE;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.EXCLUSION_KHR: return rrRenderState.BlendEquationAdvanced.EXCLUSION;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.HSL_HUE_KHR: return rrRenderState.BlendEquationAdvanced.HSL_HUE;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.HSL_SATURATION_KHR: return rrRenderState.BlendEquationAdvanced.HSL_SATURATION;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.HSL_COLOR_KHR: return rrRenderState.BlendEquationAdvanced.HSL_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.HSL_LUMINOSITY_KHR: return rrRenderState.BlendEquationAdvanced.HSL_LUMINOSITY;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ZERO: return rrRenderState.BlendFunc.ZERO;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ONE: return rrRenderState.BlendFunc.ONE;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.SRC_COLOR: return rrRenderState.BlendFunc.SRC_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ONE_MINUS_SRC_COLOR: return rrRenderState.BlendFunc.ONE_MINUS_SRC_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.DST_COLOR: return rrRenderState.BlendFunc.DST_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ONE_MINUS_DST_COLOR: return rrRenderState.BlendFunc.ONE_MINUS_DST_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.SRC_ALPHA: return rrRenderState.BlendFunc.SRC_ALPHA;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ONE_MINUS_SRC_ALPHA: return rrRenderState.BlendFunc.ONE_MINUS_SRC_ALPHA;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.DST_ALPHA: return rrRenderState.BlendFunc.DST_ALPHA;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ONE_MINUS_DST_ALPHA: return rrRenderState.BlendFunc.ONE_MINUS_DST_ALPHA;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.CONSTANT_COLOR: return rrRenderState.BlendFunc.CONSTANT_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ONE_MINUS_CONSTANT_COLOR: return rrRenderState.BlendFunc.ONE_MINUS_CONSTANT_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.CONSTANT_ALPHA: return rrRenderState.BlendFunc.CONSTANT_ALPHA;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.ONE_MINUS_CONSTANT_ALPHA: return rrRenderState.BlendFunc.ONE_MINUS_CONSTANT_ALPHA;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:            case gl.SRC_ALPHA_SATURATE: return rrRenderState.BlendFunc.SRC_ALPHA_SATURATE;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:    //         case gl.SRC1_COLOR: return rrRenderState.BlendFunc.SRC1_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:    //         case gl.ONE_MINUS_SRC1_COLOR: return rrRenderState.BlendFunc.ONE_MINUS_SRC1_COLOR;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:    //         case gl.SRC1_ALPHA: return rrRenderState.BlendFunc.SRC1_ALPHA;
deqp/framework/opengl/simplereference/sglrReferenceUtils.js:    //         case gl.ONE_MINUS_SRC1_ALPHA: return rrRenderState.BlendFunc.ONE_MINUS_SRC1_ALPHA;
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    var actual = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    var tex1 = gl.createTexture();
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    var tex2 = gl.createTexture();
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.bindTexture(gl.TEXTURE_2D, tex1);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.texImage2D(gl.TEXTURE_2D,
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:                  gl.RGBA,                                    // internalFormat
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:                  gl.RGBA,                                    // format
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:                  gl.UNSIGNED_BYTE,                           // type
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.bindTexture(gl.TEXTURE_2D, tex2);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Texture creation should succeed.");
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb1);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, ext.COLOR_ATTACHMENT0_WEBGL, gl.TEXTURE_2D, tex1, 0);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, ext.COLOR_ATTACHMENT1_WEBGL, gl.TEXTURE_2D, tex2, 0);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, ext.COLOR_ATTACHMENT2_WEBGL, gl.TEXTURE_2D, tex1, 0);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_UNSUPPORTED]);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    var texCube = gl.createTexture();
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCube);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    for (var target = gl.TEXTURE_CUBE_MAP_POSITIVE_X; target < gl.TEXTURE_CUBE_MAP_POSITIVE_X + 6; target++) {
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:        gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, ext.COLOR_ATTACHMENT0_WEBGL, gl.TEXTURE_CUBE_MAP_POSITIVE_X, texCube, 0);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, ext.COLOR_ATTACHMENT1_WEBGL, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, texCube, 0);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_COMPLETE]);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, ext.COLOR_ATTACHMENT2_WEBGL, gl.TEXTURE_CUBE_MAP_POSITIVE_X, texCube, 0);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    checkFramebuffer([gl.FRAMEBUFFER_UNSUPPORTED]);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.deleteTexture(tex1);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.deleteTexture(tex2);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.deleteTexture(texCube);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:fb1 = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:fb2 = gl.createFramebuffer();
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:var ext = gl.getExtension("WEBGL_draw_buffers");
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb1);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffersWEBGL successfully");
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be able to call drawBuffersWEBGL successfully");
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.deleteFramebuffer(fb1);
conformance/extensions/webgl-draw-buffers-framebuffer-unsupported.html:    gl.deleteFramebuffer(fb2);
deqp/functional/gles3/fbocolorbuffer/tex2d_05.html:var ext = gl.getExtension('EXT_color_buffer_float');
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:          case gl.RED:
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        debug('Testing ' + flipY + ' bindingTarget=' + (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY') +
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        gl.texImage3D(bindingTarget, 0, gl[internalFormat], canvas.width, canvas.height, 1 /* depth */, 0,
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        gl.texSubImage3D(bindingTarget, 0, 0, 0, 0, canvas.width, canvas.height, 1 /* depth */,
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        var width = gl.canvas.width;
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        var height = gl.canvas.height;
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:          var m = wtu.makeImageFromCanvas(gl.canvas);
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            if (bindingTarget == gl.TEXTURE_3D) {
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:        runTexImageTest(gl.TEXTURE_3D).then(function(val) {
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:            runTexImageTest(gl.TEXTURE_2D_ARRAY).then(function(val) {
js/tests/tex-image-and-sub-image-3d-with-webgl-canvas.js:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
conformance/extensions/oes-texture-float-with-video.html:    if (!gl.getExtension("OES_texture_float")) {
conformance/extensions/oes-vertex-array-object-bufferData.html:description("This test verifies drawing results when using gl.bufferData with the OES_vertex_array_object extension.");
conformance/extensions/oes-vertex-array-object-bufferData.html:    ext = gl.getExtension("OES_vertex_array_object");
conformance/extensions/oes-vertex-array-object-bufferData.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/oes-vertex-array-object-bufferData.html: * 1. upload some vertex buffers with gl.bufferData (eg. colors)
conformance/extensions/oes-vertex-array-object-bufferData.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/extensions/oes-vertex-array-object-bufferData.html:    var colorBuffer = gl.createBuffer(gl.ARRAY_BUFFER);
conformance/extensions/oes-vertex-array-object-bufferData.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/oes-vertex-array-object-bufferData.html:    gl.enableVertexAttribArray(colorLoc);
conformance/extensions/oes-vertex-array-object-bufferData.html:    gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-vertex-array-object-bufferData.html:        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/oes-vertex-array-object-bufferData.html:        gl.bufferData(gl.ARRAY_BUFFER, colorTypedArray, gl.STREAM_DRAW);
conformance/extensions/oes-vertex-array-object.html:    ext = gl.getExtension("OES_vertex_array_object");
conformance/extensions/oes-vertex-array-object.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/oes-vertex-array-object.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/oes-vertex-array-object.html:    gl.getParameter(VERTEX_ARRAY_BINDING_OES);
conformance/extensions/oes-vertex-array-object.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "VERTEX_ARRAY_BINDING_OES should not be queryable if extension is disabled");
conformance/extensions/oes-vertex-array-object.html:    gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES);
conformance/extensions/oes-vertex-array-object.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "VERTEX_ARRAY_BINDING_OES query should succeed if extension is enabled");
conformance/extensions/oes-vertex-array-object.html:    if (gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES) === null) {
conformance/extensions/oes-vertex-array-object.html:    shouldBeNull("gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES)");
conformance/extensions/oes-vertex-array-object.html:    if (gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES) == vao0) {
conformance/extensions/oes-vertex-array-object.html:        testPassed("gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES) is expected VAO");
conformance/extensions/oes-vertex-array-object.html:        testFailed("gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES) is not expected VAO")
conformance/extensions/oes-vertex-array-object.html:    if (gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES) == vao1) {
conformance/extensions/oes-vertex-array-object.html:        testPassed("gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES) is expected VAO");
conformance/extensions/oes-vertex-array-object.html:        testFailed("gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES) is not expected VAO")
conformance/extensions/oes-vertex-array-object.html:    shouldBeNull("gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES)");
conformance/extensions/oes-vertex-array-object.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "binding a deleted vertex array object");
conformance/extensions/oes-vertex-array-object.html:    shouldBeNull("gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES)");
conformance/extensions/oes-vertex-array-object.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "createVertexArrayOES should not set an error");
conformance/extensions/oes-vertex-array-object.html:    var attrCount = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
conformance/extensions/oes-vertex-array-object.html:        gl.bindBuffer(gl.ARRAY_BUFFER, null);
conformance/extensions/oes-vertex-array-object.html:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
conformance/extensions/oes-vertex-array-object.html:            gl.enableVertexAttribArray(n);
conformance/extensions/oes-vertex-array-object.html:            gl.disableVertexAttribArray(n);
conformance/extensions/oes-vertex-array-object.html:            var buffer = state.buffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance/extensions/oes-vertex-array-object.html:            gl.bufferData(gl.ARRAY_BUFFER, 1024, gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:            gl.vertexAttribPointer(n, 1 + n % 4, gl.FLOAT, true, n * 4, n * 4);
conformance/extensions/oes-vertex-array-object.html:            var elbuffer = state.elbuffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elbuffer);
conformance/extensions/oes-vertex-array-object.html:            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, 1024, gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:        var isEnabled = gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_ENABLED);
conformance/extensions/oes-vertex-array-object.html:        var buffer = gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
conformance/extensions/oes-vertex-array-object.html:                if ((gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_SIZE) == 1 + n % 4) &&
conformance/extensions/oes-vertex-array-object.html:                    (gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_TYPE) == gl.FLOAT) &&
conformance/extensions/oes-vertex-array-object.html:                    (gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED) == true) &&
conformance/extensions/oes-vertex-array-object.html:                    (gl.getVertexAttrib(n, gl.VERTEX_ATTRIB_ARRAY_STRIDE) == n * 4) &&
conformance/extensions/oes-vertex-array-object.html:                    (gl.getVertexAttribOffset(n, gl.VERTEX_ATTRIB_ARRAY_POINTER) == n * 4)) {
conformance/extensions/oes-vertex-array-object.html:        var elbuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttrib4f(0, 0, 1, 2, 3);
conformance/extensions/oes-vertex-array-object.html:    v = gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB);
conformance/extensions/oes-vertex-array-object.html:    v = gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttrib4f(0, 4, 5, 6, 7);
conformance/extensions/oes-vertex-array-object.html:    v = gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB);
conformance/extensions/oes-vertex-array-object.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/extensions/oes-vertex-array-object.html:        var vertexObject = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:        gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/extensions/oes-vertex-array-object.html:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/extensions/oes-vertex-array-object.html:             1.0 * s, -1.0 * s, 0.0]), gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:        gl.enableVertexAttribArray(positionLocation);
conformance/extensions/oes-vertex-array-object.html:        gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-vertex-array-object.html:            var vertexObject = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:            gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/extensions/oes-vertex-array-object.html:            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/extensions/oes-vertex-array-object.html:                0.0, 0.0, 0.0, 1.0]), gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:            gl.enableVertexAttribArray(colorLocation);
conformance/extensions/oes-vertex-array-object.html:            gl.vertexAttribPointer(colorLocation, 4, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-vertex-array-object.html:            gl.disableVertexAttribArray(colorLocation);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttrib4f(colorLocation, 0.5, 0.5, 0.5, 1);
conformance/extensions/oes-vertex-array-object.html:    gl.disableVertexAttribArray(positionLocation);
conformance/extensions/oes-vertex-array-object.html:    gl.disableVertexAttribArray(colorLocation);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttrib4f(colorLoc, 1, 0, 0, 1);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttrib4f(colorLoc, 0, 1, 0, 1);
conformance/extensions/oes-vertex-array-object.html:    gl.useProgram(program);
conformance/extensions/oes-vertex-array-object.html:    var positionBuffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance/extensions/oes-vertex-array-object.html:    gl.bufferData(
conformance/extensions/oes-vertex-array-object.html:        gl.ARRAY_BUFFER,
conformance/extensions/oes-vertex-array-object.html:        gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance/extensions/oes-vertex-array-object.html:        gl.enableVertexAttribArray(0);
conformance/extensions/oes-vertex-array-object.html:        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-vertex-array-object.html:        var elementBuffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance/extensions/oes-vertex-array-object.html:        gl.bufferData(
conformance/extensions/oes-vertex-array-object.html:            gl.ELEMENT_ARRAY_BUFFER,
conformance/extensions/oes-vertex-array-object.html:            gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:            var colorBuffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:            gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/oes-vertex-array-object.html:            gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(
conformance/extensions/oes-vertex-array-object.html:                ]), gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:            gl.enableVertexAttribArray(1);
conformance/extensions/oes-vertex-array-object.html:            gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, true, 0, 0);
conformance/extensions/oes-vertex-array-object.html:            gl.vertexAttrib4f(1, color[0] / 255, color[1] / 255, color[2] / 255, color[3] / 255);
conformance/extensions/oes-vertex-array-object.html:        gl.deleteBuffer(colorBuffers[ii]);
conformance/extensions/oes-vertex-array-object.html:        gl.deleteBuffer(elementBuffers[ii]);
conformance/extensions/oes-vertex-array-object.html:        var boundBuffer = gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
conformance/extensions/oes-vertex-array-object.html:    gl.deleteBuffer(positionBuffer);
conformance/extensions/oes-vertex-array-object.html:        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
conformance/extensions/oes-vertex-array-object.html:        if(gl.isBuffer(colorBuffers[ii])) {
conformance/extensions/oes-vertex-array-object.html:    gl.useProgram(program);
conformance/extensions/oes-vertex-array-object.html:    var elementBuffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance/extensions/oes-vertex-array-object.html:    gl.bufferData(
conformance/extensions/oes-vertex-array-object.html:        gl.ELEMENT_ARRAY_BUFFER,
conformance/extensions/oes-vertex-array-object.html:        gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:    var nonVAOColorBuffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, nonVAOColorBuffer);
conformance/extensions/oes-vertex-array-object.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(
conformance/extensions/oes-vertex-array-object.html:        ]), gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:    var positionBuffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance/extensions/oes-vertex-array-object.html:    gl.bufferData(
conformance/extensions/oes-vertex-array-object.html:        gl.ARRAY_BUFFER,
conformance/extensions/oes-vertex-array-object.html:        gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:    gl.enableVertexAttribArray(1);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-vertex-array-object.html:    gl.enableVertexAttribArray(1);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-vertex-array-object.html:    var vaoColorBuffer = gl.createBuffer();
conformance/extensions/oes-vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vaoColorBuffer);
conformance/extensions/oes-vertex-array-object.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(
conformance/extensions/oes-vertex-array-object.html:        ]), gl.STATIC_DRAW);
conformance/extensions/oes-vertex-array-object.html:    gl.enableVertexAttribArray(0);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttribPointer(0, 4, gl.UNSIGNED_BYTE, true, 0, 0);
conformance/extensions/oes-vertex-array-object.html:    gl.bindBuffer(gl.ARRAY_BUFFER, nonVAOColorBuffer);
conformance/extensions/oes-vertex-array-object.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance/extensions/oes-vertex-array-object.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
conformance/extensions/oes-vertex-array-object.html:    gl.enableVertexAttribArray(0);
conformance/extensions/oes-vertex-array-object.html:    gl.vertexAttribPointer(0, 4, gl.UNSIGNED_BYTE, true, 0, 0);
conformance/extensions/oes-vertex-array-object.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0);
deqp/functional/gles3/fbocolorbuffer/blend.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/fboinvalidate/fboinvalidate_test_generator.py:var extention = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/fbocolorbuffer/tex3d_03.html:var ext = gl.getExtension('EXT_color_buffer_float');
conformance/rendering/gl-viewport-test.html:      gl.viewport(viewportX, viewportY, viewportWidth, viewportHeight);
conformance/rendering/gl-viewport-test.html:      gl.clear(gl.COLOR_BUFFER_BIT);
conformance/rendering/gl-viewport-test.html:      var x1 = clipSpaceToPixelSpace(-0.5, viewportX, viewportWidth, gl.canvas.width);
conformance/rendering/gl-viewport-test.html:      var x2 = clipSpaceToPixelSpace( 0.5, viewportX, viewportWidth, gl.canvas.width);
conformance/rendering/gl-viewport-test.html:      var y1 = clipSpaceToPixelSpace(-0.5, viewportY, viewportHeight, gl.canvas.height);
conformance/rendering/gl-viewport-test.html:      var y2 = clipSpaceToPixelSpace( 0.5, viewportY, viewportHeight, gl.canvas.height);
conformance/rendering/gl-viewport-test.html:    var w = gl.canvas.width;
conformance/rendering/gl-viewport-test.html:    var h = gl.canvas.height;
conformance/rendering/gl-viewport-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-image.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-image.js:        gl.clearDepth(1);
deqp/functional/gles3/fbocolorbuffer/texcube_00.html:var ext = gl.getExtension('EXT_color_buffer_float');
conformance/extensions/oes-texture-half-float-linear.html:    if (!(ext = gl.getExtension(extensionTypeName))) {
conformance/extensions/oes-texture-half-float-linear.html:    gl.HALF_FLOAT_OES = ext.HALF_FLOAT_OES;
deqp/functional/gles3/fbocolorbuffer/tex2d_01.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/fbocolorbuffer/tex3d_02.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/common/tcuSurface.js', ['framework.common.tcuSurface'], ['framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluDrawUtil.js', ['framework.opengl.gluDrawUtil'], ['framework.opengl.gluShaderProgram'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluObjectWrapper.js', ['framework.opengl.gluObjectWrapper'], [], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluPixelTransfer.js', ['framework.opengl.gluPixelTransfer'], ['framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluShaderProgram.js', ['framework.opengl.gluShaderProgram'], [], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluShaderUtil.js', ['framework.opengl.gluShaderUtil'], ['framework.delibs.debase.deMath'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluStrUtil.js', ['framework.opengl.gluStrUtil'], [], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluTexture.js', ['framework.opengl.gluTexture'], ['framework.common.tcuCompressedTexture', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluTextureUtil.js', ['framework.opengl.gluTextureUtil'], ['framework.common.tcuCompressedTexture', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluVarType.js', ['framework.opengl.gluVarType'], ['framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/gluVarTypeUtil.js', ['framework.opengl.gluVarTypeUtil'], ['framework.opengl.gluShaderUtil', 'framework.opengl.gluVarType'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/simplereference/sglrGLContext.js', ['framework.opengl.simplereference.sglrGLContext'], ['framework.common.tcuPixelFormat', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrDefs', 'framework.referencerenderer.rrMultisamplePixelBufferAccess', 'framework.referencerenderer.rrRenderState', 'framework.referencerenderer.rrRenderer', 'framework.referencerenderer.rrVertexAttrib'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/simplereference/sglrReferenceContext.js', ['framework.opengl.simplereference.sglrReferenceContext'], ['framework.common.tcuMatrix', 'framework.common.tcuMatrixUtil', 'framework.common.tcuPixelFormat', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.opengl.simplereference.sglrReferenceUtils', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrDefs', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrMultisamplePixelBufferAccess', 'framework.referencerenderer.rrRenderState', 'framework.referencerenderer.rrRenderer', 'framework.referencerenderer.rrVertexAttrib'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/simplereference/sglrReferenceContextTest.js', ['framework.opengl.simplereference.sglrReferenceContextTest'], ['framework.common.tcuLogImage', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.opengl.gluDrawUtil', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrFragmentOperations', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrShadingContext', 'framework.referencerenderer.rrVertexAttrib', 'framework.referencerenderer.rrVertexPacket'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/simplereference/sglrReferenceUtils.js', ['framework.opengl.simplereference.sglrReferenceUtils'], ['framework.common.tcuFloat', 'framework.delibs.debase.deMath', 'framework.referencerenderer.rrDefs', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrRenderState', 'framework.referencerenderer.rrRenderer', 'framework.referencerenderer.rrShaders', 'framework.referencerenderer.rrVertexAttrib'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/opengl/simplereference/sglrShaderProgram.js', ['framework.opengl.simplereference.sglrShaderProgram'], ['framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.referencerenderer.rrDefs', 'framework.referencerenderer.rrFragmentOperations', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrShaders', 'framework.referencerenderer.rrShadingContext', 'framework.referencerenderer.rrVertexAttrib', 'framework.referencerenderer.rrVertexPacket'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/referencerenderer/rrRenderer.js', ['framework.referencerenderer.rrRenderer'], ['framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deString', 'framework.delibs.debase.deUtil', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrDefs', 'framework.referencerenderer.rrFragmentOperations', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrMultisamplePixelBufferAccess', 'framework.referencerenderer.rrRenderState', 'framework.referencerenderer.rrShadingContext', 'framework.referencerenderer.rrVertexAttrib', 'framework.referencerenderer.rrVertexPacket'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/framework/referencerenderer/rrUtil.js', ['framework.referencerenderer.rrUtil'], ['framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrReferenceContext'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fApiCase.js', ['functional.gles3.es3fApiCase'], ['framework.common.tcuTestCase', 'framework.opengl.gluStrUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fAttribLocationTests.js', ['functional.gles3.es3fAttribLocationTests'], ['framework.opengl.gluShaderUtil', 'modules.shared.glsAttributeLocationTests'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fBuiltinPrecisionTests.js', ['functional.gles3.es3fBuiltinPrecisionTests'], ['framework.common.tcuTestCase', 'framework.opengl.gluShaderProgram', 'modules.shared.glsBuiltinPrecisionTests'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fClippingTests.js', ['functional.gles3.es3fClippingTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderUtil', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestCase', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fDefaultVertexAttributeTests.js', ['functional.gles3.es3fDefaultVertexAttributeTests'], ['framework.common.tcuLogImage', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fDrawTests.js', ['functional.gles3.es3fDrawTests'], ['framework.common.tcuLogImage', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.delibs.debase.deUtil', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'framework.opengl.gluVarType', 'framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrFragmentOperations', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrShadingContext', 'framework.referencerenderer.rrVertexAttrib', 'framework.referencerenderer.rrVertexPacket', 'modules.shared.glsDrawTests'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFboColorbufferTests.js', ['functional.gles3.es3fFboColorbufferTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestCase', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFboDepthbufferTests.js', ['functional.gles3.es3fFboDepthbufferTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestCase', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFboInvalidateTests.js', ['functional.gles3.es3fFboInvalidateTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestCase', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFboMultisampleTests.js', ['functional.gles3.es3fFboMultisampleTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluTextureUtil', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestCase', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFboRenderTest.js', ['functional.gles3.es3fFboRenderTest'], ['framework.common.tcuImageCompare', 'framework.common.tcuLogImage', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.delibs.debase.deUtil', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFboStencilbufferTests.js', ['functional.gles3.es3fFboStencilbufferTests'], ['framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestCase', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFboTestCase.js', ['functional.gles3.es3fFboTestCase'], ['framework.common.tcuImageCompare', 'framework.common.tcuPixelFormat', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.referencerenderer.rrRenderer', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFboTestUtil.js', ['functional.gles3.es3fFboTestUtil'], ['framework.common.tcuMatrix', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrFragmentOperations', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrShadingContext', 'framework.referencerenderer.rrVertexAttrib', 'framework.referencerenderer.rrVertexPacket'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFragDepthTests.js', ['functional.gles3.es3fFragDepthTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFragmentOutputTests.js', ['functional.gles3.es3fFragmentOutputTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fFramebufferBlitTests.js', ['functional.gles3.es3fFramebufferBlitTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestCase', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fInstancedRenderingTests.js', ['functional.gles3.es3fInstancedRenderingTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fLifetimeTests.js', ['functional.gles3.es3fLifetimeTests'], ['framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderProgram', 'modules.shared.glsLifetimeTests', 'modules.shared.glsTextureTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fMultisampleTests.js', ['functional.gles3.es3fMultisampleTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuLogImage', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluStrUtil', 'framework.opengl.gluTextureUtil', 'modules.shared.glsTextureTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fNegativeBufferApiTests.js', ['functional.gles3.es3fNegativeBufferApiTests'], ['framework.common.tcuTestCase', 'framework.opengl.gluStrUtil', 'functional.gles3.es3fApiCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fNegativeShaderApiTests.js', ['functional.gles3.es3fNegativeShaderApiTests'], ['framework.common.tcuTestCase', 'framework.opengl.gluShaderProgram', 'functional.gles3.es3fApiCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fNegativeStateApiTests.js', ['functional.gles3.es3fNegativeStateApiTests'], ['framework.common.tcuTestCase', 'framework.opengl.gluShaderProgram', 'functional.gles3.es3fApiCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fNegativeTextureApiTests.js', ['functional.gles3.es3fNegativeTextureApiTests'], ['framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.opengl.gluTexture', 'functional.gles3.es3fApiCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js', ['functional.gles3.es3fNegativeVertexArrayApiTests'], ['framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.opengl.gluShaderProgram', 'framework.opengl.simplereference.sglrGLContext', 'functional.gles3.es3fApiCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fOcclusionQueryTests.js', ['functional.gles3.es3fOcclusionQueryTests'], ['framework.common.tcuLogImage', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fPixelBufferObjectTest.js', ['functional.gles3.es3fPixelBufferObjectTest'], ['framework.common.tcuImageCompare', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fPrimitiveRestartTests.js', ['functional.gles3.es3fPrimitiveRestartTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fRasterizerDiscardTests.js', ['functional.gles3.es3fRasterizerDiscardTests'], ['framework.common.tcuLogImage', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fReadPixelTests.js', ['functional.gles3.es3fReadPixelTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderApiTests.js', ['functional.gles3.es3fShaderApiTests'], ['framework.common.tcuTestCase', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram', 'functional.gles3.es3fApiCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderBuiltinVarTests.js', ['functional.gles3.es3fShaderBuiltinVarTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuLogImage', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluVarType', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrFragmentOperations', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrMultisamplePixelBufferAccess', 'framework.referencerenderer.rrRenderState', 'framework.referencerenderer.rrRenderer', 'framework.referencerenderer.rrShadingContext', 'framework.referencerenderer.rrVertexAttrib', 'framework.referencerenderer.rrVertexPacket', 'modules.shared.glsShaderExecUtil', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderCommonFunctionTests.js', ['functional.gles3.es3fShaderCommonFunctionTests'], ['framework.common.tcuFloat', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluVarType', 'modules.shared.glsShaderExecUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderDerivateTests.js', ['functional.gles3.es3fShaderDerivateTests'], ['framework.common.tcuFloat', 'framework.common.tcuInterval', 'framework.common.tcuLogImage', 'framework.common.tcuMatrix', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuStringTemplate', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluPixelTransfer', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderIndexingTests.js', ['functional.gles3.es3fShaderIndexingTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuStringTemplate', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderLoopTests.js', ['functional.gles3.es3fShaderLoopTests'], ['framework.common.tcuStringTemplate', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderMatrixTest.js', ['functional.gles3.es3fShaderMatrixTest'], ['framework.common.tcuMatrix', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderUtil', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderOperatorTests.js', ['functional.gles3.es3fShaderOperatorTests'], ['framework.common.tcuMatrix', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderPackingFunctionTests.js', ['functional.gles3.es3fShaderPackingFunctionTests'], ['framework.common.tcuFloat', 'framework.common.tcuMatrixUtil', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluVarType', 'modules.shared.glsShaderExecUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderPrecisionTests.js', ['functional.gles3.es3fShaderPrecisionTests'], ['framework.common.tcuFloat', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderStructTests.js', ['functional.gles3.es3fShaderStructTests'], ['framework.common.tcuStringTemplate', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.opengl.gluTexture', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fShaderTextureFunctionTests.js', ['functional.gles3.es3fShaderTextureFunctionTests'], ['framework.common.tcuMatrix', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'framework.opengl.gluTextureUtil', 'modules.shared.glsShaderRenderCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fSyncTests.js', ['functional.gles3.es3fSyncTests'], ['framework.common.tcuTestCase', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderProgram'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fTextureFilteringTests.js', ['functional.gles3.es3fTextureFilteringTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuLogImage', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexLookupVerifier', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'framework.opengl.gluTextureUtil', 'functional.gles3.es3fFboTestUtil', 'modules.shared.glsTextureTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fTextureFormatTests.js', ['functional.gles3.es3fTextureFormatTests'], ['framework.common.tcuCompressedTexture', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluStrUtil', 'framework.opengl.gluTexture', 'framework.opengl.gluTextureUtil', 'modules.shared.glsTextureTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fTextureShadowTests.js', ['functional.gles3.es3fTextureShadowTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuLogImage', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexCompareVerifier', 'framework.common.tcuTexLookupVerifier', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deString', 'framework.delibs.debase.deUtil', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'framework.opengl.gluTextureUtil', 'framework.referencerenderer.rrMultisamplePixelBufferAccess', 'modules.shared.glsTextureTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fTextureSpecificationTests.js', ['functional.gles3.es3fTextureSpecificationTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuLogImage', 'framework.common.tcuPixelFormat', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.referencerenderer.rrUtil', 'functional.gles3.es3fFboTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fTextureWrapTests.js', ['functional.gles3.es3fTextureWrapTests'], ['framework.common.tcuCompressedTexture', 'framework.common.tcuPixelFormat', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexLookupVerifier', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'framework.opengl.gluTextureUtil', 'modules.shared.glsTextureTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fTransformFeedbackTests.js', ['functional.gles3.es3fTransformFeedbackTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluVarType', 'framework.opengl.gluVarTypeUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fUniformApiTests.js', ['functional.gles3.es3fUniformApiTests'], ['framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'framework.opengl.gluVarType'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fUniformBlockTests.js', ['functional.gles3.es3fUniformBlockTests'], ['framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderUtil', 'modules.shared.glsRandomUniformBlockCase', 'modules.shared.glsUniformBlockCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fVertexArrayObjectTests.js', ['functional.gles3.es3fVertexArrayObjectTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.delibs.debase.deUtil', 'framework.opengl.gluShaderProgram'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/functional/gles3/es3fVertexArrayTests.js', ['functional.gles3.es3fVertexArrayTests'], ['framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.delibs.debase.deUtil', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTexture', 'framework.opengl.gluVarType', 'modules.shared.glsVertexArrayTests'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsAttributeLocationTests.js', ['modules.shared.glsAttributeLocationTests'], ['framework.common.tcuStringTemplate', 'framework.common.tcuTestCase', 'framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsBufferTestUtil.js', ['modules.shared.glsBufferTestUtil'], ['framework.common.tcuImageCompare', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.delibs.debase.deUtil', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsBuiltinPrecisionTests.js', ['modules.shared.glsBuiltinPrecisionTests'], ['framework.common.tcuFloatFormat', 'framework.common.tcuInterval', 'framework.common.tcuMatrix', 'framework.common.tcuMatrixUtil', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluVarType', 'framework.opengl.simplereference.sglrGLContext', 'modules.shared.glsBuiltinPrecisionTestsUnitTests', 'modules.shared.glsShaderExecUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsDrawTests.js', ['modules.shared.glsDrawTests'], ['framework.common.tcuFloat', 'framework.common.tcuImageCompare', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluStrUtil', 'framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrFragmentOperations', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrShadingContext', 'framework.referencerenderer.rrVertexAttrib', 'framework.referencerenderer.rrVertexPacket'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsFboCompletenessTests.js', ['modules.shared.glsFboCompletenessTests'], ['framework.common.tcuTestCase', 'framework.opengl.gluObjectWrapper', 'framework.opengl.gluStrUtil', 'modules.shared.glsFboUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsFboUtil.js', ['modules.shared.glsFboUtil'], ['framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsLifetimeTests.js', ['modules.shared.glsLifetimeTests'], ['framework.common.tcuImageCompare', 'framework.common.tcuStringTemplate', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderProgram', 'modules.shared.glsTextureTestUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsRandomUniformBlockCase.js', ['modules.shared.glsRandomUniformBlockCase'], ['framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderUtil', 'modules.shared.glsUniformBlockCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsSamplerObjectTest.js', ['modules.shared.glsSamplerObjectTest'], ['framework.common.tcuImageCompare', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.common.tcuTextureUtil', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsShaderExecUtil.js', ['modules.shared.glsShaderExecUtil'], ['framework.common.tcuMatrix', 'framework.common.tcuMatrixUtil', 'framework.common.tcuTexture', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil', 'framework.opengl.gluTextureUtil', 'framework.opengl.gluVarType'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsShaderLibrary.js', ['modules.shared.glsShaderLibrary'], ['framework.common.tcuTestCase', 'framework.opengl.gluShaderUtil', 'modules.shared.glsShaderLibraryCase'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsShaderLibraryCase.js', ['modules.shared.glsShaderLibraryCase'], ['framework.common.tcuTestCase', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsShaderRenderCase.js', ['modules.shared.glsShaderRenderCase'], ['framework.common.tcuImageCompare', 'framework.common.tcuMatrix', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluTexture', 'framework.opengl.gluTextureUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsTextureTestUtil.js', ['modules.shared.glsTextureTestUtil'], ['framework.common.tcuImageCompare', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuStringTemplate', 'framework.common.tcuSurface', 'framework.common.tcuTexCompareVerifier', 'framework.common.tcuTexLookupVerifier', 'framework.common.tcuTexture', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsUniformBlockCase.js', ['modules.shared.glsUniformBlockCase'], ['framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.delibs.debase.deString', 'framework.delibs.debase.deUtil', 'framework.opengl.gluDrawUtil', 'framework.opengl.gluShaderProgram', 'framework.opengl.gluShaderUtil'], false);
deqp/deqp-deps.js:goog.addDependency('../../../deqp/modules/shared/glsVertexArrayTests.js', ['modules.shared.glsVertexArrayTests'], ['framework.common.tcuFloat', 'framework.common.tcuImageCompare', 'framework.common.tcuLogImage', 'framework.common.tcuPixelFormat', 'framework.common.tcuRGBA', 'framework.common.tcuSurface', 'framework.common.tcuTestCase', 'framework.delibs.debase.deMath', 'framework.delibs.debase.deRandom', 'framework.opengl.gluShaderUtil', 'framework.opengl.simplereference.sglrGLContext', 'framework.opengl.simplereference.sglrReferenceContext', 'framework.opengl.simplereference.sglrShaderProgram', 'framework.referencerenderer.rrFragmentOperations', 'framework.referencerenderer.rrGenericVector', 'framework.referencerenderer.rrShadingContext', 'framework.referencerenderer.rrVertexAttrib', 'framework.referencerenderer.rrVertexPacket'], false);
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.getParameter(MAX_TEXTURE_MAX_ANISOTROPY_EXT);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "MAX_TEXTURE_MAX_ANISOTROPY_EXT should not be queryable if extension is disabled");
conformance/extensions/ext-texture-filter-anisotropic.html:    var texture = gl.createTexture();
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.getTexParameter(gl.TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "TEXTURE_MAX_ANISOTROPY_EXT should not be queryable if extension is disabled");
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.texParameterf(gl.TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, 1);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "TEXTURE_MAX_ANISOTROPY_EXT should not be settable if extension is disabled");
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.texParameteri(gl.TEXTURE_2D, TEXTURE_MAX_ANISOTROPY_EXT, 1);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "TEXTURE_MAX_ANISOTROPY_EXT should not be settable if extension is disabled");
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.deleteTexture(texture);
conformance/extensions/ext-texture-filter-anisotropic.html:    var max_anisotropy = gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "MAX_TEXTURE_MAX_ANISOTROPY_EXT query should succeed if extension is enabled");
conformance/extensions/ext-texture-filter-anisotropic.html:    var texture = gl.createTexture();
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/extensions/ext-texture-filter-anisotropic.html:    var queried_value = gl.getTexParameter(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "TEXTURE_MAX_ANISOTROPY_EXT query should succeed if extension is enabled");
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.texParameterf(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, 0);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texParameterf TEXTURE_MAX_ANISOTROPY_EXT set to < 1 should be an invalid value");
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.texParameteri(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, 0);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "texParameteri TEXTURE_MAX_ANISOTROPY_EXT set to < 1 should be an invalid value");
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.texParameterf(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, max_anisotropy);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameterf TEXTURE_MAX_ANISOTROPY_EXT set to >= 2 should succeed");
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.texParameteri(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, max_anisotropy);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameteri TEXTURE_MAX_ANISOTROPY_EXT set to >= 2 should succeed");
conformance/extensions/ext-texture-filter-anisotropic.html:    var queried_value = gl.getTexParameter(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT);
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.texParameterf(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, 1.5);
conformance/extensions/ext-texture-filter-anisotropic.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texParameterf TEXTURE_MAX_ANISOTROPY_EXT set to 1.5 should succeed");
conformance/extensions/ext-texture-filter-anisotropic.html:    queried_value = gl.getTexParameter(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT);
conformance/extensions/ext-texture-filter-anisotropic.html:    gl.deleteTexture(texture);
deqp/functional/gles3/fboinvalidate/format_00.html:var extention = gl.getExtension('EXT_color_buffer_float');
deqp/framework/opengl/simplereference/sglrReferenceContext.js:goog.provide('framework.opengl.simplereference.sglrReferenceContext');
deqp/framework/opengl/simplereference/sglrReferenceContext.js:goog.require('framework.opengl.gluShaderUtil');
deqp/framework/opengl/simplereference/sglrReferenceContext.js:goog.require('framework.opengl.gluTextureUtil');
deqp/framework/opengl/simplereference/sglrReferenceContext.js:goog.require('framework.opengl.simplereference.sglrReferenceUtils');
deqp/framework/opengl/simplereference/sglrReferenceContext.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/framework/opengl/simplereference/sglrReferenceContext.js:    var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:    var sglrReferenceUtils = framework.opengl.simplereference.sglrReferenceUtils;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:    var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (error !== gl.NONE) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_NEGATIVE_X: return tcuTexture.CubeFace.CUBEFACE_NEGATIVE_X;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_POSITIVE_X: return tcuTexture.CubeFace.CUBEFACE_POSITIVE_X;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_NEGATIVE_Y: return tcuTexture.CubeFace.CUBEFACE_NEGATIVE_Y;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_POSITIVE_Y: return tcuTexture.CubeFace.CUBEFACE_POSITIVE_Y;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_NEGATIVE_Z: return tcuTexture.CubeFace.CUBEFACE_NEGATIVE_Z;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_POSITIVE_Z: return tcuTexture.CubeFace.CUBEFACE_POSITIVE_Z;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.maxTextureImageUnits = /** @type {number} */ (gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.maxTexture2DSize = /** @type {number} */ (gl.getParameter(gl.MAX_TEXTURE_SIZE));
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.maxTextureCubeSize = /** @type {number} */ (gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE));
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.maxRenderbufferSize = /** @type {number} */ (gl.getParameter(gl.MAX_RENDERBUFFER_SIZE));
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.maxVertexAttribs = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.maxTexture2DArrayLayers = /** @type {number} */ (gl.getParameter(gl.MAX_ARRAY_TEXTURE_LAYERS));
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.maxTexture3DSize = /** @type {number} */ (gl.getParameter(gl.MAX_3D_TEXTURE_SIZE));
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            sglrReferenceContext.GLU_EXPECT_NO_ERROR(gl.getError(), gl.NO_ERROR);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        addExtension("gl.EXT_color_buffer_half_float");
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        addExtension("gl.WEBGL_color_buffer_float");
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_2D:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_2D_ARRAY:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_3D:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            // case gl.TEXTURE_CUBE_MAP_ARRAY:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.COLOR_ATTACHMENT0: return sglrReferenceContext.AttachmentPoint.ATTACHMENTPOINT_COLOR0;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DEPTH_ATTACHMENT: return sglrReferenceContext.AttachmentPoint.ATTACHMENTPOINT_DEPTH;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.STENCIL_ATTACHMENT: return sglrReferenceContext.AttachmentPoint.ATTACHMENTPOINT_STENCIL;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_2D: return sglrReferenceContext.TexTarget.TEXTARGET_2D;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_POSITIVE_X: return sglrReferenceContext.TexTarget.TEXTARGET_CUBE_MAP_POSITIVE_X;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_POSITIVE_Y: return sglrReferenceContext.TexTarget.TEXTARGET_CUBE_MAP_POSITIVE_Y;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_POSITIVE_Z: return sglrReferenceContext.TexTarget.TEXTARGET_CUBE_MAP_POSITIVE_Z;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_NEGATIVE_X: return sglrReferenceContext.TexTarget.TEXTARGET_CUBE_MAP_NEGATIVE_X;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_NEGATIVE_Y: return sglrReferenceContext.TexTarget.TEXTARGET_CUBE_MAP_NEGATIVE_Y;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP_NEGATIVE_Z: return sglrReferenceContext.TexTarget.TEXTARGET_CUBE_MAP_NEGATIVE_Z;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.type = gl.FLOAT;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.func = gl.ALWAYS;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.opStencilFail = gl.KEEP;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.opDepthFail = gl.KEEP;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.opDepthPass = gl.KEEP;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.m_lastError = gl.NO_ERROR;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.m_depthFunc = gl.LESS;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.m_blendModeRGB = gl.FUNC_ADD;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.m_blendModeAlpha = gl.FUNC_ADD;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.m_blendFactorSrcRGB = gl.ONE;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.m_blendFactorDstRGB = gl.ZERO;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.m_blendFactorSrcAlpha = gl.ONE;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {number} */ this.m_blendFactorDstAlpha = gl.ZERO;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.m_emptyTex2D.init(gl.TEXTURE_2D);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.m_emptyTexCube.init(gl.TEXTURE_CUBE_MAP);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.m_emptyTex2DArray.init(gl.TEXTURE_2D_ARRAY);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.m_emptyTex3D.init(gl.TEXTURE_3D);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (deMath.deInBounds32(texture, gl.TEXTURE0, gl.TEXTURE0 + this.m_textureUnits.length))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.m_activeTexture = texture - gl.TEXTURE0;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.m_lastError == gl.NO_ERROR)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.m_lastError = gl.NO_ERROR;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError((target != gl.TEXTURE_2D &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    target != gl.TEXTURE_CUBE_MAP &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    target != gl.TEXTURE_2D_ARRAY &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    target != gl.TEXTURE_3D), // &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    // target != gl.TEXTURE_CUBE_MAP_ARRAY),
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                case gl.TEXTURE_2D: this.setTex2DBinding(unitNdx, null); break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                case gl.TEXTURE_CUBE_MAP: this.setTexCubeBinding(unitNdx, null); break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                case gl.TEXTURE_2D_ARRAY: this.setTex2DArrayBinding(unitNdx, null); break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                case gl.TEXTURE_3D: this.setTex3DBinding(unitNdx, null); break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    case gl.TEXTURE_2D: expectedType = sglrReferenceContext.TextureType.TYPE_2D; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    case gl.TEXTURE_CUBE_MAP: expectedType = sglrReferenceContext.TextureType.TYPE_CUBE_MAP; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    case gl.TEXTURE_2D_ARRAY: expectedType = sglrReferenceContext.TextureType.TYPE_2D_ARRAY; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    case gl.TEXTURE_3D: expectedType = sglrReferenceContext.TextureType.TYPE_3D; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError((texture.textureType != expectedType), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                case gl.TEXTURE_2D: this.setTex2DBinding(unitNdx, texture); break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                case gl.TEXTURE_CUBE_MAP: this.setTexCubeBinding(unitNdx, texture); break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                case gl.TEXTURE_2D_ARRAY: this.setTex2DArrayBinding(unitNdx, texture); break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                case gl.TEXTURE_3D: this.setTex3DBinding(unitNdx, texture); break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:    * @param {framework.opengl.simplereference.sglrReferenceContext.Framebuffer} fbo
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError((target != gl.FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    target != gl.DRAW_FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    target != gl.READ_FRAMEBUFFER), gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            /** @type {number} */ var bindingTarget = ndx ? gl.DRAW_FRAMEBUFFER : gl.READ_FRAMEBUFFER;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (target != gl.FRAMEBUFFER && target != bindingTarget)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(target != gl.RENDERBUFFER, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNPACK_ALIGNMENT:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError((param != 1 && param != 2 && param != 4 && param != 8), gl.INVALID_VALUE)) return;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.PACK_ALIGNMENT:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError((param != 1 && param != 2 && param != 4 && param != 8), gl.INVALID_VALUE)) return;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNPACK_ROW_LENGTH:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(param < 0, gl.INVALID_VALUE)) return;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNPACK_SKIP_ROWS:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(param < 0, gl.INVALID_VALUE)) return;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNPACK_SKIP_PIXELS:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(param < 0, gl.INVALID_VALUE)) return;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNPACK_IMAGE_HEIGHT:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(param < 0, gl.INVALID_VALUE)) return;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNPACK_SKIP_IMAGES:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(param < 0, gl.INVALID_VALUE)) return;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(width < 0 || height < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.BLEND: this.m_blendEnabled = true; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.SCISSOR_TEST: this.m_scissorEnabled = true; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DEPTH_TEST: this.m_depthTestEnabled = true; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.STENCIL_TEST: this.m_stencilTestEnabled = true; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.POLYGON_OFFSET_FILL: this.m_polygonOffsetFillEnabled = true; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DITHER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.BLEND: this.m_blendEnabled = false; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.SCISSOR_TEST: this.m_scissorEnabled = false; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DEPTH_TEST: this.m_depthTestEnabled = false; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.STENCIL_TEST: this.m_stencilTestEnabled = false; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.POLYGON_OFFSET_FILL: this.m_polygonOffsetFillEnabled = false; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DITHER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.stencilFuncSeparate(gl.FRONT_AND_BACK, func, ref, mask);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {boolean} */ var setFront = face == gl.FRONT || face == gl.FRONT_AND_BACK;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {boolean} */ var setBack = face == gl.BACK || face == gl.FRONT_AND_BACK;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!sglrReferenceContext.isValidCompareFunc(func), gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!setFront && !setBack, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.NEVER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LESS:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LEQUAL:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.GREATER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.GEQUAL:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.EQUAL:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.NOTEQUAL:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ALWAYS:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.KEEP:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ZERO:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.REPLACE:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.INCR:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.INCR_WRAP:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DECR:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DECR_WRAP:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.INVERT:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.stencilOpSeparate(gl.FRONT_AND_BACK, sfail, dpfail, dppass);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {boolean} */ var setFront = face == gl.FRONT || face == gl.FRONT_AND_BACK;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {boolean} */ var setBack = face == gl.BACK || face == gl.FRONT_AND_BACK;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!setFront && !setBack, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!sglrReferenceContext.isValidCompareFunc(func), gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        return mode == gl.FUNC_ADD ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            mode == gl.FUNC_SUBTRACT ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            mode == gl.FUNC_REVERSE_SUBTRACT ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            mode == gl.MIN ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            mode == gl.MAX;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ZERO:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ONE:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.SRC_COLOR:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ONE_MINUS_SRC_COLOR:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DST_COLOR:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ONE_MINUS_DST_COLOR:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.SRC_ALPHA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ONE_MINUS_SRC_ALPHA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.DST_ALPHA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ONE_MINUS_DST_ALPHA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.CONSTANT_COLOR:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ONE_MINUS_CONSTANT_COLOR:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.CONSTANT_ALPHA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ONE_MINUS_CONSTANT_ALPHA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.SRC_ALPHA_SATURATE:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!sglrReferenceContext.isValidBlendEquation(mode), gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.stencilMaskSeparate(gl.FRONT_AND_BACK, mask);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {boolean} */ var setFront = face == gl.FRONT || face == gl.FRONT_AND_BACK;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {boolean} */ var setBack = face == gl.BACK || face == gl.FRONT_AND_BACK;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!setFront && !setBack, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(effectiveSize <= 0 || effectiveSize > 4, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(type != gl.BYTE && type != gl.UNSIGNED_BYTE &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    type != gl.SHORT && type != gl.UNSIGNED_SHORT &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    type != gl.INT && type != gl.UNSIGNED_INT &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    type != gl.FLOAT && type != gl.HALF_FLOAT &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    type != gl.INT_2_10_10_10_REV && type != gl.UNSIGNED_INT_2_10_10_10_REV, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(normalized != true && normalized != false, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(stride < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError((type == gl.INT_2_10_10_10_REV || type == gl.UNSIGNED_INT_2_10_10_10_REV) && effectiveSize != 4, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(this.m_vertexArrayBinding != null && this.m_arrayBufferBinding == null && offset != 0, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(size <= 0 || size > 4, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(type != gl.BYTE && type != gl.UNSIGNED_BYTE &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    type != gl.SHORT && type != gl.UNSIGNED_SHORT &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    type != gl.INT && type != gl.UNSIGNED_INT, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(stride < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(this.m_vertexArrayBinding != null && this.m_arrayBufferBinding == null && offset != 0, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(index >= this.m_limits.maxVertexAttribs, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!(program), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case (gl.VIEWPORT): return new Int32Array(this.m_viewport);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case (gl.SCISSOR_BOX): return new Int32Array(this.m_scissorBox);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!this.m_currentProgram, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!uniform, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(type != gluShaderUtil.DataType.INT, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (this.conditionalSetError(uniform.type != type, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        var extensions = gl.getSupportedExtensions(); //TODO: Let's just return gl's supported extensions for now
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        return gl.getExtension(name); //TODO: Let's just return gl's supported extensions for now
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!program, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(w < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ARRAY_BUFFER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.COPY_READ_BUFFER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.COPY_WRITE_BUFFER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ELEMENT_ARRAY_BUFFER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.PIXEL_PACK_BUFFER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.PIXEL_UNPACK_BUFFER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TRANSFORM_FEEDBACK_BUFFER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNIFORM_BUFFER:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ARRAY_BUFFER: this.m_arrayBufferBinding = buffer; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.COPY_READ_BUFFER: this.m_copyReadBufferBinding = buffer; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.COPY_WRITE_BUFFER: this.m_copyWriteBufferBinding = buffer; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ELEMENT_ARRAY_BUFFER: this.m_vertexArrayBinding.m_elementArrayBufferBinding = buffer; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.PIXEL_PACK_BUFFER: this.m_pixelPackBufferBinding = buffer; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.PIXEL_UNPACK_BUFFER: this.m_pixelUnpackBufferBinding = buffer; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TRANSFORM_FEEDBACK_BUFFER: this.m_transformFeedbackBufferBinding = buffer; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNIFORM_BUFFER: this.m_uniformBufferBinding = buffer; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ARRAY_BUFFER: return this.m_arrayBufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.COPY_READ_BUFFER: return this.m_copyReadBufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.COPY_WRITE_BUFFER: return this.m_copyWriteBufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ELEMENT_ARRAY_BUFFER: return this.m_vertexArrayBinding.m_elementArrayBufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.PIXEL_PACK_BUFFER: return this.m_pixelPackBufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.PIXEL_UNPACK_BUFFER: return this.m_pixelUnpackBufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TRANSFORM_FEEDBACK_BUFFER: return this.m_transformFeedbackBufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.UNIFORM_BUFFER: return this.m_uniformBufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!sglrReferenceContext.isValidBufferTarget(target), gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!sglrReferenceContext.isValidBufferTarget(target), gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!buffer, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(input < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!sglrReferenceContext.isValidBufferTarget(target), gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(offset < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!buffer, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(offset + data.byteLength > buffer.getSize(), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(typeof pixels !== 'number', gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(target != gl.FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    target != gl.DRAW_FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    target != gl.READ_FRAMEBUFFER, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {sglrReferenceContext.Framebuffer} */ var framebufferBinding = (target == gl.FRAMEBUFFER || target == gl.DRAW_FRAMEBUFFER) ? this.m_drawFramebufferBinding : this.m_readFramebufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            return gl.FRAMEBUFFER_COMPLETE;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            return gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            return gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            return gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            return gl.FRAMEBUFFER_COMPLETE;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(mode != gl.POINTS &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    mode != gl.LINE_STRIP && mode != gl.LINE_LOOP && mode != gl.LINES &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    mode != gl.TRIANGLE_STRIP && mode != gl.TRIANGLE_FAN && mode != gl.TRIANGLES,
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        //      RC_ERROR_RET(gl.INVALID_OPERATION, RC_RET_VOID);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(this.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE, gl.INVALID_FRAMEBUFFER_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(first < 0 || count < 0 || instanceCount < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(end < start, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(type != gl.UNSIGNED_BYTE &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    type != gl.UNSIGNED_SHORT &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    type != gl.UNSIGNED_INT, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(count < 0 || instanceCount < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(count > 0 && !vao.m_elementArrayBufferBinding, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError((buffers & ~(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)) != 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (hasColor0 && (buffers & gl.COLOR_BUFFER_BIT) != 0) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (hasDepth && (buffers & gl.DEPTH_BUFFER_BIT) != 0 && this.m_depthMask) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (hasStencil && (buffers & gl.STENCIL_BUFFER_BIT) != 0) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(buffer != gl.COLOR && buffer != gl.STENCIL, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(drawbuffer != 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (buffer == gl.COLOR) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (buffer !== gl.STENCIL)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(buffer != gl.COLOR && buffer != gl.DEPTH, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(drawbuffer != 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (buffer == gl.COLOR) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (buffer !== gl.DEPTH)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(buffer != gl.COLOR, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(drawbuffer != 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(buffer != gl.DEPTH_STENCIL, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.clearBufferfv(gl.DEPTH, drawbuffer, [depth]);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        this.clearBufferiv(gl.STENCIL, drawbuffer, [stencil]);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (attachment == gl.DEPTH_STENCIL_ATTACHMENT) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.framebufferTexture2D(target, gl.DEPTH_ATTACHMENT, textarget, texture, level);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.framebufferTexture2D(target, gl.STENCIL_ATTACHMENT, textarget, texture, level);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(target != gl.FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        target != gl.DRAW_FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        target != gl.READ_FRAMEBUFFER, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(point == undefined, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            /** @type {sglrReferenceContext.Framebuffer} */ var framebufferBinding = (target == gl.FRAMEBUFFER || target == gl.DRAW_FRAMEBUFFER) ? this.m_drawFramebufferBinding : this.m_readFramebufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!framebufferBinding, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(level != 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    if (this.conditionalSetError(fboTexTarget != sglrReferenceContext.TexTarget.TEXTARGET_2D, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    if (this.conditionalSetError(!deMath.deInRange32(fboTexTarget, sglrReferenceContext.TexTarget.TEXTARGET_CUBE_MAP_POSITIVE_X, sglrReferenceContext.TexTarget.TEXTARGET_CUBE_MAP_NEGATIVE_Z), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (attachment == gl.DEPTH_STENCIL_ATTACHMENT) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.framebufferTextureLayer(target, gl.DEPTH_ATTACHMENT, texture, level, layer);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.framebufferTextureLayer(target, gl.STENCIL_ATTACHMENT, texture, level, layer);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(target != gl.FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        target != gl.DRAW_FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        target != gl.READ_FRAMEBUFFER, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(point === undefined, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            /** @type {sglrReferenceContext.Framebuffer} */ var framebufferBinding = (target == gl.FRAMEBUFFER || target == gl.DRAW_FRAMEBUFFER) ? this.m_drawFramebufferBinding : this.m_readFramebufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!framebufferBinding, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(level != 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                            texture.getType() != sglrReferenceContext.TextureType.TYPE_CUBE_MAP_ARRAY, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    if (this.conditionalSetError((layer < 0) || (layer >= gl.MAX_ARRAY_TEXTURE_LAYERS), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    if (this.conditionalSetError((level < 0) || (level > Math.floor(Math.log2(gl.MAX_TEXTURE_SIZE))), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    if (this.conditionalSetError((layer < 0) || (layer >= gl.MAX_3D_TEXTURE_SIZE), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    if (this.conditionalSetError((level < 0) || (level > Math.floor(Math.log2(gl.MAX_3D_TEXTURE_SIZE))), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (attachment == gl.DEPTH_STENCIL_ATTACHMENT) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.framebufferRenderbuffer(target, gl.DEPTH_ATTACHMENT, renderbuffertarget, renderbuffer);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.framebufferRenderbuffer(target, gl.STENCIL_ATTACHMENT, renderbuffertarget, renderbuffer);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(target != gl.FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        target != gl.DRAW_FRAMEBUFFER &&
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        target != gl.READ_FRAMEBUFFER, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(point == undefined, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            /** @type {sglrReferenceContext.Framebuffer} */ var framebufferBinding = (target == gl.FRAMEBUFFER || target == gl.DRAW_FRAMEBUFFER) ? this.m_drawFramebufferBinding : this.m_readFramebufferBinding;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!framebufferBinding, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(renderbuffertarget != gl.RENDERBUFFER, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(target != gl.RENDERBUFFER, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!this.m_renderbufferBinding, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!format, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(filter != gl.NEAREST && filter != gl.LINEAR, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError((mask & (gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)) != 0 && filter != gl.NEAREST, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(this.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                    this.checkFramebufferStatus(gl.READ_FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(this.getDrawColorbuffer().getNumSamples() != 1, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(srcW != dstW || srcH != dstH, gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (mask & gl.COLOR_BUFFER_BIT)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(this.getReadColorbuffer().raw().getFormat() != this.getDrawColorbuffer().raw().getFormat(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (mask & gl.DEPTH_BUFFER_BIT)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(this.getReadDepthbuffer().raw().getFormat() != this.getDrawDepthbuffer().raw().getFormat(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (mask & gl.STENCIL_BUFFER_BIT)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(this.getReadStencilbuffer().raw().getFormat() != this.getDrawStencilbuffer().raw().getFormat(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        srcRect = (mask & gl.COLOR_BUFFER_BIT) ? deMath.intersect(srcRect, sglrReferenceContext.getBufferRect(this.getReadColorbuffer())) : srcRect;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        srcRect = (mask & gl.DEPTH_BUFFER_BIT) ? deMath.intersect(srcRect, sglrReferenceContext.getBufferRect(this.getReadDepthbuffer())) : srcRect;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        srcRect = (mask & gl.STENCIL_BUFFER_BIT) ? deMath.intersect(srcRect, sglrReferenceContext.getBufferRect(this.getReadStencilbuffer())) : srcRect;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        dstRect = (mask & gl.COLOR_BUFFER_BIT) ? deMath.intersect(dstRect, sglrReferenceContext.getBufferRect(this.getDrawColorbuffer())) : dstRect;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        dstRect = (mask & gl.DEPTH_BUFFER_BIT) ? deMath.intersect(dstRect, sglrReferenceContext.getBufferRect(this.getDrawDepthbuffer())) : dstRect;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        dstRect = (mask & gl.STENCIL_BUFFER_BIT) ? deMath.intersect(dstRect, sglrReferenceContext.getBufferRect(this.getDrawStencilbuffer())) : dstRect;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (error != gl.NO_ERROR)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (mask & gl.COLOR_BUFFER_BIT) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            /** @type {tcuTexture.FilterMode} */ var sFilter = (scale && filter == gl.LINEAR) ? tcuTexture.FilterMode.LINEAR : tcuTexture.FilterMode.NEAREST;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if ((mask & gl.DEPTH_BUFFER_BIT) && this.m_depthMask) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (mask & gl.STENCIL_BUFFER_BIT) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ALPHA: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.A, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LUMINANCE: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.L, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LUMINANCE_ALPHA: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.LA, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.RGB: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.RGBA: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.ALPHA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LUMINANCE:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LUMINANCE_ALPHA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.RGB:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.RGBA:
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(typeof pixels !== 'number', gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        /** @type {boolean} */ var isDstFloatDepthFormat = (internalFormat == gl.DEPTH_COMPONENT32F || internalFormat == gl.DEPTH32F_STENCIL8); // depth components are limited to [0,1] range
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(border != 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(width < 0 || height < 0 || depth < 0 || level < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!storageFmt, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!transferFmt, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (target == gl.TEXTURE_2D) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(width > this.m_limits.maxTexture2DSize || height > this.m_limits.maxTexture2DSize || depth != 1, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.log2(this.m_limits.maxTexture2DSize), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(!texture.hasLevel(level), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                            height != dst.getHeight(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_CUBE_MAP_NEGATIVE_X ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_POSITIVE_X ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_NEGATIVE_Y ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_POSITIVE_Y ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_POSITIVE_Z) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(width != height || width > this.m_limits.maxTextureCubeSize || depth != 1, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.floor(Math.log2(this.m_limits.maxTextureCubeSize)), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(!textureCube.hasFace(level, face), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                            height != dst.getHeight(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_2D_ARRAY) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        depth > this.m_limits.maxTexture2DArrayLayers, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.floor(Math.log2(this.m_limits.maxTexture2DSize)), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(!texture2DArray.hasLevel(level), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                            depth != dst.getDepth(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_3D) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        depth > this.m_limits.maxTexture3DSize, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.floor(Math.log2(this.m_limits.maxTexture3DSize)), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(!texture3D.hasLevel(level), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                            depth != dst.getDepth(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        // else if (target == gl.TEXTURE_CUBE_MAP_ARRAY)
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        //                 depth > m_limits.maxTexture2DArrayLayers, gl.INVALID_VALUE, RC_RET_VOID);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        //     RC_IF_ERROR(level > deLog2Floor32(m_limits.maxTexture2DSize), gl.INVALID_VALUE, RC_RET_VOID);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        //         RC_IF_ERROR(!texture->hasLevel(level), gl.INVALID_OPERATION, RC_RET_VOID);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        //                     depth != dst.getDepth(), gl.INVALID_OPERATION, RC_RET_VOID);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(typeof pixels !== 'number', gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(xoffset < 0 || yoffset < 0 || zoffset < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(width < 0 || height < 0 || depth < 0 || level < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!transferFmt, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (target == gl.TEXTURE_2D) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(width > this.m_limits.maxTexture2DSize || height > this.m_limits.maxTexture2DSize || depth != 1, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.log2(this.m_limits.maxTexture2DSize), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!texture.hasLevel(level), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                                        gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_CUBE_MAP_NEGATIVE_X ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_POSITIVE_X ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_NEGATIVE_Y ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_POSITIVE_Y ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                 target == gl.TEXTURE_CUBE_MAP_POSITIVE_Z) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!textureCube.hasFace(level, face), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                                        gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_2D_ARRAY) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        depth > this.m_limits.maxTexture2DArrayLayers, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.floor(Math.log2(this.m_limits.maxTexture2DSize)), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!texture2DArray.hasLevel(level), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                                        gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_3D) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                        depth > this.m_limits.maxTexture3DSize, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.floor(Math.log2(this.m_limits.maxTexture3DSize)), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!texture3D.hasLevel(level), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                                        gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(border != 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(width < 0 || height < 0 || level < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(src.isEmpty(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!storageFmt, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (target == gl.TEXTURE_2D) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(width > this.m_limits.maxTexture2DSize || height > this.m_limits.maxTexture2DSize, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.floor(Math.log2(this.m_limits.maxTexture2DSize)), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(!texture.hasLevel(level), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(storageFmt != dst.getFormat() || width != dst.getWidth() || height != dst.getHeight(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_CUBE_MAP_NEGATIVE_X ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_POSITIVE_X ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_NEGATIVE_Y ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_POSITIVE_Y ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_POSITIVE_Z) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(width != height || width > this.m_limits.maxTextureCubeSize, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(level > Math.floor(Math.log2(this.m_limits.maxTextureCubeSize)), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(!texture.hasFace(level, face), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(storageFmt != dst.getFormat() || width != dst.getWidth() || height != dst.getHeight(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(xoffset < 0 || yoffset < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(width < 0 || height < 0 || level < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(src.isEmpty(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (target == gl.TEXTURE_2D) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!texture.hasLevel(level), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(xoffset + width > dst.getWidth() || yoffset + height > dst.getHeight(), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_CUBE_MAP_NEGATIVE_X ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_POSITIVE_X ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_NEGATIVE_Y ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_POSITIVE_Y ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ||
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                   target == gl.TEXTURE_CUBE_MAP_POSITIVE_Z) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(!texture.hasFace(level, face), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(xoffset + width > dst.getWidth() || yoffset + height > dst.getHeight(), gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(width <= 0 || height <= 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(levels < 1 || levels > Math.floor(Math.log2(Math.max(width, height))) + 1, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!storageFmt, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (target == gl.TEXTURE_2D_ARRAY) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                                        depth >= this.m_limits.maxTexture2DArrayLayers, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(textureArray.isImmutable(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_3D) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                                        depth >= this.m_limits.maxTexture3DSize, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(texture3D.isImmutable(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(width <= 0 || height <= 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(levels < 1 || levels > Math.floor(Math.log2(Math.max(width, height))) + 1, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (this.conditionalSetError(!storageFmt, gl.INVALID_ENUM))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        if (target == gl.TEXTURE_2D) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(width > this.m_limits.maxTexture2DSize || height > this.m_limits.maxTexture2DSize, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(texture.isImmutable(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:        } else if (target == gl.TEXTURE_CUBE_MAP) {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(width != height || width > this.m_limits.maxTextureCubeSize, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            if (this.conditionalSetError(textureCube.isImmutable(), gl.INVALID_OPERATION))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.CLAMP_TO_EDGE: return tcuTexture.WrapMode.CLAMP_TO_EDGE;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.REPEAT: return tcuTexture.WrapMode.REPEAT_GL;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.MIRRORED_REPEAT: return tcuTexture.WrapMode.MIRRORED_REPEAT_GL;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.NEAREST: return tcuTexture.FilterMode.NEAREST;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LINEAR: return tcuTexture.FilterMode.LINEAR;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.NEAREST_MIPMAP_NEAREST: return tcuTexture.FilterMode.NEAREST_MIPMAP_NEAREST;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.NEAREST_MIPMAP_LINEAR: return tcuTexture.FilterMode.NEAREST_MIPMAP_LINEAR;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LINEAR_MIPMAP_NEAREST: return tcuTexture.FilterMode.LINEAR_MIPMAP_NEAREST;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.LINEAR_MIPMAP_LINEAR: return tcuTexture.FilterMode.LINEAR_MIPMAP_LINEAR;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_2D: container = unit.tex2DBinding; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_CUBE_MAP: container = unit.texCubeBinding; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_2D_ARRAY: container = unit.tex2DArrayBinding; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_3D: container = unit.tex3DBinding; break;
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            default: this.setError(gl.INVALID_ENUM);
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_WRAP_S: {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(null == wrapS, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_WRAP_T: {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(null == wrapT, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_WRAP_R: {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(null == wrapR, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_MIN_FILTER: {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(null == minMode, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_MAG_FILTER: {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(null == magMode, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:            case gl.TEXTURE_MAX_LEVEL: {
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                if (this.conditionalSetError(value < 0, gl.INVALID_VALUE))
deqp/framework/opengl/simplereference/sglrReferenceContext.js:                this.setError(gl.INVALID_ENUM);
deqp/build.py:    'sglrReferenceContextTest': 'framework.opengl.simplereference.sglrReferenceContextTest',
deqp/modules/shared/glsRandomUniformBlockCase.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsRandomUniformBlockCase.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simpleTextureVertexShaderES3, gl.VERTEX_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simpleUintTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simpleIntTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simpleCubeMapUintTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simpleCubeMapIntTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simple3DTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simple3DUintTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simple3DIntTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simple2DArrayTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:    return WebGLTestUtils.loadShader(gl, simple2DArrayUintTextureFragmentShaderES3, gl.FRAGMENT_SHADER);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(fs);
js/tests/tex-image-and-sub-image-utils.js:      gl.deleteShader(vs);
js/tests/tex-image-and-sub-image-utils.js:    gl.useProgram(program);
js/tests/tex-image-and-sub-image-utils.js:    var uRCoordLoc = gl.getUniformLocation(program, 'uRCoord');
js/tests/tex-image-and-sub-image-utils.js:    gl.uniform1f(uRCoordLoc, 0.0);
js/tests/tex-image-and-sub-image-utils.js:    var uRCoordLoc = gl.getUniformLocation(program, 'uRCoord');
js/tests/tex-image-and-sub-image-utils.js:    gl.uniform1f(uRCoordLoc, 0.0);
deqp/functional/gles3/fbocolorbuffer/tex3d_01.html:var ext = gl.getExtension('EXT_color_buffer_float');
conformance/extensions/ext-sRGB.html:  ext = gl.getExtension("EXT_sRGB");
conformance/extensions/ext-sRGB.html:  var supported = gl.getSupportedExtensions();
conformance/extensions/ext-sRGB.html:                      Math.floor(gl.drawingBufferWidth / 2),
conformance/extensions/ext-sRGB.html:                      Math.floor(gl.drawingBufferHeight / 2),
conformance/extensions/ext-sRGB.html:  var numPixels = gl.drawingBufferWidth * gl.drawingBufferHeight;
conformance/extensions/ext-sRGB.html:  var tex = gl.createTexture();
conformance/extensions/ext-sRGB.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/ext-sRGB.html:  gl.texImage2D(gl.TEXTURE_2D,
conformance/extensions/ext-sRGB.html:                gl.drawingBufferWidth,
conformance/extensions/ext-sRGB.html:                gl.drawingBufferHeight,
conformance/extensions/ext-sRGB.html:                gl.UNSIGNED_BYTE,
conformance/extensions/ext-sRGB.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/ext-sRGB.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/ext-sRGB.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/ext-sRGB.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/ext-sRGB.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "was able to create type " + formatName);
conformance/extensions/ext-sRGB.html:  var err = gl.getError();
conformance/extensions/ext-sRGB.html:  if (err == gl.NO_ERROR) {
conformance/extensions/ext-sRGB.html:  } else if (err == gl.INVALID_ENUM || err == gl.INVALID_VALUE) {
conformance/extensions/ext-sRGB.html:    var tex = gl.createTexture();
conformance/extensions/ext-sRGB.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/ext-sRGB.html:    gl.texImage2D(gl.TEXTURE_2D,
conformance/extensions/ext-sRGB.html:                  gl.drawingBufferWidth,  // width
conformance/extensions/ext-sRGB.html:                  gl.drawingBufferHeight, // height
conformance/extensions/ext-sRGB.html:                  gl.UNSIGNED_BYTE,       // type
conformance/extensions/ext-sRGB.html:    var rbo = gl.createRenderbuffer();
conformance/extensions/ext-sRGB.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
conformance/extensions/ext-sRGB.html:    gl.renderbufferStorage(gl.RENDERBUFFER,
conformance/extensions/ext-sRGB.html:                           gl.drawingBufferWidth,
conformance/extensions/ext-sRGB.html:                           gl.drawingBufferHeight);
conformance/extensions/ext-sRGB.html:  ext = gl.getExtension("EXT_sRGB");
conformance/extensions/ext-sRGB.html:    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
conformance/extensions/ext-sRGB.html:  gl.uniform1i(gl.getUniformLocation(program, "tex"), 0);
conformance/extensions/ext-sRGB.html:  var fbo = gl.createFramebuffer();
conformance/extensions/ext-sRGB.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/extensions/ext-sRGB.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/extensions/ext-sRGB.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-sRGB.html:  shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, ext.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT)', 'ext.SRGB_EXT');
conformance/extensions/ext-sRGB.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/ext-sRGB.html:      gl.uniform1f(gl.getUniformLocation(program, "uColor"), conversions[ii][0]/255.0);
conformance/extensions/ext-sRGB.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-sRGB.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
conformance/extensions/ext-sRGB.html:    gl.uniform1f(gl.getUniformLocation(program, "uColor"), 0.5);
conformance/extensions/ext-sRGB.html:    wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION);
conformance/extensions/ext-sRGB.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/ext-sRGB.html:    var rbo = gl.createRenderbuffer();
conformance/extensions/ext-sRGB.html:    gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
conformance/extensions/ext-sRGB.html:    gl.renderbufferStorage(gl.RENDERBUFFER, ext.SRGB8_ALPHA8_EXT, width, height);
conformance/extensions/ext-sRGB.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-sRGB.html:    var fbo = gl.createFramebuffer();
conformance/extensions/ext-sRGB.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/extensions/ext-sRGB.html:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
conformance/extensions/ext-sRGB.html:                               gl.RENDERBUFFER, rbo);
conformance/extensions/ext-sRGB.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-sRGB.html:    shouldBe('gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, ext.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT)', 'ext.SRGB_EXT');
conformance/extensions/ext-sRGB.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/ext-sRGB.html:  var fbo = createsRGBFramebuffer(gl, gl.drawingBufferWidth, gl.drawingBufferHeight);
conformance/extensions/ext-sRGB.html:    gl.uniform1f(gl.getUniformLocation(program, "uColor"), conversions[ii][0]/255.0);
conformance/extensions/ext-sRGB.html:    var tex = gl.createTexture();
conformance/extensions/ext-sRGB.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/ext-sRGB.html:    gl.texImage2D(gl.TEXTURE_2D, 0, ext.SRGB_EXT, ext.SRGB_EXT, gl.UNSIGNED_BYTE, img);
conformance/extensions/ext-sRGB.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-sRGB.html:    gl.texImage2D(gl.TEXTURE_2D, 0, ext.SRGB_ALPHA_EXT, ext.SRGB_ALPHA_EXT, gl.UNSIGNED_BYTE, img);
conformance/extensions/ext-sRGB.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/oes-texture-half-float-with-video.html:    if (!(ext = gl.getExtension("OES_texture_half_float"))) {
conformance/extensions/oes-texture-half-float-with-video.html:    gl.HALF_FLOAT_OES = ext.HALF_FLOAT_OES;
conformance/extensions/webgl-compressed-texture-size-limit.html:  { target: gl.TEXTURE_2D,
conformance/extensions/webgl-compressed-texture-size-limit.html:    maxSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
conformance/extensions/webgl-compressed-texture-size-limit.html:    tex: gl.createTexture(),
conformance/extensions/webgl-compressed-texture-size-limit.html:    targets: [gl.TEXTURE_2D]
conformance/extensions/webgl-compressed-texture-size-limit.html:  { target: gl.TEXTURE_CUBE_MAP,
conformance/extensions/webgl-compressed-texture-size-limit.html:    maxSize: gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE),
conformance/extensions/webgl-compressed-texture-size-limit.html:    tex: gl.createTexture(),
conformance/extensions/webgl-compressed-texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/extensions/webgl-compressed-texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/extensions/webgl-compressed-texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/extensions/webgl-compressed-texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/extensions/webgl-compressed-texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/extensions/webgl-compressed-texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/extensions/webgl-compressed-texture-size-limit.html:      if (t.target === gl.TEXTURE_CUBE_MAP) {
conformance/extensions/webgl-compressed-texture-size-limit.html:gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
conformance/extensions/webgl-compressed-texture-size-limit.html:    gl.bindTexture(t.target, tex);
conformance/extensions/webgl-compressed-texture-size-limit.html:  if (t.target === gl.TEXTURE_CUBE_MAP) {
conformance/extensions/webgl-compressed-texture-size-limit.html:        gl.compressedTexImage2D(target, i, test.format, size, otherDimension, 0, pixels);
conformance/extensions/webgl-compressed-texture-size-limit.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture should generate NO_ERROR."
conformance/extensions/webgl-compressed-texture-size-limit.html:        if (t.target == gl.TEXTURE_CUBE_MAP) {
conformance/extensions/webgl-compressed-texture-size-limit.html:          gl.compressedTexImage2D(target, 0, test.format, t.maxSize + test.sizeStep, test.sizeStep, 0, pixelsNegativeTest1);
conformance/extensions/webgl-compressed-texture-size-limit.html:          wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "width out of bounds: should generate INVALID_VALUE."
conformance/extensions/webgl-compressed-texture-size-limit.html:          gl.compressedTexImage2D(target, 0, test.format, test.sizeStep, t.maxSize + test.sizeStep, 0, pixelsNegativeTest1);
conformance/extensions/webgl-compressed-texture-size-limit.html:          wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "height out of bounds: should generate INVALID_VALUE."
conformance/extensions/webgl-compressed-texture-size-limit.html:        gl.compressedTexImage2D(target, 0, test.format, t.maxSize + test.sizeStep, t.maxSize + test.sizeStep, 0, pixelsNegativeTest1);
conformance/extensions/webgl-compressed-texture-size-limit.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "width and height out of bounds: should generate INVALID_VALUE."
conformance/extensions/webgl-compressed-texture-size-limit.html:      gl.compressedTexImage2D(target, numLevels, test.format, 256, 256, 0, pixelsNegativeTest2);
conformance/extensions/webgl-compressed-texture-size-limit.html:      wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "level out of bounds: should generate INVALID_VALUE."
conformance/extensions/webgl-compressed-texture-size-limit.html:      gl.compressedTexImage2D(target, numLevels - 1, test.format, 256, 256, 0, pixelsNegativeTest2);
conformance/extensions/webgl-compressed-texture-size-limit.html:      wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "width or height out of bounds for specified level: should generate INVALID_VALUE."
conformance/extensions/oes-texture-half-float-with-image.html:    if (!(ext = gl.getExtension("OES_texture_half_float"))) {
conformance/extensions/oes-texture-half-float-with-image.html:    gl.HALF_FLOAT_OES = ext.HALF_FLOAT_OES;
deqp/functional/gles3/fboinvalidate/whole.html:var extention = gl.getExtension('EXT_color_buffer_float');
deqp/modules/shared/glsFboUtil.js:goog.require('framework.opengl.gluTextureUtil');
deqp/modules/shared/glsFboUtil.js:goog.require('framework.opengl.gluStrUtil');
deqp/modules/shared/glsFboUtil.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/modules/shared/glsFboUtil.js:    var gluStrUtil = framework.opengl.gluStrUtil;
deqp/modules/shared/glsFboUtil.js:        var extensions = gl.getSupportedExtensions();
deqp/modules/shared/glsFboUtil.js:         case gl.NONE:
deqp/modules/shared/glsFboUtil.js:         case gl.RENDERBUFFER:
deqp/modules/shared/glsFboUtil.js:         case gl.TEXTURE:
deqp/modules/shared/glsFboUtil.js:         case gl.STENCIL_ATTACHMENT:
deqp/modules/shared/glsFboUtil.js:         case gl.DEPTH_ATTACHMENT:
deqp/modules/shared/glsFboUtil.js:            if (glenum < gl.COLOR_ATTACHMENT0 || glenum > gl.COLOR_ATTACHMENT15) {
deqp/modules/shared/glsFboUtil.js:        //! Type if format is unsized, gl.NONE if sized.
deqp/modules/shared/glsFboUtil.js:    * Sets the object's parameters to gl.NONE
deqp/modules/shared/glsFboUtil.js:                for (var i = gl.TEXTURE_CUBE_MAP_NEGATIVE_X; i <= gl.TEXTURE_CUBE_MAP_POSITIVE_Z; ++i)
deqp/modules/shared/glsFboUtil.js:                gl.texImage2D(
deqp/modules/shared/glsFboUtil.js:                gl.texImage3D(
deqp/modules/shared/glsFboUtil.js:                var ret = gl.createRenderbuffer();
deqp/modules/shared/glsFboUtil.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, ret);
deqp/modules/shared/glsFboUtil.js:                    gl.renderbufferStorage(
deqp/modules/shared/glsFboUtil.js:                        gl.RENDERBUFFER,
deqp/modules/shared/glsFboUtil.js:                    gl.renderbufferStorageMultisample(
deqp/modules/shared/glsFboUtil.js:                        gl.RENDERBUFFER,
deqp/modules/shared/glsFboUtil.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, null);
deqp/modules/shared/glsFboUtil.js:                var ret = gl.createTexture();
deqp/modules/shared/glsFboUtil.js:                gl.bindTexture(glTarget(cfg, gl), ret);
deqp/modules/shared/glsFboUtil.js:                gl.bindTexture(glTarget(cfg, gl), null);
deqp/modules/shared/glsFboUtil.js:                case glsFboUtil.Config.s_types.RENDERBUFFER: return gl.RENDERBUFFER;
deqp/modules/shared/glsFboUtil.js:                case glsFboUtil.Config.s_types.TEXTURE_2D: return gl.TEXTURE_2D;
deqp/modules/shared/glsFboUtil.js:                case glsFboUtil.Config.s_types.TEXTURE_CUBE_MAP: return gl.TEXTURE_CUBE_MAP;
deqp/modules/shared/glsFboUtil.js:                case glsFboUtil.Config.s_types.TEXTURE_3D: return gl.TEXTURE_3D;
deqp/modules/shared/glsFboUtil.js:                case glsFboUtil.Config.s_types.TEXTURE_2D_ARRAY: return gl.TEXTURE_2D_ARRAY;
deqp/modules/shared/glsFboUtil.js:                gl.deleteRenderbuffer(img);
deqp/modules/shared/glsFboUtil.js:                gl.deleteTexture(img);
deqp/modules/shared/glsFboUtil.js:                gl.framebufferRenderbuffer(
deqp/modules/shared/glsFboUtil.js:                gl.framebufferTexture2D(
deqp/modules/shared/glsFboUtil.js:                gl.framebufferTextureLayer(
deqp/modules/shared/glsFboUtil.js:            return gl.RENDERBUFFER;
deqp/modules/shared/glsFboUtil.js:            return gl.TEXTURE;
deqp/modules/shared/glsFboUtil.js:                gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
deqp/modules/shared/glsFboUtil.js:            gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
deqp/modules/shared/glsFboUtil.js:            gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
deqp/modules/shared/glsFboUtil.js:            gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
deqp/modules/shared/glsFboUtil.js:            case this.m_gl.TEXTURE: return this.textures.lookupDefault(/** @type {WebGLTexture} */(imgName), null);
deqp/modules/shared/glsFboUtil.js:            case this.m_gl.RENDERBUFFER: return this.rbos.lookupDefault(/** @type {WebGLTexture} */(imgName), null);
deqp/modules/shared/glsFboUtil.js:        this.m_error = this.m_gl.NO_ERROR;
deqp/modules/shared/glsFboUtil.js:        this.m_gl.bindFramebuffer(this.m_target, fbo);
deqp/modules/shared/glsFboUtil.js:        this.m_gl.bindFramebuffer(this.m_target, null);
deqp/modules/shared/glsFboUtil.js:            this.m_gl.framebufferRenderbuffer(this.m_target, attPoint, this.m_gl.RENDERBUFFER, null);
deqp/modules/shared/glsFboUtil.js:        var error = this.m_gl.getError();
deqp/modules/shared/glsFboUtil.js:        if (error != this.m_gl.NO_ERROR && this.m_error == this.m_gl.NO_ERROR) {
deqp/modules/shared/glsFboUtil.js:        if (fboStatus == gl.FRAMEBUFFER_COMPLETE)
deqp/modules/shared/glsFboUtil.js:        if (fboStatus == gl.FRAMEBUFFER_COMPLETE)
deqp/modules/shared/glsFboUtil.js:        if (errorCode == gl.NO_ERROR)
deqp/modules/shared/glsFboUtil.js:        if (this.m_errorCodes.length == 0 && errorCode == gl.NO_ERROR)
deqp/modules/shared/glsFboUtil.js:        DE_ASSERT(error != gl.NO_ERROR)
deqp/modules/shared/glsFboUtil.js:        DE_ASSERT(status != gl.FRAMEBUFFER_COMPLETE)
deqp/modules/shared/glsFboUtil.js:        if (imgFormat.unsizedType == gl.NONE)
deqp/modules/shared/glsFboUtil.js:            cctx.addGLError(textureIsValid, gl.INVALID_ENUM);
deqp/modules/shared/glsFboUtil.js:            cctx.addGLError(textureIsValid, gl.INVALID_OPERATION);
deqp/modules/shared/glsFboUtil.js:            cctx.addGLError(textureIsValid, gl.INVALID_VALUE);
deqp/modules/shared/glsFboUtil.js:            cctx.addGLError(rboIsValid, gl.INVALID_ENUM);
deqp/modules/shared/glsFboUtil.js:        cctx.addFBOStatus(count > 0, gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:goog.provide('framework.opengl.simplereference.sglrReferenceContextTest');
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:goog.require('framework.opengl.gluDrawUtil');
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:    var sglrReferenceContextTest = framework.opengl.simplereference.sglrReferenceContextTest;
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:    var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:    var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.enable(gl.SCISSOR_TEST);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, width, height);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        bufferedLogToConsole('Framebuffer status: ' + (ctx.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE));
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.enable(gl.SCISSOR_TEST);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ARRAY_BUFFER, vertices32, gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareColorsBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ARRAY_BUFFER, colors32, gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareColorsBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.drawQuads(gl.TRIANGLES, 0, 6);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ARRAY_BUFFER, vertices32, gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareColorsBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ARRAY_BUFFER, colors32, gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareColorsBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.drawQuads(gl.TRIANGLE_STRIP, 0, 6);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ARRAY_BUFFER, vertices32, gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareColorsBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ARRAY_BUFFER, colors32, gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareColorsBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.drawQuads(gl.TRIANGLE_FAN, 0, 6);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ARRAY_BUFFER, vertices32, gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareColorsBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bufferData(gl.ARRAY_BUFFER, colors32, gl.STATIC_DRAW);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, squareColorsBuffer);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);
deqp/framework/opengl/simplereference/sglrReferenceContextTest.js:        ctx.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.getAccess().getDataPtr());
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-video.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-video.js:        gl.clearDepth(1);
deqp/framework/opengl/simplereference/referencecontext.html:<script>goog.require('framework.opengl.simplereference.sglrReferenceContextTest');</script>
deqp/framework/opengl/simplereference/referencecontext.html:      framework.opengl.simplereference.sglrReferenceContextTest.run(gl);
deqp/framework/opengl/simplereference/sglrShaderProgram.js:goog.provide('framework.opengl.simplereference.sglrShaderProgram');
deqp/framework/opengl/simplereference/sglrShaderProgram.js:goog.require('framework.opengl.gluShaderUtil');
deqp/framework/opengl/simplereference/sglrShaderProgram.js:goog.require('framework.opengl.gluTextureUtil');
deqp/framework/opengl/simplereference/sglrShaderProgram.js:    var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/framework/opengl/simplereference/sglrShaderProgram.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/framework/opengl/simplereference/sglrShaderProgram.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
js/tests/tex-image-and-sub-image-3d-with-canvas.js:          case gl.RED:
js/tests/tex-image-and-sub-image-3d-with-canvas.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-canvas.js:          case gl.RG:
js/tests/tex-image-and-sub-image-3d-with-canvas.js:          case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:      if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        debug('Testing ' + ' with flipY=' + flipY + ' bindingTarget=' + (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY') +
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        gl.texImage3D(bindingTarget, 0, gl[internalFormat], canvas.width, canvas.height, 1 /* depth */, 0,
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        gl.texSubImage3D(bindingTarget, 0, 0, 0, 0, canvas.width, canvas.height, 1 /* depth */,
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        var width = gl.canvas.width;
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        var height = gl.canvas.height;
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            if (bindingTarget == gl.TEXTURE_3D) {
js/tests/tex-image-and-sub-image-3d-with-canvas.js:        runTexImageTest(gl.TEXTURE_3D).then(function(val) {
js/tests/tex-image-and-sub-image-3d-with-canvas.js:            runTexImageTest(gl.TEXTURE_2D_ARRAY).then(function(val) {
js/tests/tex-image-and-sub-image-3d-with-canvas.js:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/framework/opengl/simplereference/sglrGLContext.js:goog.provide('framework.opengl.simplereference.sglrGLContext');
deqp/framework/opengl/simplereference/sglrGLContext.js:goog.require('framework.opengl.gluShaderProgram');
deqp/framework/opengl/simplereference/sglrGLContext.js:goog.require('framework.opengl.gluShaderUtil');
deqp/framework/opengl/simplereference/sglrGLContext.js:goog.require('framework.opengl.gluTextureUtil');
deqp/framework/opengl/simplereference/sglrGLContext.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/framework/opengl/simplereference/sglrGLContext.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/framework/opengl/simplereference/sglrGLContext.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/framework/opengl/simplereference/sglrGLContext.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/framework/opengl/simplereference/sglrGLContext.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/framework/opengl/simplereference/sglrGLContext.js:    var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/framework/opengl/simplereference/sglrGLContext.js:                case gl.ALPHA:
deqp/framework/opengl/simplereference/sglrGLContext.js:                case gl.LUMINANCE:
deqp/framework/opengl/simplereference/sglrGLContext.js:                case gl.LUMINANCE_ALPHA:
deqp/framework/opengl/simplereference/sglrGLContext.js:                case gl.RGB:
deqp/framework/opengl/simplereference/sglrGLContext.js:                case gl.RGBA:
deqp/framework/opengl/simplereference/sglrGLContext.js:                    dataType = gl.UNSIGNED_BYTE;
deqp/modules/shared/glsShaderLibraryCase.js:goog.require('framework.opengl.gluDrawUtil');
deqp/modules/shared/glsShaderLibraryCase.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsShaderLibraryCase.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsShaderLibraryCase.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsShaderLibraryCase.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsShaderLibraryCase.js:var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/modules/shared/glsShaderLibraryCase.js:            var extns = gl.getSupportedExtensions();
deqp/modules/shared/glsShaderLibraryCase.js:            var value = gl.getParameter(this.enumName);
deqp/modules/shared/glsShaderLibraryCase.js:            assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Failed to read parameter ' + this.enumName, false, true);
deqp/modules/shared/glsShaderLibraryCase.js:        /** @const @type {WebGLUniformLocation} */ var loc = gl.getUniformLocation(pipelinePrograms[programNdx], name);
deqp/modules/shared/glsShaderLibraryCase.js:        gl.useProgram(pipelinePrograms[programNdx]);
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT: gl.uniform1fv(loc, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_VEC2: gl.uniform2fv(loc, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_VEC3: gl.uniform3fv(loc, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_VEC4: gl.uniform4fv(loc, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT2: gl.uniformMatrix2fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT3: gl.uniformMatrix3fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT4: gl.uniformMatrix4fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.INT: gl.uniform1iv(loc, new Int32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.INT_VEC2: gl.uniform2iv(loc, new Int32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.INT_VEC3: gl.uniform3iv(loc, new Int32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.INT_VEC4: gl.uniform4iv(loc, new Int32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.BOOL: gl.uniform1iv(loc, new Int32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.BOOL_VEC2: gl.uniform2iv(loc, new Int32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.BOOL_VEC3: gl.uniform3iv(loc, new Int32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.BOOL_VEC4: gl.uniform4iv(loc, new Int32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.UINT: gl.uniform1uiv(loc, new Uint32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.UINT_VEC2: gl.uniform2uiv(loc, new Uint32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.UINT_VEC3: gl.uniform3uiv(loc, new Uint32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.UINT_VEC4: gl.uniform4uiv(loc, new Uint32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT2X3: gl.uniformMatrix2x3fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT2X4: gl.uniformMatrix2x4fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT3X2: gl.uniformMatrix3x2fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT3X4: gl.uniformMatrix3x4fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT4X2: gl.uniformMatrix4x2fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:            case gluShaderUtil.DataType.FLOAT_MAT4X3: gl.uniformMatrix4x3fv(loc, false, new Float32Array(element)); break;
deqp/modules/shared/glsShaderLibraryCase.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'Start testcase: ' + test.fullName(), false, true);
deqp/modules/shared/glsShaderLibraryCase.js:    gl.viewport(viewportX, viewportY, width, height);
deqp/modules/shared/glsShaderLibraryCase.js:    gl.useProgram(vertexProgramID);
deqp/modules/shared/glsShaderLibraryCase.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'glUseProgram()', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:    /** @type {number} */ var positionLoc = gl.getAttribLocation(vertexProgramID, 'dEQP_Position');
deqp/modules/shared/glsShaderLibraryCase.js:            vertexArrays.push(new gluDrawUtil.VertexArrayBinding(gl.FLOAT, positionLoc, 4, numVerticesPerDraw, s_positions));
deqp/modules/shared/glsShaderLibraryCase.js:                    /** @type {number} */ var attribLoc = gl.getAttribLocation(vertexProgramID, attribName);
deqp/modules/shared/glsShaderLibraryCase.js:                            vertexArrays.push(new gluDrawUtil.VertexArrayBinding(gl.FLOAT, attribLoc + i, numRows, numVerticesPerDraw, scalars, scalarSize * 4, i * numRows * 4));
deqp/modules/shared/glsShaderLibraryCase.js:                            vertexArrays.push(new gluDrawUtil.VertexArrayBinding(gl.FLOAT, attribLoc, scalarSize, numVerticesPerDraw, scalars));
deqp/modules/shared/glsShaderLibraryCase.js:                    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'set vertex attrib array', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:            assertMsgOptions(gl.getError() === gl.NO_ERROR, 'before set uniforms', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:                    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'set reference uniforms', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:                    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'set uniforms', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:            gl.clearColor(0.125, 0.25, 0.5, 1);
deqp/modules/shared/glsShaderLibraryCase.js:            gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsShaderLibraryCase.js:            assertMsgOptions(gl.getError() === gl.NO_ERROR, 'clear buffer', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:                gl.useProgram(null);
deqp/modules/shared/glsShaderLibraryCase.js:                gl.useProgram(vertexProgramID);
deqp/modules/shared/glsShaderLibraryCase.js:            //     gl.patchParameteri(gl.PATCH_VERTICES, 3);
deqp/modules/shared/glsShaderLibraryCase.js:            //     assertMsgOptions(gl.getError() === gl.NO_ERROR, 'set patchParameteri(PATCH_VERTICES, 3)', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:            postDrawError = gl.getError();
deqp/modules/shared/glsShaderLibraryCase.js:                assertMsgOptions(postDrawError === gl.NO_ERROR, 'draw', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:                assertMsgOptions(gl.getError() === gl.NO_ERROR, 'read pixels', false, true);
deqp/modules/shared/glsShaderLibraryCase.js:                    gl.useProgram(null);
deqp/modules/shared/glsShaderLibraryCase.js:    gl.useProgram(null);
deqp/modules/shared/glsShaderLibraryCase.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, '', true, true);
js/tests/tex-image-and-sub-image-2d-with-video.js:          case gl.RED:
js/tests/tex-image-and-sub-image-2d-with-video.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-video.js:              (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP') +
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-2d-with-video.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-2d-with-video.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-2d-with-video.js:        var targets = [gl.TEXTURE_2D];
js/tests/tex-image-and-sub-image-2d-with-video.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-video.js:            targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/tex-image-and-sub-image-2d-with-video.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/tex-image-and-sub-image-2d-with-video.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-video.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-video.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/tex-image-and-sub-image-2d-with-video.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/tex-image-and-sub-image-2d-with-video.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, sourceSubRectangle[0]);
js/tests/tex-image-and-sub-image-2d-with-video.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, sourceSubRectangle[1]);
js/tests/tex-image-and-sub-image-2d-with-video.js:                    if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-video.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-video.js:                    gl.texSubImage2D(targets[tt], 0, 0, 0,
js/tests/tex-image-and-sub-image-2d-with-video.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-video.js:                    if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-video.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-video.js:                    gl.texSubImage2D(targets[tt], 0, 0, 0, gl[pixelFormat], gl[pixelType], videoElement);
js/tests/tex-image-and-sub-image-2d-with-video.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat], gl[pixelFormat], gl[pixelType], videoElement);
js/tests/tex-image-and-sub-image-2d-with-video.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-2d-with-video.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-2d-with-video.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-video.js:            loc = gl.getUniformLocation(program, "face");
js/tests/tex-image-and-sub-image-2d-with-video.js:            if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-video.js:                gl.uniform1i(loc, targets[tt]);
js/tests/tex-image-and-sub-image-2d-with-video.js:            wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
js/tests/tex-image-and-sub-image-2d-with-video.js:            if (bindingTarget == gl.TEXTURE_2D) {
js/tests/tex-image-and-sub-image-2d-with-video.js:                        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-video.js:        runTexImageTest(gl.TEXTURE_2D).then(function(val) {
js/tests/tex-image-and-sub-image-2d-with-video.js:            runTexImageTest(gl.TEXTURE_CUBE_MAP).then(function(val) {
js/tests/tex-image-and-sub-image-2d-with-video.js:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/framework/opengl/gluStrUtil.js:goog.provide('framework.opengl.gluStrUtil');
deqp/framework/opengl/gluStrUtil.js:var gluStrUtil = framework.opengl.gluStrUtil;
deqp/framework/opengl/gluStrUtil.js:        case gl.LUMINANCE: return 'gl.LUMINANCE';
deqp/framework/opengl/gluStrUtil.js:        case gl.LUMINANCE_ALPHA: return 'gl.LUMINANCE_ALPHA';
deqp/framework/opengl/gluStrUtil.js:        case gl.ALPHA: return 'gl.ALPHA';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB: return 'gl.RGB';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA: return 'gl.RGBA';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA4: return 'gl.RGBA4';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB5_A1: return 'gl.RGB5_A1';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB565: return 'gl.RGB565';
deqp/framework/opengl/gluStrUtil.js:        case gl.DEPTH_COMPONENT16: return 'gl.DEPTH_COMPONENT16';
deqp/framework/opengl/gluStrUtil.js:        case gl.STENCIL_INDEX8: return 'gl.STENCIL_INDEX8';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG: return 'gl.RG';
deqp/framework/opengl/gluStrUtil.js:        case gl.RED: return 'gl.RED';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA_INTEGER: return 'gl.RGBA_INTEGER';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB_INTEGER: return 'gl.RGB_INTEGER';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG_INTEGER: return 'gl.RG_INTEGER';
deqp/framework/opengl/gluStrUtil.js:        case gl.RED_INTEGER: return 'gl.RED_INTEGER';
deqp/framework/opengl/gluStrUtil.js:        case gl.DEPTH_COMPONENT: return 'gl.DEPTH_COMPONENT';
deqp/framework/opengl/gluStrUtil.js:        case gl.DEPTH_STENCIL: return 'gl.DEPTH_STENCIL';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA32F: return 'gl.RGBA32F';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA32I: return 'gl.RGBA32I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA32UI: return 'gl.RGBA32UI';
deqp/framework/opengl/gluStrUtil.js:        // case gl.RGBA16: return 'gl.RGBA16';
deqp/framework/opengl/gluStrUtil.js:        // case gl.RGBA16_SNORM: return 'gl.RGBA16_SNORM';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA16F: return 'gl.RGBA16F';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA16I: return 'gl.RGBA16I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA16UI: return 'gl.RGBA16UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA8: return 'gl.RGBA8';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA8I: return 'gl.RGBA8I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA8UI: return 'gl.RGBA8UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.SRGB8_ALPHA8: return 'gl.SRGB8_ALPHA8';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB10_A2: return 'gl.RGB10_A2';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB10_A2UI: return 'gl.RGB10_A2UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGBA8_SNORM: return 'gl.RGBA8_SNORM';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB8: return 'gl.RGB8';
deqp/framework/opengl/gluStrUtil.js:        case gl.R11F_G11F_B10F: return 'gl.R11F_G11F_B10F';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB32F: return 'gl.RGB32F';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB32I: return 'gl.RGB32I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB32UI: return 'gl.RGB32UI';
deqp/framework/opengl/gluStrUtil.js:        // case gl.RGB16: return 'gl.RGB16';
deqp/framework/opengl/gluStrUtil.js:        // case gl.RGB16_SNORM: return 'gl.RGB16_SNORM';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB16F: return 'gl.RGB16F';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB16I: return 'gl.RGB16I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB16UI: return 'gl.RGB16UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB8_SNORM: return 'gl.RGB8_SNORM';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB8I: return 'gl.RGB8I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB8UI: return 'gl.RGB8UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.SRGB8: return 'gl.SRGB8';
deqp/framework/opengl/gluStrUtil.js:        case gl.RGB9_E5: return 'gl.RGB9_E5';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG32F: return 'gl.RG32F';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG32I: return 'gl.RG32I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG32UI: return 'gl.RG32UI';
deqp/framework/opengl/gluStrUtil.js:        // case gl.RG16: return 'gl.RG16';
deqp/framework/opengl/gluStrUtil.js:        // case gl.RG16_SNORM: return 'gl.RG16_SNORM';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG16F: return 'gl.RG16F';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG16I: return 'gl.RG16I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG16UI: return 'gl.RG16UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG8: return 'gl.RG8';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG8I: return 'gl.RG8I';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG8UI: return 'gl.RG8UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.RG8_SNORM: return 'gl.RG8_SNORM';
deqp/framework/opengl/gluStrUtil.js:        case gl.R32F: return 'gl.R32F';
deqp/framework/opengl/gluStrUtil.js:        case gl.R32I: return 'gl.R32I';
deqp/framework/opengl/gluStrUtil.js:        case gl.R32UI: return 'gl.R32UI';
deqp/framework/opengl/gluStrUtil.js:        // case gl.R16: return 'gl.R16';
deqp/framework/opengl/gluStrUtil.js:        // case gl.R16_SNORM: return 'gl.R16_SNORM';
deqp/framework/opengl/gluStrUtil.js:        case gl.R16F: return 'gl.R16F';
deqp/framework/opengl/gluStrUtil.js:        case gl.R16I: return 'gl.R16I';
deqp/framework/opengl/gluStrUtil.js:        case gl.R16UI: return 'gl.R16UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.R8: return 'gl.R8';
deqp/framework/opengl/gluStrUtil.js:        case gl.R8I: return 'gl.R8I';
deqp/framework/opengl/gluStrUtil.js:        case gl.R8UI: return 'gl.R8UI';
deqp/framework/opengl/gluStrUtil.js:        case gl.R8_SNORM: return 'gl.R8_SNORM';
deqp/framework/opengl/gluStrUtil.js:        case gl.DEPTH_COMPONENT32F: return 'gl.DEPTH_COMPONENT32F';
deqp/framework/opengl/gluStrUtil.js:        case gl.DEPTH_COMPONENT24: return 'gl.DEPTH_COMPONENT24';
deqp/framework/opengl/gluStrUtil.js:        case gl.DEPTH32F_STENCIL8: return 'gl.DEPTH32F_STENCIL8';
deqp/framework/opengl/gluStrUtil.js:        case gl.DEPTH24_STENCIL8: return 'gl.DEPTH24_STENCIL8';
deqp/framework/opengl/gluStrUtil.js:        // case gl.RGB10: return 'gl.RGB10';
deqp/framework/opengl/gluStrUtil.js:        // case gl.DEPTH_COMPONENT32: return 'gl.DEPTH_COMPONENT32';
deqp/framework/opengl/gluStrUtil.js:        case gl.SRGB: return 'gl.SRGB';
deqp/framework/opengl/gluStrUtil.js:        // case gl.SRGB_ALPHA: return 'gl.SRGB_ALPHA';
deqp/framework/opengl/gluStrUtil.js:        case gl.BYTE: return 'gl.BYTE';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_BYTE: return 'gl.UNSIGNED_BYTE';
deqp/framework/opengl/gluStrUtil.js:        case gl.SHORT: return 'gl.SHORT';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_SHORT: return 'gl.UNSIGNED_SHORT';
deqp/framework/opengl/gluStrUtil.js:        case gl.INT: return 'gl.INT';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_INT: return 'gl.UNSIGNED_INT';
deqp/framework/opengl/gluStrUtil.js:        case gl.FLOAT: return 'gl.FLOAT';
deqp/framework/opengl/gluStrUtil.js:        // case gl.FIXED: return 'gl.FIXED';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_SHORT_5_6_5: return 'gl.UNSIGNED_SHORT_5_6_5';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_SHORT_4_4_4_4: return 'gl.UNSIGNED_SHORT_4_4_4_4';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_SHORT_5_5_5_1: return 'gl.UNSIGNED_SHORT_5_5_5_1';
deqp/framework/opengl/gluStrUtil.js:        case gl.HALF_FLOAT: return 'gl.HALF_FLOAT';
deqp/framework/opengl/gluStrUtil.js:        case gl.INT_2_10_10_10_REV: return 'gl.INT_2_10_10_10_REV';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_INT_2_10_10_10_REV: return 'gl.UNSIGNED_INT_2_10_10_10_REV';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_INT_10F_11F_11F_REV: return 'gl.UNSIGNED_INT_10F_11F_11F_REV';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_INT_5_9_9_9_REV: return 'gl.UNSIGNED_INT_5_9_9_9_REV';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_INT_24_8: return 'gl.UNSIGNED_INT_24_8';
deqp/framework/opengl/gluStrUtil.js:        case gl.FLOAT_32_UNSIGNED_INT_24_8_REV: return 'gl.FLOAT_32_UNSIGNED_INT_24_8_REV';
deqp/framework/opengl/gluStrUtil.js:        case gl.SIGNED_NORMALIZED: return 'gl.SIGNED_NORMALIZED';
deqp/framework/opengl/gluStrUtil.js:        case gl.UNSIGNED_NORMALIZED: return 'gl.UNSIGNED_NORMALIZED';
deqp/framework/opengl/gluStrUtil.js:        // case gl.HALF_FLOAT_OES: return 'gl.HALF_FLOAT_OES';
deqp/framework/opengl/gluStrUtil.js:        case gl.NO_ERROR: return 'gl.NO_ERROR';
deqp/framework/opengl/gluStrUtil.js:        case gl.INVALID_ENUM: return 'gl.INVALID_ENUM';
deqp/framework/opengl/gluStrUtil.js:        case gl.INVALID_VALUE: return 'gl.INVALID_VALUE';
deqp/framework/opengl/gluStrUtil.js:        case gl.INVALID_OPERATION: return 'gl.INVALID_OPERATION';
deqp/framework/opengl/gluStrUtil.js:        case gl.OUT_OF_MEMORY: return 'gl.OUT_OF_MEMORY';
deqp/framework/opengl/gluStrUtil.js:        // case gl.INVALID_FRAMEBUFFER_OPERATION: return 'gl.INVALID_FRAMEBUFFER_OPERATION';
deqp/framework/opengl/gluStrUtil.js:        case gl.FRAMEBUFFER_COMPLETE: return 'gl.FRAMEBUFFER_COMPLETE';
deqp/framework/opengl/gluStrUtil.js:        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT: return 'gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
deqp/framework/opengl/gluStrUtil.js:        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: return 'gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
deqp/framework/opengl/gluStrUtil.js:        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS: return 'gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
deqp/framework/opengl/gluStrUtil.js:        case gl.FRAMEBUFFER_UNSUPPORTED: return 'gl.FRAMEBUFFER_UNSUPPORTED';
deqp/framework/opengl/gluStrUtil.js:        case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: return 'gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE';
deqp/framework/opengl/gluStrUtil.js:    //    case: gl.FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: return 'gl.FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS';
deqp/modules/shared/glsAttributeLocationTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsAttributeLocationTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsAttributeLocationTests.js:        maxAttribs = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/modules/shared/glsAttributeLocationTests.js:            case gl.INT_VEC2:
deqp/modules/shared/glsAttributeLocationTests.js:            case gl.UNSIGNED_INT_VEC2:
deqp/modules/shared/glsAttributeLocationTests.js:            case gl.FLOAT_VEC2:
deqp/modules/shared/glsAttributeLocationTests.js:            case gl.INT_VEC3:
deqp/modules/shared/glsAttributeLocationTests.js:            case gl.UNSIGNED_INT_VEC3:
deqp/modules/shared/glsAttributeLocationTests.js:            case gl.FLOAT_VEC3:
deqp/modules/shared/glsAttributeLocationTests.js:        var programLinkOk = /** @type {boolean} */ (gl.getProgramParameter(program, gl.LINK_STATUS));
deqp/modules/shared/glsAttributeLocationTests.js:        /**@type{string} */ var programInfoLog = gl.getProgramInfoLog(program);
deqp/modules/shared/glsAttributeLocationTests.js:        activeAttribCount = /** @type {number} */ (gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES));
deqp/modules/shared/glsAttributeLocationTests.js:            activeInfo = gl.getActiveAttrib(program, activeAttribNdx);
deqp/modules/shared/glsAttributeLocationTests.js:            var location = /** @type {number} */ (gl.getAttribLocation(program, attrib.getName()));
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {WebGLShader} */ var vertexShader = gl.createShader(gl.VERTEX_SHADER);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {WebGLShader} */ var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
deqp/modules/shared/glsAttributeLocationTests.js:        gl.shaderSource(vertexShader, vertexShaderSource);
deqp/modules/shared/glsAttributeLocationTests.js:        gl.shaderSource(fragmentShader, fragmentShaderSource);
deqp/modules/shared/glsAttributeLocationTests.js:        gl.compileShader(vertexShader);
deqp/modules/shared/glsAttributeLocationTests.js:        gl.compileShader(fragmentShader);
deqp/modules/shared/glsAttributeLocationTests.js:        gl.attachShader(program, vertexShader);
deqp/modules/shared/glsAttributeLocationTests.js:        gl.attachShader(program, fragmentShader);
deqp/modules/shared/glsAttributeLocationTests.js:        var vertexShaderCompileOk = /** @type {boolean} */ (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS));
deqp/modules/shared/glsAttributeLocationTests.js:        var fragmentShaderCompileOk = /** @type {boolean} */ (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS));
deqp/modules/shared/glsAttributeLocationTests.js:        glsAttributeLocationTests.logShaders(vertexShaderSource, gl.getShaderInfoLog(vertexShader),
deqp/modules/shared/glsAttributeLocationTests.js:            fragmentShaderSource, gl.getShaderInfoLog(fragmentShader),
deqp/modules/shared/glsAttributeLocationTests.js:        gl.deleteShader(vertexShader);
deqp/modules/shared/glsAttributeLocationTests.js:        gl.deleteShader(fragmentShader);
deqp/modules/shared/glsAttributeLocationTests.js:            gl.bindAttribLocation(program, binds[i].getLocation(), binds[i].getAttributeName());
deqp/modules/shared/glsAttributeLocationTests.js:            /** @type {WebGLProgram} */ var program = gl.createProgram();
deqp/modules/shared/glsAttributeLocationTests.js:                gl.linkProgram(program);
deqp/modules/shared/glsAttributeLocationTests.js:                assertMsgOptions(gl.getProgramParameter(program, gl.LINK_STATUS) == true, 'link program failed', false, true);
deqp/modules/shared/glsAttributeLocationTests.js:                gl.linkProgram(program);
deqp/modules/shared/glsAttributeLocationTests.js:                assertMsgOptions(gl.getProgramParameter(program, gl.LINK_STATUS) == true, 'link program failed', false, true);
deqp/modules/shared/glsAttributeLocationTests.js:                gl.detachShader(program, shaders.first);
deqp/modules/shared/glsAttributeLocationTests.js:                gl.detachShader(program, shaders.second);
deqp/modules/shared/glsAttributeLocationTests.js:                gl.linkProgram(program);
deqp/modules/shared/glsAttributeLocationTests.js:                assertMsgOptions(gl.getProgramParameter(program, gl.LINK_STATUS) == true, 'link program failed', false, true);
deqp/modules/shared/glsAttributeLocationTests.js:            gl.deleteProgram(program);
deqp/modules/shared/glsAttributeLocationTests.js:                gl.deleteProgram(program);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/modules/shared/glsAttributeLocationTests.js:        attributes.push(new glsAttributeLocationTests.Attribute(new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4), 'a_0'));
deqp/modules/shared/glsAttributeLocationTests.js:        attributes.push(new glsAttributeLocationTests.Attribute(new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4), 'a_0'));
deqp/modules/shared/glsAttributeLocationTests.js:        attributes.push(new glsAttributeLocationTests.Attribute(new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4), 'a_0'));
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec2 = new glsAttributeLocationTests.AttribType('vec2', 1, gl.FLOAT_VEC2);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/modules/shared/glsAttributeLocationTests.js:        attributes.push(new glsAttributeLocationTests.Attribute(new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4), 'a_0', 1));
deqp/modules/shared/glsAttributeLocationTests.js:        attributes.push(new glsAttributeLocationTests.Attribute(new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4), 'a_0', 1));
deqp/modules/shared/glsAttributeLocationTests.js:        attributes.push(new glsAttributeLocationTests.Attribute(new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4), 'a_0', 1));
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec2 = new glsAttributeLocationTests.AttribType('vec2', 1, gl.FLOAT_VEC2);
deqp/modules/shared/glsAttributeLocationTests.js:        /** @type {glsAttributeLocationTests.AttribType} */ var vec4 = new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4);
deqp/framework/opengl/gluShaderProgram.js:goog.provide('framework.opengl.gluShaderProgram');
deqp/framework/opengl/gluShaderProgram.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/framework/opengl/gluShaderProgram.js:    case gluShaderProgram.shaderType.VERTEX: _glShaderType = gl.VERTEX_SHADER; break;
deqp/framework/opengl/gluShaderProgram.js:    case gluShaderProgram.shaderType.FRAGMENT: _glShaderType = gl.FRAGMENT_SHADER; break;
deqp/framework/opengl/gluShaderProgram.js:    this.shader = gl.createShader(gluShaderProgram.getGLShaderType(gl, type));
deqp/framework/opengl/gluShaderProgram.js:    assertMsgOptions(gl.getError() == gl.NO_ERROR, 'gl.createShader()', false, true);
deqp/framework/opengl/gluShaderProgram.js:        this.gl.shaderSource(this.shader, source);
deqp/framework/opengl/gluShaderProgram.js:        assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'glshaderSource()', false, true);
deqp/framework/opengl/gluShaderProgram.js:        this.gl.compileShader(this.shader);
deqp/framework/opengl/gluShaderProgram.js:        assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'gl.compileShader()', false, true);
deqp/framework/opengl/gluShaderProgram.js:        var compileStatus = this.gl.getShaderParameter(this.shader, this.gl.COMPILE_STATUS);
deqp/framework/opengl/gluShaderProgram.js:        assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'glGetShaderParameter()', false, true);
deqp/framework/opengl/gluShaderProgram.js:        this.info.infoLog = this.gl.getShaderInfoLog(this.shader);
deqp/framework/opengl/gluShaderProgram.js:        this.gl.deleteShader(this.shader);
deqp/framework/opengl/gluShaderProgram.js:        this.program = gl.createProgram();
deqp/framework/opengl/gluShaderProgram.js:        assertMsgOptions(gl.getError() == gl.NO_ERROR, 'gl.createProgram()', false, true);
deqp/framework/opengl/gluShaderProgram.js:    this.gl.attachShader(this.program, shader);
deqp/framework/opengl/gluShaderProgram.js:    assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'gl.attachShader()', false, true);
deqp/framework/opengl/gluShaderProgram.js:    this.gl.detachShader(this.program, shader);
deqp/framework/opengl/gluShaderProgram.js:    assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'gl.detachShader()', false, true);
deqp/framework/opengl/gluShaderProgram.js:    this.gl.bindAttribLocation(this.program, location, name);
deqp/framework/opengl/gluShaderProgram.js:    assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'gl.bindAttribLocation()', false, true);
deqp/framework/opengl/gluShaderProgram.js:    this.gl.linkProgram(this.program);
deqp/framework/opengl/gluShaderProgram.js:    assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'gl.linkProgram()', false, true);
deqp/framework/opengl/gluShaderProgram.js:    var linkStatus = this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS);
deqp/framework/opengl/gluShaderProgram.js:    assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'gl.getProgramParameter()', false, true);
deqp/framework/opengl/gluShaderProgram.js:    this.info.infoLog = this.gl.getProgramInfoLog(this.program);
deqp/framework/opengl/gluShaderProgram.js:    this.gl.transformFeedbackVaryings(this.program, varyings, bufferMode);
deqp/framework/opengl/gluShaderProgram.js:    assertMsgOptions(this.gl.getError() == this.gl.NO_ERROR, 'gl.transformFeedbackVaryings()', false, true);
deqp/framework/opengl/gluShaderProgram.js:            if (programSources.transformFeedbackBufferMode === gl.NONE)
js/tests/gl-enum-tests.js:  var tex = gl.createTexture();
js/tests/gl-enum-tests.js:  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
js/tests/gl-enum-tests.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-enum-tests.js:    "gl.disable(desktopGL['CLIP_PLANE0'])",
js/tests/gl-enum-tests.js:    "gl.disable(desktopGL['POINT_SPRITE'])",
js/tests/gl-enum-tests.js:    "gl.getBufferParameter(gl.ARRAY_BUFFER, desktopGL['PIXEL_PACK_BUFFER'])",
js/tests/gl-enum-tests.js:    "gl.hint(desktopGL['PERSPECTIVE_CORRECTION_HINT'], gl.FASTEST)",
js/tests/gl-enum-tests.js:    "gl.isEnabled(desktopGL['CLIP_PLANE0'])",
js/tests/gl-enum-tests.js:    "gl.isEnabled(desktopGL['POINT_SPRITE'])",
js/tests/gl-enum-tests.js:    "gl.pixelStorei(desktopGL['PACK_SWAP_BYTES'], 1)",
js/tests/gl-enum-tests.js:    "gl.getParameter(desktopGL['NUM_COMPRESSED_TEXTURE_FORMATS'])",
js/tests/gl-enum-tests.js:    "gl.getParameter(desktopGL['EXTENSIONS'])",
js/tests/gl-enum-tests.js:    "gl.getParameter(desktopGL['SHADER_COMPILER'])",
js/tests/gl-enum-tests.js:    "gl.getParameter(desktopGL['SHADER_BINARY_FORMATS'])",
js/tests/gl-enum-tests.js:    "gl.getParameter(desktopGL['NUM_SHADER_BINARY_FORMATS'])",
js/tests/gl-enum-tests.js:      "gl.blendEquation(desktopGL['MIN'])",
js/tests/gl-enum-tests.js:      "gl.blendEquation(desktopGL['MAX'])",
js/tests/gl-enum-tests.js:      "gl.blendEquationSeparate(desktopGL['MIN'], gl.FUNC_ADD)",
js/tests/gl-enum-tests.js:      "gl.blendEquationSeparate(desktopGL['MAX'], gl.FUNC_ADD)",
js/tests/gl-enum-tests.js:      "gl.blendEquationSeparate(gl.FUNC_ADD, desktopGL['MIN'])",
js/tests/gl-enum-tests.js:      "gl.blendEquationSeparate(gl.FUNC_ADD, desktopGL['MAX'])",
js/tests/gl-enum-tests.js:      "gl.bufferData(gl.ARRAY_BUFFER, 16, desktopGL['STREAM_READ'])",
js/tests/gl-enum-tests.js:      "gl.bufferData(gl.ARRAY_BUFFER, 16, desktopGL['STREAM_COPY'])",
js/tests/gl-enum-tests.js:      "gl.bufferData(gl.ARRAY_BUFFER, 16, desktopGL['STATIC_READ'])",
js/tests/gl-enum-tests.js:      "gl.bufferData(gl.ARRAY_BUFFER, 16, desktopGL['STATIC_COPY'])",
js/tests/gl-enum-tests.js:      "gl.bufferData(gl.ARRAY_BUFFER, 16, desktopGL['DYNAMIC_READ'])",
js/tests/gl-enum-tests.js:      "gl.bufferData(gl.ARRAY_BUFFER, 16, desktopGL['DYNAMIC_COPY'])",
js/tests/gl-enum-tests.js:      "gl.bindTexture(desktopGL['TEXTURE_2D_ARRAY'], tex)",
js/tests/gl-enum-tests.js:      "gl.bindTexture(desktopGL['TEXTURE_3D'], tex)",
js/tests/gl-enum-tests.js:      "gl.bindTexture(desktopGL['TEXTURE_RECTANGLE_EXT'], tex)",
js/tests/gl-enum-tests.js:      "gl.enable(desktopGL['PRIMITIVE_RESTART_FIXED_INDEX'])",
js/tests/gl-enum-tests.js:      "gl.getActiveUniforms(program, [0], desktopGL['UNIFORM_NAME_LENGTH'])",
js/tests/gl-enum-tests.js:      "gl.getProgramParameter(program, desktopGL['ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH'])",
js/tests/gl-enum-tests.js:      "gl.getProgramParameter(program, desktopGL['TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH'])",
js/tests/gl-enum-tests.js:      "gl.getProgramParameter(program, desktopGL['PROGRAM_BINARY_RETRIEVABLE_HINT'])",
js/tests/gl-enum-tests.js:      "gl.getProgramParameter(program, desktopGL['PROGRAM_BINARY_LENGTH'])",
js/tests/gl-enum-tests.js:      "gl.getParameter(program, desktopGL['NUM_PROGRAM_BINARY_FORMATS'])",
js/tests/gl-enum-tests.js:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, tests[ii] + " should return INVALID_ENUM.");
js/tests/gl-enum-tests.js:  gl.bindTexture(gl.TEXTURE_2D, tex);
js/tests/gl-enum-tests.js:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
js/tests/gl-enum-tests.js:    "gl.getTexParameter(gl.TEXTURE_2D, desktopGL['GENERATE_MIPMAP'])",
js/tests/gl-enum-tests.js:    "gl.texParameteri(gl.TEXTURE_2D, desktopGL['GENERATE_MIPMAP'], 1)",
js/tests/gl-enum-tests.js:    "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, desktopGL['CLAMP_TO_BORDER'])",
js/tests/gl-enum-tests.js:      "gl.texParameteri(desktopGL['TEXTURE_2D_ARRAY'], gl.TEXTURE_MAG_FILTER, gl.NEAREST)",
js/tests/gl-enum-tests.js:      "gl.texParameteri(desktopGL['TEXTURE_3D'], gl.TEXTURE_MAG_FILTER, gl.NEAREST)",
js/tests/gl-enum-tests.js:      "gl.texParameteri(desktopGL['TEXTURE_2D'], desktopGL['TEXTURE_SWIZZLE_R_EXT'], gl.RED)",
js/tests/gl-enum-tests.js:      "gl.texParameteri(desktopGL['TEXTURE_2D'], desktopGL['TEXTURE_SWIZZLE_G_EXT'], gl.RED)",
js/tests/gl-enum-tests.js:      "gl.texParameteri(desktopGL['TEXTURE_2D'], desktopGL['TEXTURE_SWIZZLE_B_EXT'], gl.RED)",
js/tests/gl-enum-tests.js:      "gl.texParameteri(desktopGL['TEXTURE_2D'], desktopGL['TEXTURE_SWIZZLE_A_EXT'], gl.RED)",
js/tests/gl-enum-tests.js:      "gl.texParameteri(desktopGL['TEXTURE_2D'], gl.TEXTURE_WRAP_R, desktopGL['CLAMP_TO_BORDER'])",
js/tests/gl-enum-tests.js:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, tests[ii] + " should return INVALID_ENUM.");
js/tests/gl-enum-tests.js:    gl.linkProgram(uniformBlockProgram);
js/tests/gl-enum-tests.js:    shouldBe('gl.getProgramParameter(uniformBlockProgram, gl.LINK_STATUS)', 'true');
js/tests/gl-enum-tests.js:    shouldBe('gl.getError()', 'gl.NO_ERROR');
js/tests/gl-enum-tests.js:    gl.getActiveUniformBlockParameter(uniformBlockProgram, 0, desktopGL['UNIFORM_BLOCK_NAME_LENGTH']);
js/tests/gl-enum-tests.js:    shouldBe('gl.getError()', 'gl.INVALID_ENUM');
deqp/modules/shared/glsBuiltinPrecisionTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsBuiltinPrecisionTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsBuiltinPrecisionTests.js:goog.require('framework.opengl.gluVarType');
deqp/modules/shared/glsBuiltinPrecisionTests.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/modules/shared/glsBuiltinPrecisionTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsBuiltinPrecisionTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsBuiltinPrecisionTests.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/modules/shared/glsBuiltinPrecisionTests.js:    var gluVarType = framework.opengl.gluVarType;
deqp/modules/shared/glsTextureTestUtil.js:goog.require('framework.opengl.gluDrawUtil');
deqp/modules/shared/glsTextureTestUtil.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsTextureTestUtil.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsTextureTestUtil.js:var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/modules/shared/glsTextureTestUtil.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsTextureTestUtil.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsTextureTestUtil.js:        //     ext = "gl.EXT_texture_cube_map_array";
deqp/modules/shared/glsTextureTestUtil.js:        //     ext = "gl.EXT_texture_buffer";
deqp/modules/shared/glsTextureTestUtil.js:    gl.useProgram(prog);
deqp/modules/shared/glsTextureTestUtil.js:    var loc = gl.getUniformLocation(prog, 'u_sampler');
deqp/modules/shared/glsTextureTestUtil.js:    gl.uniform1i(loc, texUnit);
deqp/modules/shared/glsTextureTestUtil.js:        gl.uniform1f(gl.getUniformLocation(prog, 'u_bias'), params.bias);
deqp/modules/shared/glsTextureTestUtil.js:        gl.uniform1f(gl.getUniformLocation(prog, 'u_ref'), params.ref);
deqp/modules/shared/glsTextureTestUtil.js:    gl.uniform4fv(gl.getUniformLocation(prog, 'u_colorScale'), params.colorScale);
deqp/modules/shared/glsTextureTestUtil.js:    gl.uniform4fv(gl.getUniformLocation(prog, 'u_colorBias'), params.colorBias);
deqp/modules/shared/glsTextureTestUtil.js:    var posLoc = gl.getAttribLocation(prog, 'a_position');
deqp/modules/shared/glsTextureTestUtil.js:    var texLoc = gl.getAttribLocation(prog, 'a_texCoord');
deqp/modules/shared/glsTextureTestUtil.js:    vertexArrays.push(new gluDrawUtil.VertexArrayBinding(gl.FLOAT, posLoc, 4, 4, position));
deqp/modules/shared/glsTextureTestUtil.js:    vertexArrays.push(new gluDrawUtil.VertexArrayBinding(gl.FLOAT, texLoc, numComps, 4, texCoord));
js/tests/instanceof-test.js:  var error = gl.getError();
js/tests/instanceof-test.js:  if (error != gl.NO_ERROR) {
js/tests/instanceof-test.js:shouldBeTrue('gl.createBuffer() instanceof WebGLBuffer');
js/tests/instanceof-test.js:shouldBeTrue('gl.createFramebuffer() instanceof WebGLFramebuffer');
js/tests/instanceof-test.js:shouldBeTrue('gl.createProgram() instanceof WebGLProgram');
js/tests/instanceof-test.js:shouldBeTrue('gl.createRenderbuffer() instanceof WebGLRenderbuffer');
js/tests/instanceof-test.js:shouldBeTrue('gl.createShader(gl.VERTEX_SHADER) instanceof WebGLShader');
js/tests/instanceof-test.js:shouldBeTrue('gl.createTexture() instanceof WebGLTexture');
js/tests/instanceof-test.js:  shouldBeTrue('gl.createQuery() instanceof WebGLQuery');
js/tests/instanceof-test.js:  shouldBeTrue('gl.createSampler() instanceof WebGLSampler');
js/tests/instanceof-test.js:  shouldBeTrue('gl.createTransformFeedback() instanceof WebGLTransformFeedback');
js/tests/instanceof-test.js:  shouldBeTrue('gl.createVertexArray() instanceof WebGLVertexArrayObject');
js/tests/instanceof-test.js:shouldBeTrue('gl.getUniformLocation(program, "color") instanceof WebGLUniformLocation');
js/tests/instanceof-test.js:shouldBeTrue('gl.getActiveAttrib(program, 0) instanceof WebGLActiveInfo');
js/tests/instanceof-test.js:shouldBeTrue('gl.getActiveUniform(program, 0) instanceof WebGLActiveInfo');
deqp/modules/shared/glsStateQuery.js:    var value = gl.getParameter(param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getVertexAttrib(index, gl.CURRENT_VERTEX_ATTRIB);
deqp/modules/shared/glsStateQuery.js:    var value = (param == gl.VERTEX_ATTRIB_ARRAY_POINTER) ?
deqp/modules/shared/glsStateQuery.js:        gl.getVertexAttribOffset(index, param) :
deqp/modules/shared/glsStateQuery.js:        gl.getVertexAttrib(index, param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getUniform(program, location);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getShaderParameter(shader, param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getProgramParameter(program, param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getSamplerParameter(sampler, param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getTexParameter(target, param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getParameter(param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getParameter(param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getParameter(param);
deqp/modules/shared/glsStateQuery.js:    var value = /** @type {number} */ (gl.getParameter(param));
deqp/modules/shared/glsStateQuery.js:    var value = gl.getFramebufferAttachmentParameter(fbo, attachment, param);
deqp/modules/shared/glsStateQuery.js:    return glsStateQuery.verifyAttachment(fbo, gl.COLOR_ATTACHMENT0, param, reference);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getRenderbufferParameter(gl.RENDERBUFFER, param);
deqp/modules/shared/glsStateQuery.js:    var value = gl.getActiveUniformBlockParameter(program, index, param);
deqp/modules/shared/glsStateQuery.js:    var intVector4 = /** @type {Array<number>} */ (gl.getParameter(param));
conformance/extensions/oes-element-index-uint.html:        var drawType = (ii == 0) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;
conformance/extensions/oes-element-index-uint.html:        ext = gl.getExtension("OES_element_index_uint");
conformance/extensions/oes-element-index-uint.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/extensions/oes-element-index-uint.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/oes-element-index-uint.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/extensions/oes-element-index-uint.html:        var vertexObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:        gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/extensions/oes-element-index-uint.html:        gl.bufferData(gl.ARRAY_BUFFER, quadArray, drawType);
conformance/extensions/oes-element-index-uint.html:        var indexObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance/extensions/oes-element-index-uint.html:        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array([
conformance/extensions/oes-element-index-uint.html:        gl.enableVertexAttribArray(opt_positionLocation);
conformance/extensions/oes-element-index-uint.html:        gl.vertexAttribPointer(opt_positionLocation, 3, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-element-index-uint.html:        gl.clearColor(1.0, 1.0, 1.0, 1.0);
conformance/extensions/oes-element-index-uint.html:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/extensions/oes-element-index-uint.html:        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0);
conformance/extensions/oes-element-index-uint.html:      case gl.BYTE:
conformance/extensions/oes-element-index-uint.html:      case gl.UNSIGNED_BYTE:
conformance/extensions/oes-element-index-uint.html:      case gl.SHORT:
conformance/extensions/oes-element-index-uint.html:      case gl.UNSIGNED_SHORT:
conformance/extensions/oes-element-index-uint.html:      case gl.INT:
conformance/extensions/oes-element-index-uint.html:      case gl.UNSIGNED_INT:
conformance/extensions/oes-element-index-uint.html:      case gl.FLOAT:
conformance/extensions/oes-element-index-uint.html:    var bufferComplete = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, bufferComplete);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, dataComplete, drawType);
conformance/extensions/oes-element-index-uint.html:    var elements = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elements);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, drawType);
conformance/extensions/oes-element-index-uint.html:    gl.useProgram(program);
conformance/extensions/oes-element-index-uint.html:    var vertexLoc = gl.getAttribLocation(program, "a_vertex");
conformance/extensions/oes-element-index-uint.html:    var normalLoc = gl.getAttribLocation(program, "a_normal");
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(vertexLoc, 4, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 0);
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(vertexLoc);
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(normalLoc);
conformance/extensions/oes-element-index-uint.html:    shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/oes-element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/oes-element-index-uint.html:    var bufferIncomplete = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, bufferIncomplete);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, dataIncomplete, drawType);
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(vertexLoc, 4, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 0);
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(vertexLoc);
conformance/extensions/oes-element-index-uint.html:    gl.disableVertexAttribArray(normalLoc);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/oes-element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(normalLoc);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/oes-element-index-uint.html:    wtu.shouldGenerateGLError(gl, [gl.INVALID_OPERATION, gl.NO_ERROR],
conformance/extensions/oes-element-index-uint.html:                              'gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance/extensions/oes-element-index-uint.html:    gl.disableVertexAttribArray(normalLoc);
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(extraLoc);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/oes-element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION);
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(extraLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), 4 * sizeInBytes(gl.FLOAT));
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/oes-element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(normalLoc, 3, gl.FLOAT, false, 7 * sizeInBytes(gl.FLOAT), -2000000000 * sizeInBytes(gl.FLOAT));
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE);
conformance/extensions/oes-element-index-uint.html:    shouldBeUndefined('gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_INT, 0)');
conformance/extensions/oes-element-index-uint.html:    gl.useProgram(program);
conformance/extensions/oes-element-index-uint.html:    var vertexObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(0);
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0,0, 0,1,0, 1,0,0, 1,1,0 ]), drawType);
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-element-index-uint.html:    var indexObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, drawType);
conformance/extensions/oes-element-index-uint.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 4)");
conformance/extensions/oes-element-index-uint.html:    var indexValidationError = wtu.shouldGenerateGLError(gl, [gl.INVALID_OPERATION, gl.NO_ERROR],
conformance/extensions/oes-element-index-uint.html:                                                         "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 0)");
conformance/extensions/oes-element-index-uint.html:    wtu.shouldGenerateGLError(gl, indexValidationError, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 8)");
conformance/extensions/oes-element-index-uint.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 4)");
conformance/extensions/oes-element-index-uint.html:    wtu.shouldGenerateGLError(gl, indexValidationError, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 0)");
conformance/extensions/oes-element-index-uint.html:    wtu.shouldGenerateGLError(gl, indexValidationError, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 8)");
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after initialization");
conformance/extensions/oes-element-index-uint.html:    var vertexObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(0);
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after vertex setup");
conformance/extensions/oes-element-index-uint.html:    var texCoordObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(1);
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after texture coord setup");
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after vertex redefinition");
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array([
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, false, 0, 0);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after texture coordinate / color redefinition");
conformance/extensions/oes-element-index-uint.html:    var indexObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, drawType);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setting up indices");
conformance/extensions/oes-element-index-uint.html:    gl.drawElements(gl.TRIANGLES, numQuads * 6, gl.UNSIGNED_INT, 0);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after drawing");
conformance/extensions/oes-element-index-uint.html:    gl.useProgram(program);
conformance/extensions/oes-element-index-uint.html:    var vertexObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.enableVertexAttribArray(0);
conformance/extensions/oes-element-index-uint.html:    gl.disableVertexAttribArray(1);
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0,0, 0,1,0, 1,0,0, 1,1,0 ]), drawType);
conformance/extensions/oes-element-index-uint.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/extensions/oes-element-index-uint.html:    var indexObject = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexObject);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array([ 10000, 0, 1, 2, 3, 10000 ]), drawType);
conformance/extensions/oes-element-index-uint.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 4)");
conformance/extensions/oes-element-index-uint.html:    var indexValidationError = wtu.shouldGenerateGLError(gl, [gl.INVALID_OPERATION, gl.NO_ERROR],
conformance/extensions/oes-element-index-uint.html:                                                         "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 0)");
conformance/extensions/oes-element-index-uint.html:    wtu.shouldGenerateGLError(gl, indexValidationError, "gl.drawElements(gl.TRIANGLE_STRIP, 4, gl.UNSIGNED_INT, 8)");
conformance/extensions/oes-element-index-uint.html:    var elementBuffer = gl.createBuffer();
conformance/extensions/oes-element-index-uint.html:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);
conformance/extensions/oes-element-index-uint.html:    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, 256, drawType);
conformance/extensions/oes-element-index-uint.html:    gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, 64, data);
conformance/extensions/oes-element-index-uint.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "after attempting to update a buffer outside of the allocated bounds");
deqp/functional/gles3/es3fTransformFeedbackTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fTransformFeedbackTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fTransformFeedbackTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fTransformFeedbackTests.js:goog.require('framework.opengl.gluVarType');
deqp/functional/gles3/es3fTransformFeedbackTests.js:goog.require('framework.opengl.gluVarTypeUtil');
deqp/functional/gles3/es3fTransformFeedbackTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fTransformFeedbackTests.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fTransformFeedbackTests.js:    var gluVarType = framework.opengl.gluVarType;
deqp/functional/gles3/es3fTransformFeedbackTests.js:    var gluVarTypeUtil = framework.opengl.gluVarTypeUtil;
deqp/functional/gles3/es3fTransformFeedbackTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var maxVertexAttribs = Number(gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var maxTfInterleavedComponents = Number(gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS));
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var maxTfSeparateAttribs = Number(gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS));
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var maxTfSeparateComponents = Number(gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS));
deqp/functional/gles3/es3fTransformFeedbackTests.js:            if (tfMode == gl.SEPARATE_ATTRIBS && numComponents > maxTfSeparateComponents)
deqp/functional/gles3/es3fTransformFeedbackTests.js:        if (tfMode == gl.SEPARATE_ATTRIBS && totalTfAttribs > maxTfSeparateAttribs)
deqp/functional/gles3/es3fTransformFeedbackTests.js:        if (tfMode == gl.INTERLEAVED_ATTRIBS && totalTfComponents > maxTfInterleavedComponents)
deqp/functional/gles3/es3fTransformFeedbackTests.js:            /** @type {number} */ var bufNdx = (bufferMode === gl.SEPARATE_ATTRIBS ? varNdx : 0);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            /** @type {number} */ var offset = (bufferMode === gl.SEPARATE_ATTRIBS ? 0 : accumulatedSize);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            return gl.TRIANGLES;
deqp/functional/gles3/es3fTransformFeedbackTests.js:            return gl.LINES;
deqp/functional/gles3/es3fTransformFeedbackTests.js:            return gl.POINTS;
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.bufferSubData(target, bufferSize, buffer);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var dbgext = gl.getExtension('WEBGL_debug_shaders');
deqp/functional/gles3/es3fTransformFeedbackTests.js:            //       (gl.getProgramParameter(this.m_program.getProgram(), gl.LINK_STATUS) ? 'linked' : 'not linked'));
deqp/functional/gles3/es3fTransformFeedbackTests.js:        if (this.m_bufferMode == gl.SEPARATE_ATTRIBS) {
deqp/functional/gles3/es3fTransformFeedbackTests.js:            this.m_outputBuffers[i] = gl.createBuffer();
deqp/functional/gles3/es3fTransformFeedbackTests.js:        this.m_transformFeedback = gl.createTransformFeedback();
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.deleteBuffer(this.m_outputBuffers[i]);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var width = gl.drawingBufferWidth;
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var height = gl.drawingBufferHeight;
deqp/functional/gles3/es3fTransformFeedbackTests.js:        this.m_primitiveQuery = gl.createQuery();
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.m_transformFeedback);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            var usage = gl.DYNAMIC_READ; // const deUint32
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buffer);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, size + guardSize, usage);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            es3fTransformFeedbackTests.writeBufferGuard(gl.TRANSFORM_FEEDBACK_BUFFER, size, guardSize);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, target, buffer);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var attribBuffer = gl.createBuffer();
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, attribBuffer);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.bufferData(gl.ARRAY_BUFFER, inputData, gl.STATIC_DRAW);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            var loc = gl.getAttribLocation(this.m_program.getProgram(), attrib.name);
deqp/functional/gles3/es3fTransformFeedbackTests.js:                gl.enableVertexAttribArray(loc);
deqp/functional/gles3/es3fTransformFeedbackTests.js:                        gl.vertexAttribPointer(loc, numComponents, gl.FLOAT, false, this.m_inputStride, attrib.offset); break;
deqp/functional/gles3/es3fTransformFeedbackTests.js:                        gl.vertexAttribIPointer(loc, numComponents, gl.INT, this.m_inputStride, attrib.offset); break;
deqp/functional/gles3/es3fTransformFeedbackTests.js:                        gl.vertexAttribIPointer(loc, numComponents, gl.UNSIGNED_INT, this.m_inputStride, attrib.offset); break;
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.viewport(this.m_viewportX, this.m_viewportY, this.m_viewportW, this.m_viewportH);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.uniform4fv(
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.getUniformLocation(this.m_program.getProgram(), 'u_scale'),
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.uniform4fv(
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.getUniformLocation(this.m_program.getProgram(), 'u_bias'),
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.beginQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, this.m_primitiveQuery);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.beginTransformFeedback(tfPrimitiveMode);
deqp/functional/gles3/es3fTransformFeedbackTests.js:                    gl.resumeTransformFeedback();
deqp/functional/gles3/es3fTransformFeedbackTests.js:                    gl.pauseTransformFeedback();
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.drawArrays(gluDrawUtil.getPrimitiveGLType(gl, this.m_primitiveType), offset, call.numElements);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.resumeTransformFeedback();
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.endTransformFeedback();
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.endQuery(gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var available = gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, this.m_outputBuffers[bufferNdx]);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.getBufferSubData(gl.TRANSFORM_FEEDBACK_BUFFER, 0, new Uint8Array(buffer));
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var available = /** @type {boolean} */ (gl.getQueryParameter(this.m_primitiveQuery, gl.QUERY_RESULT_AVAILABLE));
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var numPrimitives = /** @type {number} */ (gl.getQueryParameter(this.m_primitiveQuery, gl.QUERY_RESULT));
deqp/functional/gles3/es3fTransformFeedbackTests.js:            bufferedLogToConsole('ERROR: gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN result not available after mapping buffers!');
deqp/functional/gles3/es3fTransformFeedbackTests.js:        bufferedLogToConsole('gl.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = ' + numPrimitives);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, null);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, bufNdx, null);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fTransformFeedbackTests.js:            gl.drawArrays(gluDrawUtil.getPrimitiveGLType(gl, this.m_primitiveType), verify_offset, call.numElements);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        if (gluShaderUtil.isDataTypeMatrix(type) || this.m_bufferMode === gl.SEPARATE_ATTRIBS) {
deqp/functional/gles3/es3fTransformFeedbackTests.js:        /** @type {boolean} */ var isSeparateMode = (this.m_bufferMode === gl.SEPARATE_ATTRIBS);
deqp/functional/gles3/es3fTransformFeedbackTests.js:        var bufferModes = [{name: 'separate', mode: gl.SEPARATE_ATTRIBS}, {name: 'interleaved', mode: gl.INTERLEAVED_ATTRIBS}
conformance/extensions/ext-frag-depth.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/ext-frag-depth.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/extensions/ext-frag-depth.html:    gl.clearDepth(0.5);
conformance/extensions/ext-frag-depth.html:    gl.enable(gl.DEPTH_TEST);
conformance/extensions/ext-frag-depth.html:    var depthUniform = gl.getUniformLocation(program, "uDepth");
conformance/extensions/ext-frag-depth.html:    gl.uniform1f(depthUniform, 1.0);
conformance/extensions/ext-frag-depth.html:    gl.uniform1f(depthUniform, 0.0);
conformance/extensions/ext-frag-depth.html:    gl.getExtension("EXT_frag_depth").myProperty = 2;
conformance/extensions/ext-frag-depth.html:    shouldBe('gl.getExtension("EXT_frag_depth").myProperty', '2');
conformance/extensions/oes-texture-half-float.html:    ext = gl.getExtension("OES_texture_half_float")
conformance/extensions/oes-texture-half-float.html:          { format: gl.RGBA,            expected: [255,   0,   0, 255], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.RGB,             expected: [255,   0,   0, 255], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.LUMINANCE,       expected: [255, 255, 255, 255], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.ALPHA,           expected: [  0,   0,   0, 255], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.LUMINANCE_ALPHA, expected: [255, 255, 255, 255], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.RGBA,            expected: [85, 85, 85,  85], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.RGB,             expected: [85, 85, 85, 255], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.LUMINANCE,       expected: [85, 85, 85, 255], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.ALPHA,           expected: [ 0,  0,  0,  85], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.LUMINANCE_ALPHA, expected: [85, 85, 85,  85], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.RGBA, subtractor: [10000, 10000, 10000, 10000], },
conformance/extensions/oes-texture-half-float.html:          { format: gl.RGB,  subtractor: [10000, 10000, 10000, 1], },
conformance/extensions/oes-texture-half-float.html:        runRenderTest(gl.RGBA, [10000, 10000, 10000, 10000], null);
conformance/extensions/oes-texture-half-float.html:        runRenderTest(gl.RGB, [10000, 10000, 10000, 1], null);
conformance/extensions/oes-texture-half-float.html:    if (format == gl.RGBA)
conformance/extensions/oes-texture-half-float.html:    else if (format == gl.RGB)
conformance/extensions/oes-texture-half-float.html:    else if (format == gl.LUMINANCE || format == gl.ALPHA)
conformance/extensions/oes-texture-half-float.html:    else if (format == gl.LUMINANCE_ALPHA)
conformance/extensions/oes-texture-half-float.html:    if (format == gl.RGBA)
conformance/extensions/oes-texture-half-float.html:    else if (format == gl.RGB)
conformance/extensions/oes-texture-half-float.html:    else if (format == gl.LUMINANCE)
conformance/extensions/oes-texture-half-float.html:    else if (format == gl.ALPHA)
conformance/extensions/oes-texture-half-float.html:    else if (format == gl.LUMINANCE_ALPHA)
conformance/extensions/oes-texture-half-float.html:    if (type === gl.UNSIGNED_BYTE)
conformance/extensions/oes-texture-half-float.html:    else if (type === gl.UNSIGNED_SHORT_4_4_4_4)
conformance/extensions/oes-texture-half-float.html:    else if (type === gl.UNSIGNED_SHORT_5_5_5_1)
conformance/extensions/oes-texture-half-float.html:    else if (type === gl.FLOAT)
conformance/extensions/oes-texture-half-float.html:    var texture = gl.createTexture();
conformance/extensions/oes-texture-half-float.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/extensions/oes-texture-half-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/oes-texture-half-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/oes-texture-half-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/oes-texture-half-float.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/oes-texture-half-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texture parameter setup should succeed");
conformance/extensions/oes-texture-half-float.html:    var format = opt_format || gl.RGBA;
conformance/extensions/oes-texture-half-float.html:    gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, halfFloatOESEnum, data);
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "Half floating point texture must be disallowed if OES_texture_half_float isn't enabled");
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Half floating point texture allocation must be disallowed when ArrayBufferView is not-null and not-Uint16");
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Half floating point texture allocation should succeed if OES_texture_half_float is enabled");
conformance/extensions/oes-texture-half-float.html:            gl.texImage2D(gl.TEXTURE_2D, 0, format, format, halfFloatOESEnum, colorCanvas);
conformance/extensions/oes-texture-half-float.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/oes-texture-half-float.html:    gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, ext.HALF_FLOAT_OES, data);
conformance/extensions/oes-texture-half-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Half floating point texture allocation should succeed if OES_texture_half_float is enabled");
conformance/extensions/oes-texture-half-float.html:        var fbo = gl.createFramebuffer();
conformance/extensions/oes-texture-half-float.html:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/extensions/oes-texture-half-float.html:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/extensions/oes-texture-half-float.html:        gl.bindTexture(gl.TEXTURE_2D, null);
conformance/extensions/oes-texture-half-float.html:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Rendering to half floating point texture should succeed");
conformance/extensions/oes-texture-half-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/oes-texture-half-float.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/extensions/oes-texture-half-float.html:    gl.useProgram(testProgram);
conformance/extensions/oes-texture-half-float.html:    gl.uniform4fv(gl.getUniformLocation(testProgram, "subtractor"), subtractor);
conformance/extensions/oes-texture-half-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "rendering from half floating point texture should succeed");
conformance/extensions/oes-texture-half-float.html:    gl.getExtension("OES_texture_half_float").myProperty = 2;
conformance/extensions/oes-texture-half-float.html:    shouldBe('gl.getExtension("OES_texture_half_float").myProperty', '2');
conformance/extensions/oes-texture-half-float.html:    gl.readPixels(0, 0, 1, 1, gl.RGBA, glType, arrayBuffer);
conformance/extensions/oes-texture-half-float.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readPixels should return NO_ERROR when reading " + typeName + " data.");
conformance/extensions/oes-texture-half-float.html:    if (glFormat === gl.RGBA) {
conformance/extensions/oes-texture-half-float.html:    } else if (glFormat === gl.RGB) {
conformance/extensions/oes-texture-half-float.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, glType, arrayBuffer);
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "readPixels should return INVALID_OPERATION when reading mismatched types. " + Uint8Array.toString());
conformance/extensions/oes-texture-half-float.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, glType, arrayBuffer);
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "readPixels should return INVALID_OPERATION when reading mismatched types. " + Float32Array.toString());
conformance/extensions/oes-texture-half-float.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, glType, arrayBuffer);
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "readPixels should return INVALID_OPERATION when reading mismatched types. " + Uint16Array.toString());
conformance/extensions/oes-texture-half-float.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/extensions/oes-texture-half-float.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, ext.HALF_FLOAT_OES, null);
conformance/extensions/oes-texture-half-float.html:    var fbo = gl.createFramebuffer();
conformance/extensions/oes-texture-half-float.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/extensions/oes-texture-half-float.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/extensions/oes-texture-half-float.html:    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
conformance/extensions/oes-texture-half-float.html:    [gl.LUMINANCE, gl.LUMINANCE_ALPHA, gl.ALPHA].forEach(function(badFormat) {
conformance/extensions/oes-texture-half-float.html:        gl.texImage2D(gl.TEXTURE_2D, 0, badFormat, 1, 1, 0, badFormat, ext.HALF_FLOAT_OES, null);
conformance/extensions/oes-texture-half-float.html:        shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
conformance/extensions/oes-texture-half-float.html:        shouldBeNull("gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)");
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "IMPLEMENTATION_COLOR_READ_FORMAT should fail for incomplete framebuffers.");
conformance/extensions/oes-texture-half-float.html:        shouldBeNull("gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE)");
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "IMPLEMENTATION_COLOR_READ_TYPE should fail for incomplete framebuffers.");
conformance/extensions/oes-texture-half-float.html:        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, arrayBufferFloatOutput);
conformance/extensions/oes-texture-half-float.html:        wtu.glErrorShouldBe(gl, gl.INVALID_FRAMEBUFFER_OPERATION , "readPixels should fail on incomplete framebuffers.");
conformance/extensions/oes-texture-half-float.html:    [gl.RGBA, gl.RGB].forEach(function(goodFormat) {
conformance/extensions/oes-texture-half-float.html:        gl.texImage2D(gl.TEXTURE_2D, 0, goodFormat, 1, 1, 0, goodFormat, ext.HALF_FLOAT_OES, arrayBufferHalfFloatInput);
conformance/extensions/oes-texture-half-float.html:        shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/extensions/oes-texture-half-float.html:            gl.FLOAT,
conformance/extensions/oes-texture-half-float.html:        var implementationColorReadFormat = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT);
conformance/extensions/oes-texture-half-float.html:        assertMsg(implementationColorReadFormat === gl.RGBA || implementationColorReadFormat === gl.RGB,
conformance/extensions/oes-texture-half-float.html:        var implementationColorReadType = gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE);
conformance/extensions/oes-texture-half-float.html:        // gl.FLOAT as one of the valid options.
conformance/extensions/oes-texture-half-float.html:        assertMsg(implementationColorReadType === gl.UNSIGNED_BYTE ||
conformance/extensions/oes-texture-half-float.html:                  implementationColorReadType === gl.FLOAT ||
conformance/extensions/oes-texture-half-float.html:                  implementationColorReadType === gl.UNSIGNED_SHORT_4_4_4_4 ||
conformance/extensions/oes-texture-half-float.html:                  implementationColorReadType === gl.UNSIGNED_SHORT_5_5_5_1 ||
conformance/extensions/oes-texture-half-float.html:                  implementationColorReadType === gl.UNSIGNED_SHORT_5_6_5,
conformance/extensions/oes-texture-half-float.html:        if (implementationColorReadFormat === gl.RGBA && implementationColorReadType === ext.HALF_FLOAT_OES) {
conformance/extensions/angle-instanced-arrays-out-of-bounds.html:    OutOfBoundsTest.runDrawArraysTest("ext.drawArraysInstancedANGLE(gl.TRIANGLES, $(offset), $(count), 1)", gl, wtu, ext);
conformance/extensions/angle-instanced-arrays-out-of-bounds.html:    OutOfBoundsTest.runDrawElementsTest("ext.drawElementsInstancedANGLE(gl.TRIANGLES, $(count), $(type), $(offset), 1)", gl, wtu, ext);
conformance/extensions/angle-instanced-arrays-out-of-bounds.html:    OutOfBoundsTest.runDrawArraysTest("ext.drawArraysInstancedANGLE(gl.TRIANGLES, $(offset), $(count), 2)", gl, wtu, ext);
conformance/extensions/angle-instanced-arrays-out-of-bounds.html:    OutOfBoundsTest.runDrawElementsTest("ext.drawElementsInstancedANGLE(gl.TRIANGLES, $(count), $(type), $(offset), 2)", gl, wtu, ext);
conformance/extensions/angle-instanced-arrays-out-of-bounds.html:    OutOfBoundsTest.runDrawArraysInstancedTest("ext.drawArraysInstancedANGLE(gl.TRIANGLES, $(offset), $(count), $(primcount))", gl, wtu, ext);
conformance/extensions/angle-instanced-arrays-out-of-bounds.html:    OutOfBoundsTest.runDrawElementsInstancedTest("ext.drawElementsInstancedANGLE(gl.TRIANGLES, $(count), $(type), $(offset), $(primcount))", gl, wtu, ext);
conformance/extensions/angle-instanced-arrays.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/angle-instanced-arrays.html:    gl.getVertexAttrib(0, VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE should not be queryable if extension is disabled");
conformance/extensions/angle-instanced-arrays.html:    var max_vertex_attribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
conformance/extensions/angle-instanced-arrays.html:        var queried_value = gl.getVertexAttrib(i, ext.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "vertexAttribDivisorANGLE index set greater than or equal to MAX_VERTEX_ATTRIBS should be an invalid value");
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "vertexAttribDivisorANGLE index set less than MAX_VERTEX_ATTRIBS should succeed");
conformance/extensions/angle-instanced-arrays.html:    var queried_value = gl.getVertexAttrib(max_vertex_attribs-1, ext.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE);
conformance/extensions/angle-instanced-arrays.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/extensions/angle-instanced-arrays.html:    gl.clearColor(0, 0, 0, 0);
conformance/extensions/angle-instanced-arrays.html:    ext = gl.getExtension("ANGLE_instanced_arrays");
conformance/extensions/angle-instanced-arrays.html:    var offsetBuffer = gl.createBuffer();
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, offsets, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    gl.enableVertexAttribArray(offsetLoc);
conformance/extensions/angle-instanced-arrays.html:    gl.vertexAttribPointer(offsetLoc, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:    var colorBuffer = gl.createBuffer();
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    gl.enableVertexAttribArray(colorLoc);
conformance/extensions/angle-instanced-arrays.html:    gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "vertex attrib divisor should affect regular drawArrays when the extension is enabled");
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 6, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 6, -1);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "drawArraysInstancedANGLE cannot have a primcount less than 0");
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.TRIANGLES, 0, -1, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "drawArraysInstancedANGLE cannot have a count less than 0");
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 6, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "There must be at least one vertex attribute with a divisor of zero when calling drawArraysInstancedANGLE");
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.POINTS, 0, 6, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstancedANGLE with POINTS should succeed");
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.LINES, 0, 6, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstancedANGLE with LINES should succeed");
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.LINE_LIST, 0, 6, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstancedANGLE with LINE_LIST should return succeed");
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.TRIANGLE_LIST, 0, 6, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstancedANGLE with TRIANGLE_LIST should succeed");
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawArraysInstancedANGLE with QUAD_STRIP should return INVALID_ENUM");
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawArraysInstancedANGLE with QUADS should return INVALID_ENUM");
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawArraysInstancedANGLE with POLYGON should return INVALID_ENUM");
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, offsetsHalf, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.TRIANGLES, 3, 3, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, offsets, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 48);
conformance/extensions/angle-instanced-arrays.html:    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "vertex attrib divisor should affect regular drawElements when the extension is enabled");
conformance/extensions/angle-instanced-arrays.html:    gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, -1);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "drawElementsInstancedANGLE cannot have a primcount less than 0");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.TRIANGLES, -1, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "drawElementsInstancedANGLE cannot have a count less than 0");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "There must be at least one vertex attribute with a divisor of zero when calling drawElementsInstancedANGLE");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstancedANGLE with UNSIGNED_BYTE should succeed");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.POINTS, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstancedANGLE with POINTS should succeed");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.LINES, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstancedANGLE with LINES should succeed");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.LINE_LIST, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstancedANGLE with LINE_LIST should return succeed");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(gl.TRIANGLE_LIST, 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawElementsInstancedANGLE with TRIANGLE_LIST should succeed");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(desktopGL['QUAD_STRIP'], 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawElementsInstancedANGLE with QUAD_STRIP should return INVALID_ENUM");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(desktopGL['QUADS'], 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawElementsInstancedANGLE with QUADS should return INVALID_ENUM");
conformance/extensions/angle-instanced-arrays.html:    ext.drawElementsInstancedANGLE(desktopGL['POLYGON'], 6, gl.UNSIGNED_SHORT, 0, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "drawElementsInstancedANGLE with POLYGON should return INVALID_ENUM");
conformance/extensions/angle-instanced-arrays.html:    var positionLoc = gl.getAttribLocation(program, "aPosition");
conformance/extensions/angle-instanced-arrays.html:    var instancePosLoc = gl.getAttribLocation(program, "aInstancePos");
conformance/extensions/angle-instanced-arrays.html:    var uniformLoc = gl.getUniformLocation(program, "uOffset");
conformance/extensions/angle-instanced-arrays.html:    var positionBuffer = gl.createBuffer();
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    gl.enableVertexAttribArray(positionLoc);
conformance/extensions/angle-instanced-arrays.html:    gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:    var instancePositionBuffer = gl.createBuffer();
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, instancePositionBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, instancePositions, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    gl.enableVertexAttribArray(instancePosLoc);
conformance/extensions/angle-instanced-arrays.html:    gl.vertexAttribPointer(instancePosLoc, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:    gl.uniform3fv(uniformLoc, offset);
conformance/extensions/angle-instanced-arrays.html:    ext.drawArraysInstancedANGLE(gl.TRIANGLES, first, count, instanceCount);
conformance/extensions/angle-instanced-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawArraysInstancedANGLE should succeed");
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:    gl.getExtension("ANGLE_instanced_arrays").myProperty = 2;
conformance/extensions/angle-instanced-arrays.html:    shouldBe('gl.getExtension("ANGLE_instanced_arrays").myProperty', '2');
conformance/extensions/angle-instanced-arrays.html:    vaoext = gl.getExtension("OES_vertex_array_object");
conformance/extensions/angle-instanced-arrays.html:    gl.useProgram(program);
conformance/extensions/angle-instanced-arrays.html:    var positionBuffer = gl.createBuffer();
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    var colorBuffer = gl.createBuffer();
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance/extensions/angle-instanced-arrays.html:        gl.enableVertexAttribArray(positionLoc);
conformance/extensions/angle-instanced-arrays.html:        gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/angle-instanced-arrays.html:        gl.enableVertexAttribArray(colorLoc);
conformance/extensions/angle-instanced-arrays.html:        gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:        gl.vertexAttrib2fv(offsetLoc, [0.0, 0.0]);
conformance/extensions/angle-instanced-arrays.html:        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
conformance/extensions/angle-instanced-arrays.html:        gl.enableVertexAttribArray(positionLoc);
conformance/extensions/angle-instanced-arrays.html:        gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/angle-instanced-arrays.html:        gl.enableVertexAttribArray(colorLoc);
conformance/extensions/angle-instanced-arrays.html:        gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:        gl.vertexAttrib2fv(offsetLoc, [0.0, 0.0]);
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:    gl.drawArrays(gl.TRIANGLES, 0, 12);
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:    gl.drawArrays(gl.TRIANGLES, 0, 12);
conformance/extensions/angle-instanced-arrays.html:    var offsetBuffer = gl.createBuffer();
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, offsets.byteLength * 2, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, offsets);
conformance/extensions/angle-instanced-arrays.html:    gl.enableVertexAttribArray(offsetLoc);
conformance/extensions/angle-instanced-arrays.html:    gl.vertexAttribPointer(offsetLoc, 2, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:    var colorBuffer = gl.createBuffer();
conformance/extensions/angle-instanced-arrays.html:    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferData(gl.ARRAY_BUFFER, colors.byteLength * 2, gl.STATIC_DRAW);
conformance/extensions/angle-instanced-arrays.html:    gl.bufferSubData(gl.ARRAY_BUFFER, 0, colors);
conformance/extensions/angle-instanced-arrays.html:    gl.enableVertexAttribArray(colorLoc);
conformance/extensions/angle-instanced-arrays.html:    gl.vertexAttribPointer(colorLoc, 4, gl.FLOAT, false, 0, 0);
conformance/extensions/angle-instanced-arrays.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/angle-instanced-arrays.html:        gl.bindBuffer(gl.ARRAY_BUFFER, offsetBuffer);
conformance/extensions/angle-instanced-arrays.html:        gl.bufferSubData(gl.ARRAY_BUFFER, offsets.byteLength, nullData);
conformance/extensions/angle-instanced-arrays.html:        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
conformance/extensions/angle-instanced-arrays.html:        gl.bufferSubData(gl.ARRAY_BUFFER, colors.byteLength, nullData);
conformance/extensions/angle-instanced-arrays.html:        ext.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 6, instanceCount);
deqp/framework/opengl/gluTextureUtil.js:goog.provide('framework.opengl.gluTextureUtil');
deqp/framework/opengl/gluTextureUtil.js:goog.require('framework.opengl.gluShaderUtil');
deqp/framework/opengl/gluTextureUtil.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/framework/opengl/gluTextureUtil.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/framework/opengl/gluTextureUtil.js:    var format = gl.NONE;
deqp/framework/opengl/gluTextureUtil.js:    var type = gl.NONE;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.A: format = gl.ALPHA; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.L: format = gl.LUMINANCE; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.LA: format = gl.LUMINANCE_ALPHA; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.R: format = isInt ? gl.RED_INTEGER : gl.RED; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.RG: format = isInt ? gl.RG_INTEGER : gl.RG; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.RGB: format = isInt ? gl.RGB_INTEGER : gl.RGB; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.RGBA: format = isInt ? gl.RGBA_INTEGER : gl.RGBA; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.sRGB: format = gl.RGB; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.sRGBA: format = gl.RGBA; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.D: format = gl.DEPTH_COMPONENT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.DS: format = gl.DEPTH_STENCIL; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelOrder.S: format = gl.STENCIL_INDEX; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.SNORM_INT8: type = gl.BYTE; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.SNORM_INT16: type = gl.SHORT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNORM_INT8: type = gl.UNSIGNED_BYTE; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNORM_INT16: type = gl.UNSIGNED_SHORT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNORM_SHORT_565: type = gl.UNSIGNED_SHORT_5_6_5; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNORM_SHORT_4444: type = gl.UNSIGNED_SHORT_4_4_4_4; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNORM_SHORT_5551: type = gl.UNSIGNED_SHORT_5_5_5_1; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.SIGNED_INT8: type = gl.BYTE; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.SIGNED_INT16: type = gl.SHORT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.SIGNED_INT32: type = gl.INT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNSIGNED_INT8: type = gl.UNSIGNED_BYTE; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNSIGNED_INT16: type = gl.UNSIGNED_SHORT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNSIGNED_INT32: type = gl.UNSIGNED_INT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.FLOAT: type = gl.FLOAT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNORM_INT_101010: type = gl.UNSIGNED_INT_2_10_10_10_REV; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNORM_INT_1010102_REV: type = gl.UNSIGNED_INT_2_10_10_10_REV; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNSIGNED_INT_1010102_REV: type = gl.UNSIGNED_INT_2_10_10_10_REV; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNSIGNED_INT_11F_11F_10F_REV: type = gl.UNSIGNED_INT_10F_11F_11F_REV; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.UNSIGNED_INT_999_E5_REV: type = gl.UNSIGNED_INT_5_9_9_9_REV; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.HALF_FLOAT: type = gl.HALF_FLOAT; break;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.ChannelType.FLOAT_UNSIGNED_INT_24_8_REV: type = gl.FLOAT_32_UNSIGNED_INT_24_8_REV; break;
deqp/framework/opengl/gluTextureUtil.js:                                                                 gl.UNSIGNED_INT : gl.UNSIGNED_INT_24_8; break;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_SHORT_5551): return gl.RGB5_A1;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_SHORT_4444): return gl.RGBA4;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_SHORT_565): return gl.RGB565;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.D, tcuTexture.ChannelType.UNORM_INT16): return gl.DEPTH_COMPONENT16;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.S, tcuTexture.ChannelType.UNSIGNED_INT8): return gl.STENCIL_INDEX8;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.FLOAT): return gl.RGBA32F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SIGNED_INT32): return gl.RGBA32I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNSIGNED_INT32): return gl.RGBA32UI;
deqp/framework/opengl/gluTextureUtil.js:        // TODO: Check which ones are valid in WebGL 2 - case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_INT16): return gl.RGBA16;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SNORM_INT16): return gl.RGBA16_SNORM;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.HALF_FLOAT): return gl.RGBA16F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SIGNED_INT16): return gl.RGBA16I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNSIGNED_INT16): return gl.RGBA16UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_INT8): return gl.RGBA8;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SIGNED_INT8): return gl.RGBA8I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNSIGNED_INT8): return gl.RGBA8UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.sRGBA, tcuTexture.ChannelType.UNORM_INT8): return gl.SRGB8_ALPHA8;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_INT_1010102_REV): return gl.RGB10_A2;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNSIGNED_INT_1010102_REV): return gl.RGB10_A2UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SNORM_INT8): return gl.RGBA8_SNORM;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_INT8): return gl.RGB8;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT_11F_11F_10F_REV): return gl.R11F_G11F_B10F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.FLOAT): return gl.RGB32F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SIGNED_INT32): return gl.RGB32I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT32): return gl.RGB32UI;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_INT16): return gl.RGB16;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SNORM_INT16): return gl.RGB16_SNORM;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.HALF_FLOAT): return gl.RGB16F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SIGNED_INT16): return gl.RGB16I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT16): return gl.RGB16UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SNORM_INT8): return gl.RGB8_SNORM;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SIGNED_INT8): return gl.RGB8I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT8): return gl.RGB8UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.sRGB, tcuTexture.ChannelType.UNORM_INT8): return gl.SRGB8;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT_999_E5_REV): return gl.RGB9_E5;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_INT_1010102_REV): return gl.RGB10;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.FLOAT): return gl.RG32F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SIGNED_INT32): return gl.RG32I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNSIGNED_INT32): return gl.RG32UI;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNORM_INT16): return gl.RG16;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SNORM_INT16): return gl.RG16_SNORM;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.HALF_FLOAT): return gl.RG16F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SIGNED_INT16): return gl.RG16I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNSIGNED_INT16): return gl.RG16UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNORM_INT8): return gl.RG8;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SIGNED_INT8): return gl.RG8I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNSIGNED_INT8): return gl.RG8UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SNORM_INT8): return gl.RG8_SNORM;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.FLOAT): return gl.R32F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SIGNED_INT32): return gl.R32I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNSIGNED_INT32): return gl.R32UI;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNORM_INT16): return gl.R16;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SNORM_INT16): return gl.R16_SNORM;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.HALF_FLOAT): return gl.R16F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SIGNED_INT16): return gl.R16I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNSIGNED_INT16): return gl.R16UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNORM_INT8): return gl.R8;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SIGNED_INT8): return gl.R8I;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNSIGNED_INT8): return gl.R8UI;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SNORM_INT8): return gl.R8_SNORM;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.D, tcuTexture.ChannelType.FLOAT): return gl.DEPTH_COMPONENT32F;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.D, tcuTexture.ChannelType.UNSIGNED_INT_24_8): return gl.DEPTH_COMPONENT24;
deqp/framework/opengl/gluTextureUtil.js:        //case stringify(tcuTexture.ChannelOrder.D, tcuTexture.ChannelType.UNSIGNED_INT32): return gl.DEPTH_COMPONENT32;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.DS, tcuTexture.ChannelType.FLOAT_UNSIGNED_INT_24_8_REV): return gl.DEPTH32F_STENCIL8;
deqp/framework/opengl/gluTextureUtil.js:        case stringify(tcuTexture.ChannelOrder.DS, tcuTexture.ChannelType.UNSIGNED_INT_24_8): return gl.DEPTH24_STENCIL8;
deqp/framework/opengl/gluTextureUtil.js:            var WEBGL_compressed_texture_etc = gl.getExtension("WEBGL_compressed_texture_etc");
deqp/framework/opengl/gluTextureUtil.js:        // TODO: check which are available in WebGL 2 - case tcuCompressedTexture.Format.ETC1_RGB8: return gl.ETC1_RGB8_OES;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.EAC_R11: return gl.COMPRESSED_R11_EAC;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.EAC_SIGNED_R11: return gl.COMPRESSED_SIGNED_R11_EAC;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.EAC_RG11: return gl.COMPRESSED_RG11_EAC;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.EAC_SIGNED_RG11: return gl.COMPRESSED_SIGNED_RG11_EAC;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ETC2_RGB8: return gl.COMPRESSED_RGB8_ETC2;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ETC2_SRGB8: return gl.COMPRESSED_SRGB8_ETC2;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ETC2_RGB8_PUNCHTHROUGH_ALPHA1: return gl.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ETC2_SRGB8_PUNCHTHROUGH_ALPHA1: return gl.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ETC2_EAC_RGBA8: return gl.COMPRESSED_RGBA8_ETC2_EAC;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ETC2_EAC_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
deqp/framework/opengl/gluTextureUtil.js:        /*case tcuCompressedTexture.Format.ASTC_4x4_RGBA: return gl.COMPRESSED_RGBA_ASTC_4x4_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_5x4_RGBA: return gl.COMPRESSED_RGBA_ASTC_5x4_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_5x5_RGBA: return gl.COMPRESSED_RGBA_ASTC_5x5_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_6x5_RGBA: return gl.COMPRESSED_RGBA_ASTC_6x5_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_6x6_RGBA: return gl.COMPRESSED_RGBA_ASTC_6x6_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_8x5_RGBA: return gl.COMPRESSED_RGBA_ASTC_8x5_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_8x6_RGBA: return gl.COMPRESSED_RGBA_ASTC_8x6_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_8x8_RGBA: return gl.COMPRESSED_RGBA_ASTC_8x8_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_10x5_RGBA: return gl.COMPRESSED_RGBA_ASTC_10x5_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_10x6_RGBA: return gl.COMPRESSED_RGBA_ASTC_10x6_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_10x8_RGBA: return gl.COMPRESSED_RGBA_ASTC_10x8_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_10x10_RGBA: return gl.COMPRESSED_RGBA_ASTC_10x10_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_12x10_RGBA: return gl.COMPRESSED_RGBA_ASTC_12x10_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_12x12_RGBA: return gl.COMPRESSED_RGBA_ASTC_12x12_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_4x4_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_5x4_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_5x5_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_6x5_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_6x6_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_8x5_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_8x6_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_8x8_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_10x5_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_10x6_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_10x8_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_10x10_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_12x10_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuCompressedTexture.Format.ASTC_12x12_SRGB8_ALPHA8: return gl.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;*/
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_BYTE: return normalized ? tcuTexture.ChannelType.UNORM_INT8 : tcuTexture.ChannelType.UNSIGNED_INT8;
deqp/framework/opengl/gluTextureUtil.js:        case gl.BYTE: return normalized ? tcuTexture.ChannelType.SNORM_INT8 : tcuTexture.ChannelType.SIGNED_INT8;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_SHORT: return normalized ? tcuTexture.ChannelType.UNORM_INT16 : tcuTexture.ChannelType.UNSIGNED_INT16;
deqp/framework/opengl/gluTextureUtil.js:        case gl.SHORT: return normalized ? tcuTexture.ChannelType.SNORM_INT16 : tcuTexture.ChannelType.SIGNED_INT16;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_INT: return normalized ? tcuTexture.ChannelType.UNORM_INT32 : tcuTexture.ChannelType.UNSIGNED_INT32;
deqp/framework/opengl/gluTextureUtil.js:        case gl.INT: return normalized ? tcuTexture.ChannelType.SNORM_INT32 : tcuTexture.ChannelType.SIGNED_INT32;
deqp/framework/opengl/gluTextureUtil.js:        case gl.FLOAT: return tcuTexture.ChannelType.FLOAT;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_SHORT_4_4_4_4: return tcuTexture.ChannelType.UNORM_SHORT_4444;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_SHORT_5_5_5_1: return tcuTexture.ChannelType.UNORM_SHORT_5551;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_SHORT_5_6_5: return tcuTexture.ChannelType.UNORM_SHORT_565;
deqp/framework/opengl/gluTextureUtil.js:        case gl.HALF_FLOAT: return tcuTexture.ChannelType.HALF_FLOAT;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_INT_2_10_10_10_REV: return normalized ? tcuTexture.ChannelType.UNORM_INT_1010102_REV : tcuTexture.ChannelType.UNSIGNED_INT_1010102_REV;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_INT_10F_11F_11F_REV: return tcuTexture.ChannelType.UNSIGNED_INT_11F_11F_10F_REV;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_INT_24_8: return tcuTexture.ChannelType.UNSIGNED_INT_24_8;
deqp/framework/opengl/gluTextureUtil.js:        case gl.FLOAT_32_UNSIGNED_INT_24_8_REV: return tcuTexture.ChannelType.FLOAT_UNSIGNED_INT_24_8_REV;
deqp/framework/opengl/gluTextureUtil.js:        case gl.UNSIGNED_INT_5_9_9_9_REV: return tcuTexture.ChannelType.UNSIGNED_INT_999_E5_REV;
deqp/framework/opengl/gluTextureUtil.js:        case gl.ALPHA: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.A, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.LUMINANCE: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.L, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.LUMINANCE_ALPHA: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.LA, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        //case gl.BGRA: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.BGRA, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RED: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA_INTEGER: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, gluTextureUtil.mapGLChannelType(dataType, false));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB_INTEGER: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, gluTextureUtil.mapGLChannelType(dataType, false));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG_INTEGER: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, gluTextureUtil.mapGLChannelType(dataType, false));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RED_INTEGER: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, gluTextureUtil.mapGLChannelType(dataType, false));
deqp/framework/opengl/gluTextureUtil.js:        case gl.DEPTH_COMPONENT: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.D, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.DEPTH_STENCIL: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.DS, gluTextureUtil.mapGLChannelType(dataType, true));
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB5_A1: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_SHORT_5551);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA4: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_SHORT_4444);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB565: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_SHORT_565);
deqp/framework/opengl/gluTextureUtil.js:        case gl.DEPTH_COMPONENT16: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.D, tcuTexture.ChannelType.UNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.STENCIL_INDEX8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.S, tcuTexture.ChannelType.UNSIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA32F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA32I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA32UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNSIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        //TODO: Check which are available in WebGL 2 case gl.RGBA16: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.RGBA16_SNORM: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA16F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.HALF_FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA16I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SIGNED_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA16UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNSIGNED_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA8I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA8UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNSIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.SRGB8_ALPHA8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.sRGBA, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB10_A2: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNORM_INT_1010102_REV);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB10_A2UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.UNSIGNED_INT_1010102_REV);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA8_SNORM: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGBA, tcuTexture.ChannelType.SNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R11F_G11F_B10F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT_11F_11F_10F_REV);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB32F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB32I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB32UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.RGB16: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.RGB16_SNORM: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB16F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.HALF_FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB16I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SIGNED_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB16UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB8_SNORM: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB8I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.SIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB8UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.SRGB8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.sRGB, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB9_E5: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNSIGNED_INT_999_E5_REV);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.RGB10: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RGB, tcuTexture.ChannelType.UNORM_INT_1010102_REV);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG32F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG32I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG32UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNSIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.RG16: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.RG16_SNORM: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG16F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.HALF_FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG16I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SIGNED_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG16UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNSIGNED_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG8I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG8UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.UNSIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG8_SNORM: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.RG, tcuTexture.ChannelType.SNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R32F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R32I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R32UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNSIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.R16: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.R16_SNORM: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SNORM_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R16F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.HALF_FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R16I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SIGNED_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R16UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNSIGNED_INT16);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R8I: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R8UI: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.UNSIGNED_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R8_SNORM: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.R, tcuTexture.ChannelType.SNORM_INT8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.DEPTH_COMPONENT32F: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.D, tcuTexture.ChannelType.FLOAT);
deqp/framework/opengl/gluTextureUtil.js:        case gl.DEPTH_COMPONENT24: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.D, tcuTexture.ChannelType.UNSIGNED_INT_24_8);
deqp/framework/opengl/gluTextureUtil.js:        //case gl.DEPTH_COMPONENT32: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.D, tcuTexture.ChannelType.UNSIGNED_INT32);
deqp/framework/opengl/gluTextureUtil.js:        case gl.DEPTH32F_STENCIL8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.DS, tcuTexture.ChannelType.FLOAT_UNSIGNED_INT_24_8_REV);
deqp/framework/opengl/gluTextureUtil.js:        case gl.DEPTH24_STENCIL8: return new tcuTexture.TextureFormat(tcuTexture.ChannelOrder.DS, tcuTexture.ChannelType.UNSIGNED_INT_24_8);
deqp/framework/opengl/gluTextureUtil.js:        case gl.R8:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R8_SNORM:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG8:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG8_SNORM:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB8:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB8_SNORM:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB565:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA4:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB5_A1:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA8:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA8_SNORM:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB10_A2:
deqp/framework/opengl/gluTextureUtil.js:        case gl.SRGB8:
deqp/framework/opengl/gluTextureUtil.js:        case gl.SRGB8_ALPHA8:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R16F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG16F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB16F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA16F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R11F_G11F_B10F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB9_E5:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB10_A2UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R32F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG32F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB32F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA32F:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R8I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R8UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R16I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R16UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R32I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.R32UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG8I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG8UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG16I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG16UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG32I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RG32UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB8I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB8UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB16I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB16UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB32I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGB32UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA8I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA8UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA16I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA16UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA32I:
deqp/framework/opengl/gluTextureUtil.js:        case gl.RGBA32UI:
deqp/framework/opengl/gluTextureUtil.js:        case gl.CLAMP_TO_EDGE: return tcuTexture.WrapMode.CLAMP_TO_EDGE;
deqp/framework/opengl/gluTextureUtil.js:        case gl.REPEAT: return tcuTexture.WrapMode.REPEAT_GL;
deqp/framework/opengl/gluTextureUtil.js:        case gl.MIRRORED_REPEAT: return tcuTexture.WrapMode.MIRRORED_REPEAT_GL;
deqp/framework/opengl/gluTextureUtil.js:        case gl.NEAREST: return tcuTexture.FilterMode.NEAREST;
deqp/framework/opengl/gluTextureUtil.js:        case gl.LINEAR: return tcuTexture.FilterMode.LINEAR;
deqp/framework/opengl/gluTextureUtil.js:        case gl.NEAREST_MIPMAP_NEAREST: return tcuTexture.FilterMode.NEAREST_MIPMAP_NEAREST;
deqp/framework/opengl/gluTextureUtil.js:        case gl.NEAREST_MIPMAP_LINEAR: return tcuTexture.FilterMode.NEAREST_MIPMAP_LINEAR;
deqp/framework/opengl/gluTextureUtil.js:        case gl.LINEAR_MIPMAP_NEAREST: return tcuTexture.FilterMode.LINEAR_MIPMAP_NEAREST;
deqp/framework/opengl/gluTextureUtil.js:        case gl.LINEAR_MIPMAP_LINEAR: return tcuTexture.FilterMode.LINEAR_MIPMAP_LINEAR;
deqp/framework/opengl/gluTextureUtil.js:     case gl.LESS: return tcuTexture.CompareMode.COMPAREMODE_LESS;
deqp/framework/opengl/gluTextureUtil.js:         case gl.LEQUAL: return tcuTexture.CompareMode.COMPAREMODE_LESS_OR_EQUAL;
deqp/framework/opengl/gluTextureUtil.js:         case gl.GREATER: return tcuTexture.CompareMode.COMPAREMODE_GREATER;
deqp/framework/opengl/gluTextureUtil.js:         case gl.GEQUAL: return tcuTexture.CompareMode.COMPAREMODE_GREATER_OR_EQUAL;
deqp/framework/opengl/gluTextureUtil.js:         case gl.EQUAL: return tcuTexture.CompareMode.COMPAREMODE_EQUAL;
deqp/framework/opengl/gluTextureUtil.js:         case gl.NOTEQUAL: return tcuTexture.CompareMode.COMPAREMODE_NOT_EQUAL;
deqp/framework/opengl/gluTextureUtil.js:         case gl.ALWAYS: return tcuTexture.CompareMode.COMPAREMODE_ALWAYS;
deqp/framework/opengl/gluTextureUtil.js:         case gl.NEVER: return tcuTexture.CompareMode.COMPAREMODE_NEVER;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.WrapMode.CLAMP_TO_EDGE: return gl.CLAMP_TO_EDGE;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.WrapMode.REPEAT_GL: return gl.REPEAT;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.WrapMode.MIRRORED_REPEAT_GL: return gl.MIRRORED_REPEAT;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.FilterMode.NEAREST: return gl.NEAREST;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.FilterMode.LINEAR: return gl.LINEAR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.FilterMode.NEAREST_MIPMAP_NEAREST: return gl.NEAREST_MIPMAP_NEAREST;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.FilterMode.NEAREST_MIPMAP_LINEAR: return gl.NEAREST_MIPMAP_LINEAR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.FilterMode.LINEAR_MIPMAP_NEAREST: return gl.LINEAR_MIPMAP_NEAREST;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.FilterMode.LINEAR_MIPMAP_LINEAR: return gl.LINEAR_MIPMAP_LINEAR;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_NONE: return gl.NONE;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_LESS: return gl.LESS;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_LESS_OR_EQUAL: return gl.LEQUAL;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_GREATER: return gl.GREATER;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_GREATER_OR_EQUAL: return gl.GEQUAL;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_EQUAL: return gl.EQUAL;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_NOT_EQUAL: return gl.NOTEQUAL;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_ALWAYS: return gl.ALWAYS;
deqp/framework/opengl/gluTextureUtil.js:        case tcuTexture.CompareMode.COMPAREMODE_NEVER: return gl.NEVER;
deqp/framework/opengl/gluTextureUtil.js:            return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
deqp/framework/opengl/gluTextureUtil.js:            return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
deqp/framework/opengl/gluTextureUtil.js:            return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
deqp/framework/opengl/gluTextureUtil.js:            return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
deqp/framework/opengl/gluTextureUtil.js:            return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
deqp/framework/opengl/gluTextureUtil.js:            return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA32I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA32UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA16I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA16UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA8:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA8I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA8UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.SRGB8_ALPHA8:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGB10_A2:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGB10_A2UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA4:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGB5_A1:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGB8:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGB565:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG32I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG32UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG16I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG16UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG8:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG8I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG8UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R32I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R32UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R16I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R16UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R8:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R8I:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R8UI:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA32F:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R11F_G11F_B10F:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG32F:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R32F:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RGBA16F:
deqp/framework/opengl/gluTextureUtil.js:       case gl.RG16F:
deqp/framework/opengl/gluTextureUtil.js:       case gl.R16F:
deqp/framework/opengl/gluTextureUtil.js:           if (gl.getExtension("EXT_color_buffer_float"))
deqp/framework/opengl/gluTextureUtil.js:       case gl.DEPTH_COMPONENT32F:
deqp/framework/opengl/gluTextureUtil.js:       case gl.DEPTH_COMPONENT24:
deqp/framework/opengl/gluTextureUtil.js:       case gl.DEPTH_COMPONENT16:
deqp/framework/opengl/gluTextureUtil.js:       case gl.DEPTH32F_STENCIL8:
deqp/framework/opengl/gluTextureUtil.js:       case gl.DEPTH24_STENCIL8:
deqp/framework/opengl/gluTextureUtil.js:       case gl.STENCIL_INDEX8:
deqp/modules/shared/glsShaderRenderCase.js:goog.require('framework.opengl.gluDrawUtil');
deqp/modules/shared/glsShaderRenderCase.js:goog.require('framework.opengl.gluTexture');
deqp/modules/shared/glsShaderRenderCase.js:goog.require('framework.opengl.gluTextureUtil');
deqp/modules/shared/glsShaderRenderCase.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsShaderRenderCase.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/modules/shared/glsShaderRenderCase.js:    var gluTexture = framework.opengl.gluTexture;
deqp/modules/shared/glsShaderRenderCase.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/modules/shared/glsShaderRenderCase.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsShaderRenderCase.js:        gl.useProgram(programID);
deqp/modules/shared/glsShaderRenderCase.js:        gl.useProgram(null);
deqp/modules/shared/glsShaderRenderCase.js:        return [Math.min(gl.canvas.width, glsShaderRenderCase.MAX_RENDER_WIDTH),
deqp/modules/shared/glsShaderRenderCase.js:                Math.min(gl.canvas.height, glsShaderRenderCase.MAX_RENDER_HEIGHT)];
deqp/modules/shared/glsShaderRenderCase.js:            /** @type {number} */ var texTarget = gl.NONE;
deqp/modules/shared/glsShaderRenderCase.js:                    texTarget = gl.TEXTURE_2D;
deqp/modules/shared/glsShaderRenderCase.js:                    texTarget = gl.TEXTURE_CUBE_MAP;
deqp/modules/shared/glsShaderRenderCase.js:                    texTarget = gl.TEXTURE_2D_ARRAY;
deqp/modules/shared/glsShaderRenderCase.js:                    texTarget = gl.TEXTURE_3D;
deqp/modules/shared/glsShaderRenderCase.js:            gl.activeTexture(gl.TEXTURE0+ ndx);
deqp/modules/shared/glsShaderRenderCase.js:            gl.bindTexture(texTarget, texObj);
deqp/modules/shared/glsShaderRenderCase.js:            gl.texParameteri(texTarget, gl.TEXTURE_WRAP_S, gluTextureUtil.getGLWrapMode(sampler.wrapS));
deqp/modules/shared/glsShaderRenderCase.js:            gl.texParameteri(texTarget, gl.TEXTURE_WRAP_T, gluTextureUtil.getGLWrapMode(sampler.wrapT));
deqp/modules/shared/glsShaderRenderCase.js:            gl.texParameteri(texTarget, gl.TEXTURE_MIN_FILTER, gluTextureUtil.getGLFilterMode(sampler.minFilter));
deqp/modules/shared/glsShaderRenderCase.js:            gl.texParameteri(texTarget, gl.TEXTURE_MAG_FILTER, gluTextureUtil.getGLFilterMode(sampler.magFilter));
deqp/modules/shared/glsShaderRenderCase.js:            if (texTarget === gl.TEXTURE_3D)
deqp/modules/shared/glsShaderRenderCase.js:                gl.texParameteri(texTarget, gl.TEXTURE_WRAP_R, gluTextureUtil.getGLWrapMode(sampler.wrapR));
deqp/modules/shared/glsShaderRenderCase.js:                gl.texParameteri(texTarget, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
deqp/modules/shared/glsShaderRenderCase.js:                gl.texParameteri(texTarget, gl.TEXTURE_COMPARE_FUNC, gluTextureUtil.getGLCompareFunc(sampler.compare));
deqp/modules/shared/glsShaderRenderCase.js:        /** @type {number} */ var xOffsetMax = gl.drawingBufferWidth - width;
deqp/modules/shared/glsShaderRenderCase.js:        /** @type {number} */ var yOffsetMax = gl.drawingBufferHeight - height;
deqp/modules/shared/glsShaderRenderCase.js:        gl.viewport(xOffset, yOffset, width, height);
deqp/modules/shared/glsShaderRenderCase.js:        gl.clearColor(this.m_clearColor[0], this.m_clearColor[1], this.m_clearColor[2], this.m_clearColor[3]);
deqp/modules/shared/glsShaderRenderCase.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsShaderRenderCase.js:        /** @type {boolean} */ var hasAlpha = gl.getContextAttributes().alpha;
deqp/modules/shared/glsShaderRenderCase.js:        /** @type {boolean} */ var hasAlpha    = gl.getContextAttributes().alpha;
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_boolUniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform1i(uniLoc, s_boolUniforms[i].value ? 1 : 0);
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, uni.name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform4iv(uniLoc, new Int32Array(arr));
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_intUniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform1i(uniLoc, s_intUniforms[i].value);
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_ivec2Uniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform2iv(uniLoc, new Int32Array(s_ivec2Uniforms[i].value));
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_ivec3Uniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform3iv(uniLoc, new Int32Array(s_ivec3Uniforms[i].value));
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_ivec4Uniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform4iv(uniLoc, new Int32Array(s_ivec4Uniforms[i].value));
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_floatUniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform1f(uniLoc, s_floatUniforms[i].value);
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_vec2Uniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform2fv(uniLoc, new Float32Array(s_vec2Uniforms[i].value));
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_vec3Uniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform3fv(uniLoc, new Float32Array(s_vec3Uniforms[i].value));
deqp/modules/shared/glsShaderRenderCase.js:            uniLoc = gl.getUniformLocation(programID, s_vec4Uniforms[i].name);
deqp/modules/shared/glsShaderRenderCase.js:                gl.uniform4fv(uniLoc, new Float32Array(s_vec4Uniforms[i].value));
deqp/modules/shared/glsShaderRenderCase.js:            /** @type {number} */ var loc = gl.getAttribLocation(program, matrices[matNdx].name);
deqp/framework/opengl/gluVarType.js:goog.provide('framework.opengl.gluVarType');
deqp/framework/opengl/gluVarType.js:goog.require('framework.opengl.gluShaderUtil');
deqp/framework/opengl/gluVarType.js:    var gluVarType = framework.opengl.gluVarType;
deqp/framework/opengl/gluVarType.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/framework/opengl/gluVarType.js:     * @param {framework.opengl.gluShaderUtil.precision=} flags
deqp/framework/opengl/gluVarType.js:            return new gluVarType.VarType().VarTypeBasic(basicType, /** @type {framework.opengl.gluShaderUtil.precision}*/ (flags));
deqp/modules/shared/glsShaderExecUtil.js:goog.require('framework.opengl.gluDrawUtil');
deqp/modules/shared/glsShaderExecUtil.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsShaderExecUtil.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsShaderExecUtil.js:goog.require('framework.opengl.gluTextureUtil');
deqp/modules/shared/glsShaderExecUtil.js:goog.require('framework.opengl.gluVarType');
deqp/modules/shared/glsShaderExecUtil.js:    var gluVarType = framework.opengl.gluVarType;
deqp/modules/shared/glsShaderExecUtil.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsShaderExecUtil.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsShaderExecUtil.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/modules/shared/glsShaderExecUtil.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/modules/shared/glsShaderExecUtil.js:        gl.useProgram(this.getProgram());
deqp/modules/shared/glsShaderExecUtil.js:            src += ' gl.FragColor = vec4(0.0);\n';
deqp/modules/shared/glsShaderExecUtil.js:        sources.add(new gluShaderProgram.TransformFeedbackMode(gl.INTERLEAVED_ATTRIBS));
deqp/modules/shared/glsShaderExecUtil.js:        var transformFeedback = gl.createTransformFeedback();
deqp/modules/shared/glsShaderExecUtil.js:        var outputBuffer = gl.createBuffer();
deqp/modules/shared/glsShaderExecUtil.js:            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedback);
deqp/modules/shared/glsShaderExecUtil.js:        gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, outputBuffer);
deqp/modules/shared/glsShaderExecUtil.js:        gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, outputBufferStride * numValues, gl.STREAM_READ);
deqp/modules/shared/glsShaderExecUtil.js:        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, outputBuffer);
deqp/modules/shared/glsShaderExecUtil.js:        gl.beginTransformFeedback(gl.POINTS);
deqp/modules/shared/glsShaderExecUtil.js:        gl.enable(gl.RASTERIZER_DISCARD);
deqp/modules/shared/glsShaderExecUtil.js:        gl.disable(gl.RASTERIZER_DISCARD);
deqp/modules/shared/glsShaderExecUtil.js:        gl.endTransformFeedback();
deqp/modules/shared/glsShaderExecUtil.js:        gl.getBufferSubData(gl.TRANSFORM_FEEDBACK_BUFFER, 0, new Uint8Array(result));
deqp/modules/shared/glsShaderExecUtil.js:            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/modules/shared/glsShaderExecUtil.js:        gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, null);
deqp/modules/shared/glsShaderExecUtil.js:        var maxRenderbufferSize = /** @type {number} */ (gl.getParameter(gl.MAX_RENDERBUFFER_SIZE));
deqp/modules/shared/glsShaderExecUtil.js:        var framebuffer = gl.createFramebuffer();
deqp/modules/shared/glsShaderExecUtil.js:         renderbuffers.push(gl.createRenderbuffer());
deqp/modules/shared/glsShaderExecUtil.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
deqp/modules/shared/glsShaderExecUtil.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
deqp/modules/shared/glsShaderExecUtil.js:            gl.renderbufferStorage(gl.RENDERBUFFER, format, framebufferW, framebufferH);
deqp/modules/shared/glsShaderExecUtil.js:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + outNdx, gl.RENDERBUFFER, renderbuffer);
deqp/modules/shared/glsShaderExecUtil.js:        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
deqp/modules/shared/glsShaderExecUtil.js:        assertMsgOptions(gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE, 'Framebuffer is incomplete', false, true);
deqp/modules/shared/glsShaderExecUtil.js:            drawBuffers[ndx] = gl.COLOR_ATTACHMENT0 + ndx;
deqp/modules/shared/glsShaderExecUtil.js:        gl.drawBuffers(drawBuffers);
deqp/modules/shared/glsShaderExecUtil.js:        gl.viewport(0, 0, framebufferW, framebufferH);
deqp/modules/shared/glsShaderExecUtil.js:                gl.readBuffer(gl.COLOR_ATTACHMENT0 + outLocation + locNdx);
deqp/modules/shared/glsShaderExecUtil.js:                gl.readPixels(0, 0, framebufferW, framebufferH, transferFormat.format, transferFormat.dataType, tmpBuf.getAccess().getDataPtr());
deqp/modules/shared/glsShaderExecUtil.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/fbocolorbuffer/texcube_01.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/modules/shared/glsLifetimeTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsLifetimeTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsLifetimeTests.js:    return /** @type {WebGLObject} */ (gl.getParameter(this.m_bindingParam));
deqp/modules/shared/glsLifetimeTests.js:glsLifetimeTests.ProgramType.prototype.gen = function() { return gl.createProgram(); };
deqp/modules/shared/glsLifetimeTests.js:glsLifetimeTests.ProgramType.prototype.release = function(obj) { return gl.deleteProgram(/** @type {WebGLProgram} */ (obj)); };
deqp/modules/shared/glsLifetimeTests.js:glsLifetimeTests.ProgramType.prototype.exists = function(obj) { return gl.isProgram(/** @type {WebGLProgram} */ (obj)); };
deqp/modules/shared/glsLifetimeTests.js:glsLifetimeTests.ProgramType.prototype.isDeleteFlagged = function(obj) { return gl.getProgramParameter(/** @type {WebGLProgram} */ (obj), gl.DELETE_STATUS); };
deqp/modules/shared/glsLifetimeTests.js:glsLifetimeTests.ShaderType.prototype.gen = function() { return gl.createShader(gl.FRAGMENT_SHADER); };
deqp/modules/shared/glsLifetimeTests.js:glsLifetimeTests.ShaderType.prototype.release = function(obj) { return gl.deleteShader(/** @type {WebGLShader} */ (obj)); };
deqp/modules/shared/glsLifetimeTests.js:glsLifetimeTests.ShaderType.prototype.exists = function(obj) { return gl.isShader(/** @type {WebGLShader} */ (obj)); };
deqp/modules/shared/glsLifetimeTests.js:glsLifetimeTests.ShaderType.prototype.isDeleteFlagged = function(obj) { return gl.getShaderParameter(/** @type {WebGLShader} */ (obj), gl.DELETE_STATUS); };
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/modules/shared/glsLifetimeTests.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/modules/shared/glsLifetimeTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsLifetimeTests.js:        gl.clearColor(r1, g1, b1, a1);
deqp/modules/shared/glsLifetimeTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsLifetimeTests.js:        gl.scissor(x, y, width, height);
deqp/modules/shared/glsLifetimeTests.js:        gl.enable(gl.SCISSOR_TEST);
deqp/modules/shared/glsLifetimeTests.js:        gl.clearColor(r2, g2, b2, a2);
deqp/modules/shared/glsLifetimeTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsLifetimeTests.js:        gl.disable(gl.SCISSOR_TEST);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/modules/shared/glsLifetimeTests.js:    var fbo = gl.createFramebuffer();
deqp/modules/shared/glsLifetimeTests.js:    gl.deleteFramebuffer(fbo);
deqp/modules/shared/glsLifetimeTests.js:    var fbo = gl.createFramebuffer();
deqp/modules/shared/glsLifetimeTests.js:    gl.deleteFramebuffer(fbo);
deqp/modules/shared/glsLifetimeTests.js:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, FRAMEBUFFER_SIZE, FRAMEBUFFER_SIZE, 0,
deqp/modules/shared/glsLifetimeTests.js:                     gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, null);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/modules/shared/glsLifetimeTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/modules/shared/glsLifetimeTests.js:                              gl.TEXTURE_2D, texture, 0);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/modules/shared/glsLifetimeTests.js:    var type = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/modules/shared/glsLifetimeTests.js:                                               gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
deqp/modules/shared/glsLifetimeTests.js:    var name = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/modules/shared/glsLifetimeTests.js:                                               gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/modules/shared/glsLifetimeTests.js:    return glsLifetimeTests.getFboAttachment(fbo, gl.TEXTURE);
deqp/modules/shared/glsLifetimeTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, FRAMEBUFFER_SIZE, FRAMEBUFFER_SIZE);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/modules/shared/glsLifetimeTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/modules/shared/glsLifetimeTests.js:    return glsLifetimeTests.getFboAttachment(fbo, gl.RENDERBUFFER);
deqp/modules/shared/glsLifetimeTests.js:    gl.shaderSource(shader, source);
deqp/modules/shared/glsLifetimeTests.js:    gl.compileShader(shader);
deqp/modules/shared/glsLifetimeTests.js:    var compileStatus = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
deqp/modules/shared/glsLifetimeTests.js:    gl.attachShader(program, shader);
deqp/modules/shared/glsLifetimeTests.js:    gl.detachShader(program, shader);
deqp/modules/shared/glsLifetimeTests.js:    var shaders = gl.getAttachedShaders(program);
deqp/modules/shared/glsLifetimeTests.js:        var type = gl.getShaderParameter(shader, gl.SHADER_TYPE);
deqp/modules/shared/glsLifetimeTests.js:        if (type === gl.FRAGMENT_SHADER)
deqp/modules/shared/glsLifetimeTests.js:    gl.attachShader(program, vtxShader.getShader());
deqp/modules/shared/glsLifetimeTests.js:    gl.linkProgram(program);
deqp/modules/shared/glsLifetimeTests.js:    var linkStatus = gl.getProgramParameter(program, gl.LINK_STATUS);
deqp/modules/shared/glsLifetimeTests.js:    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/modules/shared/glsLifetimeTests.js:    gl.useProgram(program);
deqp/modules/shared/glsLifetimeTests.js:    var posLoc = gl.getAttribLocation(program, 'pos');
deqp/modules/shared/glsLifetimeTests.js:    var buf = gl.createBuffer();
deqp/modules/shared/glsLifetimeTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
deqp/modules/shared/glsLifetimeTests.js:    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(s_vertices), gl.STATIC_DRAW);
deqp/modules/shared/glsLifetimeTests.js:    gl.enableVertexAttribArray(posLoc);
deqp/modules/shared/glsLifetimeTests.js:    gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);
deqp/modules/shared/glsLifetimeTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/modules/shared/glsLifetimeTests.js:    gl.clearColor(0, 0, 0, 1);
deqp/modules/shared/glsLifetimeTests.js:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
deqp/modules/shared/glsLifetimeTests.js:    gl.drawArrays(gl.TRIANGLES, 0, 3);
deqp/modules/shared/glsLifetimeTests.js:    gl.disableVertexAttribArray(posLoc);
deqp/modules/shared/glsLifetimeTests.js:    gl.deleteBuffer(buf);
deqp/modules/shared/glsLifetimeTests.js:    gl.useProgram(null);
deqp/modules/shared/glsLifetimeTests.js:    gl.detachShader(program, vtxShader.getShader());
deqp/modules/shared/glsLifetimeTests.js:    this.m_bufferBind = new glsLifetimeTests.SimpleBinder(gl.bindBuffer, gl.ARRAY_BUFFER, gl.ARRAY_BUFFER_BINDING);
deqp/modules/shared/glsLifetimeTests.js:    this.m_bufferType = new glsLifetimeTests.SimpleType('buffer', gl.createBuffer, gl.deleteBuffer, gl.isBuffer, this.m_bufferBind);
deqp/modules/shared/glsLifetimeTests.js:    this.m_textureBind = new glsLifetimeTests.SimpleBinder(gl.bindTexture, gl.TEXTURE_2D, gl.TEXTURE_BINDING_2D);
deqp/modules/shared/glsLifetimeTests.js:    this.m_textureType = new glsLifetimeTests.SimpleType('texture', gl.createTexture, gl.deleteTexture, gl.isTexture, this.m_textureBind);
deqp/modules/shared/glsLifetimeTests.js:    this.m_rboBind = new glsLifetimeTests.SimpleBinder(gl.bindRenderbuffer, gl.RENDERBUFFER, gl.RENDERBUFFER_BINDING);
deqp/modules/shared/glsLifetimeTests.js:    this.m_rboType = new glsLifetimeTests.SimpleType('renderbuffer', gl.createRenderbuffer, gl.deleteRenderbuffer, gl.isRenderbuffer, this.m_rboBind);
deqp/modules/shared/glsLifetimeTests.js:    this.m_fboBind = new glsLifetimeTests.SimpleBinder(gl.bindFramebuffer, gl.FRAMEBUFFER, gl.FRAMEBUFFER_BINDING);
deqp/modules/shared/glsLifetimeTests.js:    this.m_fboType = new glsLifetimeTests.SimpleType('framebuffer', gl.createFramebuffer, gl.deleteFramebuffer, gl.isFramebuffer, this.m_fboBind);
deqp/modules/shared/glsLifetimeTests.js:    var err = gl.getError();
deqp/modules/shared/glsLifetimeTests.js:    assertMsgOptions(err == gl.NONE, 'Bind failed', false, true);
deqp/modules/shared/glsLifetimeTests.js:        assertMsgOptions(gl.getError() == gl.NONE, 'Deleting bound object failed', false, true);
deqp/modules/shared/glsLifetimeTests.js:        assertMsgOptions(gl.getError() == gl.NONE, 'Deleting bound object failed', false, true);
deqp/modules/shared/glsLifetimeTests.js:    gl.useProgram(programId);
deqp/modules/shared/glsLifetimeTests.js:    gl.deleteProgram(programId);
deqp/modules/shared/glsLifetimeTests.js:    assertMsgOptions(gl.isProgram(programId), 'Deleted current program', false, true);
deqp/modules/shared/glsLifetimeTests.js:    var deleteFlagged = gl.getProgramParameter(programId, gl.DELETE_STATUS);
deqp/modules/shared/glsLifetimeTests.js:    gl.useProgram(null);
deqp/modules/shared/glsLifetimeTests.js:    assertMsgOptions(!gl.isProgram(programId), 'Deleted program name still valid after being made non-current', false, true);
deqp/modules/shared/glsFboCompletenessTests.js:goog.require('framework.opengl.gluObjectWrapper');
deqp/modules/shared/glsFboCompletenessTests.js:goog.require('framework.opengl.gluStrUtil');
deqp/modules/shared/glsFboCompletenessTests.js:    var gluObjectWrapper = framework.opengl.gluObjectWrapper;
deqp/modules/shared/glsFboCompletenessTests.js:    var gluStrUtil = framework.opengl.gluStrUtil;
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT),
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.DEPTH_COMPONENT, gl.UNSIGNED_INT)
deqp/modules/shared/glsFboCompletenessTests.js:            gl.DEPTH24_STENCIL8
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.DEPTH_STENCIL, gl.UNSIGNED_INT_24_8)
deqp/modules/shared/glsFboCompletenessTests.js:            gl.RGB5_A1, gl.RGBA8, gl.RGBA4, gl.RGB565
deqp/modules/shared/glsFboCompletenessTests.js:            gl.DEPTH_COMPONENT16
deqp/modules/shared/glsFboCompletenessTests.js:            gl.RGBA16F, gl.RGB16F, gl.RG16F, gl.R16F
deqp/modules/shared/glsFboCompletenessTests.js:            gl.DEPTH_COMPONENT24
deqp/modules/shared/glsFboCompletenessTests.js:            gl.RGB8, gl.RGBA8
deqp/modules/shared/glsFboCompletenessTests.js:            gl.RGB8
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGBA, gl.UNSIGNED_INT_2_10_10_10_REV),
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGB, gl.UNSIGNED_INT_2_10_10_10_REV)
deqp/modules/shared/glsFboCompletenessTests.js:            gl.RGB10_A2, gl['RGB10']
deqp/modules/shared/glsFboCompletenessTests.js:            gl.R8, gl.RG8
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RED, gl.UNSIGNED_BYTE),
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RG, gl.UNSIGNED_BYTE)
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RED, gl.FLOAT),
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RG, gl.FLOAT)
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RED, gl['HALF_FLOAT_OES']),
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RG, gl['HALF_FLOAT_OES'])
deqp/modules/shared/glsFboCompletenessTests.js:            gl.R11F_G11F_B10F
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGB, gl.UNSIGNED_INT_10F_11F_11F_REV)
deqp/modules/shared/glsFboCompletenessTests.js:            gl.SRGB8_ALPHA8
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl['SRGB_ALPHA'], gl.UNSIGNED_BYTE)
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.SRGB, gl.UNSIGNED_BYTE),
deqp/modules/shared/glsFboCompletenessTests.js:            gl.SRGB8
deqp/modules/shared/glsFboCompletenessTests.js:            gl.SRGB8
deqp/modules/shared/glsFboCompletenessTests.js:            gl.SRGB8,
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.SRGB, gl.UNSIGNED_BYTE)
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGB, gl.UNSIGNED_BYTE),
deqp/modules/shared/glsFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGBA, gl.UNSIGNED_BYTE)
deqp/modules/shared/glsFboCompletenessTests.js:            // Some Tegra drivers report gl.EXT_packed_float even for ES. Treat it as
deqp/modules/shared/glsFboCompletenessTests.js:            [gl.DEPTH_ATTACHMENT, 'depth', 'Tests for depth attachments'],
deqp/modules/shared/glsFboCompletenessTests.js:            [gl.STENCIL_ATTACHMENT, 'stencil', 'Tests for stencil attachments'],
deqp/modules/shared/glsFboCompletenessTests.js:            [gl.COLOR_ATTACHMENT0, 'color0', 'Tests for color attachments']
deqp/modules/shared/glsFboCompletenessTests.js:                    attPoints[i][0], gl.RENDERBUFFER, rboFmts[j]
deqp/modules/shared/glsFboCompletenessTests.js:                    attPoints[i][0], gl.TEXTURE, texFmts[j]
deqp/modules/shared/glsFboCompletenessTests.js:        var s_bufTypes = [gl.NONE, gl.RENDERBUFFER, gl.TEXTURE];
deqp/modules/shared/glsFboCompletenessTests.js:        if (bufType == gl.NONE) {
deqp/modules/shared/glsFboCompletenessTests.js:            case gl.NONE:
deqp/modules/shared/glsFboCompletenessTests.js:            case gl.RENDERBUFFER:
deqp/modules/shared/glsFboCompletenessTests.js:            case gl.TEXTURE:
deqp/modules/shared/glsFboCompletenessTests.js:                att.texTarget = gl.TEXTURE_2D;
deqp/modules/shared/glsFboCompletenessTests.js:        if (imgFmt.format == gl.NONE)
deqp/modules/shared/glsFboCompletenessTests.js:        if (status != gl.NO_ERROR && errorName != '')
deqp/modules/shared/glsFboCompletenessTests.js:        var builder = new glsFboUtil.FboBuilder(fbo.get(), gl.FRAMEBUFFER, gl);
deqp/modules/shared/glsFboCompletenessTests.js:        if (errorCode != gl.NO_ERROR) {
deqp/modules/shared/glsFboCompletenessTests.js:            else if (statuses.isErrorCodeRequired(gl.NO_ERROR))
deqp/modules/shared/glsFboCompletenessTests.js:            var fboStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/modules/shared/glsFboCompletenessTests.js:                if (fboStatus == gl.FRAMEBUFFER_COMPLETE) {
deqp/modules/shared/glsFboCompletenessTests.js:                } else if (statuses.isFBOStatusRequired(gl.FRAMEBUFFER_COMPLETE)) {
deqp/modules/shared/glsFboCompletenessTests.js:            } else if (fboStatus != gl.FRAMEBUFFER_COMPLETE && statuses.isFBOStatusValid(gl.FRAMEBUFFER_COMPLETE)) {
deqp/modules/shared/glsFboCompletenessTests.js:        if (format.unsizedType != gl.NONE)
deqp/modules/shared/glsFboCompletenessTests.js:        if (format.unsizedType != gl.NONE)
deqp/modules/shared/glsFboCompletenessTests.js:            case gl.NONE: return 'none';
deqp/modules/shared/glsFboCompletenessTests.js:            case gl.RENDERBUFFER: return 'rbo';
deqp/modules/shared/glsFboCompletenessTests.js:            case gl.TEXTURE: return 'tex';
deqp/modules/shared/glsFboCompletenessTests.js:                builder.glAttach(gl.DEPTH_ATTACHMENT, att);
deqp/modules/shared/glsFboCompletenessTests.js:                builder.glAttach(gl.STENCIL_ATTACHMENT, att);
deqp/modules/shared/glsFboCompletenessTests.js:        this.attachTargetToNew(gl.STENCIL_ATTACHMENT, this.m_params.stencilKind,
deqp/modules/shared/glsFboCompletenessTests.js:        this.attachTargetToNew(gl.DEPTH_ATTACHMENT, this.m_params.depthKind,
deqp/modules/shared/glsFboCompletenessTests.js:        this.attachTargetToNew(gl.COLOR_ATTACHMENT0, this.m_params.color0Kind,
deqp/modules/shared/glsFboCompletenessTests.js:        if (this.m_params.colornKind != gl.NONE) {
deqp/modules/shared/glsFboCompletenessTests.js:            var maxAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
deqp/modules/shared/glsFboCompletenessTests.js:                this.attachTargetToNew(gl.COLOR_ATTACHMENT0 + i, this.m_params.colornKind,
deqp/modules/shared/glsFboCompletenessTests.js:        this.attachTargetToNew(gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER,
deqp/functional/gles3/es3fFragDepthTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fFragDepthTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fFragDepthTests.js:	var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fFragDepthTests.js:	var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fFragDepthTests.js:			case gl.NEVER: return false;
deqp/functional/gles3/es3fFragDepthTests.js:			case gl.ALWAYS: return true;
deqp/functional/gles3/es3fFragDepthTests.js:			case gl.LESS: return a < b;
deqp/functional/gles3/es3fFragDepthTests.js:			case gl.LEQUAL: return a <= b;
deqp/functional/gles3/es3fFragDepthTests.js:			case gl.EQUAL: return a === b;
deqp/functional/gles3/es3fFragDepthTests.js:			case gl.NOTEQUAL: return a !== b;
deqp/functional/gles3/es3fFragDepthTests.js:			case gl.GEQUAL: return a >= b;
deqp/functional/gles3/es3fFragDepthTests.js:			case gl.GREATER: return a > b;
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {number} */ var viewportW = Math.min(128, gl.drawingBufferWidth);
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {number} */ var viewportH = Math.min(128, gl.drawingBufferHeight);
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {number} */ var viewportX = rnd.getInt(0, gl.drawingBufferWidth - viewportW);
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {number} */ var viewportY = rnd.getInt(0, gl.drawingBufferHeight - viewportH);
deqp/functional/gles3/es3fFragDepthTests.js:		var depthBits = /** @type {number} */ (gl.getParameter(gl.DEPTH_BITS));
deqp/functional/gles3/es3fFragDepthTests.js:		gl.depthMask(true);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.viewport(viewportX, viewportY, viewportW, viewportH);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.useProgram(basicQuadProgram.getProgram());
deqp/functional/gles3/es3fFragDepthTests.js:		gl.uniform4f(gl.getUniformLocation(basicQuadProgram.getProgram(), 'u_color'), 0.0, 0.0, 1.0, 1.0);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fFragDepthTests.js:		gl.depthFunc(this.m_compareFunc);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.uniform4f(gl.getUniformLocation(program.getProgram(), 'u_color'), 0.0, 1.0, 0.0, 1.0);
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {number} */ var viewportW = Math.min(128, gl.drawingBufferWidth);
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {number} */ var viewportH = Math.min(128, gl.drawingBufferHeight);
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {number} */ var viewportX = rnd.getInt(0, gl.drawingBufferWidth - viewportW);
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {number} */ var viewportY = rnd.getInt(0, gl.drawingBufferHeight - viewportH);
deqp/functional/gles3/es3fFragDepthTests.js:		var depthBits = /** @type {number} */ (gl.getParameter(gl.DEPTH_BITS));
deqp/functional/gles3/es3fFragDepthTests.js:		gl.depthMask(true);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.viewport(viewportX, viewportY, viewportW, viewportH);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.depthFunc(gl.LESS);
deqp/functional/gles3/es3fFragDepthTests.js:		gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fFragDepthTests.js:		gl.uniform4f(gl.getUniformLocation(program.getProgram(), 'u_color'), 0.0, 1.0, 0.0, 1.0);
deqp/functional/gles3/es3fFragDepthTests.js:		/** @type {WebGLUniformLocation} */ var colorLoc = gl.getUniformLocation(program.getProgram(), 'u_color');
deqp/functional/gles3/es3fFragDepthTests.js:		gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fFragDepthTests.js:		gl.depthMask(false);
deqp/functional/gles3/es3fFragDepthTests.js:			gl.uniform4fv(colorLoc, color);
deqp/functional/gles3/es3fFragDepthTests.js:			compareGroup.addChild(new es3fFragDepthTests.FragDepthCompareCase(cases[ndx].name, cases[ndx].desc, cases[ndx].fragSrc, cases[ndx].evalFunc, gl.LESS));
conformance/extensions/oes-texture-half-float-with-image-data.html:    if (!(ext = gl.getExtension("OES_texture_half_float"))) {
conformance/extensions/oes-texture-half-float-with-image-data.html:    gl.HALF_FLOAT_OES = ext.HALF_FLOAT_OES;
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-image-data.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-image-data.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-image-data.js:        gl.disable(gl.BLEND);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    supportedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    supportedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.viewport(0, 0, width, height);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    var tex = gl.createTexture();
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.texStorage2D(gl.TEXTURE_2D, 1, format, width, height);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "allocating compressed texture via texStorage2D");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture data via compressedTexSubImage2D");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "trying to generate mipmaps from compressed texture");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after clearing generateMipmap error");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad 1");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad 2");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height, 1, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "non 0 border");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width + 4, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height + 4, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 4, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 4, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 1, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 2, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 1, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 2, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.compressedTexImage2D(gl.TEXTURE_2D, 1, format, 1, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "valid dimensions for level > 0");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.compressedTexImage2D(gl.TEXTURE_2D, 1, format, 2, height, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "valid dimensions for level > 0");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.compressedTexImage2D(gl.TEXTURE_2D, 1, format, width, 1, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "valid dimensions for level > 0");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.compressedTexImage2D(gl.TEXTURE_2D, 1, format, width, 2, 0, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "valid dimensions for level > 0");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, wrongFormat, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "format does not match");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 4, 0, width, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "dimension out of range");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 4, width, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "dimension out of range");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width + 4, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height + 4, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width - 4, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height - 4, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "data size does not match dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width - 1, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width - 2, height, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height - 1, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height - 2, format, data);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 1, 0, 4, 4, format, subData);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid offset");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 1, 4, 4, format, subData);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid offset");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, xoff, yoff, 4, 4, format, subData);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing unit quad");
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    gl.readPixels(
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:            0, 0, actualWidth, actualHeight, gl.RGBA, gl.UNSIGNED_BYTE, actual);
conformance/extensions/webgl-compressed-texture-s3tc-srgb.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "reading back pixels");
conformance/extensions/oes-texture-half-float-with-canvas.html:    if (!(ext = gl.getExtension("OES_texture_half_float"))) {
conformance/extensions/oes-texture-half-float-with-canvas.html:    gl.HALF_FLOAT_OES = ext.HALF_FLOAT_OES;
conformance/extensions/webgl-depth-texture.html:    var tex = gl.createTexture();
conformance/extensions/webgl-depth-texture.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-depth-texture.html:    wtu.shouldGenerateGLError(gl, [gl.INVALID_ENUM, gl.INVALID_VALUE],
conformance/extensions/webgl-depth-texture.html:                              'gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, 1, 1, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null)');
conformance/extensions/webgl-depth-texture.html:    wtu.shouldGenerateGLError(gl, [gl.INVALID_ENUM, gl.INVALID_VALUE],
conformance/extensions/webgl-depth-texture.html:                              'gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, 1, 1, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null)');
conformance/extensions/webgl-depth-texture.html:  gl.readPixels(0, 0, res, res, gl.RGBA, gl.UNSIGNED_BYTE, actualPixels);
conformance/extensions/webgl-depth-texture.html:    gl.useProgram(program);
conformance/extensions/webgl-depth-texture.html:    gl.uniform2f(gl.getUniformLocation(program, "u_resolution"), res, res);
conformance/extensions/webgl-depth-texture.html:    var buffer = gl.createBuffer();
conformance/extensions/webgl-depth-texture.html:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
conformance/extensions/webgl-depth-texture.html:    gl.bufferData(
conformance/extensions/webgl-depth-texture.html:        gl.ARRAY_BUFFER,
conformance/extensions/webgl-depth-texture.html:        gl.STATIC_DRAW);
conformance/extensions/webgl-depth-texture.html:    gl.enableVertexAttribArray(0);
conformance/extensions/webgl-depth-texture.html:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/extensions/webgl-depth-texture.html:        var cubeTex = gl.createTexture();
conformance/extensions/webgl-depth-texture.html:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, cubeTex);
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.texImage2D(gl.' + targets[ii] + ', 1, gl.' + typeInfo.format + ', 1, 1, 0, gl.' + typeInfo.format + ', ' + typeStr + ', null)');
conformance/extensions/webgl-depth-texture.html:            tex = gl.createTexture();
conformance/extensions/webgl-depth-texture.html:            gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-depth-texture.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-depth-texture.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-depth-texture.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filterMode);
conformance/extensions/webgl-depth-texture.html:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filterMode);
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.texImage2D(gl.TEXTURE_2D, 1, gl.' + typeInfo.format + ', 1, 1, 0, gl.' + typeInfo.format + ', ' + typeStr + ', null)');
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.texImage2D(gl.TEXTURE_2D, 0, gl.' + typeInfo.format + ', 1, 1, 0, gl.' + typeInfo.format + ', ' + typeStr + ', ' + typeInfo.data + ')');
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, [gl.INVALID_VALUE, gl.INVALID_ENUM, gl.INVALID_OPERATION], 'gl.texImage2D(gl.TEXTURE_2D, 0, gl.' + typeInfo.format + ', gl.' + typeInfo.format + ', ' + typeStr  + ', canvas2)');
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, [gl.INVALID_ENUM, gl.INVALID_OPERATION], 'gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.' + typeInfo.format + ', 0, 0, 1, 1, 0)');
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.NO_ERROR, 'gl.texImage2D(gl.TEXTURE_2D, 0, gl.' + typeInfo.format + ', ' + res + ', ' + res + ', 0, gl.' + typeInfo.format + ', ' + typeStr + ', null)');
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, gl.' + typeInfo.format + ', ' + typeStr  + ', ' + typeInfo.data + ')');
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 1, 1)');
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.INVALID_OPERATION, 'gl.generateMipmap(gl.TEXTURE_2D)');
conformance/extensions/webgl-depth-texture.html:            var fbo = gl.createFramebuffer();
conformance/extensions/webgl-depth-texture.html:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/extensions/webgl-depth-texture.html:            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl[typeInfo.attachment], gl.TEXTURE_2D, tex, 0);
conformance/extensions/webgl-depth-texture.html:            shouldBeGreaterThanOrEqual('gl.getParameter(gl.DEPTH_BITS)', typeInfo.depthBits);
conformance/extensions/webgl-depth-texture.html:                shouldBe('gl.getParameter(gl.STENCIL_BITS)', '0');
conformance/extensions/webgl-depth-texture.html:                shouldBeGreaterThanOrEqual('gl.getParameter(gl.STENCIL_BITS)', typeInfo.stencilBits);
conformance/extensions/webgl-depth-texture.html:            if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)
conformance/extensions/webgl-depth-texture.html:                var colorTex = gl.createTexture();
conformance/extensions/webgl-depth-texture.html:                gl.bindTexture(gl.TEXTURE_2D, colorTex);
conformance/extensions/webgl-depth-texture.html:                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-depth-texture.html:                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-depth-texture.html:                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/extensions/webgl-depth-texture.html:                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/webgl-depth-texture.html:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, res, res, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/extensions/webgl-depth-texture.html:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);
conformance/extensions/webgl-depth-texture.html:            shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/extensions/webgl-depth-texture.html:            gl.bindTexture(gl.TEXTURE_2D, null);
conformance/extensions/webgl-depth-texture.html:            gl.enable(gl.DEPTH_TEST);
conformance/extensions/webgl-depth-texture.html:            gl.clearColor(1, 0, 0, 1);
conformance/extensions/webgl-depth-texture.html:            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/extensions/webgl-depth-texture.html:            gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/extensions/webgl-depth-texture.html:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/webgl-depth-texture.html:            gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-depth-texture.html:            gl.clearColor(0, 0, 1, 1);
conformance/extensions/webgl-depth-texture.html:            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/extensions/webgl-depth-texture.html:            gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/extensions/webgl-depth-texture.html:            gl.readPixels(0, 0, res, res, gl.RGBA, gl.UNSIGNED_BYTE, actualPixels);
conformance/extensions/webgl-depth-texture.html:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/extensions/webgl-depth-texture.html:            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl[typeInfo.attachment], gl.TEXTURE_2D, null, 0);
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.NO_ERROR, 'gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.' + badAttachment + ', gl.TEXTURE_2D, tex, 0)');
conformance/extensions/webgl-depth-texture.html:            shouldNotBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/extensions/webgl-depth-texture.html:            wtu.shouldGenerateGLError(gl, gl.INVALID_FRAMEBUFFER_OPERATION, 'gl.clear(gl.DEPTH_BUFFER_BIT)');
conformance/extensions/webgl-depth-texture.html:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/extensions/webgl-depth-texture.html:            shouldBe('gl.getError()', 'gl.NO_ERROR');
conformance/extensions/ext-blend-minmax.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/ext-blend-minmax.html:    gl.blendEquation(gl.FUNC_ADD);
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.blendEquation(MIN_EXT)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.blendEquation(MAX_EXT)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.blendEquationSeparate(MIN_EXT, gl.FUNC_ADD)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_RGB)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.blendEquationSeparate(gl.FUNC_ADD, MIN_EXT)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_ALPHA)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.blendEquationSeparate(MAX_EXT, gl.FUNC_ADD)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_RGB)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.blendEquationSeparate(gl.FUNC_ADD, MAX_EXT)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_ALPHA)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendEquation(ext.MIN_EXT)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION)", "ext.MIN_EXT");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendEquation(ext.MAX_EXT)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION)", "ext.MAX_EXT");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendEquationSeparate(ext.MIN_EXT, gl.FUNC_ADD)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_RGB)", "ext.MIN_EXT");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_ALPHA)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendEquationSeparate(gl.FUNC_ADD, ext.MIN_EXT)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_RGB)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_ALPHA)", "ext.MIN_EXT");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendEquationSeparate(ext.MAX_EXT, gl.FUNC_ADD)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_RGB)", "ext.MAX_EXT");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_ALPHA)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "gl.blendEquationSeparate(gl.FUNC_ADD, ext.MAX_EXT)");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_RGB)", "gl.FUNC_ADD");
conformance/extensions/ext-blend-minmax.html:    shouldBe("gl.getParameter(gl.BLEND_EQUATION_ALPHA)", "ext.MAX_EXT");
conformance/extensions/ext-blend-minmax.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/extensions/ext-blend-minmax.html:    gl.enable(gl.BLEND);
conformance/extensions/ext-blend-minmax.html:    gl.blendFunc(gl.ONE, gl.ONE);
conformance/extensions/ext-blend-minmax.html:    var colorUniform = gl.getUniformLocation(program, "uColor");
conformance/extensions/ext-blend-minmax.html:    gl.blendEquation(ext.MIN_EXT);
conformance/extensions/ext-blend-minmax.html:    gl.clearColor(0.2, 0.4, 0.6, 0.8);
conformance/extensions/ext-blend-minmax.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/ext-blend-minmax.html:    gl.uniform4f(colorUniform, 0.8, 0.6, 0.4, 0.2);
conformance/extensions/ext-blend-minmax.html:    gl.blendEquation(ext.MAX_EXT);
conformance/extensions/ext-blend-minmax.html:    gl.clearColor(0.2, 0.4, 0.6, 0.8);
conformance/extensions/ext-blend-minmax.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/ext-blend-minmax.html:    gl.uniform4f(colorUniform, 0.8, 0.6, 0.4, 0.2);
conformance/extensions/ext-blend-minmax.html:    gl.blendEquationSeparate(ext.MIN_EXT, ext.MAX_EXT);
conformance/extensions/ext-blend-minmax.html:    gl.clearColor(0.2, 0.4, 0.6, 0.8);
conformance/extensions/ext-blend-minmax.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/ext-blend-minmax.html:    gl.uniform4f(colorUniform, 0.8, 0.6, 0.4, 0.2);
conformance/extensions/ext-blend-minmax.html:    gl.blendEquationSeparate(ext.MAX_EXT, ext.MIN_EXT);
conformance/extensions/ext-blend-minmax.html:    gl.clearColor(0.2, 0.4, 0.6, 0.8);
conformance/extensions/ext-blend-minmax.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/ext-blend-minmax.html:    gl.uniform4f(colorUniform, 0.8, 0.6, 0.4, 0.2);
conformance/extensions/ext-blend-minmax.html:    gl.getExtension("EXT_blend_minmax").myProperty = 2;
conformance/extensions/ext-blend-minmax.html:    shouldBe('gl.getExtension("EXT_blend_minmax").myProperty', '2');
deqp/framework/referencerenderer/rrUtil.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/framework/referencerenderer/rrUtil.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/framework/referencerenderer/rrUtil.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/framework/referencerenderer/rrUtil.js:    var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/framework/referencerenderer/rrUtil.js:            ctx.bindBuffer(gl.ARRAY_BUFFER, bufIDs[0]);
deqp/framework/referencerenderer/rrUtil.js:            ctx.bufferData(gl.ARRAY_BUFFER, new Float32Array(position), gl.STATIC_DRAW);
deqp/framework/referencerenderer/rrUtil.js:            ctx.vertexAttribPointer(posLoc, 4, gl.FLOAT, false, 0, 0);
deqp/framework/referencerenderer/rrUtil.js:            ctx.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/framework/referencerenderer/rrUtil.js:            ctx.bindBuffer(gl.ARRAY_BUFFER, bufIDs[1]);
deqp/framework/referencerenderer/rrUtil.js:            ctx.bufferData(gl.ARRAY_BUFFER, new Float32Array(coord), gl.STATIC_DRAW);
deqp/framework/referencerenderer/rrUtil.js:            ctx.vertexAttribPointer(coordLoc, 2, gl.FLOAT, false, 0, 0);
deqp/framework/referencerenderer/rrUtil.js:            ctx.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/framework/referencerenderer/rrUtil.js:            ctx.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ndxID);
deqp/framework/referencerenderer/rrUtil.js:            ctx.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
deqp/framework/referencerenderer/rrUtil.js:            ctx.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
deqp/framework/referencerenderer/rrUtil.js:            ctx.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
deqp/modules/shared/glsSamplerObjectTest.js:goog.require('framework.opengl.gluDrawUtil');
deqp/modules/shared/glsSamplerObjectTest.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsSamplerObjectTest.js:goog.require('framework.opengl.gluTextureUtil');
deqp/modules/shared/glsSamplerObjectTest.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsSamplerObjectTest.js:var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/modules/shared/glsSamplerObjectTest.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/modules/shared/glsSamplerObjectTest.js:        gl.viewport(x, y, glsSamplerObjectTest.VIEWPORT_WIDTH, glsSamplerObjectTest.VIEWPORT_HEIGHT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.readPixels(x, y, texRef.m_width, texRef.m_height, texRefTransferFormat.format, texRefTransferFormat.dataType, textureRef.m_pixels);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.readPixels(x, y, sampRef.m_width, sampRef.m_height, sampRefTransferFormat.format, sampRefTransferFormat.dataType, samplerRef.m_pixels);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.deleteTexture(texture);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.viewport(x, y, glsSamplerObjectTest.VIEWPORT_WIDTH, glsSamplerObjectTest.VIEWPORT_HEIGHT);
deqp/modules/shared/glsSamplerObjectTest.js:        var sampler = gl.createSampler();
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindSampler(0, sampler);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.readPixels(x, y, sampRes.m_width, sampRes.m_height, sampResTransferFormat.format, sampResTransferFormat.dataType, samplerResult.m_pixels);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindSampler(0, null);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.deleteSampler(sampler);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.readPixels(x, y, texRes.m_width, texRes.m_height, texResTransferFormat.format, texResTransferFormat.dataType, textureResult.m_pixels);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.deleteSampler(sampler);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.deleteTexture(texture);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.useProgram(this.m_program.getProgram());
deqp/modules/shared/glsSamplerObjectTest.js:        samplerLoc = gl.getUniformLocation(this.m_program.getProgram(), 'u_sampler');
deqp/modules/shared/glsSamplerObjectTest.js:        scaleLoc = gl.getUniformLocation(this.m_program.getProgram(), 'u_posScale');
deqp/modules/shared/glsSamplerObjectTest.js:        gl.clearColor(0.5, 0.5, 0.5, 1.0);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.uniform1i(samplerLoc, 0);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.uniform1f(scaleLoc, 1.0);
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_2D: {
deqp/modules/shared/glsSamplerObjectTest.js:                gl.uniform1f(scaleLoc, 0.25);
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_3D: {
deqp/modules/shared/glsSamplerObjectTest.js:                gl.uniform1f(scaleLoc, 0.25);
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_CUBE_MAP: {
deqp/modules/shared/glsSamplerObjectTest.js:                gl.uniform1f(scaleLoc, 0.25);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, state.minFilter);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, state.magFilter);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_WRAP_S, state.wrapS);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_WRAP_T, state.wrapT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_WRAP_R, state.wrapR);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameterf(target, gl.TEXTURE_MAX_LOD, state.maxLod);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameterf(target, gl.TEXTURE_MIN_LOD, state.minLod);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, state.minFilter);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, state.magFilter);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, state.wrapS);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, state.wrapT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_R, state.wrapR);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameterf(sampler, gl.TEXTURE_MAX_LOD, state.maxLod);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameterf(sampler, gl.TEXTURE_MIN_LOD, state.minLod);
deqp/modules/shared/glsSamplerObjectTest.js:        texture = gl.createTexture();
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, refTexture.getWidth(), refTexture.getHeight(), 0, gl.RGBA, gl.UNSIGNED_BYTE, refTexture.getLevel(0).getDataPtr());
deqp/modules/shared/glsSamplerObjectTest.js:        gl.generateMipmap(gl.TEXTURE_2D);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_2D, null);
deqp/modules/shared/glsSamplerObjectTest.js:        texture = gl.createTexture();
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_3D, texture);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, refTexture.getWidth(), refTexture.getHeight(), refTexture.getDepth(), 0, gl.RGBA, gl.UNSIGNED_BYTE, refTexture.getLevel(0).getDataPtr());
deqp/modules/shared/glsSamplerObjectTest.js:        gl.generateMipmap(gl.TEXTURE_3D);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_3D, null);
deqp/modules/shared/glsSamplerObjectTest.js:        texture = gl.createTexture();
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
deqp/modules/shared/glsSamplerObjectTest.js:            gl.texImage2D(target, 0, gl.RGBA, refTexture.getSize(), refTexture.getSize(), 0, gl.RGBA, gl.UNSIGNED_BYTE, refTexture.getLevelFace(0, tcuTexture.CubeFace[face]).getDataPtr());
deqp/modules/shared/glsSamplerObjectTest.js:        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_2D:
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_3D:
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_CUBE_MAP:
deqp/modules/shared/glsSamplerObjectTest.js:             case gl.TEXTURE_2D:
deqp/modules/shared/glsSamplerObjectTest.js:             case gl.TEXTURE_3D:
deqp/modules/shared/glsSamplerObjectTest.js:             case gl.TEXTURE_CUBE_MAP:
deqp/modules/shared/glsSamplerObjectTest.js:             case gl.TEXTURE_2D:
deqp/modules/shared/glsSamplerObjectTest.js:             case gl.TEXTURE_3D:
deqp/modules/shared/glsSamplerObjectTest.js:             case gl.TEXTURE_CUBE_MAP:
deqp/modules/shared/glsSamplerObjectTest.js:        /** @type {number} */ var x = this.m_random.getInt(0, gl.drawingBufferWidth - glsSamplerObjectTest.VIEWPORT_WIDTH);
deqp/modules/shared/glsSamplerObjectTest.js:        /** @type {number} */ var y = this.m_random.getInt(0, gl.drawingBufferHeight - glsSamplerObjectTest.VIEWPORT_HEIGHT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE0);
deqp/modules/shared/glsSamplerObjectTest.js:        /** @type {number} */ var x = this.m_random.getInt(0, gl.drawingBufferWidth - glsSamplerObjectTest.VIEWPORT_WIDTH);
deqp/modules/shared/glsSamplerObjectTest.js:        /** @type {number} */ var y = this.m_random.getInt(0, gl.drawingBufferHeight - glsSamplerObjectTest.VIEWPORT_HEIGHT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.viewport(x, y, glsSamplerObjectTest.VIEWPORT_WIDTH, glsSamplerObjectTest.VIEWPORT_HEIGHT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE0);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture2);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.readPixels(x, y, texRef.m_width, texRef.m_height, texRefTransferFormat.format, texRefTransferFormat.dataType, textureRef.m_pixels);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE0);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture2);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.readPixels(x, y, sampRef.m_width, sampRef.m_height, sampRefTransferFormat.format, sampRefTransferFormat.dataType, samplerRef.m_pixels);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.viewport(x, y, glsSamplerObjectTest.VIEWPORT_WIDTH, glsSamplerObjectTest.VIEWPORT_HEIGHT);
deqp/modules/shared/glsSamplerObjectTest.js:        /** @type {WebGLSampler} */ var sampler = gl.createSampler();
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindSampler(0, sampler);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindSampler(1, sampler);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture2);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE0);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, texture2);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.readPixels(x, y, sampRes.m_width, sampRes.m_height, sampResTransferFormat.format, sampResTransferFormat.dataType, samplerResult.m_pixels);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindSampler(0, null);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindSampler(1, null);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.readPixels(x, y, texRes.m_width, texRes.m_height, texResTransferFormat.format, texResTransferFormat.dataType, textureResult.m_pixels);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE0);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, null);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.activeTexture(gl.TEXTURE1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(this.m_target, null);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.deleteSampler(sampler);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.deleteTexture(texture1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.deleteTexture(texture2);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.useProgram(this.m_program.getProgram());
deqp/modules/shared/glsSamplerObjectTest.js:        /** @type {WebGLUniformLocation} */ var samplerLoc1 = gl.getUniformLocation(this.m_program.getProgram(), 'u_sampler1');
deqp/modules/shared/glsSamplerObjectTest.js:        /** @type {WebGLUniformLocation} */ var samplerLoc2 = gl.getUniformLocation(this.m_program.getProgram(), 'u_sampler2');
deqp/modules/shared/glsSamplerObjectTest.js:        /** @type {WebGLUniformLocation} */ var scaleLoc = gl.getUniformLocation(this.m_program.getProgram(), 'u_posScale');
deqp/modules/shared/glsSamplerObjectTest.js:        gl.clearColor(0.5, 0.5, 0.5, 1.0);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.uniform1i(samplerLoc1, 0);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.uniform1i(samplerLoc2, 1);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.uniform1f(scaleLoc, 1.0);
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_2D: {
deqp/modules/shared/glsSamplerObjectTest.js:                gl.uniform1f(scaleLoc, 0.25);
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_3D: {
deqp/modules/shared/glsSamplerObjectTest.js:                gl.uniform1f(scaleLoc, 0.25);
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_CUBE_MAP: {
deqp/modules/shared/glsSamplerObjectTest.js:                gl.uniform1f(scaleLoc, 0.25);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, state.minFilter);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, state.magFilter);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_WRAP_S, state.wrapS);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_WRAP_T, state.wrapT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameteri(target, gl.TEXTURE_WRAP_R, state.wrapR);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameterf(target, gl.TEXTURE_MAX_LOD, state.maxLod);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texParameterf(target, gl.TEXTURE_MIN_LOD, state.minLod);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, state.minFilter);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, state.magFilter);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, state.wrapS);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, state.wrapT);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_R, state.wrapR);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameterf(sampler, gl.TEXTURE_MAX_LOD, state.maxLod);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.samplerParameterf(sampler, gl.TEXTURE_MIN_LOD, state.minLod);
deqp/modules/shared/glsSamplerObjectTest.js:        texture = gl.createTexture();
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, refTexture.getWidth(), refTexture.getHeight(), 0, gl.RGBA, gl.UNSIGNED_BYTE, refTexture.getLevel(0).getDataPtr());
deqp/modules/shared/glsSamplerObjectTest.js:        gl.generateMipmap(gl.TEXTURE_2D);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_2D, null);
deqp/modules/shared/glsSamplerObjectTest.js:        texture = gl.createTexture();
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_3D, texture);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, refTexture.getWidth(), refTexture.getHeight(), refTexture.getDepth(), 0, gl.RGBA, gl.UNSIGNED_BYTE, refTexture.getLevel(0).getDataPtr());
deqp/modules/shared/glsSamplerObjectTest.js:        gl.generateMipmap(gl.TEXTURE_3D);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_3D, null);
deqp/modules/shared/glsSamplerObjectTest.js:        texture = gl.createTexture();
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
deqp/modules/shared/glsSamplerObjectTest.js:            gl.texImage2D(target, 0, gl.RGBA, refTexture.getSize(), refTexture.getSize(), 0, gl.RGBA, gl.UNSIGNED_BYTE, refTexture.getLevelFace(0, tcuTexture.CubeFace[face]).getDataPtr());
deqp/modules/shared/glsSamplerObjectTest.js:        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
deqp/modules/shared/glsSamplerObjectTest.js:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_2D:
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_3D:
deqp/modules/shared/glsSamplerObjectTest.js:            case gl.TEXTURE_CUBE_MAP:
deqp/modules/shared/glsSamplerObjectTest.js:                case gl.TEXTURE_2D:
deqp/modules/shared/glsSamplerObjectTest.js:                case gl.TEXTURE_3D:
deqp/modules/shared/glsSamplerObjectTest.js:                case gl.TEXTURE_CUBE_MAP:
deqp/modules/shared/glsSamplerObjectTest.js:                case gl.TEXTURE_2D:
deqp/modules/shared/glsSamplerObjectTest.js:                case gl.TEXTURE_3D:
deqp/modules/shared/glsSamplerObjectTest.js:                case gl.TEXTURE_CUBE_MAP:
deqp/functional/gles3/es3fFboTestCase.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/functional/gles3/es3fFboTestCase.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/functional/gles3/es3fFboTestCase.js:var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/functional/gles3/es3fFboTestCase.js:var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/functional/gles3/es3fFboTestCase.js:        /** @type {number} */ this.m_viewportWidth = useScreenSizedViewport === undefined ? gl.drawingBufferWidth : 128;
deqp/functional/gles3/es3fFboTestCase.js:        /** @type {number} */ this.m_viewportHeight = useScreenSizedViewport === undefined ? gl.drawingBufferHeight : 128;
deqp/functional/gles3/es3fFboTestCase.js:        return Math.min(gl.drawingBufferWidth, this.m_viewportWidth);
deqp/functional/gles3/es3fFboTestCase.js:        return Math.min(gl.drawingBufferHeight, this.m_viewportHeight);
deqp/functional/gles3/es3fFboTestCase.js:                if (minSampleCount == 0 || numSamples > gl.getParameter(gl.MAX_SAMPLES)) {
deqp/functional/gles3/es3fFboTestCase.js:        if (status != gl.FRAMEBUFFER_COMPLETE)
deqp/functional/gles3/es3fFboTestCase.js:            if (err != gl.NO_ERROR)
deqp/functional/gles3/es3fFboTestCase.js:        /** @type {number} */ var width = Math.min(gl.drawingBufferWidth, this.m_viewportWidth);
deqp/functional/gles3/es3fFboTestCase.js:        /** @type {number} */ var height = Math.min(gl.drawingBufferHeight, this.m_viewportHeight);
deqp/functional/gles3/es3fFboTestCase.js:        /** @type {number} */ var x = rnd.getInt(0, gl.drawingBufferWidth - width);
deqp/functional/gles3/es3fFboTestCase.js:        /** @type {number} */ var y = rnd.getInt(0, gl.drawingBufferHeight - height);
deqp/functional/gles3/es3fFboTestCase.js:             if (err != gl.NO_ERROR)
deqp/functional/gles3/es3fFboTestCase.js:                 if (e.getReason() == gl.FRAMEBUFFER_UNSUPPORTED) {
deqp/functional/gles3/es3fFboTestCase.js:        var alphaBits = /** @type {number} */ (gl.getParameter(gl.ALPHA_BITS));
deqp/functional/gles3/es3fFboTestCase.js:                                                                       /** @type {number} */ (gl.getParameter(gl.DEPTH_BITS)),
deqp/functional/gles3/es3fFboTestCase.js:                                                                       /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS)),
deqp/functional/gles3/es3fFboTestCase.js:            gl.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboTestCase.js:            gl.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboTestCase.js:            gl.stencilFunc(gl.ALWAYS, 0, 0xffff);
deqp/functional/gles3/es3fFboTestCase.js:            gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fFboTestCase.js:            gl.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboTestCase.js:            gl.depthFunc(gl.LESS);
deqp/functional/gles3/es3fFboTestCase.js:            gl.disable(gl.BLEND);
deqp/functional/gles3/es3fFboTestCase.js:            gl.blendFunc(gl.ONE, gl.ZERO);
deqp/functional/gles3/es3fFboTestCase.js:            gl.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboTestCase.js:            gl.blendColor(0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fFboTestCase.js:            gl.enable(gl.DITHER);
deqp/functional/gles3/es3fFboTestCase.js:            gl.colorMask(true, true, true, true);
deqp/functional/gles3/es3fFboTestCase.js:            gl.depthMask(true);
deqp/functional/gles3/es3fFboTestCase.js:            gl.stencilMask(0xffff);
deqp/functional/gles3/es3fFboTestCase.js:            gl.clearColor(0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fFboTestCase.js:            gl.clearDepth(1.0);
deqp/functional/gles3/es3fFboTestCase.js:            gl.clearStencil(0.0);
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA32I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA32UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA16I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA16UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA8:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA8I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA8UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.SRGB8_ALPHA8:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGB10_A2:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGB10_A2UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA4:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGB5_A1:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGB8:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGB565:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG32I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG32UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG16I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG16UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG8:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG8I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG8UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R32I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R32UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R16I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R16UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R8:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R8I:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R8UI:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.DEPTH_COMPONENT32F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.DEPTH_COMPONENT24:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.DEPTH_COMPONENT16:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.DEPTH32F_STENCIL8:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.DEPTH24_STENCIL8:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.STENCIL_INDEX8:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA16F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG16F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R16F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGBA32F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGB32F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R11F_G11F_B10F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RG32F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.R32F:
deqp/functional/gles3/es3fFboTestCase.js:            case gl.RGB16F:
deqp/functional/gles3/es3fFboTestCase.js:                gl.getExtension(extension);
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA32I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA32UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA16I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA16UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA8:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA8I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA8UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.SRGB8_ALPHA8:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGB10_A2:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGB10_A2UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA4:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGB5_A1:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGB8:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGB565:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG32I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG32UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG16I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG16UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG8:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG8I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG8UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R32I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R32UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R16I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R16UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R8:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R8I:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R8UI:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.DEPTH_COMPONENT32F:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.DEPTH_COMPONENT24:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.DEPTH_COMPONENT16:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.DEPTH32F_STENCIL8:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.DEPTH24_STENCIL8:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.STENCIL_INDEX8:
deqp/functional/gles3/es3fFboTestCase.js:        // gl.EXT_color_buffer_float
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R11F_G11F_B10F:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG16F:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R16F:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA32F:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGBA16F:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RG32F:
deqp/functional/gles3/es3fFboTestCase.js:        case gl.R32F:
deqp/functional/gles3/es3fFboTestCase.js:        // gl.EXT_color_buffer_half_float
deqp/functional/gles3/es3fFboTestCase.js:        case gl.RGB16F:
deqp/functional/gles3/es3fFboTestCase.js:    return gl.getInternalformatParameter(gl.RENDERBUFFER, format, gl.SAMPLES);
deqp/modules/shared/glsUniformBlockCase.js:goog.require('framework.opengl.gluDrawUtil');
deqp/modules/shared/glsUniformBlockCase.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsUniformBlockCase.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsUniformBlockCase.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsUniformBlockCase.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsUniformBlockCase.js:var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/modules/shared/glsUniformBlockCase.js:    numActiveUniforms = /** @type {number} */ (gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)); // ACTIVE_UNIFORM* returns GLInt
deqp/modules/shared/glsUniformBlockCase.js:    numActiveBlocks = /** @type {number} */ (gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS));
deqp/modules/shared/glsUniformBlockCase.js:        size = /** @type {number} */ (gl.getActiveUniformBlockParameter(program, blockNdx, gl.UNIFORM_BLOCK_DATA_SIZE));
deqp/modules/shared/glsUniformBlockCase.js:        // nameLen = gl.getActiveUniformBlockParameter(program, blockNdx, gl.UNIFORM_BLOCK_NAME_LENGTH); // TODO: UNIFORM_BLOCK_NAME_LENGTH is removed in WebGL2
deqp/modules/shared/glsUniformBlockCase.js:        numBlockUniforms = /** @type {number} */ (gl.getActiveUniformBlockParameter(program, blockNdx, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS));
deqp/modules/shared/glsUniformBlockCase.js:        nameBuf = gl.getActiveUniformBlockName(program, blockNdx);
deqp/modules/shared/glsUniformBlockCase.js:            entryBlock.activeUniformIndices = gl.getActiveUniformBlockParameter(program, blockNdx, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES);
deqp/modules/shared/glsUniformBlockCase.js:        types = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_TYPE);
deqp/modules/shared/glsUniformBlockCase.js:        sizes = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_SIZE);
deqp/modules/shared/glsUniformBlockCase.js:        // Remove this: nameLengths = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_NAME_LENGTH);
deqp/modules/shared/glsUniformBlockCase.js:        blockIndices = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_BLOCK_INDEX);
deqp/modules/shared/glsUniformBlockCase.js:        offsets = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_OFFSET);
deqp/modules/shared/glsUniformBlockCase.js:        arrayStrides = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_ARRAY_STRIDE);
deqp/modules/shared/glsUniformBlockCase.js:        matrixStrides = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_MATRIX_STRIDE);
deqp/modules/shared/glsUniformBlockCase.js:        rowMajorFlags = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_IS_ROW_MAJOR);
deqp/modules/shared/glsUniformBlockCase.js:            /** @type {number} */ var type = gl.NONE;
deqp/modules/shared/glsUniformBlockCase.js:            var uniform = gl.getActiveUniform(program, uniformNdx);
deqp/modules/shared/glsUniformBlockCase.js:                testFailedOptions("Values returned by gl.getActiveUniform() don't match with values queried with gl.getActiveUniforms().", true);
deqp/modules/shared/glsUniformBlockCase.js:    gl.useProgram(program.getProgram());
deqp/modules/shared/glsUniformBlockCase.js:        gl.uniformBlockBinding(program.getProgram(), blockNdx, binding);
deqp/modules/shared/glsUniformBlockCase.js:            gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
deqp/modules/shared/glsUniformBlockCase.js:            gl.bufferData(gl.UNIFORM_BUFFER, glBlockPointers.find(blockNdx) /*(glw::GLsizeiptr)glData[blockNdx].size(), &glData[blockNdx][0]*/, gl.STATIC_DRAW);
deqp/modules/shared/glsUniformBlockCase.js:            gl.bindBufferBase(gl.UNIFORM_BUFFER, binding, buffer);
deqp/modules/shared/glsUniformBlockCase.js:        bindingAlignment = /** @type {number} */ (gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT));
deqp/modules/shared/glsUniformBlockCase.js:        gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
deqp/modules/shared/glsUniformBlockCase.js:            gl.bufferData(gl.UNIFORM_BUFFER, glBlockPointers.find(blockNdx) /*(glw::GLsizeiptr)glData.size(), &glData[0]*/, gl.STATIC_DRAW);
deqp/modules/shared/glsUniformBlockCase.js:            gl.bindBufferRange(gl.UNIFORM_BUFFER, binding, buffer, glBlockPointers.offsets[blockNdx], glLayout.blocks[blockNdx].size);
deqp/modules/shared/glsUniformBlockCase.js:        /** @const */ var queriedNdx = gl.getUniformBlockIndex(program, block.name);
deqp/modules/shared/glsUniformBlockCase.js:    /** @const */ var viewportW = Math.min(gl.canvas.width, glsUniformBlockCase.VIEWPORT_WIDTH);
deqp/modules/shared/glsUniformBlockCase.js:    /** @const */ var viewportH = Math.min(gl.canvas.height, glsUniformBlockCase.VIEWPORT_HEIGHT);
deqp/modules/shared/glsUniformBlockCase.js:    /** @const */ var viewportX = rnd.getInt(0, gl.canvas.width);
deqp/modules/shared/glsUniformBlockCase.js:    /** @const */ var viewportY = rnd.getInt(0, gl.canvas.height);
deqp/modules/shared/glsUniformBlockCase.js:    gl.clearColor(0.125, 0.25, 0.5, 1.0);
deqp/modules/shared/glsUniformBlockCase.js:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/modules/shared/glsUniformBlockCase.js:    gl.viewport(viewportX, viewportY, viewportW, viewportH);
deqp/modules/shared/glsUniformBlockCase.js:    var posLoc = gl.getAttribLocation(program.getProgram(), 'a_position');
deqp/modules/shared/glsUniformBlockCase.js:    var posArray = [new gluDrawUtil.VertexArrayBinding(gl.FLOAT, posLoc, 4, 4, position)];
deqp/modules/shared/glsUniformBlockCase.js:    var readPixelsX = (viewportX + viewportW) > gl.canvas.width
deqp/modules/shared/glsUniformBlockCase.js:        ? (gl.canvas.width - viewportX) : viewportW;
deqp/modules/shared/glsUniformBlockCase.js:    var readPixelsY = (viewportY + viewportH) > gl.canvas.height
deqp/modules/shared/glsUniformBlockCase.js:        ? (gl.canvas.height - viewportY) : viewportH;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fPrimitiveRestartTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fPrimitiveRestartTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                primTypeGL = gl.POINTS;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                primTypeGL = gl.LINE_STRIP;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                primTypeGL = gl.LINE_LOOP;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                primTypeGL = gl.LINES;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                primTypeGL = gl.TRIANGLE_STRIP;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                primTypeGL = gl.TRIANGLE_FAN;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                primTypeGL = gl.TRIANGLES;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                indexTypeGL = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                indexTypeGL = gl.UNSIGNED_SHORT;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:                indexTypeGL = gl.UNSIGNED_INT;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        var indexGLBuffer = gl.createBuffer();
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexGLBuffer);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, bufferIndex, gl.STATIC_DRAW);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:            gl.drawElements(primTypeGL, count, indexTypeGL, 0);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:            gl.drawElementsInstanced(primTypeGL, count, indexTypeGL, 0, 1);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:            gl.drawRangeElements(primTypeGL, 0, max, count, indexTypeGL, 0);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        //gl.enable(gl.PRIMITIVE_RESTART_FIXED_INDEX);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        //gl.disable(gl.PRIMITIVE_RESTART_FIXED_INDEX);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.getError();
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        /** @type {number} */ var width = Math.min(gl.drawingBufferWidth, es3fPrimitiveRestartTests.MAX_RENDER_WIDTH);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        /** @type {number} */ var height = Math.min(gl.drawingBufferHeight, es3fPrimitiveRestartTests.MAX_RENDER_HEIGHT);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        /** @type {number} */ var xOffsetMax = gl.drawingBufferWidth - width;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        /** @type {number} */ var yOffsetMax = gl.drawingBufferHeight - height;
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.viewport(xOffset, yOffset, width, height);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.useProgram(program);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        /** @type {number} */ var loc = gl.getAttribLocation(program, 'a_position');
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.enableVertexAttribArray(loc);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        var locGlBuffer = gl.createBuffer();
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, locGlBuffer);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.bufferData(gl.ARRAY_BUFFER, bufferLoc, gl.STATIC_DRAW);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.vertexAttribPointer(loc, 2, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.readPixels(xOffset, yOffset, resImg.m_width, resImg.m_height, resImgTransferFormat.format, resImgTransferFormat.dataType, resultImg.m_pixels);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.readPixels(xOffset, yOffset, refImg.m_width, refImg.m_height, refImgTransferFormat.format, refImgTransferFormat.dataType, referenceImg.m_pixels);
deqp/functional/gles3/es3fPrimitiveRestartTests.js:        gl.useProgram(null);
deqp/functional/gles3/fbocolorbuffer/fbocolorbuffer_test_generator.py:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/es3fShaderDerivateTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fShaderDerivateTests.js:goog.require('framework.opengl.gluPixelTransfer');
deqp/functional/gles3/es3fShaderDerivateTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderDerivateTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderDerivateTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fShaderDerivateTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fShaderDerivateTests.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fShaderDerivateTests.js:    var gluPixelTransfer = framework.opengl.gluPixelTransfer;
deqp/functional/gles3/es3fShaderDerivateTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderDerivateTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderDerivateTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fShaderDerivateTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fShaderDerivateTests.js:        /** @type {number} */ this.m_hint = gl.DONT_CARE;
deqp/functional/gles3/es3fShaderDerivateTests.js:            /** @type {number} */ var width = Math.min(gl.drawingBufferWidth, es3fShaderDerivateTests.VIEWPORT_WIDTH);
deqp/functional/gles3/es3fShaderDerivateTests.js:            /** @type {number} */ var height = Math.min(gl.drawingBufferHeight, es3fShaderDerivateTests.VIEWPORT_HEIGHT);
deqp/functional/gles3/es3fShaderDerivateTests.js:        /** @type {number} */ var fboFormat = this.m_surfaceType === es3fShaderDerivateTests.SurfaceType.FLOAT_FBO ? gl.RGBA32UI : gl.RGBA8;
deqp/functional/gles3/es3fShaderDerivateTests.js:        /** @type {number} */ var viewportX = useFbo ? 0 : rnd.getInt(0, gl.drawingBufferWidth - viewportSize[0]);
deqp/functional/gles3/es3fShaderDerivateTests.js:        /** @type {number} */ var viewportY = useFbo ? 0 : rnd.getInt(0, gl.drawingBufferHeight - viewportSize[1]);
deqp/functional/gles3/es3fShaderDerivateTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fShaderDerivateTests.js:            rbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, fboFormat, viewportSize[0], viewportSize[1]);
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:            'gl.FRAGMENT_SHADER_DERIVATE_HINT: ' + wtu.glEnumToString(gl, this.m_hint));
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.clearColor(0.125, 0.25, 0.5, 1.0);
deqp/functional/gles3/es3fShaderDerivateTests.js:        // We can't really call clear() on gl.COLOR_BUFFER_BIT here as in c++ deqp.
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.clearBufferuiv(gl.COLOR, 0, new Uint32Array([31, 63, 127, 255]));
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.clearBufferiv(gl.COLOR, 0, new Int32Array([31, 63, 127, 255]));
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.disable(gl.DITHER);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fShaderDerivateTests.js:        /** @type {WebGLUniformLocation} */ var scaleLoc = gl.getUniformLocation(program.getProgram(), 'u_scale');
deqp/functional/gles3/es3fShaderDerivateTests.js:        /** @type {WebGLUniformLocation} */ var biasLoc = gl.getUniformLocation(program.getProgram(), 'u_bias');
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.uniform1f(scaleLoc, this.m_derivScale[0]);
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.uniform1f(biasLoc, this.m_derivBias[0]);
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.uniform2fv(scaleLoc, this.m_derivScale.slice(0,2));
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.uniform2fv(biasLoc, this.m_derivBias.slice(0,2));
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.uniform3fv(scaleLoc, this.m_derivScale.slice(0,3));
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.uniform3fv(biasLoc, this.m_derivBias.slice(0,3));
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.uniform4fv(scaleLoc, this.m_derivScale);
deqp/functional/gles3/es3fShaderDerivateTests.js:                gl.uniform4fv(biasLoc, this.m_derivBias);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.hint(gl.FRAGMENT_SHADER_DERIVATIVE_HINT, this.m_hint);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.viewport(viewportX, viewportY, viewportSize[0], viewportSize[1]);
deqp/functional/gles3/es3fShaderDerivateTests.js:            resFbo = gl.createFramebuffer();
deqp/functional/gles3/es3fShaderDerivateTests.js:            resRbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, resRbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 0, fboFormat, viewportSize[0], viewportSize[1]);
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, resFbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, resRbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.blitFramebuffer(0, 0, viewportSize[0], viewportSize[1], 0, 0, viewportSize[0], viewportSize[1], gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fShaderDerivateTests.js:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, resFbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.deleteRenderbuffer(rbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.deleteFramebuffer(resFbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.deleteRenderbuffer(resRbo);
deqp/functional/gles3/es3fShaderDerivateTests.js:        this.m_texture = gluTexture.texture2DFromInternalFormat(gl, this.m_precision === gluShaderUtil.precision.PRECISION_HIGHP ? gl.RGBA32F : gl.RGBA16F, viewportSize[0], viewportSize[1]);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.activeTexture(gl.TEXTURE0 + texUnit);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.bindTexture(gl.TEXTURE_2D, this.m_texture.getGLTexture());
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fShaderDerivateTests.js:        gl.uniform1i(gl.getUniformLocation(program, 'u_sampler'), texUnit);
deqp/functional/gles3/es3fShaderDerivateTests.js:            new Hint('fastest', gl.FASTEST),
deqp/functional/gles3/es3fShaderDerivateTests.js:            new Hint('nicest', gl.NICEST)
deqp/functional/gles3/es3fShaderDerivateTests.js:            new TextureConfig('basic', es3fShaderDerivateTests.SurfaceType.DEFAULT_FRAMEBUFFER, 0, gl.DONT_CARE),
deqp/functional/gles3/es3fShaderDerivateTests.js:            new TextureConfig('msaa4', es3fShaderDerivateTests.SurfaceType.UNORM_FBO, 4, gl.DONT_CARE),
deqp/functional/gles3/es3fShaderDerivateTests.js:            new TextureConfig('float_fastest', es3fShaderDerivateTests.SurfaceType.FLOAT_FBO, 0, gl.FASTEST),
deqp/functional/gles3/es3fShaderDerivateTests.js:            new TextureConfig('float_nicest', es3fShaderDerivateTests.SurfaceType.FLOAT_FBO, 0, gl.NICEST)
deqp/functional/gles3/es3fShaderDerivateTests.js:                    hint = gl.DONT_CARE;
deqp/functional/gles3/es3fShaderDerivateTests.js:                    hint = gl.DONT_CARE;
deqp/modules/shared/glsBufferTestUtil.js:goog.require('framework.opengl.gluDrawUtil');
deqp/modules/shared/glsBufferTestUtil.js:goog.require('framework.opengl.gluShaderProgram');
deqp/modules/shared/glsBufferTestUtil.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsBufferTestUtil.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/modules/shared/glsBufferTestUtil.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsBufferTestUtil.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/modules/shared/glsBufferTestUtil.js:            case gl.ARRAY_BUFFER: return 'array';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.COPY_READ_BUFFER: return 'copy_read';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.COPY_WRITE_BUFFER: return 'copy_write';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.ELEMENT_ARRAY_BUFFER: return 'element_array';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.PIXEL_PACK_BUFFER: return 'pixel_pack';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.PIXEL_UNPACK_BUFFER: return 'pixel_unpack';
deqp/modules/shared/glsBufferTestUtil.js:            //case gl.TEXTURE_BUFFER: return "texture"; //TODO: Unimplemented in WebGL 2. Remove?
deqp/modules/shared/glsBufferTestUtil.js:            case gl.TRANSFORM_FEEDBACK_BUFFER: return 'transform_feedback';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.UNIFORM_BUFFER: return 'uniform';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.STREAM_DRAW: return 'stream_draw';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.STREAM_READ: return 'stream_read';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.STREAM_COPY: return 'stream_copy';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.STATIC_DRAW: return 'static_draw';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.STATIC_READ: return 'static_read';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.STATIC_COPY: return 'static_copy';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.DYNAMIC_DRAW: return 'dynamic_draw';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.DYNAMIC_READ: return 'dynamic_read';
deqp/modules/shared/glsBufferTestUtil.js:            case gl.DYNAMIC_COPY: return 'dynamic_copy';
deqp/modules/shared/glsBufferTestUtil.js:        buf = gl.createBuffer();
deqp/modules/shared/glsBufferTestUtil.js:                gl.deleteBuffer(buf);
deqp/modules/shared/glsBufferTestUtil.js:        gl.deleteBuffer(buffer);
deqp/modules/shared/glsBufferTestUtil.js:        /** @type {number} */ var err = gl.getError();
deqp/modules/shared/glsBufferTestUtil.js:        if (err != gl.NO_ERROR)
deqp/modules/shared/glsBufferTestUtil.js:            'gl.bufferSubData()',
deqp/modules/shared/glsBufferTestUtil.js:            'gl.mapBufferRange()',
deqp/modules/shared/glsBufferTestUtil.js:            'gl.readPixels() into PBO binding'
deqp/modules/shared/glsBufferTestUtil.js:        this.write(buffer, offset, numBytes, bytes, gl.ARRAY_BUFFER);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindBuffer(target, buffer);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bufferSubData(target, offset, bytes);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindBuffer(target, null);
deqp/modules/shared/glsBufferTestUtil.js:            if (targetHint == gl.ELEMENT_ARRAY_BUFFER || targetHint == gl.TRANSFORM_FEEDBACK_BUFFER) {
deqp/modules/shared/glsBufferTestUtil.js:                gl.getBufferSubData(targetHint, 0, readBuffer);
deqp/modules/shared/glsBufferTestUtil.js:                buffer = gl.createBuffer();
deqp/modules/shared/glsBufferTestUtil.js:                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/modules/shared/glsBufferTestUtil.js:                gl.bufferData(gl.ARRAY_BUFFER, readBuffer, gl.STATIC_DRAW);
deqp/modules/shared/glsBufferTestUtil.js:                gl.deleteBuffer(buffer);
deqp/modules/shared/glsBufferTestUtil.js:                gl.deleteBuffer(buffer);
deqp/modules/shared/glsBufferTestUtil.js:        this.m_posLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_position');
deqp/modules/shared/glsBufferTestUtil.js:        this.m_byteVecLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_byteVec');
deqp/modules/shared/glsBufferTestUtil.js:        this.m_vao = gl.createVertexArray();
deqp/modules/shared/glsBufferTestUtil.js:        this.m_positionBuf = gl.createBuffer();
deqp/modules/shared/glsBufferTestUtil.js:        this.m_indexBuf = gl.createBuffer();
deqp/modules/shared/glsBufferTestUtil.js:        if (this.m_vao) gl.deleteVertexArray(this.m_vao);
deqp/modules/shared/glsBufferTestUtil.js:        if (this.m_positionBuf) gl.deleteBuffer(this.m_positionBuf);
deqp/modules/shared/glsBufferTestUtil.js:        if (this.m_indexBuf) gl.deleteBuffer(this.m_indexBuf);
deqp/modules/shared/glsBufferTestUtil.js:        var maxQuadsX = Math.min(128, Math.floor(gl.drawingBufferWidth / glsBufferTestUtil.VERIFY_QUAD_SIZE));
deqp/modules/shared/glsBufferTestUtil.js:        var maxQuadsY = Math.min(128, Math.floor(gl.drawingBufferHeight / glsBufferTestUtil.VERIFY_QUAD_SIZE));
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
deqp/modules/shared/glsBufferTestUtil.js:        gl.viewport(0, 0, maxQuadsX * glsBufferTestUtil.VERIFY_QUAD_SIZE, maxQuadsY * glsBufferTestUtil.VERIFY_QUAD_SIZE);
deqp/modules/shared/glsBufferTestUtil.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/modules/shared/glsBufferTestUtil.js:        gl.useProgram(program);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindVertexArray(this.m_vao);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindBuffer(gl.ARRAY_BUFFER, this.m_positionBuf);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
deqp/modules/shared/glsBufferTestUtil.js:        gl.enableVertexAttribArray(this.m_posLoc);
deqp/modules/shared/glsBufferTestUtil.js:        gl.vertexAttribPointer(this.m_posLoc, 2, gl.FLOAT, false, 0, 0);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.m_indexBuf);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
deqp/modules/shared/glsBufferTestUtil.js:        gl.enableVertexAttribArray(this.m_byteVecLoc);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/modules/shared/glsBufferTestUtil.js:            gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsBufferTestUtil.js:            gl.vertexAttribPointer(this.m_byteVecLoc, 3, gl.UNSIGNED_BYTE, true, 0, offset + curOffset);
deqp/modules/shared/glsBufferTestUtil.js:            gl.drawElements(gl.TRIANGLES, numQuads * 6, gl.UNSIGNED_SHORT, 0);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindVertexArray(null);
deqp/modules/shared/glsBufferTestUtil.js:        this.m_posLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_position');
deqp/modules/shared/glsBufferTestUtil.js:        this.m_colorLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_color');
deqp/modules/shared/glsBufferTestUtil.js:        this.m_vao = gl.createVertexArray();
deqp/modules/shared/glsBufferTestUtil.js:        this.m_positionBuf = gl.createBuffer();
deqp/modules/shared/glsBufferTestUtil.js:        this.m_colorBuf = gl.createBuffer();
deqp/modules/shared/glsBufferTestUtil.js:        if (this.m_vao) gl.deleteVertexArray(this.m_vao);
deqp/modules/shared/glsBufferTestUtil.js:        if (this.m_positionBuf) gl.deleteBuffer(this.m_positionBuf);
deqp/modules/shared/glsBufferTestUtil.js:        if (this.m_colorBuf) gl.deleteBuffer(this.m_colorBuf);
deqp/modules/shared/glsBufferTestUtil.js:        var viewportW = Math.min(glsBufferTestUtil.INDEX_ARRAY_DRAW_VIEWPORT_WIDTH, gl.drawingBufferWidth);
deqp/modules/shared/glsBufferTestUtil.js:        var viewportH = Math.min(glsBufferTestUtil.INDEX_ARRAY_DRAW_VIEWPORT_HEIGHT, gl.drawingBufferHeight);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindVertexArray(this.m_vao);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
deqp/modules/shared/glsBufferTestUtil.js:        gl.viewport(0, 0, viewportW, viewportH);
deqp/modules/shared/glsBufferTestUtil.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/modules/shared/glsBufferTestUtil.js:        gl.useProgram(this.m_program.getProgram());
deqp/modules/shared/glsBufferTestUtil.js:        gl.enableVertexAttribArray(this.m_posLoc);
deqp/modules/shared/glsBufferTestUtil.js:        gl.enableVertexAttribArray(this.m_colorLoc);
deqp/modules/shared/glsBufferTestUtil.js:        gl.enable(gl.BLEND);
deqp/modules/shared/glsBufferTestUtil.js:        gl.blendFunc(gl.ONE, gl.ONE);
deqp/modules/shared/glsBufferTestUtil.js:        gl.blendEquation(gl.FUNC_ADD);
deqp/modules/shared/glsBufferTestUtil.js:            gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsBufferTestUtil.js:            gl.bindBuffer(gl.ARRAY_BUFFER, this.m_positionBuf);
deqp/modules/shared/glsBufferTestUtil.js:            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STREAM_DRAW);
deqp/modules/shared/glsBufferTestUtil.js:            gl.vertexAttribPointer(this.m_posLoc, 2, gl.FLOAT, false, 0, 0);
deqp/modules/shared/glsBufferTestUtil.js:            gl.bindBuffer(gl.ARRAY_BUFFER, this.m_colorBuf);
deqp/modules/shared/glsBufferTestUtil.js:            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STREAM_DRAW);
deqp/modules/shared/glsBufferTestUtil.js:            gl.vertexAttribPointer(this.m_colorLoc, 3, gl.FLOAT, false, 0, 0);
deqp/modules/shared/glsBufferTestUtil.js:            gl.drawElements(gl.LINE_STRIP, numBytesToVerify, gl.UNSIGNED_BYTE, offset + curOffset);
deqp/modules/shared/glsBufferTestUtil.js:            gl.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsBufferTestUtil.js:            gl.bindBuffer(gl.ARRAY_BUFFER, this.m_positionBuf);
deqp/modules/shared/glsBufferTestUtil.js:            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(fetchedPos), gl.STREAM_DRAW);
deqp/modules/shared/glsBufferTestUtil.js:            gl.vertexAttribPointer(this.m_posLoc, 2, gl.FLOAT, false, 0, 0);
deqp/modules/shared/glsBufferTestUtil.js:            gl.bindBuffer(gl.ARRAY_BUFFER, this.m_colorBuf);
deqp/modules/shared/glsBufferTestUtil.js:            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(fetchedColor), gl.STREAM_DRAW);
deqp/modules/shared/glsBufferTestUtil.js:            gl.vertexAttribPointer(this.m_colorLoc, 3, gl.FLOAT, false, 0, 0);
deqp/modules/shared/glsBufferTestUtil.js:            gl.drawArrays(gl.LINE_STRIP, 0, numBytesToVerify);
deqp/modules/shared/glsBufferTestUtil.js:        gl.bindVertexArray(null);
deqp/functional/gles3/fbocolorbuffer/tex2d_03.html:var ext = gl.getExtension('EXT_color_buffer_float');
conformance/limits/gl-max-texture-dimensions.html:var maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
conformance/limits/gl-max-texture-dimensions.html:var tex = gl.createTexture();
conformance/limits/gl-max-texture-dimensions.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/limits/gl-max-texture-dimensions.html:gl.texImage2D(
conformance/limits/gl-max-texture-dimensions.html:    gl.TEXTURE_2D, 0, gl.RGBA, testSize, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/limits/gl-max-texture-dimensions.html:gl.generateMipmap(gl.TEXTURE_2D);
conformance/limits/gl-max-texture-dimensions.html:gl.texImage2D(
conformance/limits/gl-max-texture-dimensions.html:    gl.TEXTURE_2D, 0, gl.RGBA, 1, testSize, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/limits/gl-max-texture-dimensions.html:gl.generateMipmap(gl.TEXTURE_2D);
conformance/limits/gl-max-texture-dimensions.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
deqp/modules/shared/glsVertexArrayTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsVertexArrayTests.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/modules/shared/glsVertexArrayTests.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/modules/shared/glsVertexArrayTests.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/modules/shared/glsVertexArrayTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsVertexArrayTests.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/modules/shared/glsVertexArrayTests.js:    var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/modules/shared/glsVertexArrayTests.js:    var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/modules/shared/glsVertexArrayTests.js:            gl.ELEMENT_ARRAY_BUFFER, // glsVertexArrayTests.deArray.Target.ELEMENT_ARRAY
deqp/modules/shared/glsVertexArrayTests.js:            gl.ARRAY_BUFFER // glsVertexArrayTests.deArray.Target.ARRAY
deqp/modules/shared/glsVertexArrayTests.js:            gl.DYNAMIC_DRAW, // glsVertexArrayTests.deArray.Usage.DYNAMIC_DRAW
deqp/modules/shared/glsVertexArrayTests.js:            gl.STATIC_DRAW, // glsVertexArrayTests.deArray.Usage.STATIC_DRAW
deqp/modules/shared/glsVertexArrayTests.js:            gl.STREAM_DRAW, // glsVertexArrayTests.deArray.Usage.STREAM_DRAW
deqp/modules/shared/glsVertexArrayTests.js:            gl.STREAM_READ, // glsVertexArrayTests.deArray.Usage.STREAM_READ
deqp/modules/shared/glsVertexArrayTests.js:            gl.STREAM_COPY, // glsVertexArrayTests.deArray.Usage.STREAM_COPY
deqp/modules/shared/glsVertexArrayTests.js:            gl.STATIC_READ, // glsVertexArrayTests.deArray.Usage.STATIC_READ
deqp/modules/shared/glsVertexArrayTests.js:            gl.STATIC_COPY, // glsVertexArrayTests.deArray.Usage.STATIC_COPY
deqp/modules/shared/glsVertexArrayTests.js:            gl.DYNAMIC_READ, // glsVertexArrayTests.deArray.Usage.DYNAMIC_READ
deqp/modules/shared/glsVertexArrayTests.js:            gl.DYNAMIC_COPY // glsVertexArrayTests.deArray.Usage.DYNAMIC_COPY
deqp/modules/shared/glsVertexArrayTests.js:            gl.FLOAT, // glsVertexArrayTests.deArray.InputType.FLOAT
deqp/modules/shared/glsVertexArrayTests.js:            gl.BYTE, // glsVertexArrayTests.deArray.InputType.BYTE
deqp/modules/shared/glsVertexArrayTests.js:            gl.SHORT, // glsVertexArrayTests.deArray.InputType.SHORT
deqp/modules/shared/glsVertexArrayTests.js:            gl.UNSIGNED_BYTE, // glsVertexArrayTests.deArray.InputType.UNSIGNED_BYTE
deqp/modules/shared/glsVertexArrayTests.js:            gl.UNSIGNED_SHORT, // glsVertexArrayTests.deArray.InputType.UNSIGNED_SHORT
deqp/modules/shared/glsVertexArrayTests.js:            gl.INT, // glsVertexArrayTests.deArray.InputType.INT
deqp/modules/shared/glsVertexArrayTests.js:            gl.UNSIGNED_INT, // glsVertexArrayTests.deArray.InputType.UNSIGNED_INT
deqp/modules/shared/glsVertexArrayTests.js:            gl.HALF_FLOAT, // glsVertexArrayTests.deArray.InputType.HALF
deqp/modules/shared/glsVertexArrayTests.js:            gl.UNSIGNED_INT_2_10_10_10_REV, // glsVertexArrayTests.deArray.InputType.UNSIGNED_INT_2_10_10_10
deqp/modules/shared/glsVertexArrayTests.js:            gl.INT_2_10_10_10_REV // glsVertexArrayTests.deArray.InputType.INT_2_10_10_10
deqp/modules/shared/glsVertexArrayTests.js:            gl.POINTS, // glsVertexArrayTests.deArray.Primitive.POINTS
deqp/modules/shared/glsVertexArrayTests.js:            gl.TRIANGLES, // glsVertexArrayTests.deArray.Primitive.TRIANGLES
deqp/modules/shared/glsVertexArrayTests.js:            gl.TRIANGLE_FAN, // glsVertexArrayTests.deArray.Primitive.TRIANGLE_FAN
deqp/modules/shared/glsVertexArrayTests.js:            gl.TRIANGLE_STRIP // glsVertexArrayTests.deArray.Primitive.TRIANGLE_STRIP
deqp/modules/shared/glsVertexArrayTests.js:        this.m_ctx.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsVertexArrayTests.js:        this.m_ctx.drawQuads(gl.TRIANGLES, firstVertex, vertexCount - firstVertex);
deqp/modules/shared/glsVertexArrayTests.js:        this.m_ctx.readPixels(0, 0, this.m_screen.getWidth(), this.m_screen.getHeight(), gl.RGBA, gl.UNSIGNED_BYTE, this.m_screen.getAccess().getDataPtr());
deqp/modules/shared/glsVertexArrayTests.js:                    var viewport = gl.getParameter(gl.VIEWPORT);
deqp/modules/shared/glsVertexArrayTests.js:        var r = /** @type {number} */ (gl.getParameter(gl.RED_BITS));
deqp/modules/shared/glsVertexArrayTests.js:        var g = /** @type {number} */ (gl.getParameter(gl.GREEN_BITS));
deqp/modules/shared/glsVertexArrayTests.js:        var b = /** @type {number} */ (gl.getParameter(gl.BLUE_BITS));
deqp/modules/shared/glsVertexArrayTests.js:        var a = /** @type {number} */ (gl.getParameter(gl.ALPHA_BITS));
deqp/modules/shared/glsVertexArrayTests.js:        if (/** @type {number} */ (this.m_glesContext.getParameter(gl.SAMPLES)) > 1) {
deqp/modules/shared/glsVertexArrayTests.js:            var useVao = true; // WebGL, WebGL 2.0 - gl.getType().getProfile() == glu::PROFILE_CORE;
conformance/limits/gl-min-textures.html:  var loc = gl.getUniformLocation(program, "uni[" + ii + "]");
conformance/limits/gl-min-textures.html:  gl.activeTexture(gl.TEXTURE0 + ii);
conformance/limits/gl-min-textures.html:  var tex = gl.createTexture();
conformance/limits/gl-min-textures.html:  gl.uniform1i(loc, ii);
conformance/limits/gl-min-textures.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/texture-sub-image-cube-maps.html:var rotLoc = gl.getUniformLocation(program, "rotation");
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.viewport(0, 0, canvasSize, canvasSize);
conformance/textures/misc/texture-sub-image-cube-maps.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/texture-sub-image-cube-maps.html:      gl.texParameteri(
conformance/textures/misc/texture-sub-image-cube-maps.html:          gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER,
conformance/textures/misc/texture-sub-image-cube-maps.html:          gl.NEAREST_MIPMAP_NEAREST);
conformance/textures/misc/texture-sub-image-cube-maps.html:      gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
conformance/textures/misc/texture-sub-image-cube-maps.html:    var err = gl.getError();
conformance/textures/misc/texture-sub-image-cube-maps.html:    if (err == gl.OUT_OF_MEMORY) {
conformance/textures/misc/texture-sub-image-cube-maps.html:    if (err != gl.NO_ERROR) {
conformance/textures/misc/texture-sub-image-cube-maps.html:      gl.uniformMatrix4fv(rotLoc, false, rotMat);
conformance/textures/misc/texture-sub-image-cube-maps.html:      gl.uniformMatrix4fv(rotLoc, false, rotMat);
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.deleteTexture(tex);
conformance/textures/misc/texture-sub-image-cube-maps.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/textures/misc/texture-sub-image-cube-maps.html:  gl.texImage2D(
conformance/textures/misc/texture-sub-image-cube-maps.html:      target, level, gl.RGBA, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-sub-image-cube-maps.html:      gl.texSubImage2D(
conformance/textures/misc/texture-sub-image-cube-maps.html:          target, level, 0, jj, size / 2, 1, gl.RGBA, gl.UNSIGNED_BYTE, halfPixelRow);
conformance/textures/misc/texture-sub-image-cube-maps.html:      gl.texSubImage2D(
conformance/textures/misc/texture-sub-image-cube-maps.html:          target, level, size / 2, jj, size / 2, 1, gl.RGBA, gl.UNSIGNED_BYTE, halfPixelRow);
conformance/limits/gl-min-attribs.html:  var vertexObject = gl.createBuffer();
conformance/limits/gl-min-attribs.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/limits/gl-min-attribs.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/limits/gl-min-attribs.html:      v, v/2, v/4, v/8]), gl.STATIC_DRAW);
conformance/limits/gl-min-attribs.html:  gl.enableVertexAttribArray(ii + 1);
conformance/limits/gl-min-attribs.html:  gl.vertexAttribPointer(ii + 1, 4, gl.FLOAT, false, 0, 0);
conformance/limits/gl-min-attribs.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/limits/gl-min-attribs.html:wtu.checkCanvasRect(gl, 0, 0, gl.canvas.width, gl.canvas.height, [255, 127, 64, 32], "Should render 255,127,64,32 (+/-1)", 1);
conformance/textures/misc/texture-clear.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/texture-clear.html:var tex = gl.createTexture();
conformance/textures/misc/texture-clear.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-clear.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-clear.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0,255,0,255]));
conformance/textures/misc/texture-clear.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/limits/gl-min-uniforms.html:  var loc = gl.getUniformLocation(program, "uni[" + ii + "]");
conformance/limits/gl-min-uniforms.html:  gl.uniform4f(loc, 2/256, 2/512, 2/1024, ii/8128);
conformance/limits/gl-min-uniforms.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/limits/gl-min-uniforms.html:wtu.checkCanvasRect(gl, 0, 0, gl.canvas.width, gl.canvas.height, [255, 127, 64, 255], "Should render 255,127,64,32 (+/-1)", 1);
conformance/limits/gl-min-uniforms.html:  var loc = gl.getUniformLocation(program, "uni[" + ii + "]");
conformance/limits/gl-min-uniforms.html:  gl.uniform4f(loc, 16/2048, 16/1024, 16/512, ii);
conformance/limits/gl-min-uniforms.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/limits/gl-min-uniforms.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/limits/gl-min-uniforms.html:wtu.checkCanvasRect(gl, 0, 0, gl.canvas.width, gl.canvas.height, [32, 64, 127, 255], "Should render 32,64,127,255 (+/-1)", 1);
conformance/extensions/ext-disjoint-timer-query.html:        gl.getParameter(ext.GPU_DISJOINT_EXT);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Query creation must succeed.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "Beginning a timestamp query should fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Beginning an inactive time elapsed query should succeed.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Attempting to begin an active query should fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Fetching query result availability of an active query should fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Fetching query result of an active query should fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Ending an active time elapsed query should succeed.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Fetching query result availability after query end should succeed.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Attempting to end an inactive query should fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Should not be able to use time elapsed query to store a timestamp.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Query deletion must succeed.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Beginning a deleted query must fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Fetching query result availability after query deletion should fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Timestamp counter queries should work.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    gl.getParameter(ext.TIMESTAMP_EXT);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "getParameter timestamp calls should work.");
conformance/extensions/ext-disjoint-timer-query.html:    gl.getParameter(ext.GPU_DISJOINT_EXT);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "getParameter disjoint calls should work.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Beginning an elapsed query without ending should fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "Switching query targets should fail.");
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors at end of sanity tests");
conformance/extensions/ext-disjoint-timer-query.html:    gl.clearColor(0, 0, 1, 1);
conformance/extensions/ext-disjoint-timer-query.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Time elapsed query should have no errors");
conformance/extensions/ext-disjoint-timer-query.html:    gl.clearColor(1, 0, 0, 1);
conformance/extensions/ext-disjoint-timer-query.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/extensions/ext-disjoint-timer-query.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Timestamp queries should have no errors");
conformance/extensions/ext-disjoint-timer-query.html:        gl.finish();
conformance/extensions/ext-disjoint-timer-query.html:            var error = gl.getError();
conformance/extensions/ext-disjoint-timer-query.html:            if (error != gl.NO_ERROR) {
conformance/extensions/ext-disjoint-timer-query.html:    var disjoint_value = gl.getParameter(ext.GPU_DISJOINT_EXT);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-image-bitmap.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-image-bitmap.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-image-bitmap.js:        gl.disable(gl.BLEND);
deqp/framework/referencerenderer/rrRenderer.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/framework/referencerenderer/rrRenderer.js:var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
conformance/extensions/webgl-compressed-texture-pvrtc.html:    supportedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    supportedFormats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.viewport(0, 0, width, height);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    var tex = gl.createTexture();
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "uploading compressed texture");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "trying to generate mipmaps from compressed texture");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height, 1, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "non 0 border");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 1, height, 0, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width - 2, height, 0, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 1, 0, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexImage2D(gl.TEXTURE_2D, 0, format, width, height - 2, 0, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "invalid dimensions");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, format, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "compressedTexSubImage2D allowed for reloading of complete textures");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width - 2, height, format, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "compressedTexSubImage2D not allowed for partial texture updates");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height - 2, format, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "compressedTexSubImage2D not allowed for partial texture updates");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 2, 0, width - 2, height, format, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "compressedTexSubImage2D not allowed for partial texture updates");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 2, width, height - 2, format, data);
conformance/extensions/webgl-compressed-texture-pvrtc.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "compressedTexSubImage2D not allowed for partial texture updates");
conformance/extensions/webgl-compressed-texture-pvrtc.html:    gl.readPixels(
conformance/extensions/webgl-compressed-texture-pvrtc.html:            0, 0, actualWidth, actualHeight, gl.RGBA, gl.UNSIGNED_BYTE, actual);
deqp/modules/shared/glsShaderLibrary.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsShaderLibrary.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
conformance/extensions/ext-shader-texture-lod.html:        ext = gl.getExtension("EXT_shader_texture_lod");
conformance/extensions/ext-shader-texture-lod.html:    var supported = gl.getSupportedExtensions();
conformance/extensions/ext-shader-texture-lod.html:    gl.viewport(0, 0, canvas.width, canvas.height);
conformance/extensions/ext-shader-texture-lod.html:    var tex = gl.createTexture();
conformance/extensions/ext-shader-texture-lod.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/extensions/ext-shader-texture-lod.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);
conformance/extensions/ext-shader-texture-lod.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/extensions/ext-shader-texture-lod.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/extensions/ext-shader-texture-lod.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/extensions/ext-shader-texture-lod.html:    var loc = gl.getUniformLocation(program, "lod");
conformance/extensions/ext-shader-texture-lod.html:        gl.uniform1f(loc, ii);
conformance/extensions/ext-shader-texture-lod.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/extensions/ext-shader-texture-lod.html:    gl.getExtension("EXT_shader_texture_lod").myProperty = 2;
conformance/extensions/ext-shader-texture-lod.html:    shouldBe('gl.getExtension("EXT_shader_texture_lod").myProperty', '2');
conformance/extensions/ext-shader-texture-lod.html:    var ext = gl.getExtension("EXT_shader_texture_lod");
conformance/extensions/get-extension.html:var extensionNames = gl.getSupportedExtensions();
conformance/extensions/get-extension.html:    var extension = gl.getExtension(mixedName);
conformance/extensions/get-extension.html:        var extension2 = gl.getExtension(originalName);
conformance/extensions/get-extension.html:                gl.getExtension(prefixedVariants[jj]) === null ||
deqp/framework/referencerenderer/rrRenderState.js://    ADVANCED : 2 //!< Advanced blending mode, as defined in gl.KHR_blend_equation_advanced.
deqp/functional/gles3/es3fShaderOperatorTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderOperatorTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderOperatorTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderOperatorTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderOperatorTests.js:            var intPrecisionGL = gl.LOW_INT;
deqp/functional/gles3/es3fShaderOperatorTests.js:            var intPrecisionGL = gl.MEDIUM_INT;
deqp/functional/gles3/es3fShaderOperatorTests.js:            var intPrecisionGL = gl.HIGH_INT;
deqp/functional/gles3/es3fShaderOperatorTests.js:            var shaderTypeGL = gl.VERTEX_SHADER;
deqp/functional/gles3/es3fShaderOperatorTests.js:            var shaderTypeGL = gl.FRAGMENT_SHADER;
deqp/functional/gles3/es3fShaderOperatorTests.js:    /** @type {WebGLShaderPrecisionFormat } */ var sPrecision = gl.getShaderPrecisionFormat(shaderTypeGL, intPrecisionGL);
deqp/functional/gles3/es3fShaderOperatorTests.js:    assertMsgOptions(gl.getError() === gl.NO_ERROR, 'glGetShaderPrecisionFormat failed', false, true);
deqp/functional/gles3/es3fShaderOperatorTests.js:    const canvas = gl.canvas;
deqp/framework/common/tcuSurface.js:goog.require('framework.opengl.gluTextureUtil');
deqp/framework/common/tcuSurface.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/framework/common/tcuSurface.js:    var v = view || /** @type {Array<number>} */ (ctx.getParameter(gl.VIEWPORT));
deqp/framework/common/tcuSurface.js:    ctx.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, this.m_pixels);
deqp/functional/gles3/fbocolorbuffer/texcube_03.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/framework/referencerenderer/rrVertexAttrib.js:        // reordered formats of gl.ARB_vertex_array_bgra
deqp/functional/gles3/es3fFboInvalidateTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fFboInvalidateTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFboInvalidateTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fFboInvalidateTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (discardBufferBits & gl.COLOR_BUFFER_BIT)
deqp/functional/gles3/es3fFboInvalidateTests.js:        attachments.push(gl.COLOR);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (discardBufferBits & gl.DEPTH_BUFFER_BIT)
deqp/functional/gles3/es3fFboInvalidateTests.js:        attachments.push(gl.DEPTH);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (discardBufferBits & gl.STENCIL_BUFFER_BIT)
deqp/functional/gles3/es3fFboInvalidateTests.js:        attachments.push(gl.STENCIL);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (discardBufferBits & gl.COLOR_BUFFER_BIT)
deqp/functional/gles3/es3fFboInvalidateTests.js:        attachments.push(gl.COLOR_ATTACHMENT0);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((discardBufferBits & (gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)) == (gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT))
deqp/functional/gles3/es3fFboInvalidateTests.js:        attachments.push(gl.DEPTH_STENCIL_ATTACHMENT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    else if (discardBufferBits & gl.DEPTH_BUFFER_BIT)
deqp/functional/gles3/es3fFboInvalidateTests.js:        attachments.push(gl.DEPTH_ATTACHMENT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    else if (discardBufferBits & gl.STENCIL_BUFFER_BIT)
deqp/functional/gles3/es3fFboInvalidateTests.js:        attachments.push(gl.STENCIL_ATTACHMENT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var redBits = gl.getParameter(gl.RED_BITS);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var greenBits = gl.getParameter(gl.GREEN_BITS);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var blueBits = gl.getParameter(gl.BLUE_BITS);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var alphaBits = gl.getParameter(gl.ALPHA_BITS);
deqp/functional/gles3/es3fFboInvalidateTests.js:        case '8888' : return gl.RGBA8;
deqp/functional/gles3/es3fFboInvalidateTests.js:        case '8880' : return gl.RGB8;
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthBits = /** @type {number} */ (gl.getParameter(gl.DEPTH_BITS));
deqp/functional/gles3/es3fFboInvalidateTests.js:    var stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fFboInvalidateTests.js:        return gl.NONE;
deqp/functional/gles3/es3fFboInvalidateTests.js:        return gl.DEPTH32F_STENCIL8;
deqp/functional/gles3/es3fFboInvalidateTests.js:        return gl.DEPTH24_STENCIL8;
deqp/functional/gles3/es3fFboInvalidateTests.js:        return gl.NONE;
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.m_fboTarget = target || gl.FRAMEBUFFER;
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_buffers & gl.COLOR_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_buffers & gl.DEPTH_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_buffers & gl.STENCIL_BUFFER_BIT) == 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, this.getWidth(), this.getHeight(), 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindTexture(gl.TEXTURE_2D, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.invalidateFramebuffer(gl.FRAMEBUFFER, attachments);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_buffers & gl.COLOR_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_buffers & gl.DEPTH_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_buffers & gl.STENCIL_BUFFER_BIT) == 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.m_fboTarget = target || gl.FRAMEBUFFER;
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, this.getWidth(), this.getHeight(), 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindTexture(gl.TEXTURE_2D, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.invalidateSubFramebuffer(gl.FRAMEBUFFER, attachments, invalidateX, invalidateY, invalidateW, invalidateH);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_buffers & gl.COLOR_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_colorFmt != gl.NONE) this.checkFormatSupport(this.m_colorFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) this.checkFormatSupport(this.m_depthStencilFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthStencilFmt = this.m_depthStencilFmt != gl.NONE ? gluTextureUtil.mapGLInternalFormat(this.m_depthStencilFmt) : new tcuTexture.TextureFormat(null, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_colorFmt, this.getWidth(), this.getHeight());
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_depthStencilFmt, this.getWidth(), this.getHeight());
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.invalidateFramebuffer(gl.FRAMEBUFFER, attachments);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.COLOR_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.DEPTH_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.STENCIL_BUFFER_BIT) == 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_colorFmt != gl.NONE) this.checkFormatSupport(this.m_colorFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) this.checkFormatSupport(this.m_depthStencilFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthStencilFmt = this.m_depthStencilFmt != gl.NONE ? gluTextureUtil.mapGLInternalFormat(this.m_depthStencilFmt) : new tcuTexture.TextureFormat(null, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindTexture(gl.TEXTURE_2D, colorTex);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texImage2D(gl.TEXTURE_2D, 0, this.m_colorFmt, this.getWidth(), this.getHeight(), 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindTexture(gl.TEXTURE_2D, depthStencilTex);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, this.m_depthStencilFmt, this.getWidth(), this.getHeight(), 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthStencilTex, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.TEXTURE_2D, depthStencilTex, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.invalidateFramebuffer(gl.FRAMEBUFFER, attachments);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.DEPTH_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindTexture(gl.TEXTURE_2D, colorTex);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindTexture(gl.TEXTURE_2D, depthStencilTex);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_colorFmt != gl.NONE) this.checkFormatSupport(this.m_colorFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) this.checkFormatSupport(this.m_depthStencilFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthStencilFmt = this.m_depthStencilFmt != gl.NONE ? gluTextureUtil.mapGLInternalFormat(this.m_depthStencilFmt) : new tcuTexture.TextureFormat(null, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, this.m_colorFmt, quadSizePixels[0], quadSizePixels[1]);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, this.m_depthStencilFmt, quadSizePixels[0], quadSizePixels[1]);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.invalidateFramebuffer(gl.FRAMEBUFFER, attachments);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:                         (gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT) & ~this.m_invalidateBuffers, gl.NEAREST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.COLOR_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.DEPTH_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.STENCIL_BUFFER_BIT) == 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_colorFmt != gl.NONE) this.checkFormatSupport(this.m_colorFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) this.checkFormatSupport(this.m_depthStencilFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthStencilFmt = this.m_depthStencilFmt != gl.NONE ? gluTextureUtil.mapGLInternalFormat(this.m_depthStencilFmt) : new tcuTexture.TextureFormat(null, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindTexture(gl.TEXTURE_2D, colorTex);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texImage2D(gl.TEXTURE_2D, 0, this.m_colorFmt, this.getWidth(), this.getHeight(), 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindTexture(gl.TEXTURE_2D, depthStencilTex);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, this.m_depthStencilFmt, this.getWidth(), this.getHeight(), 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, colorTex, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthStencilTex, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.TEXTURE_2D, depthStencilTex, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.invalidateSubFramebuffer(gl.FRAMEBUFFER, attachments, invalidateX, invalidateY, invalidateW, invalidateH);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.COLOR_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindTexture(gl.TEXTURE_2D, colorTex);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindTexture(gl.TEXTURE_2D, depthStencilTex);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_colorFmt != gl.NONE) this.checkFormatSupport(this.m_colorFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) this.checkFormatSupport(this.m_depthStencilFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthStencilFmt = this.m_depthStencilFmt != gl.NONE ? gluTextureUtil.mapGLInternalFormat(this.m_depthStencilFmt) : new tcuTexture.TextureFormat(null, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_colorFmt, this.getWidth(), this.getHeight());
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_depthStencilFmt, this.getWidth(), this.getHeight());
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clearBufferfv(gl.COLOR, 0, deMath.add(deMath.multiply([0, 0, 0, 1], cScale), cBias));
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clearBufferfi(gl.DEPTH_STENCIL, 0, 1, 0);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.invalidateSubFramebuffer(gl.FRAMEBUFFER, attachments, invalidateX, invalidateY, invalidateW, invalidateH);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_invalidateBuffers & gl.COLOR_BUFFER_BIT)
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.clearBufferfv(gl.COLOR, 0, deMath.add(deMath.multiply([0, 1, 0, 1], cScale), cBias));
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(this.m_invalidateBuffers & ~gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_colorFmt != gl.NONE) this.checkFormatSupport(this.m_colorFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) this.checkFormatSupport(this.m_depthStencilFmt);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthStencilFmt = this.m_depthStencilFmt != gl.NONE ? gluTextureUtil.mapGLInternalFormat(this.m_depthStencilFmt) : new tcuTexture.TextureFormat(null, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, this.m_colorFmt, quadSizePixels[0], quadSizePixels[1]);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_depthStencilFmt != gl.NONE) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, this.m_depthStencilFmt, quadSizePixels[0], quadSizePixels[1]);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.invalidateSubFramebuffer(gl.FRAMEBUFFER, attachments, invalidateX, invalidateY, invalidateW, invalidateH);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:                         (gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT) & ~this.m_invalidateBuffers, gl.NEAREST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.COLOR_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.DEPTH_BUFFER_BIT) != 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if ((this.m_invalidateBuffers & gl.STENCIL_BUFFER_BIT) == 0) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var colorFormat = gl.RGBA8;
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthStencilFormat = gl.DEPTH24_STENCIL8;
deqp/functional/gles3/es3fFboInvalidateTests.js:    var isDiscarded = (this.m_boundTarget == gl.FRAMEBUFFER) ||
deqp/functional/gles3/es3fFboInvalidateTests.js:                                    (this.m_invalidateTarget == gl.FRAMEBUFFER && this.m_boundTarget == gl.DRAW_FRAMEBUFFER) ||
deqp/functional/gles3/es3fFboInvalidateTests.js:    var isColorDiscarded = isDiscarded && hasAttachment(this.m_invalidateAttachments, gl.COLOR_ATTACHMENT0);
deqp/functional/gles3/es3fFboInvalidateTests.js:    var isDepthDiscarded = isDiscarded && (hasAttachment(this.m_invalidateAttachments, gl.DEPTH_ATTACHMENT) || hasAttachment(this.m_invalidateAttachments, gl.DEPTH_STENCIL_ATTACHMENT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    var isStencilDiscarded = isDiscarded && (hasAttachment(this.m_invalidateAttachments, gl.STENCIL_ATTACHMENT) || hasAttachment(this.m_invalidateAttachments, gl.DEPTH_STENCIL_ATTACHMENT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindRenderbuffer(gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, this.getWidth(), this.getHeight());
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindRenderbuffer(gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.renderbufferStorage(gl.RENDERBUFFER, depthStencilFormat, this.getWidth(), this.getHeight());
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, depthStencilRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_boundTarget != gl.FRAMEBUFFER) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        var dummyTarget = this.m_boundTarget == gl.DRAW_FRAMEBUFFER ? gl.READ_FRAMEBUFFER : gl.DRAW_FRAMEBUFFER;
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, dummyColorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, 64, 64);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.framebufferRenderbuffer(dummyTarget, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, dummyColorRbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (this.m_boundTarget != gl.FRAMEBUFFER)
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboInvalidateTests.js:        ctx.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.enable(gl.BLEND);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fFboInvalidateTests.js:    ctx.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('render_color', 'Rendering after invalidating colorbuffer', gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('render_depth', 'Rendering after invalidating depthbuffer', gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('render_stencil', 'Rendering after invalidating stencilbuffer', gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('render_depth_stencil', 'Rendering after invalidating depth- and stencilbuffers', gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('render_all', 'Rendering after invalidating all buffers', gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferBindCase('bind_color', 'Binding fbo after invalidating colorbuffer', gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferBindCase('bind_depth', 'Binding fbo after invalidating depthbuffer', gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferBindCase('bind_stencil', 'Binding fbo after invalidating stencilbuffer', gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferBindCase('bind_depth_stencil', 'Binding fbo after invalidating depth- and stencilbuffers', gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferBindCase('bind_all', 'Binding fbo after invalidating all buffers', gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferRenderCase('sub_render_color', 'Rendering after invalidating colorbuffer', gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferRenderCase('sub_render_depth', 'Rendering after invalidating depthbuffer', gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferRenderCase('sub_render_stencil', 'Rendering after invalidating stencilbuffer', gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferRenderCase('sub_render_depth_stencil', 'Rendering after invalidating depth- and stencilbuffers', gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferRenderCase('sub_render_all', 'Rendering after invalidating all buffers', gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferBindCase('sub_bind_color', 'Binding fbo after invalidating colorbuffer', gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferBindCase('sub_bind_depth', 'Binding fbo after invalidating depthbuffer', gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferBindCase('sub_bind_stencil', 'Binding fbo after invalidating stencilbuffer', gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferBindCase('sub_bind_depth_stencil', 'Binding fbo after invalidating depth- and stencilbuffers', gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultSubFramebufferBindCase('sub_bind_all', 'Binding fbo after invalidating all buffers', gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('draw_framebuffer_color', 'Invalidating gl.COLOR in gl.DRAW_FRAMEBUFFER', gl.COLOR_BUFFER_BIT, gl.DRAW_FRAMEBUFFER));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('draw_framebuffer_all', 'Invalidating all in gl.DRAW_FRAMEBUFFER', gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT, gl.DRAW_FRAMEBUFFER));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('read_framebuffer_color', 'Invalidating gl.COLOR in gl.READ_FRAMEBUFFER', gl.COLOR_BUFFER_BIT, gl.READ_FRAMEBUFFER));
deqp/functional/gles3/es3fFboInvalidateTests.js:    defaultFbGroup.addChild(new es3fFboInvalidateTests.InvalidateDefaultFramebufferRenderCase('read_framebuffer_all', 'Invalidating all in gl.READ_FRAMEBUFFER', gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT, gl.READ_FRAMEBUFFER));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboRenderCase('render_none', '', gl.RGBA8, gl.DEPTH24_STENCIL8, 0));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboRenderCase('render_color', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboRenderCase('render_depth', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboRenderCase('render_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboRenderCase('render_depth_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboRenderCase('render_all', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindReadCase('unbind_read_color', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindReadCase('unbind_read_depth', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindReadCase('unbind_read_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindReadCase('unbind_read_depth_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindReadCase('unbind_read_color_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (getCompatibleDepthStencilFormat() !== gl.NONE) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindBlitCase('unbind_blit_color', '', 0, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindBlitCase('unbind_blit_depth', '', 0, gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindBlitCase('unbind_blit_stencil', '', 0, gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindBlitCase('unbind_blit_depth_stencil', '', 0, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindBlitCase('unbind_blit_msaa_color', '', 4, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindBlitCase('unbind_blit_msaa_depth', '', 4, gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindBlitCase('unbind_blit_msaa_stencil', '', 4, gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        wholeFboGroup.addChild(new es3fFboInvalidateTests.InvalidateFboUnbindBlitCase('unbind_blit_msaa_depth_stencil', '', 4, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboRenderCase('render_none', '', gl.RGBA8, gl.DEPTH24_STENCIL8, 0));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboRenderCase('render_color', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboRenderCase('render_depth', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboRenderCase('render_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboRenderCase('render_depth_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboRenderCase('render_all', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindReadCase('unbind_read_color', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindReadCase('unbind_read_depth', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindReadCase('unbind_read_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindReadCase('unbind_read_depth_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindReadCase('unbind_read_color_stencil', '', gl.RGBA8, gl.DEPTH24_STENCIL8, gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:    if (getCompatibleDepthStencilFormat() !== gl.NONE) {
deqp/functional/gles3/es3fFboInvalidateTests.js:        subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindBlitCase('unbind_blit_color', '', 0, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindBlitCase('unbind_blit_depth', '', 0, gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindBlitCase('unbind_blit_stencil', '', 0, gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindBlitCase('unbind_blit_depth_stencil', '', 0, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindBlitCase('unbind_blit_msaa_color', '', 4, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindBlitCase('unbind_blit_msaa_depth', '', 4, gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindBlitCase('unbind_blit_msaa_stencil', '', 4, gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        subFboGroup.addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindBlitCase('unbind_blit_msaa_depth_stencil', '', 4, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA32I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA32UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA16I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA16UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA8,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA8I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA8UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.SRGB8_ALPHA8,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGB10_A2,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGB10_A2UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA4,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGB5_A1,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGB8,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGB565,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG32I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG32UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG16I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG16UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG8,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG8I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG8UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R32I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R32UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R16I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R16UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R8,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R8I,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R8UI,
deqp/functional/gles3/es3fFboInvalidateTests.js:        // gl.EXT_color_buffer_float
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA32F,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RGBA16F,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R11F_G11F_B10F,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG32F,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.RG16F,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R32F,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.R16F
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.DEPTH_COMPONENT32F,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.DEPTH_COMPONENT24,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.DEPTH_COMPONENT16,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.DEPTH32F_STENCIL8,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.DEPTH24_STENCIL8,
deqp/functional/gles3/es3fFboInvalidateTests.js:        gl.STENCIL_INDEX8
deqp/functional/gles3/es3fFboInvalidateTests.js:        formatGroup[ndx % numFormatSubGroups].addChild(new es3fFboInvalidateTests.InvalidateSubFboUnbindReadCase(es3fFboTestUtil.getFormatName(colorFormats[ndx]), '', colorFormats[ndx], gl.NONE, gl.COLOR_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        formatGroup[ndx % numFormatSubGroups].addChild(new es3fFboInvalidateTests.InvalidateSubFboRenderCase(es3fFboTestUtil.getFormatName(depthStencilFormats[ndx]), '', gl.RGBA8, depthStencilFormats[ndx], gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['framebuffer_framebuffer', gl.FRAMEBUFFER, gl.FRAMEBUFFER],
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['framebuffer_read_framebuffer', gl.FRAMEBUFFER, gl.READ_FRAMEBUFFER],
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['framebuffer_draw_framebuffer', gl.FRAMEBUFFER, gl.DRAW_FRAMEBUFFER],
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['read_framebuffer_framebuffer', gl.READ_FRAMEBUFFER, gl.FRAMEBUFFER],
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['read_framebuffer_read_framebuffer', gl.READ_FRAMEBUFFER, gl.READ_FRAMEBUFFER],
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['read_framebuffer_draw_framebuffer', gl.READ_FRAMEBUFFER, gl.DRAW_FRAMEBUFFER],
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['draw_framebuffer_framebuffer', gl.DRAW_FRAMEBUFFER, gl.FRAMEBUFFER],
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['draw_framebuffer_read_framebuffer', gl.DRAW_FRAMEBUFFER, gl.READ_FRAMEBUFFER],
deqp/functional/gles3/es3fFboInvalidateTests.js:        ['draw_framebuffer_draw_framebuffer', gl.DRAW_FRAMEBUFFER, gl.DRAW_FRAMEBUFFER]
deqp/functional/gles3/es3fFboInvalidateTests.js:    var colorAttachment = [gl.COLOR_ATTACHMENT0];
deqp/functional/gles3/es3fFboInvalidateTests.js:    var depthStencilAttachment = [gl.DEPTH_STENCIL_ATTACHMENT];
deqp/functional/gles3/es3fFboInvalidateTests.js:    var allAttachments = [gl.COLOR_ATTACHMENT0, gl.DEPTH_ATTACHMENT, gl.STENCIL_ATTACHMENT];
deqp/modules/shared/glsDrawTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/modules/shared/glsDrawTests.js:goog.require('framework.opengl.gluStrUtil');
deqp/modules/shared/glsDrawTests.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/modules/shared/glsDrawTests.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/modules/shared/glsDrawTests.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/modules/shared/glsDrawTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/modules/shared/glsDrawTests.js:    var gluStrUtil = framework.opengl.gluStrUtil;
deqp/modules/shared/glsDrawTests.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/modules/shared/glsDrawTests.js:    var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/modules/shared/glsDrawTests.js:    var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/modules/shared/glsDrawTests.js:            gl.ELEMENT_ARRAY_BUFFER, // TARGET_ELEMENT_ARRAY = 0,
deqp/modules/shared/glsDrawTests.js:            gl.ARRAY_BUFFER // TARGET_ARRAY,
deqp/modules/shared/glsDrawTests.js:            gl.DYNAMIC_DRAW, // USAGE_DYNAMIC_DRAW = 0,
deqp/modules/shared/glsDrawTests.js:            gl.STATIC_DRAW, // USAGE_STATIC_DRAW,
deqp/modules/shared/glsDrawTests.js:            gl.STREAM_DRAW, // USAGE_STREAM_DRAW,
deqp/modules/shared/glsDrawTests.js:            gl.STREAM_READ, // USAGE_STREAM_READ,
deqp/modules/shared/glsDrawTests.js:            gl.STREAM_COPY, // USAGE_STREAM_COPY,
deqp/modules/shared/glsDrawTests.js:            gl.STATIC_READ, // USAGE_STATIC_READ,
deqp/modules/shared/glsDrawTests.js:            gl.STATIC_COPY, // USAGE_STATIC_COPY,
deqp/modules/shared/glsDrawTests.js:            gl.DYNAMIC_READ, // USAGE_DYNAMIC_READ,
deqp/modules/shared/glsDrawTests.js:            gl.DYNAMIC_COPY // USAGE_DYNAMIC_COPY,
deqp/modules/shared/glsDrawTests.js:            gl.FLOAT, // INPUTTYPE_FLOAT = 0,
deqp/modules/shared/glsDrawTests.js:            gl.BYTE, // INPUTTYPE_BYTE,
deqp/modules/shared/glsDrawTests.js:            gl.SHORT, // INPUTTYPE_SHORT,
deqp/modules/shared/glsDrawTests.js:            gl.UNSIGNED_BYTE, // INPUTTYPE_UNSIGNED_BYTE,
deqp/modules/shared/glsDrawTests.js:            gl.UNSIGNED_SHORT, // INPUTTYPE_UNSIGNED_SHORT,
deqp/modules/shared/glsDrawTests.js:            gl.INT, // INPUTTYPE_INT,
deqp/modules/shared/glsDrawTests.js:            gl.UNSIGNED_INT, // INPUTTYPE_UNSIGNED_INT,
deqp/modules/shared/glsDrawTests.js:            gl.HALF_FLOAT, // INPUTTYPE_HALF,
deqp/modules/shared/glsDrawTests.js:            gl.UNSIGNED_INT_2_10_10_10_REV, // INPUTTYPE_UNSIGNED_INT_2_10_10_10,
deqp/modules/shared/glsDrawTests.js:            gl.INT_2_10_10_10_REV // INPUTTYPE_INT_2_10_10_10,
deqp/modules/shared/glsDrawTests.js:            gl.POINTS, // PRIMITIVE_POINTS = 0,
deqp/modules/shared/glsDrawTests.js:            gl.TRIANGLES, // PRIMITIVE_TRIANGLES,
deqp/modules/shared/glsDrawTests.js:            gl.TRIANGLE_FAN, // PRIMITIVE_TRIANGLE_FAN,
deqp/modules/shared/glsDrawTests.js:            gl.TRIANGLE_STRIP, // PRIMITIVE_TRIANGLE_STRIP,
deqp/modules/shared/glsDrawTests.js:            gl.LINES, // PRIMITIVE_LINES
deqp/modules/shared/glsDrawTests.js:            gl.LINE_STRIP, // PRIMITIVE_LINE_STRIP
deqp/modules/shared/glsDrawTests.js:            gl.LINE_LOOP
deqp/modules/shared/glsDrawTests.js:            gl.UNSIGNED_BYTE, // INDEXTYPE_BYTE = 0,
deqp/modules/shared/glsDrawTests.js:            gl.UNSIGNED_SHORT, // INDEXTYPE_SHORT,
deqp/modules/shared/glsDrawTests.js:            gl.UNSIGNED_INT // INDEXTYPE_INT,
deqp/modules/shared/glsDrawTests.js:        this.m_ctx.clear(gl.COLOR_BUFFER_BIT);
deqp/modules/shared/glsDrawTests.js:            /** @type {number} */ (gl.getParameter(gl.RED_BITS)), /** @type {number} */ (gl.getParameter(gl.GREEN_BITS)),
deqp/modules/shared/glsDrawTests.js:            /** @type {number} */ (gl.getParameter(gl.BLUE_BITS)), /** @type {number} */ (gl.getParameter(gl.ALPHA_BITS))
deqp/modules/shared/glsDrawTests.js:        var renderTargetWidth = Math.min(glsDrawTests.MAX_RENDER_TARGET_SIZE, gl.canvas.width);
deqp/modules/shared/glsDrawTests.js:        var renderTargetHeight = Math.min(glsDrawTests.MAX_RENDER_TARGET_SIZE, gl.canvas.height);
deqp/modules/shared/glsDrawTests.js:        if (/** @type {number} */ (gl.getParameter(gl.SAMPLES)) > 1) {
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    var textureLoc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "During Initialization");
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.colorMask(1, 1, 1, 1);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.disable(gl.BLEND);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.clearColor(1, 0, 0, 1);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    var texture = gl.createTexture();
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:    gl.uniform1i(textureLoc, 0);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:          gl.clearColor(texColor[0], texColor[1], texColor[2], texColor[3]);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, xx, yy, 2, 2, 0);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, xx, yy, 2, 2);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:          gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
conformance/textures/misc/copy-tex-image-and-sub-image-2d.html:          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/limits/gl-line-width.html:var lineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);
conformance/limits/gl-line-width.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/limits/gl-line-width.html:var curLineWidth = gl.getParameter(gl.LINE_WIDTH);
conformance/limits/gl-line-width.html:gl.lineWidth(0);
conformance/limits/gl-line-width.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "Should not be able to set lineWidth to zero");
conformance/limits/gl-line-width.html:shouldBe('gl.getParameter(gl.LINE_WIDTH)', 'curLineWidth'); // Previous value should be preserved
conformance/limits/gl-line-width.html:gl.lineWidth(-1);
conformance/limits/gl-line-width.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "Should not be able to set lineWidth to a negative value");
conformance/limits/gl-line-width.html:shouldBe('gl.getParameter(gl.LINE_WIDTH)', 'curLineWidth'); // Previous value should be preserved
conformance/limits/gl-line-width.html:gl.lineWidth(NaN);
conformance/limits/gl-line-width.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "Should not be able to set lineWidth to NaN");
conformance/limits/gl-line-width.html:shouldBe('gl.getParameter(gl.LINE_WIDTH)', 'curLineWidth'); // Previous value should be preserved
conformance/limits/gl-line-width.html:gl.lineWidth(lineWidthRange[1]);
conformance/limits/gl-line-width.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be able to set lineWidth to the max supported value");
conformance/limits/gl-line-width.html:shouldBe('gl.getParameter(gl.LINE_WIDTH)', 'lineWidthRange[1]');
conformance/limits/gl-line-width.html:gl.lineWidth(lineWidthRange[0]);
conformance/limits/gl-line-width.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be able to set lineWidth to the min supported value");
conformance/limits/gl-line-width.html:shouldBe('gl.getParameter(gl.LINE_WIDTH)', 'lineWidthRange[0]');
conformance/limits/gl-line-width.html:gl.lineWidth(lineWidthRange[1]+1);
conformance/limits/gl-line-width.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be able to set lineWidth to the above max supported value");
conformance/limits/gl-line-width.html:shouldBe('gl.getParameter(gl.LINE_WIDTH)', 'lineWidthRange[1]+1');
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:          case gl.RED:
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:              (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP'));
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        var targets = [gl.TEXTURE_2D];
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:            targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat], image.width, image.height, 0,
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                gl.texSubImage2D(targets[tt], 0, 0, 0, gl[pixelFormat], gl[pixelType], image);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat], gl[pixelFormat], gl[pixelType], image);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:            loc = gl.getUniformLocation(program, "face");
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:            if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:                gl.uniform1i(loc, targets[tt]);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:            wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        runTestOnBindingTarget(image, gl.TEXTURE_2D, program);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        runTestOnBindingTarget(image, gl.TEXTURE_CUBE_MAP, program);
js/tests/tex-image-and-sub-image-2d-with-svg-image.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/functional/gles3/es3fIntegerStateQueryTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.m_transformfeedback = gl.createTransformFeedback();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLShader} */ var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.shaderSource(shaderVert, transformFeedbackTestVertSource);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.compileShader(shaderVert);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var compileStatus = /** @type {boolean} */ (gl.getShaderParameter(shaderVert, gl.COMPILE_STATUS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLShader} */ var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.shaderSource(shaderFrag, transformFeedbackTestFragSource);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                compileStatus = /** @type {boolean} */ (gl.getShaderParameter(shaderFrag, gl.COMPILE_STATUS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLProgram} */ var shaderProg = gl.createProgram();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.attachShader(shaderProg, shaderVert);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.attachShader(shaderProg, shaderFrag);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.transformFeedbackVaryings(shaderProg, transform_feedback_outputs, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.linkProgram(shaderProg);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var linkStatus = /** @type {boolean} */ (gl.getProgramParameter(shaderProg, gl.LINK_STATUS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.m_transformfeedback);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLBuffer} */ var feedbackBufferId = gl.createBuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, feedbackBufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, new Float32Array(16), gl.DYNAMIC_READ);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, feedbackBufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.useProgram(shaderProg);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteTransformFeedback(this.m_transformfeedback);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteBuffer(feedbackBufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteProgram(shaderProg);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_BINDING, null), 'beforeTransformFeedbackTest');
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_BINDING, this.m_transformfeedback), 'testTransformFeedback');
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_BINDING, null), 'afterTransformFeedbackTest');
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {number} */ var expectedSampleBuffers = (/** @type {number} */ (gl.getParameter(gl.SAMPLES)) > 1) ? 1 : 0;
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.SAMPLE_BUFFERS, expectedSampleBuffers));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var numSamples = /** @type {number} */ (gl.getParameter(gl.SAMPLES));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.SAMPLES, numSamples));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verifyAnyOf(gl.SAMPLES, validSamples));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(this.m_targetName, gl.DONT_CARE));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.hint(this.m_targetName, gl.NICEST);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(this.m_targetName, gl.NICEST));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.hint(this.m_targetName, gl.FASTEST);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(this.m_targetName, gl.FASTEST));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.hint(this.m_targetName, gl.DONT_CARE);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(this.m_targetName, gl.DONT_CARE));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DEPTH_FUNC, gl.LESS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var depthFunctions = [gl.NEVER, gl.ALWAYS, gl.LESS, gl.LEQUAL, gl.EQUAL, gl.GREATER, gl.GEQUAL, gl.NOTEQUAL];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.depthFunc(depthFunctions[ndx]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.DEPTH_FUNC, depthFunctions[ndx]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.CULL_FACE_MODE, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var cullFaces = [gl.FRONT, gl.BACK, gl.FRONT_AND_BACK];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.cullFace(cullFaces[ndx]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.CULL_FACE_MODE, cullFaces[ndx]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.FRONT_FACE, gl.CCW));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var frontFaces = [gl.CW, gl.CCW];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.frontFace(frontFaces[ndx]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.FRONT_FACE, frontFaces[ndx]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var maxViewportDimensions = /** @type {Array<number>} */ (gl.getParameter(gl.MAX_VIEWPORT_DIMS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.VIEWPORT, new Int32Array([0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight])));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.viewport(x, y, width, height);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.VIEWPORT, new Int32Array([x, y, width, height])));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verifyMask(gl.SCISSOR_BOX, [0, 0, 0, 0], [true, true, false, false]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.scissor(left, bottom, width, height);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.SCISSOR_BOX, new Int32Array([left, bottom, width, height])));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verifyGreaterOrEqual(gl.MAX_VIEWPORT_DIMS, [gl.drawingBufferWidth, gl.drawingBufferHeight]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilFunc(gl.ALWAYS, ref, 0); // mask should not affect the REF
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilFunc(gl.ALWAYS, ref, ref);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilFuncSeparate(this.m_stencilFuncTargetFace, gl.ALWAYS, ref, 0);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilFuncSeparate(this.m_stencilFuncTargetFace, gl.ALWAYS, ref, ref);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(this.m_stencilOpName, gl.KEEP));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var stencilOpValues = [gl.KEEP, gl.ZERO, gl.REPLACE, gl.INCR, gl.DECR, gl.INVERT, gl.INCR_WRAP, gl.DECR_WRAP];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_FAIL:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_BACK_FAIL:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.stencilOp(stencilOpValue, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_PASS_DEPTH_FAIL:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_BACK_PASS_DEPTH_FAIL:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.stencilOp(gl.KEEP, stencilOpValue, gl.KEEP);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_PASS_DEPTH_PASS:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_BACK_PASS_DEPTH_PASS:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.stencilOp(gl.KEEP, gl.KEEP, stencilOpValue);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_FAIL:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_BACK_FAIL:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.stencilOpSeparate(this.m_stencilOpFace, stencilOpValue, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_PASS_DEPTH_FAIL:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_BACK_PASS_DEPTH_FAIL:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.stencilOpSeparate(this.m_stencilOpFace, gl.KEEP, stencilOpValue, gl.KEEP);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_PASS_DEPTH_PASS:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.STENCIL_BACK_PASS_DEPTH_PASS:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.stencilOpSeparate(this.m_stencilOpFace, gl.KEEP, gl.KEEP, stencilOpValue);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.STENCIL_FUNC, gl.ALWAYS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var stencilfuncValues = [gl.NEVER, gl.ALWAYS, gl.LESS, gl.LEQUAL, gl.EQUAL, gl.GEQUAL, gl.GREATER, gl.NOTEQUAL];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilFunc(stencilfuncValues[ndx], 0, 0);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.STENCIL_FUNC, stencilfuncValues[ndx]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.STENCIL_BACK_FUNC, stencilfuncValues[ndx]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.stencilFunc(gl.ALWAYS, 0, 0);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(this.m_stencilFuncName, gl.ALWAYS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var stencilfuncValues = [gl.NEVER, gl.ALWAYS, gl.LESS, gl.LEQUAL, gl.EQUAL, gl.GEQUAL, gl.GREATER, gl.NOTEQUAL];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilFuncSeparate(this.m_stencilFuncFace, stencilfuncValues[ndx], 0, 0);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.stencilFuncSeparate(this.m_stencilFuncFace, gl.ALWAYS, 0, 0);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilFunc(gl.ALWAYS, 0, mask);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilFuncSeparate(this.m_stencilFuncTargetFace, gl.ALWAYS, 0, mask);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilMask(mask);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.stencilMaskSeparate(this.m_stencilTargetFace, mask);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.pixelStorei(this.m_testTargetName, referenceValue);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.pixelStorei(this.m_testTargetName, referenceValue);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.ZERO, gl.ONE, gl.SRC_COLOR, gl.ONE_MINUS_SRC_COLOR, gl.DST_COLOR, gl.ONE_MINUS_DST_COLOR,
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.DST_ALPHA, gl.ONE_MINUS_DST_ALPHA, gl.CONSTANT_COLOR,
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.ONE_MINUS_CONSTANT_COLOR, gl.CONSTANT_ALPHA, gl.ONE_MINUS_CONSTANT_ALPHA,
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.SRC_ALPHA_SATURATE
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_SRC_RGB:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_SRC_ALPHA:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.blendFunc(func, gl.ZERO);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_DST_RGB:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_DST_ALPHA:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.blendFunc(gl.ZERO, func);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.blendFunc(gl.ONE, gl.ZERO);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_SRC_RGB:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.blendFuncSeparate(func, gl.ZERO, gl.ZERO, gl.ZERO);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_DST_RGB:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.blendFuncSeparate(gl.ZERO, func, gl.ZERO, gl.ZERO);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_SRC_ALPHA:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.blendFuncSeparate(gl.ZERO, gl.ZERO, func, gl.ZERO);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_DST_ALPHA:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ZERO, func);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var blendFuncValues = [gl.FUNC_ADD, gl.FUNC_SUBTRACT, gl.FUNC_REVERSE_SUBTRACT, gl.MIN, gl.MAX];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.blendEquation(equation);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.blendEquation(this.m_initialValue);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_EQUATION_RGB:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.blendEquationSeparate(equation, gl.FUNC_ADD);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        case gl.BLEND_EQUATION_ALPHA:
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                                gl.blendEquationSeparate(gl.FUNC_ADD, equation);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                if (!framework.opengl.gluTextureUtil.enableCompressedTextureETC()) {
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var queryResult = /** @type {Array<number>} */ (gl.getParameter(this.m_testTargetName));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.COMPRESSED_R11_EAC, gl.COMPRESSED_SIGNED_R11_EAC, gl.COMPRESSED_RG11_EAC, gl.COMPRESSED_SIGNED_RG11_EAC, gl.COMPRESSED_RGB8_ETC2, gl.COMPRESSED_SRGB8_ETC2,
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, gl.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, gl.COMPRESSED_RGBA8_ETC2_EAC, gl.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.CURRENT_PROGRAM, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLShader} */ var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.compileShader(shaderVert);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var compileStatus = /** @type {boolean} */ (gl.getShaderParameter(shaderVert, gl.COMPILE_STATUS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLShader} */ var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                compileStatus = /** @type {boolean} */ (gl.getShaderParameter(shaderFrag, gl.COMPILE_STATUS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLProgram} */ var shaderProg = gl.createProgram();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.attachShader(shaderProg, shaderVert);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.attachShader(shaderProg, shaderFrag);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.linkProgram(shaderProg);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var linkStatus = /** @type {boolean} */ (gl.getProgramParameter(shaderProg, gl.LINK_STATUS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.useProgram(shaderProg);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.CURRENT_PROGRAM, shaderProg));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteProgram(shaderProg);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.CURRENT_PROGRAM, shaderProg));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.useProgram(null);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.CURRENT_PROGRAM, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.VERTEX_ARRAY_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLVertexArrayObject} */ var vertexArrayObject = gl.createVertexArray();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindVertexArray(vertexArrayObject);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.VERTEX_ARRAY_BINDING, vertexArrayObject));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteVertexArray(vertexArrayObject);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.VERTEX_ARRAY_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLBuffer} */ var bufferObject = gl.createBuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindBuffer(this.m_bufferType, bufferObject);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteBuffer(bufferObject);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLBuffer} */ var bufferObject = gl.createBuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferObject);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, bufferObject));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteBuffer(bufferObject);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        vaos[ndx] = gl.createVertexArray();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        buffers[ndx] = gl.createBuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindVertexArray(vaos[0]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers[0]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, buffers[0]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindVertexArray(vaos[1]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers[1]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, buffers[1]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindVertexArray(vaos[0]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, buffers[0]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.deleteBuffer(buffers[ndx]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindVertexArray(vaos[1]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ELEMENT_ARRAY_BUFFER_BINDING, buffers[1]));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.deleteVertexArray(vaos[ndx]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.STENCIL_CLEAR_VALUE, 0));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.clearStencil(ref); // mask should not affect the REF
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.STENCIL_CLEAR_VALUE, ref));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.ACTIVE_TEXTURE, gl.TEXTURE0));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var textureUnits = /** @type {number} */ (gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.activeTexture(gl.TEXTURE0 + ndx);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        this.check(glsStateQuery.verify(gl.ACTIVE_TEXTURE, gl.TEXTURE0 + ndx));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                 gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.RENDERBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLRenderbuffer} */ var renderBuffer = gl.createRenderbuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.RENDERBUFFER_BINDING, renderBuffer));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteRenderbuffer(renderBuffer);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.RENDERBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.SAMPLER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLSampler} */ var sampler = gl.createSampler();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindSampler(0, sampler);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.SAMPLER_BINDING, sampler));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteSampler(sampler);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.SAMPLER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLSampler} */ var samplerA = gl.createSampler();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLSampler} */ var samplerB = gl.createSampler();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindSampler(1, samplerA);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindSampler(2, samplerB);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.SAMPLER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.activeTexture(gl.TEXTURE1);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.SAMPLER_BINDING, samplerA));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.activeTexture(gl.TEXTURE2);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.SAMPLER_BINDING, samplerB));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteSampler(samplerB);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteSampler(samplerA);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.activeTexture(gl.TEXTURE0);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLTexture} */ var texture = gl.createTexture();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindTexture(this.m_textureType, texture);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteTexture(texture);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLFramebuffer} */ var framebufferId = gl.createFramebuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_FRAMEBUFFER_BINDING,        framebufferId));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.FRAMEBUFFER_BINDING,        framebufferId));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_FRAMEBUFFER_BINDING,        framebufferId));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindFramebuffer(gl.READ_FRAMEBUFFER, framebufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_FRAMEBUFFER_BINDING,        framebufferId));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_FRAMEBUFFER_BINDING,        framebufferId));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.FRAMEBUFFER_BINDING,        framebufferId));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_FRAMEBUFFER_BINDING,        framebufferId));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteFramebuffer(framebufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_FRAMEBUFFER_BINDING, null));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.UNSIGNED_BYTE, gl.BYTE, gl.UNSIGNED_SHORT, gl.SHORT,
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.UNSIGNED_INT, gl.INT, gl.HALF_FLOAT, gl.FLOAT, gl.UNSIGNED_SHORT_5_6_5,
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.UNSIGNED_SHORT_4_4_4_4, gl.UNSIGNED_SHORT_5_5_5_1,
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.UNSIGNED_INT_2_10_10_10_REV, gl.UNSIGNED_INT_10F_11F_11F_REV
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.RGBA, gl.RGBA_INTEGER, gl.RGB, gl.RGB_INTEGER,
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        gl.RG, gl.RG_INTEGER, gl.RED, gl.RED_INTEGER
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                // if (this.m_context.getContextInfo().isExtensionSupported("gl.EXT_texture_format_BGRA8888") ||
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         this.m_context.getContextInfo().isExtensionSupported("gl.APPLE_texture_format_BGRA8888"))
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorFormats.push(gl.BGRA);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                // if (this.m_context.getContextInfo().isExtensionSupported("gl.EXT_read_format_bgra")) {
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorFormats.push(gl.BGRA);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorTypes.push(gl.UNSIGNED_SHORT_4_4_4_4_REV);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorTypes.push(gl.UNSIGNED_SHORT_1_5_5_5_REV);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                // if (this.m_context.getContextInfo().isExtensionSupported("gl.IMG_read_format")) {
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorFormats.push(gl.BGRA);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorTypes.push(gl.UNSIGNED_SHORT_4_4_4_4_REV);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                // if (this.m_context.getContextInfo().isExtensionSupported("gl.NV_sRGB_formats")) {
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorFormats.push(gl.SLUMINANCE_NV);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorFormats.push(gl.SLUMINANCE_ALPHA_NV);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                // if (this.m_context.getContextInfo().isExtensionSupported("gl.NV_bgr")) {
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                //         validColorFormats.push(gl.BGR_NV);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verifyAnyOf(gl.IMPLEMENTATION_COLOR_READ_TYPE, validColorTypes));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verifyAnyOf(gl.IMPLEMENTATION_COLOR_READ_FORMAT, validColorFormats));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var validInitialValues = [gl.BACK, gl.NONE];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verifyAnyOf(gl.READ_BUFFER, validInitialValues));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.readBuffer(gl.NONE);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_BUFFER, gl.NONE));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.readBuffer(gl.BACK);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_BUFFER, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                // test gl.READ_BUFFER with framebuffers
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLFramebuffer} */ var framebufferId = gl.createFramebuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLRenderbuffer} */ var renderbuffer_id = gl.createRenderbuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer_id);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, 128, 128);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindFramebuffer(gl.READ_FRAMEBUFFER, framebufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbuffer_id);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_BUFFER, gl.COLOR_ATTACHMENT0));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteFramebuffer(framebufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteRenderbuffer(renderbuffer_id);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.READ_BUFFER, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var validInitialValues = [gl.BACK, gl.NONE];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verifyAnyOf(gl.DRAW_BUFFER0, validInitialValues));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {number} */ var bufs = gl.NONE;
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.drawBuffers([bufs]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_BUFFER0, gl.NONE));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                bufs = gl.BACK;
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.drawBuffers([bufs]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_BUFFER0, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                // test gl.DRAW_BUFFER with framebuffers
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {WebGLFramebuffer} */ var framebufferId = gl.createFramebuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        renderbuffer_ids[ndx] = gl.createRenderbuffer();
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer_ids[0]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, 128, 128);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer_ids[1]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, 128, 128);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbuffer_ids[0]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.RENDERBUFFER, renderbuffer_ids[1]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_BUFFER0, gl.COLOR_ATTACHMENT0));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {Array<number>} */ var bufTargets = [gl.NONE, gl.COLOR_ATTACHMENT1];
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.drawBuffers(bufTargets);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_BUFFER0, gl.NONE));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_BUFFER1, gl.COLOR_ATTACHMENT1));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteFramebuffer(framebufferId);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteRenderbuffer(renderbuffer_ids[0]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                gl.deleteRenderbuffer(renderbuffer_ids[1]);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.check(glsStateQuery.verify(gl.DRAW_BUFFER0, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var uniformBlockSize = /** @type {number} */ (gl.getParameter(gl.MAX_UNIFORM_BLOCK_SIZE));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var maxUniformBlocks = /** @type {number} */ (gl.getParameter(this.m_targetMaxUniformBlocksName));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                var maxUniformComponents = /** @type {number} */ (gl.getParameter(this.m_targetMaxUniformComponentsName));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('subpixel_bits', 'SUBPIXEL_BITS has minimum value of 4', gl.SUBPIXEL_BITS, 4),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_3d_texture_size', 'MAX_3D_TEXTURE_SIZE has minimum value of 256', gl.MAX_3D_TEXTURE_SIZE, 256),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_texture_size', 'MAX_TEXTURE_SIZE has minimum value of 2048', gl.MAX_TEXTURE_SIZE, 2048),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_array_texture_layers', 'MAX_ARRAY_TEXTURE_LAYERS has minimum value of 256', gl.MAX_ARRAY_TEXTURE_LAYERS, 256),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_cube_map_texture_size', 'MAX_CUBE_MAP_TEXTURE_SIZE has minimum value of 2048', gl.MAX_CUBE_MAP_TEXTURE_SIZE, 2048),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_renderbuffer_size', 'MAX_RENDERBUFFER_SIZE has minimum value of 2048', gl.MAX_RENDERBUFFER_SIZE, 2048),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_draw_buffers', 'MAX_DRAW_BUFFERS has minimum value of 4', gl.MAX_DRAW_BUFFERS, 4),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_color_attachments', 'MAX_COLOR_ATTACHMENTS has minimum value of 4', gl.MAX_COLOR_ATTACHMENTS, 4),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_elements_indices', 'MAX_ELEMENTS_INDICES has minimum value of 0', gl.MAX_ELEMENTS_INDICES, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_elements_vertices', 'MAX_ELEMENTS_VERTICES has minimum value of 0', gl.MAX_ELEMENTS_VERTICES, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_vertex_attribs', 'MAX_VERTEX_ATTRIBS has minimum value of 16', gl.MAX_VERTEX_ATTRIBS, 16),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_vertex_uniform_components', 'MAX_VERTEX_UNIFORM_COMPONENTS has minimum value of 1024', gl.MAX_VERTEX_UNIFORM_COMPONENTS, 1024),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_vertex_uniform_vectors', 'MAX_VERTEX_UNIFORM_VECTORS has minimum value of 256', gl.MAX_VERTEX_UNIFORM_VECTORS, 256),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_vertex_uniform_blocks', 'MAX_VERTEX_UNIFORM_BLOCKS has minimum value of 12', gl.MAX_VERTEX_UNIFORM_BLOCKS, 12),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_vertex_output_components', 'MAX_VERTEX_OUTPUT_COMPONENTS has minimum value of 64', gl.MAX_VERTEX_OUTPUT_COMPONENTS, 64),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_vertex_texture_image_units', 'MAX_VERTEX_TEXTURE_IMAGE_UNITS has minimum value of 16', gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS, 16),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_fragment_uniform_components', 'MAX_FRAGMENT_UNIFORM_COMPONENTS has minimum value of 896', gl.MAX_FRAGMENT_UNIFORM_COMPONENTS, 896),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_fragment_uniform_vectors', 'MAX_FRAGMENT_UNIFORM_VECTORS has minimum value of 224', gl.MAX_FRAGMENT_UNIFORM_VECTORS, 224),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_fragment_uniform_blocks', 'MAX_FRAGMENT_UNIFORM_BLOCKS has minimum value of 12', gl.MAX_FRAGMENT_UNIFORM_BLOCKS, 12),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_fragment_input_components', 'MAX_FRAGMENT_INPUT_COMPONENTS has minimum value of 60', gl.MAX_FRAGMENT_INPUT_COMPONENTS, 60),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_texture_image_units', 'MAX_TEXTURE_IMAGE_UNITS has minimum value of 16', gl.MAX_TEXTURE_IMAGE_UNITS, 16),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_program_texel_offset', 'MAX_PROGRAM_TEXEL_OFFSET has minimum value of 7', gl.MAX_PROGRAM_TEXEL_OFFSET, 7),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_uniform_buffer_bindings', 'MAX_UNIFORM_BUFFER_BINDINGS has minimum value of 24', gl.MAX_UNIFORM_BUFFER_BINDINGS, 24),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_combined_uniform_blocks', 'MAX_COMBINED_UNIFORM_BLOCKS has minimum value of 24', gl.MAX_COMBINED_UNIFORM_BLOCKS, 24),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_varying_components', 'MAX_VARYING_COMPONENTS has minimum value of 60', gl.MAX_VARYING_COMPONENTS, 60),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_varying_vectors', 'MAX_VARYING_VECTORS has minimum value of 15', gl.MAX_VARYING_VECTORS, 15),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_combined_texture_image_units', 'MAX_COMBINED_TEXTURE_IMAGE_UNITS has minimum value of 32', gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS, 32),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_transform_feedback_interleaved_components', 'MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS has minimum value of 64', gl.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, 64),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_transform_feedback_separate_attribs', 'MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS has minimum value of 4', gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, 4),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_transform_feedback_separate_components', 'MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS has minimum value of 4', gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, 4),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('max_samples', 'MAX_SAMPLES has minimum value of 4', gl.MAX_SAMPLES, 4),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('red_bits', 'RED_BITS has minimum value of 0', gl.RED_BITS, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('green_bits', 'GREEN_BITS has minimum value of 0', gl.GREEN_BITS, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('blue_bits', 'BLUE_BITS has minimum value of 0', gl.BLUE_BITS, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('alpha_bits', 'ALPHA_BITS has minimum value of 0', gl.ALPHA_BITS, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('depth_bits', 'DEPTH_BITS has minimum value of 0', gl.DEPTH_BITS, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('stencil_bits', 'STENCIL_BITS has minimum value of 0', gl.STENCIL_BITS, 0)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('min_program_texel_offset', 'MIN_PROGRAM_TEXEL_OFFSET has maximum value of -8', gl.MIN_PROGRAM_TEXEL_OFFSET, -8),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger('uniform_buffer_offset_alignment', 'UNIFORM_BUFFER_OFFSET_ALIGNMENT has minimum value of 1', gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT, 256)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.HintTestCase('generate_mipmap_hint', 'GENERATE_MIPMAP_HINT', gl.GENERATE_MIPMAP_HINT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.HintTestCase('fragment_shader_derivative_hint', 'FRAGMENT_SHADER_DERIVATIVE_HINT', gl.FRAGMENT_SHADER_DERIVATIVE_HINT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilRefTestCase('stencil_ref', 'STENCIL_REF', gl.STENCIL_REF));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilRefTestCase('stencil_back_ref', 'STENCIL_BACK_REF', gl.STENCIL_BACK_REF));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilRefSeparateTestCase('stencil_ref_separate', 'STENCIL_REF (separate)', gl.STENCIL_REF, gl.FRONT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilRefSeparateTestCase('stencil_ref_separate_both', 'STENCIL_REF (separate)', gl.STENCIL_REF, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilRefSeparateTestCase('stencil_back_ref_separate', 'STENCIL_BACK_REF (separate)', gl.STENCIL_BACK_REF, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilRefSeparateTestCase('stencil_back_ref_separate_both', 'STENCIL_BACK_REF (separate)', gl.STENCIL_BACK_REF, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new NamedStencilOp('fail', 'STENCIL_FAIL', gl.STENCIL_FAIL, 'STENCIL_BACK_FAIL', gl.STENCIL_BACK_FAIL),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new NamedStencilOp('depth_fail', 'STENCIL_PASS_DEPTH_FAIL', gl.STENCIL_PASS_DEPTH_FAIL, 'STENCIL_BACK_PASS_DEPTH_FAIL', gl.STENCIL_BACK_PASS_DEPTH_FAIL),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new NamedStencilOp('depth_pass', 'STENCIL_PASS_DEPTH_PASS', gl.STENCIL_PASS_DEPTH_PASS, 'STENCIL_BACK_PASS_DEPTH_PASS', gl.STENCIL_BACK_PASS_DEPTH_PASS)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        testCtx.addChild(new es3fIntegerStateQueryTests.StencilOpSeparateTestCase('stencil_' + stencilOps[testNdx].name + '_separate_both', stencilOps[testNdx].frontDescription, stencilOps[testNdx].frontTarget, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        testCtx.addChild(new es3fIntegerStateQueryTests.StencilOpSeparateTestCase('stencil_back_' + stencilOps[testNdx].name + '_separate_both', stencilOps[testNdx].backDescription, stencilOps[testNdx].backTarget, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        testCtx.addChild(new es3fIntegerStateQueryTests.StencilOpSeparateTestCase('stencil_' + stencilOps[testNdx].name + '_separate', stencilOps[testNdx].frontDescription, stencilOps[testNdx].frontTarget, gl.FRONT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        testCtx.addChild(new es3fIntegerStateQueryTests.StencilOpSeparateTestCase('stencil_back_' + stencilOps[testNdx].name + '_separate', stencilOps[testNdx].backDescription, stencilOps[testNdx].backTarget, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilFuncSeparateTestCase('stencil_func_separate', 'STENCIL_FUNC (separate)', gl.STENCIL_FUNC, gl.FRONT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilFuncSeparateTestCase('stencil_func_separate_both', 'STENCIL_FUNC (separate)', gl.STENCIL_FUNC, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilFuncSeparateTestCase('stencil_back_func_separate', 'STENCIL_FUNC (separate)', gl.STENCIL_BACK_FUNC, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilFuncSeparateTestCase('stencil_back_func_separate_both', 'STENCIL_FUNC (separate)', gl.STENCIL_BACK_FUNC, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilMaskTestCase('stencil_value_mask', 'STENCIL_VALUE_MASK', gl.STENCIL_VALUE_MASK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilMaskTestCase('stencil_back_value_mask', 'STENCIL_BACK_VALUE_MASK', gl.STENCIL_BACK_VALUE_MASK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilMaskSeparateTestCase('stencil_value_mask_separate', 'STENCIL_VALUE_MASK (separate)', gl.STENCIL_VALUE_MASK, gl.FRONT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilMaskSeparateTestCase('stencil_value_mask_separate_both', 'STENCIL_VALUE_MASK (separate)', gl.STENCIL_VALUE_MASK, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilMaskSeparateTestCase('stencil_back_value_mask_separate', 'STENCIL_BACK_VALUE_MASK (separate)', gl.STENCIL_BACK_VALUE_MASK, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilMaskSeparateTestCase('stencil_back_value_mask_separate_both', 'STENCIL_BACK_VALUE_MASK (separate)', gl.STENCIL_BACK_VALUE_MASK, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilWriteMaskTestCase('stencil_writemask', 'STENCIL_WRITEMASK', gl.STENCIL_WRITEMASK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilWriteMaskTestCase('stencil_back_writemask', 'STENCIL_BACK_WRITEMASK', gl.STENCIL_BACK_WRITEMASK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilWriteMaskSeparateTestCase('stencil_writemask_separate', 'STENCIL_WRITEMASK (separate)', gl.STENCIL_WRITEMASK, gl.FRONT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilWriteMaskSeparateTestCase('stencil_writemask_separate_both', 'STENCIL_WRITEMASK (separate)', gl.STENCIL_WRITEMASK, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilWriteMaskSeparateTestCase('stencil_back_writemask_separate', 'STENCIL_BACK_WRITEMASK (separate)', gl.STENCIL_BACK_WRITEMASK, gl.BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.StencilWriteMaskSeparateTestCase('stencil_back_writemask_separate_both', 'STENCIL_BACK_WRITEMASK (separate)', gl.STENCIL_BACK_WRITEMASK, gl.FRONT_AND_BACK));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new PixelStoreState('unpack_image_height', 'UNPACK_IMAGE_HEIGHT', gl.UNPACK_IMAGE_HEIGHT, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new PixelStoreState('unpack_skip_images', 'UNPACK_SKIP_IMAGES', gl.UNPACK_SKIP_IMAGES, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new PixelStoreState('unpack_row_length', 'UNPACK_ROW_LENGTH', gl.UNPACK_ROW_LENGTH, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new PixelStoreState('unpack_skip_rows', 'UNPACK_SKIP_ROWS', gl.UNPACK_SKIP_ROWS, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new PixelStoreState('unpack_skip_pixels', 'UNPACK_SKIP_PIXELS', gl.UNPACK_SKIP_PIXELS, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new PixelStoreState('pack_row_length', 'PACK_ROW_LENGTH', gl.PACK_ROW_LENGTH, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new PixelStoreState('pack_skip_rows', 'PACK_SKIP_ROWS', gl.PACK_SKIP_ROWS, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new PixelStoreState('pack_skip_pixels', 'PACK_SKIP_PIXELS', gl.PACK_SKIP_PIXELS, 0)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.PixelStoreAlignTestCase('unpack_alignment', 'UNPACK_ALIGNMENT', gl.UNPACK_ALIGNMENT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                testCtx.addChild(new es3fIntegerStateQueryTests.PixelStoreAlignTestCase('pack_alignment', 'PACK_ALIGNMENT', gl.PACK_ALIGNMENT));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BlendColorState('blend_src_rgb', 'BLEND_SRC_RGB', gl.BLEND_SRC_RGB),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BlendColorState('blend_src_alpha', 'BLEND_SRC_ALPHA', gl.BLEND_SRC_ALPHA),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BlendColorState('blend_dst_rgb', 'BLEND_DST_RGB', gl.BLEND_DST_RGB),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BlendColorState('blend_dst_alpha', 'BLEND_DST_ALPHA', gl.BLEND_DST_ALPHA)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BlendEquationState('blend_equation_rgb', 'BLEND_EQUATION_RGB', gl.BLEND_EQUATION_RGB, gl.FUNC_ADD),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BlendEquationState('blend_equation_alpha', 'BLEND_EQUATION_ALPHA', gl.BLEND_EQUATION_ALPHA, gl.FUNC_ADD)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                /** @type {ImplementationArrayReturningState} */ var implementationArrayReturningStates = new ImplementationArrayReturningState('compressed_texture_formats', 'COMPRESSED_TEXTURE_FORMATS', gl.COMPRESSED_TEXTURE_FORMATS, 10);
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BufferBindingState('array_buffer_binding', 'ARRAY_BUFFER_BINDING', gl.ARRAY_BUFFER_BINDING, gl.ARRAY_BUFFER),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BufferBindingState('uniform_buffer_binding', 'UNIFORM_BUFFER_BINDING', gl.UNIFORM_BUFFER_BINDING, gl.UNIFORM_BUFFER),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BufferBindingState('pixel_pack_buffer_binding', 'PIXEL_PACK_BUFFER_BINDING', gl.PIXEL_PACK_BUFFER_BINDING, gl.PIXEL_PACK_BUFFER),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BufferBindingState('pixel_unpack_buffer_binding', 'PIXEL_UNPACK_BUFFER_BINDING', gl.PIXEL_UNPACK_BUFFER_BINDING, gl.PIXEL_UNPACK_BUFFER),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BufferBindingState('transform_feedback_buffer_binding', 'TRANSFORM_FEEDBACK_BUFFER_BINDING', gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, gl.TRANSFORM_FEEDBACK_BUFFER),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BufferBindingState('copy_read_buffer_binding', 'COPY_READ_BUFFER_BINDING', gl.COPY_READ_BUFFER_BINDING, gl.COPY_READ_BUFFER),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new BufferBindingState('copy_write_buffer_binding', 'COPY_WRITE_BUFFER_BINDING', gl.COPY_WRITE_BUFFER_BINDING, gl.COPY_WRITE_BUFFER)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new TextureBinding('texture_binding_2d', 'TEXTURE_BINDING_2D', gl.TEXTURE_BINDING_2D, gl.TEXTURE_2D),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new TextureBinding('texture_binding_3d', 'TEXTURE_BINDING_3D', gl.TEXTURE_BINDING_3D, gl.TEXTURE_3D),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new TextureBinding('texture_binding_2d_array', 'TEXTURE_BINDING_2D_ARRAY', gl.TEXTURE_BINDING_2D_ARRAY, gl.TEXTURE_2D_ARRAY),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new TextureBinding('texture_binding_cube_map', 'TEXTURE_BINDING_CUBE_MAP', gl.TEXTURE_BINDING_CUBE_MAP, gl.TEXTURE_CUBE_MAP)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger64('max_element_index', 'MAX_ELEMENT_INDEX', gl.MAX_ELEMENT_INDEX, 0x00FFFFFF),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger64('max_server_wait_timeout', 'MAX_SERVER_WAIT_TIMEOUT', gl.MAX_SERVER_WAIT_TIMEOUT, 0),
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                        new LimitedStateInteger64('max_uniform_block_size', 'MAX_UNIFORM_BLOCK_SIZE', gl.MAX_UNIFORM_BLOCK_SIZE, 16384)
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.addChild(new es3fIntegerStateQueryTests.MaxCombinedStageUniformComponentsCase('max_combined_vertex_uniform_components', 'MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS', gl.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, gl.MAX_VERTEX_UNIFORM_BLOCKS, gl.MAX_VERTEX_UNIFORM_COMPONENTS));
deqp/functional/gles3/es3fIntegerStateQueryTests.js:                this.addChild(new es3fIntegerStateQueryTests.MaxCombinedStageUniformComponentsCase('max_combined_fragment_uniform_components', 'MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS', gl.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, gl.MAX_FRAGMENT_UNIFORM_BLOCKS, gl.MAX_FRAGMENT_UNIFORM_COMPONENTS));
deqp/functional/gles3/fbocolorbuffer/texcube_04.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verify(gl.DEPTH_RANGE, new Float32Array([0.0, 1.0])));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.depthRange(fixedTests[ndx][0], fixedTests[ndx][1]);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.DEPTH_RANGE, fixedTests[ndx]));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.depthRange(depth[0], depth[1]);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.DEPTH_RANGE, depth));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verify(gl.LINE_WIDTH, 1.0));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		/** @type {Float32Array} */ var range = /** @type {Float32Array} */ (gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.lineWidth(reference);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.LINE_WIDTH, reference));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verify(gl.POLYGON_OFFSET_FACTOR, 0.0));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.polygonOffset(fixedTests[ndx], 0);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.POLYGON_OFFSET_FACTOR, fixedTests[ndx]));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.polygonOffset(reference, 0);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.POLYGON_OFFSET_FACTOR, reference));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verify(gl.POLYGON_OFFSET_UNITS, 0.0));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.polygonOffset(0, fixedTests[ndx]);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.POLYGON_OFFSET_UNITS, fixedTests[ndx]));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.polygonOffset(0, reference);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.POLYGON_OFFSET_UNITS, reference));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verify(gl.SAMPLE_COVERAGE_VALUE, 1.0));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.sampleCoverage(fixedTests[ndx], false);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.SAMPLE_COVERAGE_VALUE, fixedTests[ndx]));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.sampleCoverage(clampTests[ndx], false);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.SAMPLE_COVERAGE_VALUE, deMath.clamp(clampTests[ndx], 0.0, 1.0)));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.sampleCoverage(reference, invert);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.SAMPLE_COVERAGE_VALUE, reference));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verify(gl.BLEND_COLOR, new Float32Array([0, 0, 0, 0])));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.blendColor(fixedTests[ndx][0], fixedTests[ndx][1], fixedTests[ndx][2], fixedTests[ndx][3]);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.BLEND_COLOR, fixedTests[ndx]));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.blendColor(r, g, b, a);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.BLEND_COLOR, new Float32Array([r, g, b, a])));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verify(gl.COLOR_CLEAR_VALUE, new Float32Array([0, 0, 0, 0])));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.clearColor(fixedTests[ndx][0], fixedTests[ndx][1], fixedTests[ndx][2], fixedTests[ndx][3]);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.COLOR_CLEAR_VALUE, fixedTests[ndx]));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.clearColor(r, g, b, a);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.COLOR_CLEAR_VALUE, new Float32Array([r, g, b, a])));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verify(gl.DEPTH_CLEAR_VALUE, 1));
deqp/functional/gles3/es3fFloatStateQueryTests.js:			gl.clearDepth(ref);
deqp/functional/gles3/es3fFloatStateQueryTests.js:			this.check(glsStateQuery.verify(gl.DEPTH_CLEAR_VALUE, ref));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		this.check(glsStateQuery.verifyGreaterOrEqual(gl.MAX_TEXTURE_LOD_BIAS, 2.0));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		var pointSizeRange = /** @type {Float32Array} */ (gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE));
deqp/functional/gles3/es3fFloatStateQueryTests.js:		var lineWidthRange = /** @type {Float32Array} */ (gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE));
deqp/functional/gles3/fbocolorbuffer/texcube_02.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/es3fClippingTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fClippingTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fClippingTests.js:        ctx.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fClippingTests.js:        ctx.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fClippingTests.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fClippingTests.js:        ctx.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
deqp/functional/gles3/es3fClippingTests.js:        ctx.vertexAttribPointer(posLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fClippingTests.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, buffer2);
deqp/functional/gles3/es3fClippingTests.js:        ctx.bufferData(gl.ARRAY_BUFFER, new Float32Array(coords), gl.STATIC_DRAW);
deqp/functional/gles3/es3fClippingTests.js:        ctx.vertexAttribPointer(coordLoc, 2, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fClippingTests.js:        ctx.drawArrays(gl.LINES, 0, numVertices);
deqp/functional/gles3/es3fClippingTests.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fClippingTests.js:        ctx.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fClippingTests.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fClippingTests.js:        ctx.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);
deqp/functional/gles3/es3fClippingTests.js:        ctx.vertexAttribPointer(posLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fClippingTests.js:        ctx.drawArrays(gl.POINTS, 0, numVertices);
deqp/functional/gles3/es3fClippingTests.js:        ctx.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fClippingTests.js:    var width = gl.drawingBufferWidth;
deqp/functional/gles3/es3fClippingTests.js:    var height = gl.drawingBufferHeight;
deqp/functional/gles3/es3fClippingTests.js:    var pointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
deqp/functional/gles3/es3fClippingTests.js:    var lineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);
deqp/functional/gles3/es3fVertexArrayTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fVertexArrayTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fVertexArrayTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fVertexArrayTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fVertexArrayTests.js:goog.require('framework.opengl.gluVarType');
deqp/functional/gles3/es3fVertexArrayTests.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fVertexArrayTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fVertexArrayTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fVertexArrayTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fVertexArrayTests.js:    var gluVarType = framework.opengl.gluVarType;
deqp/functional/gles3/es3fMultisampleTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fMultisampleTests.js:goog.require('framework.opengl.gluStrUtil');
deqp/functional/gles3/es3fMultisampleTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fMultisampleTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fMultisampleTests.js:    var gluStrUtil = framework.opengl.gluStrUtil;
deqp/functional/gles3/es3fMultisampleTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fMultisampleTests.js:        /** @type {number} */ this.m_renderWidth = fboParams.useFbo ? 2 * desiredViewportSize : gl.drawingBufferWidth;
deqp/functional/gles3/es3fMultisampleTests.js:        /** @type {number} */ this.m_renderHeight = fboParams.useFbo ? 2 * desiredViewportSize : gl.drawingBufferHeight;
deqp/functional/gles3/es3fMultisampleTests.js:        gl.colorMask(true, true, true, true);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.depthMask(true);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearColor(0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearDepth(1.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearStencil(0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.disable(gl.BLEND)
deqp/functional/gles3/es3fMultisampleTests.js:        gl.disable(gl.SAMPLE_COVERAGE);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.deleteProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fMultisampleTests.js:          gl.deleteRenderbuffer(this.m_msColorRbo);
deqp/functional/gles3/es3fMultisampleTests.js:          gl.deleteRenderbuffer(this.m_msDepthStencilRbo);
deqp/functional/gles3/es3fMultisampleTests.js:          gl.deleteRenderbuffer(this.m_resolveColorRbo);
deqp/functional/gles3/es3fMultisampleTests.js:          gl.deleteFramebuffer(this.m_msFbo);
deqp/functional/gles3/es3fMultisampleTests.js:          gl.deleteFramebuffer(this.m_resolveFbo);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fMultisampleTests.js:        var posGLBuffer = gl.createBuffer();
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, posGLBuffer);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bufferData(gl.ARRAY_BUFFER, posBuffer, gl.STATIC_DRAW);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enableVertexAttribArray(this.m_attrPositionLoc);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.vertexAttribPointer(this.m_attrPositionLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fMultisampleTests.js:        var colGLBuffer = gl.createBuffer();
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, colGLBuffer);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bufferData(gl.ARRAY_BUFFER, colBuffer, gl.STATIC_DRAW);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enableVertexAttribArray(this.m_attrColorLoc);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.vertexAttribPointer(this.m_attrColorLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fMultisampleTests.js:        gl.drawArrays(gl.TRIANGLES, 0, 3);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.deleteBuffer(colGLBuffer);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.deleteBuffer(posGLBuffer);
deqp/functional/gles3/es3fMultisampleTests.js:        var posGLBuffer = gl.createBuffer();
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, posGLBuffer);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bufferData(gl.ARRAY_BUFFER, posBuffer, gl.STATIC_DRAW);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enableVertexAttribArray(this.m_attrPositionLoc);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.vertexAttribPointer(this.m_attrPositionLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fMultisampleTests.js:        var colGLBuffer = gl.createBuffer();
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, colGLBuffer);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bufferData(gl.ARRAY_BUFFER, colBuffer, gl.STATIC_DRAW);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enableVertexAttribArray(this.m_attrColorLoc);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.vertexAttribPointer(this.m_attrColorLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fMultisampleTests.js:        gl.drawArrays(gl.LINES, 0, 2);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.deleteBuffer(colGLBuffer);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.deleteBuffer(posGLBuffer);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.viewport(this.m_viewportX, this.m_viewportY, this.m_viewportSize, this.m_viewportSize);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.m_resolveFbo);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.blitFramebuffer(0, 0, this.m_renderWidth, this.m_renderHeight, 0, 0, this.m_renderWidth, this.m_renderHeight, gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.m_resolveFbo);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.pixelStorei(gl.PACK_ALIGNMENT, param);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.readPixels(this.m_viewportX, this.m_viewportY, width, height, format.format, format.dataType, dst.getAccess().getDataPtr());
deqp/functional/gles3/es3fMultisampleTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_msFbo);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.pixelStorei(gl.PACK_ALIGNMENT, param);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.readPixels(this.m_viewportX, this.m_viewportY, width, height, format.format, format.dataType, dst.getAccess().getDataPtr());
deqp/functional/gles3/es3fMultisampleTests.js:        var numSamples = /** @type {number} */  (gl.getParameter(gl.SAMPLES));
deqp/functional/gles3/es3fMultisampleTests.js:                bufferedLogToConsole('Querying maximum number of samples for ' + gluStrUtil.getPixelFormatName(gl.RGBA8) + ' with gl.getInternalformatParameter()');
deqp/functional/gles3/es3fMultisampleTests.js:                var supportedSampleCountArray = /** @type {Int32Array} */ (gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES));
deqp/functional/gles3/es3fMultisampleTests.js:            bufferedLogToConsole('gl.SAMPLES =' + this.m_numSamples);
deqp/functional/gles3/es3fMultisampleTests.js:        this.m_attrPositionLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_position');
deqp/functional/gles3/es3fMultisampleTests.js:        this.m_attrColorLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_color');
deqp/functional/gles3/es3fMultisampleTests.js:            this.m_msColorRbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fMultisampleTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, this.m_msColorRbo);
deqp/functional/gles3/es3fMultisampleTests.js:            /** @type {Int32Array} */ var supportedSampleCountArray = /** @type {Int32Array} */ (gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES));
deqp/functional/gles3/es3fMultisampleTests.js:            assertMsgOptions(gl.getError() === gl.NO_ERROR, 'should be no GL error before renderbufferStorageMultisample');
deqp/functional/gles3/es3fMultisampleTests.js:            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, gl.RGBA8, this.m_renderWidth, this.m_renderHeight);
deqp/functional/gles3/es3fMultisampleTests.js:            assertMsgOptions(gl.getError() === gl.NO_ERROR, 'should be no GL error after renderbufferStorageMultisample');
deqp/functional/gles3/es3fMultisampleTests.js:                this.m_msDepthStencilRbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fMultisampleTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, this.m_msDepthStencilRbo);
deqp/functional/gles3/es3fMultisampleTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, gl.DEPTH24_STENCIL8, this.m_renderWidth, this.m_renderHeight);
deqp/functional/gles3/es3fMultisampleTests.js:            this.m_msFbo = gl.createFramebuffer();
deqp/functional/gles3/es3fMultisampleTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_msFbo);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.m_msColorRbo);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.m_msDepthStencilRbo);
deqp/functional/gles3/es3fMultisampleTests.js:            this.m_resolveColorRbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fMultisampleTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, this.m_resolveColorRbo);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, this.m_renderWidth, this.m_renderHeight);
deqp/functional/gles3/es3fMultisampleTests.js:            this.m_resolveFbo = gl.createFramebuffer();
deqp/functional/gles3/es3fMultisampleTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_resolveFbo);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.m_resolveColorRbo);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_msFbo);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enable(gl.BLEND);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.depthFunc(gl.LESS);
deqp/functional/gles3/es3fMultisampleTests.js:        bufferedLogToConsole('Depth test enabled, depth func is gl.LESS');
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearColor(0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearDepth(1.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearStencil(0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.stencilFunc(gl.ALWAYS, 1, 1);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fMultisampleTests.js:        bufferedLogToConsole('Drawing a pattern with gl.stencilFunc(gl.ALWAYS, 1, 1) and gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE)');
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.stencilFunc(gl.EQUAL, 1, 1);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fMultisampleTests.js:        bufferedLogToConsole('Drawing a viewport-sized quad with gl.stencilFunc(gl.EQUAL, 1, 1) and gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP) - should result in same image as the first');
deqp/functional/gles3/es3fMultisampleTests.js:     * gl.SAMPLE_ALPHA_TO_COVERAGE or gl.SAMPLE_COVERAGE is, on average,
deqp/functional/gles3/es3fMultisampleTests.js:            gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
deqp/functional/gles3/es3fMultisampleTests.js:            bufferedLogToConsole('gl.SAMPLE_ALPHA_TO_COVERAGE is enabled');
deqp/functional/gles3/es3fMultisampleTests.js:            gl.enable(gl.SAMPLE_COVERAGE);
deqp/functional/gles3/es3fMultisampleTests.js:            bufferedLogToConsole('gl.SAMPLE_COVERAGE is enabled');
deqp/functional/gles3/es3fMultisampleTests.js:        gl.colorMask(true, true, true, true);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.colorMask(true, true, true, false);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.sampleCoverage(coverageValue, isInverted ? true : false);
deqp/functional/gles3/es3fMultisampleTests.js:     * Tests that the coverage mask created by gl.SAMPLE_ALPHA_TO_COVERAGE or
deqp/functional/gles3/es3fMultisampleTests.js:     * gl.SAMPLE_COVERAGE is constant at given pixel coordinates, with a given
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.colorMask(true, true, true, false);
deqp/functional/gles3/es3fMultisampleTests.js:            bufferedLogToConsole('gl.SAMPLE_ALPHA_TO_COVERAGE is enabled');
deqp/functional/gles3/es3fMultisampleTests.js:            gl.enable(gl.SAMPLE_COVERAGE);
deqp/functional/gles3/es3fMultisampleTests.js:            bufferedLogToConsole('gl.SAMPLE_COVERAGE is enabled');
deqp/functional/gles3/es3fMultisampleTests.js:                    gl.sampleCoverage(this.m_isInvertedSampleCoverageCase ? 1.0 - value : value, this.m_isInvertedSampleCoverageCase ? true : false);
deqp/functional/gles3/es3fMultisampleTests.js:            gl.sampleCoverage(i / (numTriangles - 1), invertSampleCoverage ? true : false);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enable(gl.BLEND);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.blendEquation(gl.FUNC_ADD);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.blendFunc(gl.ONE, gl.ONE);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clearColor(0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:        bufferedLogToConsole('Drawing the pattern with gl.SAMPLE_COVERAGE disabled');
deqp/functional/gles3/es3fMultisampleTests.js:        tcuLogImage.logImage('RenderedImageNoSampleCoverage', 'Rendered image with gl.SAMPLE_COVERAGE disabled', renderedImgNoSampleCoverage.getAccess());
deqp/functional/gles3/es3fMultisampleTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fMultisampleTests.js:        gl.enable(gl.SAMPLE_COVERAGE);
deqp/functional/gles3/es3fMultisampleTests.js:        bufferedLogToConsole('Drawing the pattern with gl.SAMPLE_COVERAGE enabled, using non-inverted masks');
deqp/functional/gles3/es3fMultisampleTests.js:        bufferedLogToConsole('Drawing the pattern with gl.SAMPLE_COVERAGE enabled, using same sample coverage values but inverted masks');
deqp/functional/gles3/es3fMultisampleTests.js:        tcuLogImage.logImage('RenderedImageSampleCoverage', 'Rendered image with gl.SAMPLE_COVERAGE enabled', renderedImgSampleCoverage.getAccess());
deqp/functional/gles3/es3fMultisampleTests.js:            'Comparison of same pattern with gl.SAMPLE_COVERAGE disabled and enabled',
deqp/functional/gles3/es3fApiCase.js:goog.require('framework.opengl.gluStrUtil');
deqp/functional/gles3/es3fApiCase.js:    var gluStrUtil = framework.opengl.gluStrUtil;
deqp/functional/gles3/es3fApiCase.js:    // format numbers as they appear in gl.h
deqp/functional/gles3/es3fApiCase.js:    * @return {boolean} returns true if gl.getError returns an expected error code and false otherwise.
deqp/functional/gles3/es3fApiCase.js:        var err = this.m_gl.getError();
deqp/functional/gles3/es3fApiCase.js:            this.expectError(this.m_gl.NO_ERROR);
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_t', 'Different gl.TEXTURE_WRAP_T', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_s', 'Different gl.TEXTURE_WRAP_S', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_r', 'Different gl.TEXTURE_WRAP_R', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_filter', 'Different gl.TEXTURE_MIN_FILTER', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_mag_filter', 'Different gl.TEXTURE_MAG_FILTER', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_max_lod', 'Different gl.TEXTURE_MAX_LOD', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, -999.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_lod', 'Different gl.TEXTURE_MIN_LOD', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 100.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_t', 'Different gl.TEXTURE_WRAP_T', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_s', 'Different gl.TEXTURE_WRAP_S', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_r', 'Different gl.TEXTURE_WRAP_R', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_filter', 'Different gl.TEXTURE_MIN_FILTER', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_mag_filter', 'Different gl.TEXTURE_MAG_FILTER', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_max_lod', 'Different gl.TEXTURE_MAX_LOD', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, -999.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_lod', 'Different gl.TEXTURE_MIN_LOD', gl.TEXTURE_2D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                    new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 100.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:        new glsSamplerObjectTest.TestSpec('diff_wrap_t', 'Different gl.TEXTURE_WRAP_T', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_s', 'Different gl.TEXTURE_WRAP_S', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_r', 'Different gl.TEXTURE_WRAP_R', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_filter', 'Different gl.TEXTURE_MIN_FILTER', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_mag_filter', 'Different gl.TEXTURE_MAG_FILTER', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_max_lod', 'Different gl.TEXTURE_MAX_LOD', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, -999.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_lod', 'Different gl.TEXTURE_MIN_LOD', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 100.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_t', 'Different gl.TEXTURE_WRAP_T', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_s', 'Different gl.TEXTURE_WRAP_S', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_r', 'Different gl.TEXTURE_WRAP_R', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_filter', 'Different gl.TEXTURE_MIN_FILTER', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_mag_filter', 'Different gl.TEXTURE_MAG_FILTER', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_max_lod', 'Different gl.TEXTURE_MAX_LOD', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, -999.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_lod', 'Different gl.TEXTURE_MIN_LOD', gl.TEXTURE_3D,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 100.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_t', 'Different gl.TEXTURE_WRAP_T', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_s', 'Different gl.TEXTURE_WRAP_S', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_r', 'Different gl.TEXTURE_WRAP_R', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_filter', 'Different gl.TEXTURE_MIN_FILTER', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_mag_filter', 'Different gl.TEXTURE_MAG_FILTER', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_max_lod', 'Different gl.TEXTURE_MAX_LOD', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, -999.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_lod', 'Different gl.TEXTURE_MIN_LOD', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 100.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_t', 'Different gl.TEXTURE_WRAP_T', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.MIRRORED_REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_s', 'Different gl.TEXTURE_WRAP_S', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.MIRRORED_REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_wrap_r', 'Different gl.TEXTURE_WRAP_R', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.MIRRORED_REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_filter', 'Different gl.TEXTURE_MIN_FILTER', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.LINEAR, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_mag_filter', 'Different gl.TEXTURE_MAG_FILTER', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_max_lod', 'Different gl.TEXTURE_MAX_LOD', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, -1000.0, -999.0)
deqp/functional/gles3/es3fSamplerObjectTests.js:            new glsSamplerObjectTest.TestSpec('diff_min_lod', 'Different gl.TEXTURE_MIN_LOD', gl.TEXTURE_CUBE_MAP,
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 0.0, 1000.0),
deqp/functional/gles3/es3fSamplerObjectTests.js:                new glsSamplerObjectTest.SamplingState(gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST, gl.REPEAT, gl.REPEAT, gl.REPEAT, 100.0, 1000.0)
conformance/textures/misc/texture-fakeblack.html:    var texture = gl.createTexture();
conformance/textures/misc/texture-fakeblack.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/texture-fakeblack.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/texture-fakeblack.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/texture-fakeblack.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-fakeblack.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-fakeblack.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 3, 3, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-fakeblack.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/textures/misc/texture-fakeblack.html:    var fbo = gl.createFramebuffer();
conformance/textures/misc/texture-fakeblack.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/textures/misc/texture-fakeblack.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/textures/misc/texture-fakeblack.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/textures/misc/texture-fakeblack.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/textures/misc/texture-fakeblack.html:    gl.clearColor(r, g, b, a);
conformance/textures/misc/texture-fakeblack.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/textures/misc/texture-fakeblack.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/textures/misc/texture-fakeblack.html:    gl.deleteFramebuffer(fbo);
conformance/textures/misc/texture-fakeblack.html:    gl.bindTexture(gl.TEXTURE_2D, texture0);
conformance/textures/misc/texture-fakeblack.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texture-fakeblack.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/textures/misc/texture-fakeblack.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/textures/misc/texture-fakeblack.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texture-fakeblack.html:    gl.bindTexture(gl.TEXTURE_2D, texture1);
conformance/textures/misc/texture-fakeblack.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-fakeblack.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-fakeblack.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texture-fakeblack.html:    gl.bindTexture(gl.TEXTURE_2D, texture0);
conformance/textures/misc/texture-fakeblack.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/compressed-tex-image.html:  var tex = gl.createTexture();
conformance/textures/misc/compressed-tex-image.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/compressed-tex-image.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGB_S3TC_DXT1_EXT, 4, 4, 0, new Uint8Array(8))");
conformance/textures/misc/compressed-tex-image.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGBA_S3TC_DXT1_EXT, 4, 4, 0, new Uint8Array(8))");
conformance/textures/misc/compressed-tex-image.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGBA_S3TC_DXT5_EXT, 4, 4, 0, new Uint8Array(16))");
conformance/textures/misc/compressed-tex-image.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, ETC1_RGB8_OES, 4, 4, 0, new Uint8Array(8))");
conformance/textures/misc/compressed-tex-image.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGB_PVRTC_4BPPV1_IMG, 8, 8, 0, new Uint8Array(8))");
conformance/textures/misc/compressed-tex-image.html:  wtu.shouldGenerateGLError(gl, gl.INVALID_ENUM, "gl.compressedTexImage2D(gl.TEXTURE_2D, 0, COMPRESSED_RGBA_PVRTC_4BPPV1_IMG, 8, 8, 0, new Uint8Array(8))");
conformance/textures/misc/compressed-tex-image.html:  wtu.shouldGenerateGLError(gl, gl.NO_ERROR, "formats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS)");
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:          case gl.RED:
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:      if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:              flipY + ' bindingTarget=' + (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP') +
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        var targets = [gl.TEXTURE_2D];
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat], canvas.width, canvas.height, 0,
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                gl.texSubImage2D(targets[tt], 0, 0, 0, gl[pixelFormat], gl[pixelType], canvas);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat], gl[pixelFormat], gl[pixelType], canvas);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        var width = gl.canvas.width;
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        var height = gl.canvas.height;
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            loc = gl.getUniformLocation(program, "face");
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:              case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:              case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:              case gl.RGB_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:              case gl.RGBA_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                gl.uniform1i(loc, targets[tt]);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:          var m = wtu.makeImageFromCanvas(gl.canvas);
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            if (bindingTarget == gl.TEXTURE_2D) {
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:        runTexImageTest(gl.TEXTURE_2D).then(function(val) {
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:            runTexImageTest(gl.TEXTURE_CUBE_MAP).then(function(val) {
js/tests/tex-image-and-sub-image-2d-with-webgl-canvas.js:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/framework/common/tcuPixelFormat.js:    var r = /** @type {number} */ (context.getParameter(gl.RED_BITS));
deqp/framework/common/tcuPixelFormat.js:    var g = /** @type {number} */ (context.getParameter(gl.GREEN_BITS));
deqp/framework/common/tcuPixelFormat.js:    var b = /** @type {number} */ (context.getParameter(gl.BLUE_BITS));
deqp/framework/common/tcuPixelFormat.js:    var a = /** @type {number} */ (context.getParameter(gl.ALPHA_BITS));
deqp/functional/gles3/fbocolorbuffer/clear.html:var ext = gl.getExtension('EXT_color_buffer_float');
deqp/functional/gles3/es3fShaderIndexingTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderIndexingTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderIndexingTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fShaderIndexingTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderIndexingTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fShaderIndexingTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderIndexingTests.js:        /** @type {?WebGLUniformLocation} */ var arrLoc = gl.getUniformLocation(programID, 'u_arr');
deqp/functional/gles3/es3fShaderIndexingTests.js:                gl.uniform1fv(arrLoc, arr);
deqp/functional/gles3/es3fShaderIndexingTests.js:                gl.uniform2fv(arrLoc, array1d);
deqp/functional/gles3/es3fShaderIndexingTests.js:                gl.uniform3fv(arrLoc, array1d);
deqp/functional/gles3/es3fShaderIndexingTests.js:                gl.uniform4fv(arrLoc, array1d);
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RENDERBUFFER_RED_SIZE,
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RENDERBUFFER_GREEN_SIZE,
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RENDERBUFFER_BLUE_SIZE,
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RENDERBUFFER_ALPHA_SIZE,
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RENDERBUFFER_DEPTH_SIZE,
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RENDERBUFFER_STENCIL_SIZE
deqp/functional/gles3/es3fRboStateQueryTests.js:        var value = /** @type {number} */ (gl.getRenderbufferParameter(gl.RENDERBUFFER, paramNames[ndx]));
deqp/functional/gles3/es3fRboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:    this.check(glsStateQuery.verifyRenderbuffer(gl.RENDERBUFFER_WIDTH, 0));
deqp/functional/gles3/es3fRboStateQueryTests.js:    this.check(glsStateQuery.verifyRenderbuffer(gl.RENDERBUFFER_HEIGHT, 0));
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGB8, w, h);
deqp/functional/gles3/es3fRboStateQueryTests.js:        this.check(glsStateQuery.verifyRenderbuffer(gl.RENDERBUFFER_WIDTH, w));
deqp/functional/gles3/es3fRboStateQueryTests.js:        this.check(glsStateQuery.verifyRenderbuffer(gl.RENDERBUFFER_HEIGHT, h));
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:    this.check(glsStateQuery.verifyRenderbuffer(gl.RENDERBUFFER_INTERNAL_FORMAT, gl.RGBA4));
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.R8, gl.RG8, gl.RGB8, gl.RGB565, gl.RGBA4, gl.RGB5_A1, gl.RGBA8, gl.RGB10_A2,
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RGB10_A2UI, gl.SRGB8_ALPHA8, gl.R8I, gl.R8UI, gl.R16I, gl.R16UI, gl.R32I, gl.R32UI,
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RG8I, gl.RG8UI, gl.RG16I, gl.RG16UI, gl.RG32I, gl.RG32UI, gl.RGBA8I, gl.RGBA8UI,
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.RGBA16I, gl.RGBA16UI, gl.RGBA32I, gl.RGBA32UI
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.renderbufferStorage(gl.RENDERBUFFER, requiredColorformats[ndx], 128, 128);
deqp/functional/gles3/es3fRboStateQueryTests.js:        this.check(glsStateQuery.verifyRenderbuffer(gl.RENDERBUFFER_INTERNAL_FORMAT, requiredColorformats[ndx]));
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.R8, 8, 0, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RG8, 8, 8, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGB8, 8, 8, 8, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGB565, 5, 6, 5, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGBA4, 4, 4, 4, 4],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGB5_A1, 5, 5, 5, 1],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGBA8, 8, 8, 8, 8],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGB10_A2, 10, 10, 10, 2],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGB10_A2UI, 10, 10, 10, 2],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.SRGB8_ALPHA8, 8, 8, 8, 8],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.R8I, 8, 0, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.R8UI, 8, 0, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.R16I, 16, 0, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.R16UI, 16, 0, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.R32I, 32, 0, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.R32UI, 32, 0, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RG8I, 8, 8, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RG8UI, 8, 8, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RG16I, 16, 16, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RG16UI, 16, 16, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RG32I, 32, 32, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RG32UI, 32, 32, 0, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGBA8I, 8, 8, 8, 8],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGBA8UI, 8, 8, 8, 8],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGBA16I, 16, 16, 16, 16],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGBA16UI, 16, 16, 16, 16],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGBA32I, 32, 32, 32, 32],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.RGBA32UI, 32, 32, 32, 32]
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.renderbufferStorage(gl.RENDERBUFFER, requiredColorFormats[ndx][0], 128, 128);
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.DEPTH_COMPONENT16, 16, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.DEPTH_COMPONENT24, 24, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.DEPTH_COMPONENT32F, 32, 0],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.DEPTH24_STENCIL8, 24, 8],
deqp/functional/gles3/es3fRboStateQueryTests.js:        [gl.DEPTH32F_STENCIL8, 32, 8]
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.renderbufferStorage(gl.RENDERBUFFER, requiredDepthFormats[ndx][0], 128, 128);
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8, 128, 128);
deqp/functional/gles3/es3fRboStateQueryTests.js:    var value = /** @type {number} */ (gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_STENCIL_SIZE));
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fRboStateQueryTests.js:    this.check(glsStateQuery.verifyRenderbuffer(gl.RENDERBUFFER_SAMPLES, 0));
deqp/functional/gles3/es3fRboStateQueryTests.js:    var max_samples = /** @type {number} */ (gl.getParameter(gl.MAX_SAMPLES));
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 0, gl.RGBA8, 128, 128);
deqp/functional/gles3/es3fRboStateQueryTests.js:    this.check(glsStateQuery.verifyRenderbuffer(gl.RENDERBUFFER_SAMPLES, 0));
deqp/functional/gles3/es3fRboStateQueryTests.js:        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl.RGBA8, 128, 128);
deqp/functional/gles3/es3fRboStateQueryTests.js:        var value = /** @type {number} */ (gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_SAMPLES));
deqp/functional/gles3/es3fRboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		/** @type {WebGLShader} */ var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		/** @type {WebGLShader} */ var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.shaderSource(shaderVert, transformFeedbackTestVertSource);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.shaderSource(shaderFrag, transformFeedbackTestFragSource);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.compileShader(shaderVert);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		/** @type {WebGLProgram} */ var shaderProg = gl.createProgram();
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.attachShader(shaderProg, shaderVert);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.attachShader(shaderProg, shaderFrag);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.transformFeedbackVaryings(shaderProg, transformFeedbackOutputs, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.linkProgram(shaderProg);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		/** @type {WebGLTransformFeedback} */ var transformFeedbackId = gl.createTransformFeedback();
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackId);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.deleteTransformFeedback(transformFeedbackId);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.deleteProgram(shaderProg);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			feedbackBuffers[ndx] = gl.createBuffer();
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, feedbackBuffers[ndx]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, new Float32Array(16), gl.DYNAMIC_READ);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, feedbackIndex[ndx], feedbackBuffers[ndx]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			var boundBuffer = /** @type {WebGLBuffer} */ (gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, ndx));
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.deleteBuffer(feedbackBuffers[ndx]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			feedbackBuffers[ndx] = gl.createBuffer();
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, feedbackBuffers[0]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, new Float32Array(16), gl.DYNAMIC_READ);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, feedbackPositionIndex, feedbackBuffers[0]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, feedbackBuffers[1]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, new Float32Array(16), gl.DYNAMIC_READ);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, feedbackOutputIndex, feedbackBuffers[1], rangeBufferOffset, rangeBufferSize);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			{index: feedbackPositionIndex, pname: gl.TRANSFORM_FEEDBACK_BUFFER_START, value: 0},
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			{index: feedbackPositionIndex, pname: gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, value: 0},
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			{index: feedbackOutputIndex, pname: gl.TRANSFORM_FEEDBACK_BUFFER_START, value: rangeBufferOffset},
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			{index: feedbackOutputIndex, pname: gl.TRANSFORM_FEEDBACK_BUFFER_SIZE, value: rangeBufferSize}
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			var state = /** @type {number} */ (gl.getIndexedParameter(requirements[ndx].pname, requirements[ndx].index));
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.deleteBuffer(feedbackBuffers[ndx]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		/** @type {WebGLShader} */ var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		/** @type {WebGLShader} */ var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.compileShader(shaderVert);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		this.m_program = gl.createProgram();
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.attachShader(this.m_program, shaderVert);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.attachShader(this.m_program, shaderFrag);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.linkProgram(this.m_program);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.useProgram(this.m_program);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.useProgram(null);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.deleteProgram(this.m_program);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		/** @type {Array<number>} */ var uniformIndices = gl.getUniformIndices(this.m_program, uniformNames);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			buffers[ndx] = gl.createBuffer();
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.bindBuffer(gl.UNIFORM_BUFFER, buffers[ndx]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.bufferData(gl.UNIFORM_BUFFER, new Float32Array(32), gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.bindBufferBase(gl.UNIFORM_BUFFER, uniformIndices[ndx], buffers[ndx]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			boundBuffer[ndx] = /** @type {WebGLBuffer} */ (gl.getIndexedParameter(gl.UNIFORM_BUFFER_BINDING, uniformIndices[ndx]));
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.deleteBuffer(buffers[ndx]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		/** @type {Array<number>} */ var uniformIndices = gl.getUniformIndices(this.m_program, uniformNames);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			buffers[ndx] = gl.createBuffer();
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindBuffer(gl.UNIFORM_BUFFER, buffers[0]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bufferData(gl.UNIFORM_BUFFER, new Float32Array(32), gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindBufferBase(gl.UNIFORM_BUFFER, uniformIndices[0], buffers[0]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindBuffer(gl.UNIFORM_BUFFER, buffers[1]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bufferData(gl.UNIFORM_BUFFER, new Float32Array(32), gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		gl.bindBufferRange(gl.UNIFORM_BUFFER, uniformIndices[1], buffers[1], rangeBufferOffset, rangeBufferSize);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			{index: uniformIndices[0], pname: gl.UNIFORM_BUFFER_START, value: 0},
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			{index: uniformIndices[0], pname: gl.UNIFORM_BUFFER_SIZE, value: 0},
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			{index: uniformIndices[1], pname: gl.UNIFORM_BUFFER_START, value: rangeBufferOffset},
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			{index: uniformIndices[1], pname: gl.UNIFORM_BUFFER_SIZE, value: rangeBufferSize}
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			var state = /** @type {number} */ (gl.getIndexedParameter(requirements[ndx].pname, requirements[ndx].index));
deqp/functional/gles3/es3fIndexedStateQueryTests.js:			gl.deleteBuffer(buffers[ndx]);
deqp/functional/gles3/es3fIndexedStateQueryTests.js:		var state = /** @type {number} */ (gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('activetexture', 'Invalid gl.ActiveTexture() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if texture is not one of gl.TEXTUREi, where i ranges from 0 to (gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.activeTexture(-1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var numMaxTextureUnits = /** @type {number} */(gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.activeTexture(gl.TEXTURE0 + numMaxTextureUnits);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.bindTexture
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('bindTexture', 'Invalid gl.bindTexture() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the allowable values.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(0, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.FRAMEBUFFER, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if texture was previously created with a target that doesn\'t match that of target.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D_ARRAY, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_3D, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.compressedTexImage2D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage2d_invalid_target', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage2d_invalid_format', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if internalformat is not a supported format returned in gl.COMPRESSED_TEXTURE_FORMATS.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, 0, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, 0, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, 0, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, 0, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, 0, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, 0, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage2d_neg_level', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, -1, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, -1, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, -1, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, -1, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, -1, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, -1, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, -1, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage2d_max_level', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE) for a 2d texture target.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type {number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type {number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, log2MaxTextureSize, gl.COMPRESSED_RGB8_ETC2, 16, 16, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_CUBE_MAP_TEXTURE_SIZE) for a cubemap target.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type {number} */ var log2MaxCubemapSize = Math.floor(Math.log2(/** @type {number} */(gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, log2MaxCubemapSize, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, log2MaxCubemapSize, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, log2MaxCubemapSize, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, log2MaxCubemapSize, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, log2MaxCubemapSize, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, log2MaxCubemapSize, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage2d_neg_width_height', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_2D target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, 0, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, -1, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage2d_max_width_height', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var maxTextureSize = /** @type {number} */ (gl.getParameter(gl.MAX_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var maxCubemapSize = /** @type {number} */ (gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is greater than gl.MAX_TEXTURE_SIZE.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_2D target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxTextureSize, 1, 0, dataTextureMaxByOne);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 1, maxTextureSize, 0, dataTextureOneByMax);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxCubemapSize, 1, 0, dataCubemapMaxByOne);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 1, maxCubemapSize, 0, dataCubemapOneByMax);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxCubemapSize, 1, 0, dataCubemapMaxByOne);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 1, maxCubemapSize, 0, dataCubemapOneByMax);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxCubemapSize, 1, 0, dataCubemapMaxByOne);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 1, maxCubemapSize, 0, dataCubemapOneByMax);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxCubemapSize, 1, 0, dataCubemapMaxByOne);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 1, maxCubemapSize, 0, dataCubemapOneByMax);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxCubemapSize, 1, 0, dataCubemapMaxByOne);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 1, maxCubemapSize, 0, dataCubemapOneByMax);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxCubemapSize, 1, 0, dataCubemapMaxByOne);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 1, maxCubemapSize, 0, dataCubemapOneByMax);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage2d_invalid_border', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if border is not 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_2D target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, -1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, -1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, -1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, -1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, -1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, -1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, -1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage2d_invalid_size', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if imageSize is not consistent with the format, dimensions, and contents of the specified compressed image data.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, new Uint8Array(1));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, new Uint8Array(4 * 4 * 8));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGB8_ETC2, 16, 16, 0, new Uint8Array(4 * 4 * 16));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_SIGNED_R11_EAC, 16, 16, 0, new Uint8Array(4 * 4 * 16));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.copyTexImage2D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_invalid_target', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(0, 0, gl.RGB, 0, 0, 64, 64, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_invalid_format', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM or gl.INVALID_VALUE is generated if internalformat is not an accepted format.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 64, 64, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, 0, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, 0, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, 0, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, 0, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, 0, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, 0, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_inequal_width_height_cube', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if target is one of the six cube map 2D image targets and the width and height parameters are not equal.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, 16, 17, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, 16, 17, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, 16, 17, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, 16, 17, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, 16, 17, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, 16, 17, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_neg_level', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, -1, gl.RGB, 0, 0, 64, 64, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, -1, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, -1, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, -1, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, -1, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, -1, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, -1, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_max_level', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type {number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type {number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, log2MaxTextureSize, gl.RGB, 0, 0, 64, 64, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_CUBE_MAP_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type {number} */ var log2MaxCubemapSize = Math.floor(Math.log2(/** @type {number} */(gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, log2MaxCubemapSize, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, log2MaxCubemapSize, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, log2MaxCubemapSize, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, log2MaxCubemapSize, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, log2MaxCubemapSize, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, log2MaxCubemapSize, gl.RGB, 0, 0, 16, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_neg_width_height', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_2D target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, 0, 0, -1, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, 0, 0, 1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, 0, 0, -1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, -1, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, 1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, -1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, -1, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, 1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, -1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, -1, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, 1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, -1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, -1, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, 1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, -1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, -1, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, 1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, -1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, -1, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, 1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, -1, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_max_width_height', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var maxTextureSize = /** @type {number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var maxCubemapSize = /** @type {number} */(gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is greater than gl.MAX_TEXTURE_SIZE.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_2D target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, 0, 0, maxTextureSize, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, 0, 0, 1, maxTextureSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, 0, 0, maxTextureSize, maxTextureSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, 1, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, maxCubemapSize, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, maxCubemapSize, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, 1, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, maxCubemapSize, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, maxCubemapSize, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, 1, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, maxCubemapSize, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, maxCubemapSize, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, 1, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, maxCubemapSize, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, maxCubemapSize, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, 1, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, maxCubemapSize, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, maxCubemapSize, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, 1, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, maxCubemapSize, 1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, maxCubemapSize, maxCubemapSize, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_invalid_border', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if border is not 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_2D target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, 0, 0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, 0, 0, 0, 0, 1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, 0, 0, 1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 0, 0, 0, 0, 1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_2D target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 0, 0, 0, 0, 1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 0, 0, 0, 0, 1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 0, 0, 0, 0, 1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 0, 0, 0, 0, 1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copyteximage2d_incomplete_framebuffer', 'Invalid gl.copyTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGBA8, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGBA8, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGBA8, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGBA8, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGBA8, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGBA8, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.copyTexSubImage2D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage2d_invalid_target', 'Invalid gl.copyTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(0, 0, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage2d_neg_level', 'Invalid gl.copyTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.texImage2D(faceGL, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, -1, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.copyTexSubImage2D(faceGL, -1, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                local.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage2d_max_level', 'Invalid gl.copyTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D (gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.texImage2D(faceGL, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE) for 2D texture targets.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, log2MaxTextureSize, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_CUBE_MAP_SIZE) for cubemap targets.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxCubemapSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.copyTexSubImage2D(faceGL, log2MaxCubemapSize, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                local.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage2d_neg_offset', 'Invalid gl.copyTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D (gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if xoffset < 0 or yoffset < 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, -1, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, -1, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, -1, -1, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage2d_invalid_offset', 'Invalid gl.copyTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D (gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if xoffset + width > texture_width or yoffset + height > texture_height.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 14, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 14, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 14, 14, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage2d_neg_width_height', 'Invalid gl.copyTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D (gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, -1, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 0, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, -1, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage2d_incomplete_framebuffer', 'Invalid gl.copyTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.NO_ERROR is generated if texture is null.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.generateMipmap
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('generatemipmap', 'Invalid gl.generateMipmap() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.TEXTURE_2D or gl.TEXTURE_CUBE_MAP.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.generateMipmap(0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.REPEAT);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 32, 32, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the zero level array is stored in a compressed internal format.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.generateMipmap(gl.TEXTURE_2D);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the level base array was not specified with an unsized internal format or a sized internal format that is both color-renderable and texture-filterable.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB8_SNORM, 0, 0, 0, gl.RGB, gl.BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.generateMipmap(gl.TEXTURE_2D);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8I, 0, 0, 0, gl.RED_INTEGER, gl.BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.generateMipmap(gl.TEXTURE_2D);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 0, 0, 0, gl.RGBA, gl.FLOAT, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.generateMipmap(gl.TEXTURE_2D);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.pixelStorei
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('pixelstorei', 'Invalid gl.pixelStorei() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if pname is not an accepted value.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(0,1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if a negative row length, pixel skip, or row skip value is specified, or if alignment is specified as other than 1, 2, 4, or 8.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.PACK_ROW_LENGTH, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.PACK_SKIP_ROWS, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.PACK_SKIP_PIXELS, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.UNPACK_ROW_LENGTH, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, -1);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.PACK_ALIGNMENT, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.UNPACK_ALIGNMENT, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.PACK_ALIGNMENT, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.pixelStorei(gl.UNPACK_ALIGNMENT, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.texImage2D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage2d', 'Invalid gl.texImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(0, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not a type constant.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, 0, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if format is not an accepted format constant.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, 0, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if internalFormat is not one of the accepted resolution and format symbolic constants.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, 0, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the combination of internalFormat, format and type is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGB, gl.UNSIGNED_SHORT_4_4_4_4, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB5_A1, 1, 1, 0, gl.RGB, gl.UNSIGNED_SHORT_5_5_5_1, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB10_A2, 1, 1, 0, gl.RGB, gl.UNSIGNED_INT_2_10_10_10_REV, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32UI, 1, 1, 0, gl.RGBA_INTEGER, gl.INT, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage2d_inequal_width_height_cube', 'Invalid gl.texImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if target is one of the six cube map 2D image targets and the width and height parameters are not equal.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 1, 2, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 1, 2, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 1, 2, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 1, 2, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 1, 2, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 1, 2, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage2d_neg_level', 'Invalid gl.texImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, -1, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, -1, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, -1, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, -1, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, -1, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, -1, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, -1, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage2d_max_level', 'Invalid gl.texImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, log2MaxTextureSize, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_CUBE_MAP_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxCubemapSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, log2MaxCubemapSize, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, log2MaxCubemapSize, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, log2MaxCubemapSize, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, log2MaxCubemapSize, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, log2MaxCubemapSize, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, log2MaxCubemapSize, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage2d_neg_width_height', 'Invalid gl.texImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_2D target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, -1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, -1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, -1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, -1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, -1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, -1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, -1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, -1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, -1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, -1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, -1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, -1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, -1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, -1, -1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage2d_max_width_height', 'Invalid gl.texImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var maxTextureSize = /** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var maxCubemapSize = /** @type{number} */(gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is greater than gl.MAX_TEXTURE_SIZE.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, maxTextureSize, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, maxTextureSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, maxTextureSize, maxTextureSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is greater than gl.MAX_CUBE_MAP_TEXTURE_SIZE.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, maxCubemapSize, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 1, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, maxCubemapSize, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, maxCubemapSize, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 1, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, maxCubemapSize, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_POSITIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, maxCubemapSize, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 1, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, maxCubemapSize, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_X target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, maxCubemapSize, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 1, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, maxCubemapSize, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Y target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, maxCubemapSize, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 1, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, maxCubemapSize, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.TEXTURE_CUBE_MAP_NEGATIVE_Z target');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, maxCubemapSize, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 1, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, maxCubemapSize, maxCubemapSize, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage2d_invalid_border', 'Invalid gl.texImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if border is not 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, -1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, 1, 1, 1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, 1, 1, 1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, 1, 1, 1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, 1, 1, 1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, 1, 1, 1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, 1, 1, 1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.texSubImage2D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage2d', 'Invalid gl.texSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(0, 0, 0, 0, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if format is not an accepted format constant.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 4, 4, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not a type constant.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, gl.RGB, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the combination of internalFormat of the previously specified texture array, format and type is not valid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, gl.RGBA, gl.UNSIGNED_SHORT_5_6_5, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, gl.RGB, gl.UNSIGNED_SHORT_4_4_4_4, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, gl.RGB, gl.UNSIGNED_SHORT_5_5_5_1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, gl.RGB, gl.UNSIGNED_SHORT_5_5_5_1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, gl.RGBA_INTEGER, gl.UNSIGNED_INT, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 4, 4, gl.RGB, gl.FLOAT, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage2d_neg_level', 'Invalid gl.texSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 32, 32, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.texImage2D(faceGL, 0, gl.RGB, 32, 32, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, -1, 0, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.texSubImage2D(faceGL, -1, 0, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                local.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage2d_max_level', 'Invalid gl.texSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D (gl.TEXTURE_2D, 0, gl.RGB, 32, 32, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.texImage2D(faceGL, 0, gl.RGB, 32, 32, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, log2MaxTextureSize, 0, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_CUBE_MAP_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxCubemapSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.texSubImage2D(faceGL, log2MaxCubemapSize, 0, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                local.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage2d_neg_offset', 'Invalid gl.texSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 32, 32, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if xoffset or yoffset are negative.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, -1, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, -1, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, -1, -1, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage2d_invalid_offset', 'Invalid gl.texSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if xoffset + width > texture_width or yoffset + height > texture_height.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 30, 0, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 30, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 30, 30, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage2d_neg_width_height', 'Invalid gl.texSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, -1, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, -1, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, -1, -1, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.texParameteri
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texparameteri', 'Invalid gl.texParameteri() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target or pname is not one of the accepted defined values.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(0, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, 0, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(0, 0, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if params should have a defined symbolic constant value (based on the value of pname) and does not.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.REPEAT);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.NEAREST);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target or pname is not one of the accepted defined values.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(0, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, 0, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(0, 0, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if params should have a defined symbolic constant value (based on the value of pname) and does not.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.REPEAT);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.NEAREST);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.texParameterf
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texparameterf', 'Invalid gl.texParameterf() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target or pname is not one of the accepted defined values.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(0, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, 0, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(0, 0, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if params should have a defined symbolic constant value (based on the value of pname) and does not.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.REPEAT);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.NEAREST);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_ENUM, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target or pname is not one of the accepted defined values.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(0, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, 0, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(0, 0, gl.LINEAR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if params should have a defined symbolic constant value (based on the value of pname) and does not.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.REPEAT);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texParameterf(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.NEAREST);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.compressedTexSubImage2D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage2d', 'Invalid gl.compressedTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(0, 0, 0, 0, 0, 0, gl.COMPRESSED_RGB8_ETC2, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D (gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 18, 18, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(18, 18)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if format does not match the internal format of the texture image being modified.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, gl.COMPRESSED_RGB8_ETC2, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('For ETC2/EAC images gl.INVALID_OPERATION is generated if width is not a multiple of four, and width + xoffset is not equal to the width of the texture level.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 4, 0, 10, 4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(10, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('For ETC2/EAC images gl.INVALID_OPERATION is generated if height is not a multiple of four, and height + yoffset is not equal to the height of the texture level.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 4, 4, 10, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 10)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('For ETC2/EAC images gl.INVALID_OPERATION is generated if xoffset or yoffset is not a multiple of four.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 1, 4, 4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 1, 0, 4, 4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 1, 1, 4, 4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage2d_neg_level', 'Invalid gl.compressedTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D (gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 18, 18, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(18, 18)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.compressedTexImage2D(faceGL, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 18, 18, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(18, 18)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, -1, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.compressedTexSubImage2D(faceGL, -1, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                local.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage2d_max_level', 'Invalid gl.compressedTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D (gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 18, 18, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(18, 18)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.compressedTexImage2D(faceGL, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 18, 18, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(18, 18)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, log2MaxTextureSize, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_CUBE_MAP_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxCubemapSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                gl.compressedTexSubImage2D(faceGL, log2MaxCubemapSize, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:                local.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage2d_neg_offset', 'Invalid gl.compressedTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 8, 8, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(8, 8)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            // \note Both gl.INVALID_VALUE and gl.INVALID_OPERATION are valid here since implementation may
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE or gl.INVALID_OPERATION is generated if xoffset or yoffset are negative.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, -4, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, -4, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, -4, -4, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage2d_invalid_offset', 'Invalid gl.compressedTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D (gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(16, 16)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE or gl.INVALID_OPERATION is generated if xoffset + width > texture_width or yoffset + height > texture_height.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 12, 0, 8, 4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(8, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 12, 4, 8, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 8)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 12, 12, 8, 8, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(8, 8)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage2d_neg_width_height', 'Invalid gl.compressedTexSubImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D (gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(16, 16)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE or gl.INVALID_OPERATION is generated if width or height is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, -4, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, -4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, -4, -4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage2d_invalid_size', 'Invalid gl.compressedTexImage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage2D (gl.TEXTURE_2D, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(16, 16)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if imageSize is not consistent with the format, dimensions, and contents of the specified compressed image data.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(1));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 16, 16, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(4*4*16-1));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.texImage3D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage3d', 'Invalid gl.texImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(0, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not a type constant.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, 0, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if format is not an accepted format constant.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, 1, 1, 0, 0, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if internalFormat is not one of the accepted resolution and format symbolic constants.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, 0, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if target is gl.TEXTURE_3D and format is gl.DEPTH_COMPONENT, or gl.DEPTH_STENCIL.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, 1, 1, 0, gl.DEPTH_STENCIL, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, 1, 1, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the combination of internalFormat, format and type is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, 1, 1, 0, gl.RGB, gl.UNSIGNED_SHORT_4_4_4_4, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB5_A1, 1, 1, 1, 0, gl.RGB, gl.UNSIGNED_SHORT_5_5_5_1, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB10_A2, 1, 1, 1, 0, gl.RGB, gl.UNSIGNED_INT_2_10_10_10_REV, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA32UI, 1, 1, 1, 0, gl.RGBA_INTEGER, gl.INT, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage3d_neg_level', 'Invalid gl.texImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, -1, gl.RGB, 1, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, -1, gl.RGB, 1, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage3d_max_level', 'Invalid gl.texImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_3D_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2Max3DTextureSize = Math.floor(Math.log2(/** @type{number} */ (gl.getParameter(gl.MAX_3D_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, log2Max3DTextureSize, gl.RGB, 1, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */ (gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, log2MaxTextureSize, gl.RGB, 1, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage3d_neg_width_height_depth', 'Invalid gl.texImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, -1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, -1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, 1, -1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, -1, -1, -1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, -1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 1, -1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 1, 1, -1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, -1, -1, -1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage3d_max_width_height_depth', 'Invalid gl.texImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var max3DTextureSize = /** @type{number} */ (gl.getParameter(gl.MAX_3D_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var maxTextureSize = /** @type{number} */ (gl.getParameter(gl.MAX_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width, height or depth is greater than gl.MAX_3D_TEXTURE_SIZE.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, max3DTextureSize, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, max3DTextureSize, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 1, 1, max3DTextureSize, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, max3DTextureSize, max3DTextureSize, max3DTextureSize, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width, height or depth is greater than gl.MAX_TEXTURE_SIZE.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, maxTextureSize, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 1, maxTextureSize, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 1, 1, maxTextureSize, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, maxTextureSize, maxTextureSize, maxTextureSize, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('teximage3d_invalid_border', 'Invalid gl.texImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if border is not 0 or 1.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB, 1, 1, 1, -1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGB, 1, 1, 1, 2, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGB, 1, 1, 1, -1, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGB, 1, 1, 1, 2, gl.RGB, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.texSubImage3D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage3d', 'Invalid gl.texSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(0, 0, 0, 0, 0, 4, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_2D, 0, 0, 0, 0, 4, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if format is not an accepted format constant.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 0, 4, 4, 4, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not a type constant.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 4, 4, 4, gl.RGB, 0, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the combination of internalFormat of the previously specified texture array, format and type is not valid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 4, 4, 4, gl.RGB, gl.UNSIGNED_SHORT_4_4_4_4, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 4, 4, 4, gl.RGB, gl.UNSIGNED_SHORT_5_5_5_1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 4, 4, 4, gl.RGB, gl.UNSIGNED_SHORT_5_5_5_1, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 4, 4, 4, gl.RGBA_INTEGER, gl.UNSIGNED_INT, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 4, 4, 4, gl.RGB, gl.FLOAT, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage3d_neg_level', 'Invalid gl.texSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, -1, 0, 0, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, -1, 0, 0, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage3d_max_level', 'Invalid gl.texSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2Max3DTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_3D_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_3D_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, log2Max3DTextureSize, 0, 0, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, log2MaxTextureSize, 0, 0, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage3d_neg_offset', 'Invalid gl.texSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if xoffset, yoffset or zoffset are negative.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, -1, 0, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, -1, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, -1, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, -1, -1, -1, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, -1, 0, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, -1, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, -1, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, -1, -1, -1, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage3d_invalid_offset', 'Invalid gl.texSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if xoffset + width > texture_width.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 2, 0, 0, 4, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if yoffset + height > texture_height.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 2, 0, 4, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if zoffset + depth > texture_depth.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 2, 4, 4, 4, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texsubimage3d_neg_width_height', 'Invalid gl.texSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width, height or depth is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, -1, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 0, -1, 0, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 0, 0, -1, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, -1, -1, -1, gl.RGBA, gl.UNSIGNED_BYTE, uint8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage3d', 'Invalid gl.copyTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(0, 0, 0, 0, 0, 0, 0, 4, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage3d_neg_level', 'Invalid gl.copyTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, -1, 0, 0, 0, 0, 0, 4, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_2D_ARRAY, -1, 0, 0, 0, 0, 0, 4, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage3d_max_level', 'Invalid gl.copyTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2Max3DTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_3D_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_3D_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, log2Max3DTextureSize, 0, 0, 0, 0, 0, 4, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_2D_ARRAY, log2MaxTextureSize, 0, 0, 0, 0, 0, 4, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage3d_neg_offset', 'Invalid gl.copyTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if xoffset, yoffset or zoffset is negative.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, -1, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, -1, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, -1, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, -1, -1, -1, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage3d_invalid_offset', 'Invalid gl.copyTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if xoffset + width > texture_width.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 1, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if yoffset + height > texture_height.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 1, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if zoffset + 1 > texture_depth.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 4, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage3d_neg_width_height', 'Invalid gl.copyTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D (gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width < 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 0, 0, -4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if height < 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 0, 0, 4, -4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('copytexsubimage3d_incomplete_framebuffer', 'Invalid gl.copyTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_3D, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture(gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.copyTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 0, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.compressedTexImage3D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage3d', 'Invalid gl.compressedTexImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[0] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture[1] = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_CUBE_MAP, texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if internalformat is not one of the specific compressed internal formats.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA8, 0, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage3d_neg_level', 'Invalid gl.compressedTexImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, -1, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage3d_max_level', 'Invalid gl.compressedTexImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, log2MaxTextureSize, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage3d_neg_width_height_depth', 'Invalid gl.compressedTexImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width, height or depth is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, -1, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, -1, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, -1, -1, -1, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage3d_max_width_height_depth', 'Invalid gl.compressedTexImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            var maxTextureSize = /** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width, height or depth is greater than gl.MAX_TEXTURE_SIZE.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxTextureSize, 0, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, maxTextureSize, 0, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, maxTextureSize, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, maxTextureSize, maxTextureSize, maxTextureSize, 0, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage3d_invalid_border', 'Invalid gl.compressedTexImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if border is not 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, -1, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, 1, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedteximage3d_invalid_size', 'Invalid gl.compressedTexImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if imageSize is not consistent with the format, dimensions, and contents of the specified compressed image data.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 0, 0, 0, 0, new Uint8Array(1));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 1, 0, new Uint8Array(4*4*8));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGB8_ETC2, 16, 16, 1, 0, new Uint8Array(4*4*16));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_SIGNED_R11_EAC, 16, 16, 1, 0, new Uint8Array(4*4*16));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.compressedTexSubImage3D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage3d', 'Invalid gl.compressedTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is invalid.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(0, 0, 0, 0, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 18, 18, 1, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(18, 18)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if format does not match the internal format of the texture image being modified.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 0, 0, 0, gl.COMPRESSED_RGB8_ETC2, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if internalformat is an ETC2/EAC format and target is not gl.TEXTURE_2D_ARRAY.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, 18, 18, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(18, 18)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('For ETC2/EAC images gl.INVALID_OPERATION is generated if width is not a multiple of four, and width + xoffset is not equal to the width of the texture level.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 4, 0, 0, 10, 4, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(10, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('For ETC2/EAC images gl.INVALID_OPERATION is generated if height is not a multiple of four, and height + yoffset is not equal to the height of the texture level.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 4, 0, 4, 10, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 10)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('For ETC2/EAC images gl.INVALID_OPERATION is generated if xoffset or yoffset is not a multiple of four.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 1, 0, 0, 4, 4, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 1, 0, 4, 4, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 1, 1, 0, 4, 4, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage3d_neg_level', 'Invalid gl.compressedTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 1, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(16, 16)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, -1, 0, 0, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage3d_max_level', 'Invalid gl.compressedTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 1, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(16, 16)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if level is greater than log_2(gl.MAX_TEXTURE_SIZE).');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            /** @type{number} */ var log2MaxTextureSize = Math.floor(Math.log2(/** @type{number} */(gl.getParameter(gl.MAX_TEXTURE_SIZE)))) + 1;
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, log2MaxTextureSize, 0, 0, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage3d_neg_offset', 'Invalid gl.compressedTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 1, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(16, 16)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE or gl.INVALID_OPERATION is generated if xoffset, yoffset or zoffset are negative.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, -4, 0, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, -4, 0, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, -4, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, -4, -4, -4, 0, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage3d_invalid_offset', 'Invalid gl.compressedTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 4, 4, 1, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE or gl.INVALID_OPERATION is generated if xoffset + width > texture_width or yoffset + height > texture_height.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 12, 0, 0, 8, 4, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(8, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 12, 0, 4, 8, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 8)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 12, 4, 4, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(4, 4)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 12, 12, 12, 8, 8, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(8, 8)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage3d_neg_width_height_depth', 'Invalid gl.compressedTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 1, 0, new Uint8Array(es3fNegativeTextureApiTests.etc2EacDataSize(16, 16)));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE or gl.INVALID_OPERATION is generated if width, height or depth are negative.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, -4, 0, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 0, -4, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 0, 0, -4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, -4, -4, -4, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError([gl.INVALID_VALUE, gl.INVALID_OPERATION]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('compressedtexsubimage3d_invalid_size', 'Invalid gl.compressedTexSubImage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D_ARRAY, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexImage3D (gl.TEXTURE_2D_ARRAY, 0, gl.COMPRESSED_RGBA8_ETC2_EAC, 16, 16, 1, 0, new Uint8Array(4*4*16));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if imageSize is not consistent with the format, dimensions, and contents of the specified compressed image data.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 16, 16, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(0));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, 16, 16, 1, gl.COMPRESSED_RGBA8_ETC2_EAC, new Uint8Array(4*4*16-1));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.texStorage2D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texstorage2d', 'Invalid gl.texStorage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM or gl.INVALID_VALUE is generated if internalformat is not a valid sized internal format.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 1, 0, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError ([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 1, gl.RGBA_INTEGER, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError ([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the accepted target enumerants.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (0, 1, gl.RGBA8, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_3D, 1, gl.RGBA8, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D_ARRAY, 1, gl.RGBA8, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height are less than 1.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 1, gl.RGBA8, 0, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 1, gl.RGBA8, 16, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 1, gl.RGBA8, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texstorage2d_invalid_binding', 'Invalid gl.texStorage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if there is no texture object curently bound to target.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 1, gl.RGBA8, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the texture object currently bound to target already has gl.TEXTURE_IMMUTABLE_FORMAT set to true.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            immutable = /** @type{number} */(gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_IMMUTABLE_FORMAT));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('// gl.TEXTURE_IMMUTABLE_FORMAT = ' + ((immutable != 0) ? 'true' : 'false'));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 1, gl.RGBA8, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            immutable = /** @type{number} */(gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_IMMUTABLE_FORMAT));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('// gl.TEXTURE_IMMUTABLE_FORMAT = ' + ((immutable != 0) ? 'true' : 'false'));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 1, gl.RGBA8, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texstorage2d_invalid_levels', 'Invalid gl.texStorage2D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if levels is less than 1.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 0, gl.RGBA8, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, 0, gl.RGBA8, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if levels is greater than floor(log_2(max(width, height))) + 1');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, log2MaxSize, gl.RGBA8, 16, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, log2MaxSize, gl.RGBA8, 4, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage2D (gl.TEXTURE_2D, log2MaxSize, gl.RGBA8, 16, 16);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        // gl.texStorage3D
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texstorage3d', 'Invalid gl.texStorage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM or gl.INVALID_VALUE is generated if internalformat is not a valid sized internal format.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, 0, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError ([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, gl.RGBA_INTEGER, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError ([gl.INVALID_ENUM, gl.INVALID_VALUE]);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the accepted target enumerants.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (0, 1, gl.RGBA8, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_CUBE_MAP, 1, gl.RGBA8, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_2D, 1, gl.RGBA8, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if width, height or depth are less than 1.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, gl.RGBA8, 0, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, gl.RGBA8, 4, 0, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, gl.RGBA8, 4, 4, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, gl.RGBA8, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texstorage3d_invalid_binding', 'Invalid gl.texStorage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, null);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if there is no texture object curently bound to target.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, gl.RGBA8, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if the texture object currently bound to target already has gl.TEXTURE_IMMUTABLE_FORMAT set to true.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            immutable = /** @type{number} */(gl.getTexParameter(gl.TEXTURE_3D, gl.TEXTURE_IMMUTABLE_FORMAT));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('// gl.TEXTURE_IMMUTABLE_FORMAT = ' + ((immutable != 0) ? 'true' : 'false'));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, gl.RGBA8, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            immutable = /** @type{number} */(gl.getTexParameter(gl.TEXTURE_3D, gl.TEXTURE_IMMUTABLE_FORMAT));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('// gl.TEXTURE_IMMUTABLE_FORMAT = ' + ((immutable != 0) ? 'true' : 'false'));
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 1, gl.RGBA8, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('texstorage3d_invalid_levels', 'Invalid gl.texStorage3D() usage', gl,
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.bindTexture (gl.TEXTURE_3D, texture);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if levels is less than 1.');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 0, gl.RGBA8, 4, 4, 4);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, 0, gl.RGBA8, 0, 0, 0);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if levels is greater than floor(log_2(max(width, height, depth))) + 1');
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, log2MaxSize, gl.RGBA8, 8, 2, 2);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, log2MaxSize, gl.RGBA8, 2, 8, 2);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, log2MaxSize, gl.RGBA8, 2, 2, 8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.texStorage3D (gl.TEXTURE_3D, log2MaxSize, gl.RGBA8, 8, 8, 8);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeTextureApiTests.js:            gl.deleteTexture(texture);
deqp/functional/gles3/es3fFboRenderTest.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fFboRenderTest.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFboRenderTest.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/functional/gles3/es3fFboRenderTest.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/functional/gles3/es3fFboRenderTest.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fFboRenderTest.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFboRenderTest.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/functional/gles3/es3fFboRenderTest.js:        framework.opengl.simplereference.sglrReferenceContext;
deqp/functional/gles3/es3fFboRenderTest.js:        // Buffer bit mask (gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT|...)
deqp/functional/gles3/es3fFboRenderTest.js:        // gl.TEXTURE_2D, gl.TEXTURE_CUBE_MAP, gl.RENDERBUFFER
deqp/functional/gles3/es3fFboRenderTest.js:        this.colorType = colorType_ ? colorType_ : gl.NONE;
deqp/functional/gles3/es3fFboRenderTest.js:        this.colorFormat = colorFormat_ ? colorFormat_ : gl.NONE;
deqp/functional/gles3/es3fFboRenderTest.js:            depthStencilType_ : gl.NONE;
deqp/functional/gles3/es3fFboRenderTest.js:            depthStencilFormat_ : gl.NONE;
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.TEXTURE_2D: return 'tex2d';
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RENDERBUFFER: return 'rbo';
deqp/functional/gles3/es3fFboRenderTest.js:        assertMsgOptions((this.buffers & gl.COLOR_BUFFER_BIT) != 0,
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.buffers & gl.DEPTH_BUFFER_BIT)
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.buffers & gl.STENCIL_BUFFER_BIT)
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.buffers & (gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT))
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RGB16F:
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RGBA16F:
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RG16F:
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.R16F:
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RGBA32F:
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RGB32F:
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.R11F_G11F_B10F:
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RG32F:
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.R32F:
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.m_config.buffers & (gl.COLOR_BUFFER_BIT)) {
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.TEXTURE_2D, this.m_colorBuffer, 0
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.RENDERBUFFER, this.m_colorBuffer
deqp/functional/gles3/es3fFboRenderTest.js:            (gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)) {
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:            var bit = ndx ? gl.STENCIL_BUFFER_BIT : gl.DEPTH_BUFFER_BIT;
deqp/functional/gles3/es3fFboRenderTest.js:            var point = ndx ? gl.STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.FRAMEBUFFER, point, gl.TEXTURE_2D,
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.FRAMEBUFFER, point,
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.RENDERBUFFER, this.m_depthStencilBuffer
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:        this.m_context.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fFboRenderTest.js:        var status = this.m_context.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboRenderTest.js:        this.m_context.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:        if (status != gl.FRAMEBUFFER_COMPLETE)
deqp/functional/gles3/es3fFboRenderTest.js:        this.m_context.bindTexture(gl.TEXTURE_2D, name);
deqp/functional/gles3/es3fFboRenderTest.js:            gl.TEXTURE_2D, 0, format, width, height
deqp/functional/gles3/es3fFboRenderTest.js:                gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fFboRenderTest.js:                gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE
deqp/functional/gles3/es3fFboRenderTest.js:            gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST
deqp/functional/gles3/es3fFboRenderTest.js:            gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST
deqp/functional/gles3/es3fFboRenderTest.js:        this.m_context.bindRenderbuffer(gl.RENDERBUFFER, name);
deqp/functional/gles3/es3fFboRenderTest.js:            gl.RENDERBUFFER, format, width, height
deqp/functional/gles3/es3fFboRenderTest.js:        if (type == gl.TEXTURE_2D || type == gl.TEXTURE_CUBE_MAP)
deqp/functional/gles3/es3fFboRenderTest.js:        else if (type == gl.RENDERBUFFER)
deqp/functional/gles3/es3fFboRenderTest.js:                type == gl.NONE, 'Invalid buffer type', false, true
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, name);
deqp/functional/gles3/es3fFboRenderTest.js:            gl.TEXTURE_2D, 0, format, width, height, 0, format,
deqp/functional/gles3/es3fFboRenderTest.js:        context.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, name);
deqp/functional/gles3/es3fFboRenderTest.js:            gl.TEXTURE_2D, 0, format, width, height, 0,
deqp/functional/gles3/es3fFboRenderTest.js:        context.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fFboRenderTest.js:        var width = Math.min(gl.canvas.width, 128);
deqp/functional/gles3/es3fFboRenderTest.js:        var height = Math.min(gl.canvas.height, 128);
deqp/functional/gles3/es3fFboRenderTest.js:        var xMax = gl.canvas.width - width + 1;
deqp/functional/gles3/es3fFboRenderTest.js:        var yMax = gl.canvas.height - height + 1;
deqp/functional/gles3/es3fFboRenderTest.js:                gl.COLOR_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                gl.DEPTH_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                gl.STENCIL_BUFFER_BIT
deqp/functional/gles3/es3fFboRenderTest.js:                if(e.getReason() == gl.FRAMEBUFFER_UNSUPPORTED) {
deqp/functional/gles3/es3fFboRenderTest.js:                gl.getParameter(gl.ALPHA_BITS) ? 8 : 0
deqp/functional/gles3/es3fFboRenderTest.js:            /** @type {number} */ (gl.getParameter(gl.DEPTH_BITS)),
deqp/functional/gles3/es3fFboRenderTest.js:            /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS)),
deqp/functional/gles3/es3fFboRenderTest.js:            gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT
deqp/functional/gles3/es3fFboRenderTest.js:        gl.clearColor(0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fFboRenderTest.js:        gl.clearDepth(1.0);
deqp/functional/gles3/es3fFboRenderTest.js:        gl.clearStencil(0);
deqp/functional/gles3/es3fFboRenderTest.js:        gl.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        gl.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        gl.disable(gl.BLEND);
deqp/functional/gles3/es3fFboRenderTest.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:            context, quadsTex, gl.RGBA, gl.UNSIGNED_BYTE, width, height
deqp/functional/gles3/es3fFboRenderTest.js:            context, metaballsTex, gl.RGBA, gl.UNSIGNED_BYTE, width, height
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fbo.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT
deqp/functional/gles3/es3fFboRenderTest.js:        context.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, quadsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        context.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, metaballsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        context.stencilFunc(gl.EQUAL, 2, 0xff);
deqp/functional/gles3/es3fFboRenderTest.js:        context.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        if (fbo.getConfig().colorType == gl.TEXTURE_2D) {
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindTexture(gl.TEXTURE_2D, fbo.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            (this.m_config.buffers & gl.STENCIL_BUFFER_BIT) != 0;
deqp/functional/gles3/es3fFboRenderTest.js:        context.disable(gl.DITHER);
deqp/functional/gles3/es3fFboRenderTest.js:            context, quadsTex, gl.RGB, gl.UNSIGNED_BYTE, 64, 64
deqp/functional/gles3/es3fFboRenderTest.js:            context, metaballsTex, gl.RGBA, gl.UNSIGNED_BYTE, 64, 64
deqp/functional/gles3/es3fFboRenderTest.js:            deMath.binaryNot(gl.COLOR_BUFFER_BIT),
deqp/functional/gles3/es3fFboRenderTest.js:        cfg.colorType = gl.NONE;
deqp/functional/gles3/es3fFboRenderTest.js:        cfg.colorFormat = gl.NONE;
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fboB.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.TEXTURE_2D, fboA.getColorBuffer(), 0
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.RENDERBUFFER, fboA.getColorBuffer()
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fboA.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, quadsTex);
deqp/functional/gles3/es3fFboRenderTest.js:            gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT
deqp/functional/gles3/es3fFboRenderTest.js:            context.clear(gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fboB.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, metaballsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        context.enable(gl.BLEND);
deqp/functional/gles3/es3fFboRenderTest.js:            gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, quadsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        context.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.clear(gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:            context.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboRenderTest.js:            context.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        if (fboA.getConfig().colorType == gl.TEXTURE_2D) {
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindTexture(gl.TEXTURE_2D, fboA.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:        var colorbuffer = this.m_config.colorType == gl.TEXTURE_2D?
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.m_config.colorType == gl.TEXTURE_2D) {
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindTexture(gl.TEXTURE_2D, colorbuffer);
deqp/functional/gles3/es3fFboRenderTest.js:                gl.TEXTURE_2D, 0, this.m_config.colorFormat, width, height
deqp/functional/gles3/es3fFboRenderTest.js:                gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST
deqp/functional/gles3/es3fFboRenderTest.js:                gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST
deqp/functional/gles3/es3fFboRenderTest.js:                this.m_config.colorType == gl.RENDERBUFFER,
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindRenderbuffer(gl.RENDERBUFFER, colorbuffer);
deqp/functional/gles3/es3fFboRenderTest.js:                gl.RENDERBUFFER, this.m_config.colorFormat, width, height
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindFramebuffer(gl.FRAMEBUFFER, fbo[fboi]);
deqp/functional/gles3/es3fFboRenderTest.js:            if (this.m_config.colorType == gl.TEXTURE_2D)
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.TEXTURE_2D, colorbuffer, 0
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.RENDERBUFFER, colorbuffer
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fbo[0]);
deqp/functional/gles3/es3fFboRenderTest.js:        var status = context.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboRenderTest.js:        if (status != gl.FRAMEBUFFER_COMPLETE)
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fbo[1]);
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fbo[2]);
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fbo[0]);
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.m_config.colorType == gl.TEXTURE_2D) {
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.m_config.colorType == gl.TEXTURE_2D)
deqp/functional/gles3/es3fFboRenderTest.js:                gl.DEPTH_BUFFER_BIT, gl.STENCIL_BUFFER_BIT, deMath.BinaryOp.OR
deqp/functional/gles3/es3fFboRenderTest.js:        // bool depth = (this.m_config.buffers & gl.DEPTH_BUFFER_BIT) != 0;
deqp/functional/gles3/es3fFboRenderTest.js:            (this.m_config.buffers & gl.STENCIL_BUFFER_BIT) != 0;
deqp/functional/gles3/es3fFboRenderTest.js:            context, metaballsTex, gl.RGB, gl.UNSIGNED_BYTE, 64, 64
deqp/functional/gles3/es3fFboRenderTest.js:            context, quadsTex, gl.RGB, gl.UNSIGNED_BYTE, 64, 64
deqp/functional/gles3/es3fFboRenderTest.js:            deMath.binaryNot(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT),
deqp/functional/gles3/es3fFboRenderTest.js:        cfg.depthStencilType = gl.NONE;
deqp/functional/gles3/es3fFboRenderTest.js:        cfg.depthStencilFormat = gl.NONE;
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fboB.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            var bit = ndx ? gl.STENCIL_BUFFER_BIT : gl.DEPTH_BUFFER_BIT;
deqp/functional/gles3/es3fFboRenderTest.js:            var point = ndx ? gl.STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.FRAMEBUFFER, point, gl.TEXTURE_2D,
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.FRAMEBUFFER, point, gl.RENDERBUFFER,
deqp/functional/gles3/es3fFboRenderTest.js:            gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT
deqp/functional/gles3/es3fFboRenderTest.js:        context.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fboA.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, quadsTex);
deqp/functional/gles3/es3fFboRenderTest.js:            context.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.clear(gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:            context.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fboB.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, metaballsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        context.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.stencilFunc(gl.EQUAL, 0, 0xff);
deqp/functional/gles3/es3fFboRenderTest.js:            context.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.m_config.colorType == gl.TEXTURE_2D) {
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindTexture(gl.TEXTURE_2D, fboA.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindTexture(gl.TEXTURE_2D, fboB.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            this.m_config.buffers, gl.DEPTH_BUFFER_BIT, deMath.BinaryOp.AND
deqp/functional/gles3/es3fFboRenderTest.js:            this.m_config.buffers, gl.STENCIL_BUFFER_BIT, deMath.BinaryOp.AND
deqp/functional/gles3/es3fFboRenderTest.js:            context, quadsTex, gl.RGB, gl.UNSIGNED_BYTE, 64, 64
deqp/functional/gles3/es3fFboRenderTest.js:            context, metaballsTex, gl.RGB, gl.UNSIGNED_BYTE, 32, 32
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindFramebuffer(gl.FRAMEBUFFER, fbo.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, quadsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        if (fbo.getConfig().colorType == gl.TEXTURE_2D) {
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindTexture(gl.TEXTURE_2D, fbo.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindFramebuffer(gl.FRAMEBUFFER, fbo.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                context.bindTexture(gl.TEXTURE_2D, fbo.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.TEXTURE_2D, 0, fbo.getConfig().colorFormat,
deqp/functional/gles3/es3fFboRenderTest.js:            case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:                context.bindRenderbuffer(gl.RENDERBUFFER, fbo.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.RENDERBUFFER, fbo.getConfig().colorFormat,
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.TEXTURE_2D, fbo.getDepthStencilBuffer()
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.TEXTURE_2D, 0, fbo.getConfig().depthStencilFormat,
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.RENDERBUFFER, fbo.getDepthStencilBuffer()
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.RENDERBUFFER, fbo.getConfig().depthStencilFormat,
deqp/functional/gles3/es3fFboRenderTest.js:        context.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        context.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, metaballsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        context.bindTexture(gl.TEXTURE_2D, quadsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        context.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.clear(gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:            context.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            context.stencilFunc(gl.EQUAL, 1, 0xff);
deqp/functional/gles3/es3fFboRenderTest.js:            context.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        if (this.m_config.colorType == gl.TEXTURE_2D) {
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:            context.bindTexture(gl.TEXTURE_2D, fbo.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            this.m_config.buffers, gl.STENCIL_BUFFER_BIT, deMath.BinaryOp.AND
deqp/functional/gles3/es3fFboRenderTest.js:            ctx, quadsTex, gl.RGB, gl.UNSIGNED_BYTE, 64, 64
deqp/functional/gles3/es3fFboRenderTest.js:            ctx, metaballsTex, gl.RGB, gl.UNSIGNED_BYTE, 64, 64
deqp/functional/gles3/es3fFboRenderTest.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:        ctx.clear(gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        ctx.bindTexture(gl.TEXTURE_2D, quadsTex);
deqp/functional/gles3/es3fFboRenderTest.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.clear(gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.disable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.DEPTH_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.STENCIL_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.DEPTH_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.STENCIL_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.DEPTH_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.STENCIL_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:            var bit = ndx == 0 ? gl.COLOR_BUFFER_BIT :
deqp/functional/gles3/es3fFboRenderTest.js:                (gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                    ctx.bindTexture(gl.TEXTURE_2D, buf);
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.TEXTURE_2D, 0, format, width, height
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST
deqp/functional/gles3/es3fFboRenderTest.js:                case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:                    ctx.bindRenderbuffer(gl.RENDERBUFFER, buf);
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.RENDERBUFFER, format, width, height
deqp/functional/gles3/es3fFboRenderTest.js:                var bit = ndx == 0 ? gl.COLOR_BUFFER_BIT :
deqp/functional/gles3/es3fFboRenderTest.js:                    ndx == 1 ? gl.DEPTH_BUFFER_BIT :
deqp/functional/gles3/es3fFboRenderTest.js:                    ndx == 2 ? gl.STENCIL_BUFFER_BIT : 0;
deqp/functional/gles3/es3fFboRenderTest.js:                var point = ndx == 0 ? gl.COLOR_ATTACHMENT0 :
deqp/functional/gles3/es3fFboRenderTest.js:                    ndx == 1 ? gl.DEPTH_ATTACHMENT :
deqp/functional/gles3/es3fFboRenderTest.js:                    ndx == 2 ? gl.STENCIL_ATTACHMENT : 0;
deqp/functional/gles3/es3fFboRenderTest.js:                    case gl.TEXTURE_2D:
deqp/functional/gles3/es3fFboRenderTest.js:                            gl.FRAMEBUFFER, point, gl.TEXTURE_2D, buf, 0
deqp/functional/gles3/es3fFboRenderTest.js:                    case gl.RENDERBUFFER:
deqp/functional/gles3/es3fFboRenderTest.js:                            gl.FRAMEBUFFER, point, gl.RENDERBUFFER, buf
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo.getFramebuffer());
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.DEPTH_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.STENCIL_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:            this.m_buffers, gl.COLOR_BUFFER_BIT, deMath.BinaryOp.AND)) {
deqp/functional/gles3/es3fFboRenderTest.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.stencilFunc(gl.EQUAL, 0, 0xff);
deqp/functional/gles3/es3fFboRenderTest.js:        ctx.bindTexture(gl.TEXTURE_2D, metaballsTex);
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboRenderTest.js:        if (fbo.getConfig().colorType == gl.TEXTURE_2D) {
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFboRenderTest.js:            ctx.bindTexture(gl.TEXTURE_2D, fbo.getColorBuffer());
deqp/functional/gles3/es3fFboRenderTest.js:            gl.TEXTURE_2D,
deqp/functional/gles3/es3fFboRenderTest.js:            gl.RENDERBUFFER
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGBA32F, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGBA32I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGBA32UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGBA16F, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGBA16I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGBA16UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGB16F, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGBA8I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGBA8UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RGB10_A2UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R11F_G11F_B10F, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG32F, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG32I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG32UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG16F, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG16I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG16UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG8, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG8I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.RG8UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R32F, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R32I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R32UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R16F, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R16I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R16UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R8, type: FormatType.FLOAT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R8I, type: FormatType.INT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.R8UI, type: FormatType.UINT
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.DEPTH_COMPONENT32F, depth: true, stencil: false
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.DEPTH_COMPONENT24, depth: true, stencil: false
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.DEPTH_COMPONENT16, depth: true, stencil: false
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.DEPTH32F_STENCIL8, depth: true, stencil: true
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.DEPTH24_STENCIL8, depth: true, stencil: true
deqp/functional/gles3/es3fFboRenderTest.js:                format: gl.STENCIL_INDEX8, depth: false, stencil: true
deqp/functional/gles3/es3fFboRenderTest.js:            colorType = gl.TEXTURE_2D;
deqp/functional/gles3/es3fFboRenderTest.js:            stencilType = gl.RENDERBUFFER;
deqp/functional/gles3/es3fFboRenderTest.js:            colorFmt = gl.RGBA8;
deqp/functional/gles3/es3fFboRenderTest.js:                gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.COLOR_BUFFER_BIT, objectTypes[typeNdx],
deqp/functional/gles3/es3fFboRenderTest.js:                    colorFormats[colorFmtNdx].format, gl.NONE, gl.NONE
deqp/functional/gles3/es3fFboRenderTest.js:            depthStencilType = gl.RENDERBUFFER;
deqp/functional/gles3/es3fFboRenderTest.js:            depthStencilFormat = gl.DEPTH24_STENCIL8;
deqp/functional/gles3/es3fFboRenderTest.js:                colorFormats[colorFmtNdx].format == gl.RGBA32F ||
deqp/functional/gles3/es3fFboRenderTest.js:                colorFormats[colorFmtNdx].format == gl.RGB32F ||
deqp/functional/gles3/es3fFboRenderTest.js:                colorFormats[colorFmtNdx].format == gl.RG32F ||
deqp/functional/gles3/es3fFboRenderTest.js:                colorFormats[colorFmtNdx].format == gl.R32F)
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.COLOR_BUFFER_BIT, objectTypes[typeNdx],
deqp/functional/gles3/es3fFboRenderTest.js:                    colorFormats[colorFmtNdx].format, gl.NONE, gl.NONE
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.COLOR_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.DEPTH_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                        gl.STENCIL_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:            colorType = gl.TEXTURE_2D;
deqp/functional/gles3/es3fFboRenderTest.js:            colorFmt = gl.RGBA8;
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.COLOR_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                    (depth ? gl.DEPTH_BUFFER_BIT : 0) |
deqp/functional/gles3/es3fFboRenderTest.js:                    (stencil ? gl.STENCIL_BUFFER_BIT : 0),
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.COLOR_BUFFER_BIT, objectTypes[typeNdx],
deqp/functional/gles3/es3fFboRenderTest.js:                    colorFormat, gl.NONE, gl.NONE
deqp/functional/gles3/es3fFboRenderTest.js:            if (colorFormat == gl.RGBA8 || colorFormat == gl.RGBA16F) {
deqp/functional/gles3/es3fFboRenderTest.js:                    colorType = gl.TEXTURE_2D;
deqp/functional/gles3/es3fFboRenderTest.js:                        if (!depth && objectTypes[typeNdx] != gl.RENDERBUFFER)
deqp/functional/gles3/es3fFboRenderTest.js:                            gl.COLOR_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                            (depth ? gl.DEPTH_BUFFER_BIT : 0) |
deqp/functional/gles3/es3fFboRenderTest.js:                            (stencil ? gl.STENCIL_BUFFER_BIT : 0),
deqp/functional/gles3/es3fFboRenderTest.js:            depthStencilFormat = gl.DEPTH24_STENCIL8;
deqp/functional/gles3/es3fFboRenderTest.js:            depthStencilType = gl.RENDERBUFFER;
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.COLOR_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.DEPTH_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.STENCIL_BUFFER_BIT,
deqp/functional/gles3/es3fFboRenderTest.js:                        config, gl.COLOR_BUFFER_BIT, true /* rebind */
deqp/functional/gles3/es3fFboRenderTest.js:            colorType = gl.TEXTURE_2D;
deqp/functional/gles3/es3fFboRenderTest.js:            colorFmt = gl.RGBA8;
deqp/functional/gles3/es3fFboRenderTest.js:                if (!depth && objectTypes[typeNdx] != gl.RENDERBUFFER)
deqp/functional/gles3/es3fFboRenderTest.js:                    gl.COLOR_BUFFER_BIT |
deqp/functional/gles3/es3fFboRenderTest.js:                    (depth ? gl.DEPTH_BUFFER_BIT : 0) |
deqp/functional/gles3/es3fFboRenderTest.js:                    (stencil ? gl.STENCIL_BUFFER_BIT : 0),
deqp/functional/gles3/es3fFboRenderTest.js:                        (depth ? gl.DEPTH_BUFFER_BIT : 0) |
deqp/functional/gles3/es3fFboRenderTest.js:                        (stencil ? gl.STENCIL_BUFFER_BIT : 0),
deqp/functional/gles3/es3fLifetimeTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fLifetimeTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fLifetimeTests.js:    this.m_scaleLoc = gl.getUniformLocation(this.getProgram(), 'scale');
deqp/functional/gles3/es3fLifetimeTests.js:    this.m_posLoc = gl.getAttribLocation(this.getProgram(), 'pos');
deqp/functional/gles3/es3fLifetimeTests.js:    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.clearColor(0, 0, 0, 1);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindVertexArray(vao);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.enableVertexAttribArray(this.m_posLoc);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.useProgram(this.getProgram());
deqp/functional/gles3/es3fLifetimeTests.js:    gl.uniform1f(this.m_scaleLoc, scale);
deqp/functional/gles3/es3fLifetimeTests.js:        gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.drawArrays(gl.TRIANGLES, 0, 3);
deqp/functional/gles3/es3fLifetimeTests.js:        gl.endTransformFeedback();
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindVertexArray(null);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindVertexArray(vao);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.vertexAttribPointer(this.m_posLoc, NUM_COMPONENTS, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindVertexArray(null);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fLifetimeTests.js:    sources.add(new gluShaderProgram.TransformFeedbackMode(gl.INTERLEAVED_ATTRIBS));
deqp/functional/gles3/es3fLifetimeTests.js:    glsLifetimeTests.SimpleBinder.call(this, null, gl.NONE, gl.VERTEX_ARRAY_BINDING);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindVertexArray(vao);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindSampler(0, sampler);
deqp/functional/gles3/es3fLifetimeTests.js:es3fLifetimeTests.SamplerBinder.prototype.getBinding = function() { return /** @type {WebGLSampler} */ (gl.getParameter(gl.SAMPLER_BINDING)); };
deqp/functional/gles3/es3fLifetimeTests.js:        gl.beginQuery(gl.ANY_SAMPLES_PASSED, query);
deqp/functional/gles3/es3fLifetimeTests.js:        gl.endQuery(gl.ANY_SAMPLES_PASSED);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fLifetimeTests.js:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(s_varrData), usage);
deqp/functional/gles3/es3fLifetimeTests.js:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), usage);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fLifetimeTests.js:    es3fLifetimeTests.initBuffer(seed, gl.STATIC_DRAW, buffer);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindVertexArray(vao);
deqp/functional/gles3/es3fLifetimeTests.js:    var name = gl.getVertexAttrib(this.m_posLoc, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindVertexArray(null);
deqp/functional/gles3/es3fLifetimeTests.js:    es3fLifetimeTests.initBuffer(seed, gl.DYNAMIC_READ, buffer);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
deqp/functional/gles3/es3fLifetimeTests.js:    var name = gl.getIndexedParameter(gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, 0);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fLifetimeTests.js:    var posBuf = gl.createBuffer();
deqp/functional/gles3/es3fLifetimeTests.js:    var vao = gl.createVertexArray();
deqp/functional/gles3/es3fLifetimeTests.js:    es3fLifetimeTests.initBuffer(seed, gl.STATIC_DRAW, posBuf);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.deleteVertexArray(vao);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.deleteBuffer(posBuf);
deqp/functional/gles3/es3fLifetimeTests.js:    var vao = gl.createVertexArray();
deqp/functional/gles3/es3fLifetimeTests.js:    gl.deleteVertexArray(vao);
deqp/functional/gles3/es3fLifetimeTests.js:    this.m_queryType = new glsLifetimeTests.SimpleType('query', gl.createQuery, gl.deleteQuery, gl.isQuery, this.m_queryBind);
deqp/functional/gles3/es3fLifetimeTests.js:    this.m_tfBind = new glsLifetimeTests.SimpleBinder(gl.bindTransformFeedback, gl.TRANSFORM_FEEDBACK,
deqp/functional/gles3/es3fLifetimeTests.js:                     gl.TRANSFORM_FEEDBACK_BINDING);
deqp/functional/gles3/es3fLifetimeTests.js:    this.m_tfType = new glsLifetimeTests.SimpleType('transform_feedback', gl.createTransformFeedback, gl.deleteTransformFeedback, gl.isTransformFeedback, this.m_tfBind);
deqp/functional/gles3/es3fLifetimeTests.js:    this.m_varrType = new glsLifetimeTests.SimpleType('vertex_array', gl.createVertexArray, gl.deleteVertexArray, gl.isVertexArray, this.m_varrBind);
deqp/functional/gles3/es3fLifetimeTests.js:    this.m_samplerType = new glsLifetimeTests.SimpleType('sampler', gl.createSampler, gl.deleteSampler, gl.isSampler, this.m_samplerBind, true);
deqp/functional/gles3/es3fLifetimeTests.js:    var buf = gl.createBuffer();
deqp/functional/gles3/es3fLifetimeTests.js:    sources.add(new gluShaderProgram.TransformFeedbackMode(gl.SEPARATE_ATTRIBS));
deqp/functional/gles3/es3fLifetimeTests.js:    gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fLifetimeTests.js:    var tf = gl.createTransformFeedback();
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 48, gl.STATIC_DRAW);
deqp/functional/gles3/es3fLifetimeTests.js:    gl.beginTransformFeedback(gl.TRIANGLES);
deqp/functional/gles3/es3fLifetimeTests.js:    var errCode = gl.NONE;
deqp/functional/gles3/es3fLifetimeTests.js:    gl.deleteTransformFeedback(tf);
deqp/functional/gles3/es3fLifetimeTests.js:    errCode = gl.getError();
deqp/functional/gles3/es3fLifetimeTests.js:    assertMsgOptions(errCode == gl.INVALID_OPERATION,
deqp/functional/gles3/es3fLifetimeTests.js:    gl.endTransformFeedback();
deqp/functional/gles3/es3fLifetimeTests.js:    gl.deleteTransformFeedback(tf);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fRasterizerDiscardTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fRasterizerDiscardTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        case gl.POINTS: numVertices = numPrimitives; break;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        case gl.LINES: numVertices = 2 * numPrimitives; break;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        case gl.LINE_STRIP: numVertices = numPrimitives + 1; break;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        case gl.LINE_LOOP: numVertices = numPrimitives + 2; break;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        case gl.TRIANGLES: numVertices = 3 * numPrimitives; break;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        case gl.TRIANGLE_STRIP: numVertices = numPrimitives + 2; break;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        case gl.TRIANGLE_FAN: numVertices = numPrimitives + 2; break;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    var width = gl.drawingBufferWidth;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    var height = gl.drawingBufferHeight;
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    this.m_fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    this.m_colorBuf = gl.createTexture();
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    this.m_depthStencilBuf = gl.createRenderbuffer();
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.bindTexture(gl.TEXTURE_2D, this.m_colorBuf);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, this.m_depthStencilBuf);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, width, height);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_fbo);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.m_colorBuf, 0);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.m_depthStencilBuf);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.m_depthStencilBuf);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    var fboStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    if (fboStatus == gl.FRAMEBUFFER_UNSUPPORTED)
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    else if (fboStatus != gl.FRAMEBUFFER_COMPLETE)
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.deleteTexture(this.m_colorBuf);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.deleteRenderbuffer(this.m_depthStencilBuf);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.deleteFramebuffer(this.m_fbo);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    var colorUnif = gl.getUniformLocation(program, 'u_color');
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        gl.enable(gl.SCISSOR_TEST);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        gl.scissor(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        bufferedLogToConsole('Scissor test enabled: glScissor(0, 0, ' + gl.drawingBufferWidth + ', ' + gl.drawingBufferHeight + ')');
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.depthRange(0, 1);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.depthFunc(gl.LEQUAL);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.stencilFunc(gl.NOTEQUAL, 1, 0xFF);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.stencilOp(gl.REPLACE, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.clearColor(PASS_COLOR_BLUE[0], PASS_COLOR_BLUE[1], PASS_COLOR_BLUE[2], PASS_COLOR_BLUE[3]);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.clearDepth(1);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.clearStencil(0);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    var posLoc = gl.getAttribLocation(program, 'a_position');
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    vertexArrays.push(new gluDrawUtil.VertexArrayBinding(gl.FLOAT, posLoc, 4, vertices.length / 4, vertices));
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        gl.clearColor(BLACK_COLOR[0], BLACK_COLOR[1], BLACK_COLOR[2], BLACK_COLOR[3]);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.uniform4fv(colorUnif, FAIL_COLOR_RED);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.clearColor(FAIL_COLOR_RED[0], FAIL_COLOR_RED[1], FAIL_COLOR_RED[2], FAIL_COLOR_RED[3]);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.clearDepth(FAIL_DEPTH);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.clearStencil(FAIL_STENCIL);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.enable(gl.RASTERIZER_DISCARD);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:                gl.clearBufferfv(gl.COLOR, 0, FAIL_COLOR_RED);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:                gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:                gl.clearBufferfv(gl.DEPTH, 0, [FAIL_DEPTH]);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:                gl.clear(gl.DEPTH_BUFFER_BIT);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:                gl.clearBufferiv(gl.STENCIL, 0, [FAIL_STENCIL]);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:                gl.clear(gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.disable(gl.RASTERIZER_DISCARD);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        if (this.m_caseOptions.useFBO || gl.getContextAttributes().stencil) {
deqp/functional/gles3/es3fRasterizerDiscardTests.js:            var square = [new gluDrawUtil.VertexArrayBinding(gl.FLOAT, posLoc, 4, UNIT_SQUARE.length / 4, UNIT_SQUARE)];
deqp/functional/gles3/es3fRasterizerDiscardTests.js:            gl.stencilFunc(gl.EQUAL, 1, 0xFF);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:        gl.uniform4fv(colorUnif, PASS_COLOR_BLUE);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.finish();
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fRasterizerDiscardTests.js:    gl.disable(gl.SCISSOR_TEST);
conformance/textures/misc/texture-upload-cube-maps.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/texture-upload-cube-maps.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-upload-cube-maps.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
conformance/textures/misc/texture-upload-cube-maps.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from bindTexture(TEXTURE_CUBE_MAP).");
conformance/textures/misc/texture-upload-cube-maps.html:  gl.texImage2D(target, 0, gl.RGB, width, height, 0, gl.RGB, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-upload-cube-maps.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from texImage2D.");
conformance/textures/misc/texture-upload-cube-maps.html:  gl.texSubImage2D(target, 0, 0, 0, width, height, gl.RGB, gl.UNSIGNED_BYTE, buf);
conformance/textures/misc/texture-upload-cube-maps.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from texSubImage2D.");
conformance/textures/misc/texture-upload-cube-maps.html:testOneTarget(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 16, 16);
conformance/textures/misc/texture-upload-cube-maps.html:testOneTarget(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 16, 16);
conformance/textures/misc/texture-upload-cube-maps.html:testOneTarget(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 16, 16);
conformance/textures/misc/texture-upload-cube-maps.html:testOneTarget(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 16, 16);
conformance/textures/misc/texture-upload-cube-maps.html:testOneTarget(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 16, 16);
conformance/textures/misc/texture-upload-cube-maps.html:testOneTarget(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 16, 16);
deqp/functional/gles3/es3fSyncTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fSyncTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fSyncTests.js:            gl.deleteSync(this.m_syncObject);
deqp/functional/gles3/es3fSyncTests.js:        gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fSyncTests.js:        gl.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fSyncTests.js:        gl.clearColor(0.3, 0.3, 0.3, 1.0);
deqp/functional/gles3/es3fSyncTests.js:        gl.clearDepth(1.0);
deqp/functional/gles3/es3fSyncTests.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
deqp/functional/gles3/es3fSyncTests.js:        gl.enableVertexAttribArray(0);
deqp/functional/gles3/es3fSyncTests.js:        /** @type {WebGLBuffer} */ var vertexGLBuffer = gl.createBuffer();
deqp/functional/gles3/es3fSyncTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, vertexGLBuffer);
deqp/functional/gles3/es3fSyncTests.js:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
deqp/functional/gles3/es3fSyncTests.js:        gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fSyncTests.js:        gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 4);
deqp/functional/gles3/es3fSyncTests.js:        this.m_syncObject = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
deqp/functional/gles3/es3fSyncTests.js:            gl.flush();
deqp/functional/gles3/es3fSyncTests.js:            gl.finish();
deqp/functional/gles3/es3fSyncTests.js:            assertMsgOptions(this.m_timeout === gl.TIMEOUT_IGNORED, 'Expected TIMEOUT_IGNORED', false, true);
deqp/functional/gles3/es3fSyncTests.js:            gl.waitSync(this.m_syncObject, this.m_waitFlags, this.m_timeout);
deqp/functional/gles3/es3fSyncTests.js:            waitValue = gl.clientWaitSync(this.m_syncObject, this.m_waitFlags, this.m_timeout);
deqp/functional/gles3/es3fSyncTests.js:                case gl.ALREADY_SIGNALED:
deqp/functional/gles3/es3fSyncTests.js:                    bufferedLogToConsole('gl.ALREADY_SIGNALED');
deqp/functional/gles3/es3fSyncTests.js:                case gl.TIMEOUT_EXPIRED:
deqp/functional/gles3/es3fSyncTests.js:                    bufferedLogToConsole('gl.TIMEOUT_EXPIRED');
deqp/functional/gles3/es3fSyncTests.js:                case gl.CONDITION_SATISFIED:
deqp/functional/gles3/es3fSyncTests.js:                    bufferedLogToConsole('gl.CONDITION_SATISFIED');
deqp/functional/gles3/es3fSyncTests.js:                case gl.WAIT_FAILED:
deqp/functional/gles3/es3fSyncTests.js:                    bufferedLogToConsole('gl.WAIT_FAILED');
deqp/functional/gles3/es3fSyncTests.js:        gl.finish();
deqp/functional/gles3/es3fSyncTests.js:            gl.deleteSync(this.m_syncObject);
deqp/functional/gles3/es3fSyncTests.js:                        gl.deleteSync(this.m_syncObject);
deqp/functional/gles3/es3fSyncTests.js:        this.addChild(new es3fSyncTests.FenceSyncCase('wait_sync_smalldraw', '', 10, es3fSyncTests.WaitCommand.WAIT_SYNC, 0, gl.TIMEOUT_IGNORED, 0));
deqp/functional/gles3/es3fSyncTests.js:        this.addChild(new es3fSyncTests.FenceSyncCase('wait_sync_largedraw', '', 100000, es3fSyncTests.WaitCommand.WAIT_SYNC, 0, gl.TIMEOUT_IGNORED, 0));
deqp/functional/gles3/es3fSyncTests.js:        var max = gl.getParameter(gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL) || 0;
deqp/functional/gles3/es3fSyncTests.js:        this.addChild(new es3fSyncTests.FenceSyncCase('client_wait_sync_flush_auto', '', 100000, es3fSyncTests.WaitCommand.CLIENT_WAIT_SYNC, gl.SYNC_FLUSH_COMMANDS_BIT, 0, 0));
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        case gl.RED:
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        case gl.RG:
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, sourceSubRectangle[0]);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, sourceSubRectangle[1]);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat], uploadWidth, uploadHeight, depth, 0,
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            gl.texSubImage3D(bindingTarget, 0, 0, 0, 0, uploadWidth, uploadHeight, depth,
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat], uploadWidth, uploadHeight, depth, 0,
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, 0);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors from texture upload");
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:              (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY') +
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        var rCoordLocation = gl.getUniformLocation(program, 'uRCoord');
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:        gl.uniform1f(rCoordLocation, rTextureCoord);
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            runOneIteration(canvas, false, cases[i].flipY, gl.TEXTURE_3D,
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            runOneIteration(canvas, true, cases[i].flipY, gl.TEXTURE_3D,
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            runOneIteration(canvas, false, cases[i].flipY, gl.TEXTURE_2D_ARRAY,
js/tests/tex-image-and-sub-image-3d-with-canvas-sub-rectangle.js:            runOneIteration(canvas, true, cases[i].flipY, gl.TEXTURE_2D_ARRAY,
conformance/textures/misc/gl-teximage.html:gl.disable(gl.DITHER);
conformance/textures/misc/gl-teximage.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/gl-teximage.html:  var loc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/gl-teximage.html:  gl.uniform1i(loc, 0);
conformance/textures/misc/gl-teximage.html:  gl.disable(gl.BLEND);
conformance/textures/misc/gl-teximage.html:  gl.disable(gl.DEPTH_TEST);
conformance/textures/misc/gl-teximage.html:  var width = gl.canvas.width;
conformance/textures/misc/gl-teximage.html:  var height = gl.canvas.height;
conformance/textures/misc/gl-teximage.html:  var tex = gl.createTexture();
conformance/textures/misc/gl-teximage.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/gl-teximage.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/gl-teximage.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/gl-teximage.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/gl-teximage.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:    {format: gl.RGBA, type: gl.UNSIGNED_BYTE,          counts: [256, 256, 256, 256]},
conformance/textures/misc/gl-teximage.html:    {format: gl.RGBA, type: gl.UNSIGNED_SHORT_4_4_4_4, counts: [ 16,  16,  16,  16]},
conformance/textures/misc/gl-teximage.html:    {format: gl.RGB,  type: gl.UNSIGNED_SHORT_5_6_5,   counts: [ 32,  64,  32,   1]},
conformance/textures/misc/gl-teximage.html:    {format: gl.RGBA, type: gl.UNSIGNED_SHORT_5_5_5_1, counts: [ 32,  32,  32,   2]}];
conformance/textures/misc/gl-teximage.html:    gl.texImage2D(
conformance/textures/misc/gl-teximage.html:        gl.TEXTURE_2D, 0, info.format, info.format, info.type,
conformance/textures/misc/gl-teximage.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/gl-teximage.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/textures/misc/gl-teximage.html:  wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/gl-teximage.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, ref);
conformance/textures/misc/gl-teximage.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/textures/misc/gl-teximage.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/gl-teximage.html:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, canvas2d);
conformance/textures/misc/gl-teximage.html:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/gl-teximage.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d);
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d);
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
conformance/textures/misc/gl-teximage.html:  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
conformance/textures/misc/gl-teximage.html:  wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/textures/misc/gl-teximage.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, buf2);
conformance/textures/misc/gl-teximage.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE,
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB,
conformance/textures/misc/gl-teximage.html:                0, gl.RGB, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/gl-teximage.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, 2, 0, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, new Uint8Array());
conformance/textures/misc/gl-teximage.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from zero sized textures");
deqp/functional/gles3/fbocolorbuffer/tex2d_00.html:var ext = gl.getExtension('EXT_color_buffer_float');
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        case gl.RED:
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        case gl.RG:
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.disable(gl.BLEND);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:              ', bindingTarget=' + (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP') +
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:            loc = gl.getUniformLocation(program, "face");
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:              case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:              case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:              case gl.RGB_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:              case gl.RGBA_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        var targets = [gl.TEXTURE_2D];
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:            targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, sourceSubRectangle[0]);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, sourceSubRectangle[1]);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                gl.texSubImage2D(targets[tt], 0, 0, 0,
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        var outputCanvasWidth = gl.drawingBufferWidth;
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        var outputCanvasHeight = gl.drawingBufferHeight;
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:            if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:                gl.uniform1i(loc, targets[tt]);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        runTestOnBindingTarget(gl.TEXTURE_2D, program, canvas, canvasSetupFunction, sourceDescription);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        runTestOnBindingTarget(gl.TEXTURE_CUBE_MAP, program, canvas, canvasSetupFunction, sourceDescription);
js/tests/tex-image-and-sub-image-2d-with-canvas-sub-rectangle.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.R8, gl.RG8, gl.RGB8, gl.RGB565, gl.RGBA4, gl.RGB5_A1, gl.RGBA8,
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.RGB10_A2, gl.RGB10_A2UI, gl.SRGB8_ALPHA8,
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.R8I, gl.R8UI, gl.R16I, gl.R16UI, gl.R32I, gl.R32UI,
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.RG8I, gl.RG8UI, gl.RG16I, gl.RG16UI, gl.RG32I, gl.RG32UI,
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.RGBA81, gl.RGBA8UI, gl.RGB16I, gl.RGBA16UI, gl.RGBA32I, gl.RGBA32UI
deqp/functional/gles3/es3fFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGBA, gl.UNSIGNED_BYTE),
deqp/functional/gles3/es3fFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4),
deqp/functional/gles3/es3fFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGBA, gl.UNSIGNED_SHORT_5_5_5_1),
deqp/functional/gles3/es3fFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGB, gl.UNSIGNED_BYTE),
deqp/functional/gles3/es3fFboCompletenessTests.js:            glsFboUtil.formatkey(gl.RGB, gl.UNSIGNED_SHORT_5_6_5)
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.DEPTH_COMPONENT16, gl.DEPTH_COMPONENT24, gl.DEPTH_COMPONENT32F,
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.DEPTH24_STENCIL8, gl.DEPTH32F_STENCIL8
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.STENCIL_INDEX8
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.DEPTH24_STENCIL8, gl.DEPTH32F_STENCIL8
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.RGBA32F, gl.RGBA16F, gl.R11F_G11F_B10F,
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.RG32F, gl.RG16F, gl.R32F, gl.R16F,
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.RGBA16F, gl.RGB16F, gl.RG16F, gl.R16F
deqp/functional/gles3/es3fFboCompletenessTests.js:        // gl.EXT_color_buffer_float
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.RGBA32F, gl.RGBA16F, gl.R11F_G11F_B10F, gl.RG32F, gl.RG16F, gl.R32F, gl.R16F
deqp/functional/gles3/es3fFboCompletenessTests.js:        // gl.OES_texture_stencil8
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.STENCIL_INDEX8
deqp/functional/gles3/es3fFboCompletenessTests.js:                extensions: 'gl.EXT_color_buffer_float',
deqp/functional/gles3/es3fFboCompletenessTests.js:                extensions: 'gl.OES_texture_stencil8',
deqp/functional/gles3/es3fFboCompletenessTests.js:        /** @type {number} */ this.m_depthStencilType = gl.NONE;
deqp/functional/gles3/es3fFboCompletenessTests.js:                gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
deqp/functional/gles3/es3fFboCompletenessTests.js:                gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
deqp/functional/gles3/es3fFboCompletenessTests.js:        if (attPoint == gl.DEPTH_ATTACHMENT || attPoint == gl.STENCIL_ATTACHMENT) {
deqp/functional/gles3/es3fFboCompletenessTests.js:                    gl.FRAMEBUFFER_UNSUPPORTED
deqp/functional/gles3/es3fFboCompletenessTests.js:            textureKind: textureKind, //< gl.TEXTURE_3D or gl.TEXTURE_2D_ARRAY
deqp/functional/gles3/es3fFboCompletenessTests.js:            (params.textureKind == gl.TEXTURE_3D ? '3d' : '2darr') + '_' +
deqp/functional/gles3/es3fFboCompletenessTests.js:            (params.textureKind == gl.TEXTURE_3D ? '3D Texture' : '2D Array Texture') + ', ' +
deqp/functional/gles3/es3fFboCompletenessTests.js:        var target = gl.COLOR_ATTACHMENT0;
deqp/functional/gles3/es3fFboCompletenessTests.js:                    case gl.TEXTURE_3D: return glsFboUtil.Texture3D;
deqp/functional/gles3/es3fFboCompletenessTests.js:                    case gl.TEXTURE_2D_ARRAY: return glsFboUtil.Texture2DArray;
deqp/functional/gles3/es3fFboCompletenessTests.js:        texCfg.internalFormat = this.getDefaultFormat(target, gl.TEXTURE, gl);
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1, gl.DEPTH_ATTACHMENT
deqp/functional/gles3/es3fFboCompletenessTests.js:            gl.RGBA8, gl.RGB565, gl.DEPTH_COMPONENT24
deqp/functional/gles3/es3fFboCompletenessTests.js:            var fmt = new glsFboUtil.ImageFormat(s_formats[i], gl.NONE);
deqp/functional/gles3/es3fFboCompletenessTests.js:                this.attachTargetToNew(target, gl.TEXTURE, fmt, 64, 64, builder, gl);
deqp/functional/gles3/es3fFboCompletenessTests.js:                if (builder.getError() == gl.INVALID_OPERATION) {
deqp/functional/gles3/es3fFboCompletenessTests.js:            es3fFboCompletenessTests.numLayersParams(gl.TEXTURE_2D_ARRAY, 1, 0),
deqp/functional/gles3/es3fFboCompletenessTests.js:            es3fFboCompletenessTests.numLayersParams(gl.TEXTURE_2D_ARRAY, 1, 3),
deqp/functional/gles3/es3fFboCompletenessTests.js:            es3fFboCompletenessTests.numLayersParams(gl.TEXTURE_2D_ARRAY, 4, 3),
deqp/functional/gles3/es3fFboCompletenessTests.js:            es3fFboCompletenessTests.numLayersParams(gl.TEXTURE_2D_ARRAY, 4, 15),
deqp/functional/gles3/es3fFboCompletenessTests.js:            es3fFboCompletenessTests.numLayersParams(gl.TEXTURE_3D, 1, 0),
deqp/functional/gles3/es3fFboCompletenessTests.js:            es3fFboCompletenessTests.numLayersParams(gl.TEXTURE_3D, 1, 15),
deqp/functional/gles3/es3fFboCompletenessTests.js:            es3fFboCompletenessTests.numLayersParams(gl.TEXTURE_3D, 4, 15),
deqp/functional/gles3/es3fFboCompletenessTests.js:            es3fFboCompletenessTests.numLayersParams(gl.TEXTURE_3D, 64, 15)
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-blob.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-image-bitmap-from-blob.js:        gl.clearDepth(1);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.enable(this.m_targetName);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.disable(this.m_targetName);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.DEPTH_WRITEMASK, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.depthMask(false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.DEPTH_WRITEMASK, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.depthMask(true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.DEPTH_WRITEMASK, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.SAMPLE_COVERAGE_INVERT, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.sampleCoverage(1, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.SAMPLE_COVERAGE_INVERT, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.sampleCoverage(1, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.SAMPLE_COVERAGE_INVERT, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.COLOR_WRITEMASK, [true, true, true, true]);
deqp/functional/gles3/es3fBooleanStateQuery.js:        gl.colorMask(mask[0], mask[1], mask[2], mask[3]);
deqp/functional/gles3/es3fBooleanStateQuery.js:        this.m_pass &= glsStateQuery.verify(gl.COLOR_WRITEMASK, mask);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_transformfeedback = gl.createTransformFeedback();
deqp/functional/gles3/es3fBooleanStateQuery.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.shaderSource(shaderVert, transformFeedbackTestVertSource);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verifyShader(shaderVert, gl.COMPILE_STATUS, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.shaderSource(shaderFrag, transformFeedbackTestFragSource);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verifyShader(shaderFrag, gl.COMPILE_STATUS, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    var shaderProg = gl.createProgram();
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.attachShader(shaderProg, shaderVert);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.attachShader(shaderProg, shaderFrag);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.transformFeedbackVaryings(shaderProg, transform_feedback_outputs, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.linkProgram(shaderProg);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verifyProgram(shaderProg, gl.LINK_STATUS, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.m_transformfeedback);
deqp/functional/gles3/es3fBooleanStateQuery.js:    var buffer = gl.createBuffer();
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buffer);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, 16, gl.DYNAMIC_READ);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.useProgram(shaderProg);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.useProgram(null);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.deleteTransformFeedback(this.m_transformfeedback);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.deleteBuffer(buffer);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.deleteProgram(shaderProg);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.beginTransformFeedback(gl.POINTS);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_ACTIVE, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_PAUSED, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.pauseTransformFeedback();
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_ACTIVE, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_PAUSED, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.resumeTransformFeedback();
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_ACTIVE, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_PAUSED, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.endTransformFeedback();
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_ACTIVE, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_PAUSED, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.beginTransformFeedback(gl.POINTS);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_ACTIVE, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_PAUSED, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.pauseTransformFeedback();
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_ACTIVE, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_PAUSED, true);
deqp/functional/gles3/es3fBooleanStateQuery.js:    gl.endTransformFeedback();
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_ACTIVE, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:    this.m_pass &= glsStateQuery.verify(gl.TRANSFORM_FEEDBACK_PAUSED, false);
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['rasterizer_discard', 'RASTERIZER_DISCARD', gl.RASTERIZER_DISCARD, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['cull_face', 'CULL_FACE', gl.CULL_FACE, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['polygon_offset_fill', 'POLYGON_OFFSET_FILL', gl.POLYGON_OFFSET_FILL, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['sample_alpha_to_coverage', 'SAMPLE_ALPHA_TO_COVERAGE', gl.SAMPLE_ALPHA_TO_COVERAGE, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['sample_coverage', 'SAMPLE_COVERAGE', gl.SAMPLE_COVERAGE, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['scissor_test', 'SCISSOR_TEST', gl.SCISSOR_TEST, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['stencil_test', 'STENCIL_TEST', gl.STENCIL_TEST, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['depth_test', 'DEPTH_TEST', gl.DEPTH_TEST, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['blend', 'BLEND', gl.BLEND, false],
deqp/functional/gles3/es3fBooleanStateQuery.js:        ['dither', 'DITHER', gl.DITHER, true]
deqp/functional/gles3/es3fBooleanStateQuery.js:    testRoot.addChild(new es3fBooleanStateQuery.InitialBooleanTestCase('transform_feedback_active_initial', 'initial TRANSFORM_FEEDBACK_ACTIVE', gl.TRANSFORM_FEEDBACK_ACTIVE, false));
deqp/functional/gles3/es3fBooleanStateQuery.js:    testRoot.addChild(new es3fBooleanStateQuery.InitialBooleanTestCase('transform_feedback_paused_initial', 'initial TRANSFORM_FEEDBACK_PAUSED', gl.TRANSFORM_FEEDBACK_PAUSED, false));
deqp/functional/gles3/es3fFboTestUtil.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fFboTestUtil.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFboTestUtil.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/functional/gles3/es3fFboTestUtil.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/functional/gles3/es3fFboTestUtil.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/functional/gles3/es3fFboTestUtil.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFboTestUtil.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fFboTestUtil.js:var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/functional/gles3/es3fFboTestUtil.js:var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/functional/gles3/es3fFboTestUtil.js:var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB565: return 'rgb565';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB5_A1: return 'rgb5_a1';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA4: return 'rgba4';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.DEPTH_COMPONENT16: return 'depth_component16';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.STENCIL_INDEX8: return 'stencil_index8';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA32F: return 'rgba32f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA32I: return 'rgba32i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA32UI: return 'rgba32ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA16F: return 'rgba16f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA16I: return 'rgba16i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA16UI: return 'rgba16ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA8: return 'rgba8';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA8I: return 'rgba8i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA8UI: return 'rgba8ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.SRGB8_ALPHA8: return 'srgb8_alpha8';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB10_A2: return 'rgb10_a2';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB10_A2UI: return 'rgb10_a2ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGBA8_SNORM: return 'rgba8_snorm';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB8: return 'rgb8';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R11F_G11F_B10F: return 'r11f_g11f_b10f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB32F: return 'rgb32f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB32I: return 'rgb32i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB32UI: return 'rgb32ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB16F: return 'rgb16f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB16I: return 'rgb16i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB16UI: return 'rgb16ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB8_SNORM: return 'rgb8_snorm';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB8I: return 'rgb8i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB8UI: return 'rgb8ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.SRGB8: return 'srgb8';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RGB9_E5: return 'rgb9_e5';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG32F: return 'rg32f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG32I: return 'rg32i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG32UI: return 'rg32ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG16F: return 'rg16f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG16I: return 'rg16i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG16UI: return 'rg16ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG8: return 'rg8';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG8I: return 'rg8i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG8UI: return 'rg8ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.RG8_SNORM: return 'rg8_snorm';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R32F: return 'r32f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R32I: return 'r32i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R32UI: return 'r32ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R16F: return 'r16f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R16I: return 'r16i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R16UI: return 'r16ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R8: return 'r8';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R8I: return 'r8i';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R8UI: return 'r8ui';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.R8_SNORM: return 'r8_snorm';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.DEPTH_COMPONENT32F: return 'depth_component32f';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.DEPTH_COMPONENT24: return 'depth_component24';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.DEPTH32F_STENCIL8: return 'depth32f_stencil8';
deqp/functional/gles3/es3fFboTestUtil.js:            case gl.DEPTH24_STENCIL8: return 'depth24_stencil8';
deqp/functional/gles3/es3fFboTestUtil.js:                ctx.clearBufferfv(gl.COLOR, 0, value);
deqp/functional/gles3/es3fFboTestUtil.js:                ctx.clearBufferuiv(gl.COLOR, 0, value);
deqp/functional/gles3/es3fFboTestUtil.js:                ctx.clearBufferiv(gl.COLOR, 0, value);
deqp/functional/gles3/es3fFboTestUtil.js:        /** @type {number} */ var alignment = 4; // \note gl.PACK_ALIGNMENT = 4 is assumed.
deqp/functional/gles3/es3fTextureShadowTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fTextureShadowTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fTextureShadowTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fTextureShadowTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fTextureShadowTests.js:var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fTextureShadowTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fTextureShadowTests.js:        var refInRangeUpper = (this.m_compareFunc == gl.EQUAL || this.m_compareFunc == gl.NOTEQUAL) ? 1.0 : 0.5;
deqp/functional/gles3/es3fTextureShadowTests.js:        var refInRangeLower = (this.m_compareFunc == gl.EQUAL || this.m_compareFunc == gl.NOTEQUAL) ? 0.0 : 0.5;
deqp/functional/gles3/es3fTextureShadowTests.js:        var viewportW = Math.min(VIEWPORT_WIDTH, gl.canvas.width);
deqp/functional/gles3/es3fTextureShadowTests.js:        var viewportH = Math.min(VIEWPORT_HEIGHT, gl.canvas.height);
deqp/functional/gles3/es3fTextureShadowTests.js:        sampleParams.sampler = gluTextureUtil.mapGLSampler(this.m_wrapS, this.m_wrapT, gl.CLAMP_TO_EDGE, this.m_minFilter, this.m_magFilter);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.bindTexture(gl.TEXTURE_2D, curCase.texture.getGLTexture());
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.m_minFilter);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.m_magFilter);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.m_wrapS);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.m_wrapT);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, this.m_compareFunc);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureShadowTests.js:        var refInRangeUpper = (this.m_compareFunc == gl.EQUAL || this.m_compareFunc == gl.NOTEQUAL) ? 1.0 : 0.5;
deqp/functional/gles3/es3fTextureShadowTests.js:        var refInRangeLower = (this.m_compareFunc == gl.EQUAL || this.m_compareFunc == gl.NOTEQUAL) ? 0.0 : 0.5;
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.bindTexture(gl.TEXTURE_CUBE_MAP, curCase.texture.getGLTexture());
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, this.m_minFilter);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, this.m_magFilter);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, this.m_wrapS);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, this.m_wrapT);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, this.m_compareFunc);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureShadowTests.js:        sampleParams.sampler = gluTextureUtil.mapGLSampler(gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, this.m_minFilter, this.m_magFilter);
deqp/functional/gles3/es3fTextureShadowTests.js:        /** @type {number} */ var refInRangeUpper = (this.m_compareFunc == gl.EQUAL || this.m_compareFunc == gl.NOTEQUAL) ? 1.0 : 0.5;
deqp/functional/gles3/es3fTextureShadowTests.js:        /** @type {number} */ var refInRangeLower = (this.m_compareFunc == gl.EQUAL || this.m_compareFunc == gl.NOTEQUAL) ? 0.0 : 0.5;
deqp/functional/gles3/es3fTextureShadowTests.js:        var viewportW = Math.min(VIEWPORT_WIDTH, gl.canvas.width);
deqp/functional/gles3/es3fTextureShadowTests.js:        var viewportH = Math.min(VIEWPORT_HEIGHT, gl.canvas.height);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.bindTexture(gl.TEXTURE_2D_ARRAY, curCase.texture.getGLTexture());
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, this.m_minFilter);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, this.m_magFilter);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, this.m_wrapS);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, this.m_wrapT);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_COMPARE_FUNC, this.m_compareFunc);
deqp/functional/gles3/es3fTextureShadowTests.js:        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);
deqp/functional/gles3/es3fTextureShadowTests.js:        formats.push(new es3fTextureShadowTests.Format('depth_component16', gl.DEPTH_COMPONENT16));
deqp/functional/gles3/es3fTextureShadowTests.js:        formats.push(new es3fTextureShadowTests.Format('depth_component32f', gl.DEPTH_COMPONENT32F));
deqp/functional/gles3/es3fTextureShadowTests.js:        formats.push(new es3fTextureShadowTests.Format('depth24_stencil8', gl.DEPTH24_STENCIL8));
deqp/functional/gles3/es3fTextureShadowTests.js:        filters.push(new es3fTextureShadowTests.Filter('nearest', gl.NEAREST, gl.NEAREST));
deqp/functional/gles3/es3fTextureShadowTests.js:        filters.push(new es3fTextureShadowTests.Filter('linear', gl.LINEAR, gl.LINEAR));
deqp/functional/gles3/es3fTextureShadowTests.js:        filters.push(new es3fTextureShadowTests.Filter('nearest_mipmap_nearest', gl.NEAREST_MIPMAP_NEAREST, gl.LINEAR));
deqp/functional/gles3/es3fTextureShadowTests.js:        filters.push(new es3fTextureShadowTests.Filter('linear_mipmap_nearest', gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR));
deqp/functional/gles3/es3fTextureShadowTests.js:        filters.push(new es3fTextureShadowTests.Filter('nearest_mipmap_linear', gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR));
deqp/functional/gles3/es3fTextureShadowTests.js:        filters.push(new es3fTextureShadowTests.Filter('linear_mipmap_linear', gl.LINEAR_MIPMAP_LINEAR, gl.LINEAR));
deqp/functional/gles3/es3fTextureShadowTests.js:        compareFuncs.push(new es3fTextureShadowTests.CompareFunc('less_or_equal', gl.LEQUAL));
deqp/functional/gles3/es3fTextureShadowTests.js:        compareFuncs.push(new es3fTextureShadowTests.CompareFunc('greater_or_equal', gl.GEQUAL));
deqp/functional/gles3/es3fTextureShadowTests.js:        compareFuncs.push(new es3fTextureShadowTests.CompareFunc('less', gl.LESS));
deqp/functional/gles3/es3fTextureShadowTests.js:        compareFuncs.push(new es3fTextureShadowTests.CompareFunc('greater', gl.GREATER));
deqp/functional/gles3/es3fTextureShadowTests.js:        compareFuncs.push(new es3fTextureShadowTests.CompareFunc('equal', gl.EQUAL));
deqp/functional/gles3/es3fTextureShadowTests.js:        compareFuncs.push(new es3fTextureShadowTests.CompareFunc('not_equal', gl.NOTEQUAL));
deqp/functional/gles3/es3fTextureShadowTests.js:        compareFuncs.push(new es3fTextureShadowTests.CompareFunc('always', gl.ALWAYS));
deqp/functional/gles3/es3fTextureShadowTests.js:        compareFuncs.push(new es3fTextureShadowTests.CompareFunc('never', gl.NEVER));
deqp/functional/gles3/es3fTextureShadowTests.js:                    /** @type {number} */ var wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureShadowTests.js:                    /** @type {number} */ var wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureShadowTests.js:                    wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureShadowTests.js:                    wrapT = gl.REPEAT;
deqp/functional/gles3/es3fTextureShadowTests.js:                    wrapS = gl.REPEAT;
deqp/functional/gles3/es3fTextureShadowTests.js:                    wrapT = gl.REPEAT;
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttrib1f(maxVertexAttribs, 0.0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttrib2f(maxVertexAttribs, 0.0, 0.0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttrib3f(maxVertexAttribs, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttrib4f(maxVertexAttribs, 0.0, 0.0, 0.0, 0.0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttrib1fv(maxVertexAttribs, v);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttrib2fv(maxVertexAttribs, v);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttrib3fv(maxVertexAttribs, v);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttrib4fv(maxVertexAttribs, v);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribI4i(maxVertexAttribs, valInt, valInt, valInt, valInt);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribI4ui(maxVertexAttribs, valUint, valUint, valUint, valUint);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribI4iv(maxVertexAttribs, valInt);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribI4uiv(maxVertexAttribs, valUint);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('vertex_attrib_pointer', 'Invalid gl.vertexAttribPointer() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var buffer = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(0, 1, 0, true, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(maxVertexAttribs, 1, gl.BYTE, true, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if size is not 1, 2, 3, or 4.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(0, 0, gl.BYTE, true, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if stride is negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(0, 1, gl.BYTE, true, -1, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if type is gl.INT_2_10_10_10_REV or gl.UNSIGNED_INT_2_10_10_10_REV and size is not 4.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(0, 2, gl.INT_2_10_10_10_REV, true, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(0, 2, gl.UNSIGNED_INT_2_10_10_10_REV, true, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(0, 4, gl.INT_2_10_10_10_REV, true, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(0, 4, gl.UNSIGNED_INT_2_10_10_10_REV, true, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated a non-zero vertex array object is bound, zero is bound to the gl.ARRAY_BUFFER buffer object binding point and the pointer argument is not NULL.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            vao = gl.createVertexArray();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindVertexArray(vao);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribPointer(0, 1, gl.BYTE, true, 0, offset);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindVertexArray(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteVertexArray(vao);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('vertex_attrib_i_pointer', 'Invalid gl.vertexAttribIPointer() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var buffer = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribIPointer(0, 1, 0, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribIPointer(0, 4, gl.INT_2_10_10_10_REV, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribIPointer(0, 4, gl.UNSIGNED_INT_2_10_10_10_REV, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribIPointer(maxVertexAttribs, 1, gl.BYTE, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if size is not 1, 2, 3, or 4.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribIPointer(0, 0, gl.BYTE, 0, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if stride is negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribIPointer(0, 1, gl.BYTE, -1, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated a non-zero vertex array object is bound, zero is bound to the gl.ARRAY_BUFFER buffer object binding point and the pointer argument is not NULL.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            vao = gl.createVertexArray();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindVertexArray(vao);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribIPointer(0, 1, gl.BYTE, 0, offset);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindVertexArray(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteVertexArray(vao);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('enable_vertex_attrib_array', 'Invalid gl.enableVertexAttribArray() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.enableVertexAttribArray(maxVertexAttribs);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('disable_vertex_attrib_array', 'Invalid gl.disableVertexAttribArray() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.disableVertexAttribArray(maxVertexAttribs);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('vertex_attrib_divisor', 'Invalid gl.vertexAttribDivisor() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if index is greater than or equal to gl.MAX_VERTEX_ATTRIBS.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            var maxVertexAttribs = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribDivisor(maxVertexAttribs, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_arrays', 'Invalid gl.drawArrays() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArrays(-1, 0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count is negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArrays(gl.POINTS, 0, -1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArrays(gl.POINTS, 0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_arrays_invalid_program', 'Invalid gl.drawArrays() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.useProgram(null) is used.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArrays(gl.POINTS, 0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_arrays_incomplete_primitive', 'Invalid gl.drawArrays() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArrays(-1, 0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count is negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArrays(gl.TRIANGLES, 0, -1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArrays(gl.TRIANGLES, 0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_elements', 'Invalid gl.drawElements() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(-1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not one of the accepted values.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.POINTS, 0, -1, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.POINTS, 0, gl.FLOAT, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count is negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.POINTS, -1, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            if (!sglrGLContext.isExtensionSupported(gl, 'EXT_geometry_shader')) { // gl.EXT_geometry_shader removes error
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback is active and not paused.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.useProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.transformFeedbackVaryings (program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.linkProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindTransformFeedback (gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBuffer (gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBufferBase (gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.beginTransformFeedback (gl.POINTS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawElements (gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.ELEMENT_ARRAY_BUFFER, 32, gl.STATIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawElements (gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.endTransformFeedback ();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_elements_invalid_program', 'Invalid gl.drawElements() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.useProgram(null) was set.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_elements_incomplete_primitive', 'Invalid gl.drawElements() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(-1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not one of the accepted values.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.TRIANGLES, 0, -1, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.TRIANGLES, 0, gl.FLOAT, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count is negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.TRIANGLES, -1, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElements(gl.TRIANGLES, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            if (!sglrGLContext.isExtensionSupported(gl, 'EXT_geometry_shader')) {// gl.EXT_geometry_shader removes error
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback is active and not paused.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.useProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.transformFeedbackVaryings (program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.linkProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindTransformFeedback (gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBuffer (gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBufferBase (gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.beginTransformFeedback (gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawElements (gl.TRIANGLES, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.ELEMENT_ARRAY_BUFFER, 32, gl.STATIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawElements (gl.TRIANGLES, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.endTransformFeedback ();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_arrays_instanced', 'Invalid gl.drawArraysInstanced() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribDivisor(0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(-1, 0, 1, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count or primcount are negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(gl.POINTS, 0, -1, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(gl.POINTS, 0, 1, -1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(gl.POINTS, 0, 1, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_arrays_instanced_invalid_program', 'Invalid gl.drawArraysInstanced() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribDivisor(0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.useProgram(null) is set.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(gl.POINTS, 0, 1, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_arrays_instanced_incomplete_primitive', 'Invalid gl.drawArraysInstanced() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribDivisor(0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(-1, 0, 1, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count or primcount are negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(gl.TRIANGLES, 0, -1, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(gl.TRIANGLES, 0, 1, -1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawArraysInstanced(gl.TRIANGLES, 0, 1, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_elements_instanced', 'Invalid gl.drawElementsInstanced() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            /** @type{WebGLBuffer} */ var bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribDivisor(0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(-1, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not one of the accepted values.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.POINTS, 0, -1, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.POINTS, 0, gl.FLOAT, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count or primcount are negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.POINTS, -1, gl.UNSIGNED_BYTE, vertices, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices, -1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            if (!sglrGLContext.isExtensionSupported(gl, 'EXT_geometry_shader')) {// gl.EXT_geometry_shader removes error
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback is active and not paused.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.useProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.transformFeedbackVaryings (program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.linkProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindTransformFeedback (gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBuffer (gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBufferBase (gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.beginTransformFeedback (gl.POINTS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawElementsInstanced (gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.ELEMENT_ARRAY_BUFFER, 32, gl.STATIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawElementsInstanced (gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                // this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.endTransformFeedback ();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_elements_instanced_invalid_program', 'Invalid gl.drawElementsInstanced() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribDivisor(0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.useProgram(null) is set.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.POINTS, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_elements_instanced_incomplete_primitive', 'Invalid gl.drawElementsInstanced() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.vertexAttribDivisor(0, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(-1, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not one of the accepted values.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.TRIANGLES, 0, -1, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.TRIANGLES, 0, gl.FLOAT, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count or primcount are negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.TRIANGLES, -1, gl.UNSIGNED_BYTE, vertices, 0);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.TRIANGLES, 0, gl.UNSIGNED_BYTE, vertices, -1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawElementsInstanced(gl.TRIANGLES, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            if (!sglrGLContext.isExtensionSupported(gl, 'EXT_geometry_shader')) {// gl.EXT_geometry_shader removes error
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback is active and not paused.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.useProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.transformFeedbackVaryings (program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.linkProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindTransformFeedback (gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBuffer (gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBufferBase (gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.beginTransformFeedback (gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawElementsInstanced (gl.TRIANGLES, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.ELEMENT_ARRAY_BUFFER, 32, gl.STATIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawElementsInstanced (gl.TRIANGLES, 0, gl.UNSIGNED_BYTE, vertices, 1);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                // this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.endTransformFeedback ();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_range_elements', 'Invalid gl.drawRangeElements() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(-1, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not one of the accepted values.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.POINTS, 0, 1, 0, -1, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.POINTS, 0, 1, 0, gl.FLOAT, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count is negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.POINTS, 0, 1, -1, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if end < start.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.POINTS, 1, 0, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.POINTS, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            if (!sglrGLContext.isExtensionSupported(gl, 'EXT_geometry_shader')) {// gl.EXT_geometry_shader removes error
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback is active and not paused.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.useProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.transformFeedbackVaryings (program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.linkProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindTransformFeedback (gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBuffer (gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBufferBase (gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.beginTransformFeedback (gl.POINTS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawRangeElements (gl.POINTS, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.ELEMENT_ARRAY_BUFFER, 32, gl.STATIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawRangeElements (gl.POINTS, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.endTransformFeedback ();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_range_elements_invalid_program', 'Invalid gl.drawRangeElements() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bufferData (gl.ELEMENT_ARRAY_BUFFER, 32, gl.STATIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.useProgram(null) is set.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.POINTS, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:        testGroup.addChild(new es3fApiCase.ApiCaseCallback('draw_range_elements_incomplete_primitive', 'Invalid gl.drawRangeElements() usage', gl, function() {
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufElements = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if mode is not an accepted value.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(-1, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_ENUM is generated if type is not one of the accepted values.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.TRIANGLES, 0, 1, 0, -1, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.TRIANGLES, 0, 1, 0, gl.FLOAT, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if count is negative.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.TRIANGLES, 0, 1, -1, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_VALUE is generated if end < start.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.TRIANGLES, 1, 0, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.drawRangeElements(gl.TRIANGLES, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            if (!sglrGLContext.isExtensionSupported(gl, 'EXT_geometry_shader')) {// gl.EXT_geometry_shader removes error
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if transform feedback is active and not paused.');
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                buf = gl.createBuffer();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                tfID = gl.createTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.useProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.transformFeedbackVaryings (program.getProgram(), tfVarying, gl.INTERLEAVED_ATTRIBS);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.linkProgram (program.getProgram());
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindTransformFeedback (gl.TRANSFORM_FEEDBACK, tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBuffer (gl.TRANSFORM_FEEDBACK_BUFFER, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.TRANSFORM_FEEDBACK_BUFFER, 32, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bindBufferBase (gl.TRANSFORM_FEEDBACK_BUFFER, 0, buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.beginTransformFeedback (gl.TRIANGLES);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawRangeElements (gl.TRIANGLES, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.bufferData (gl.ELEMENT_ARRAY_BUFFER, 32, gl.STATIC_DRAW);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.pauseTransformFeedback();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.drawRangeElements (gl.TRIANGLES, 0, 1, 0, gl.UNSIGNED_BYTE, vertices);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.endTransformFeedback ();
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(buf);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteTransformFeedback(tfID);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                gl.deleteBuffer(bufElements);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:                this.expectError (gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeVertexArrayApiTests.js:            gl.useProgram(null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:goog.require('framework.opengl.gluStrUtil');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:    var gluStrUtil = framework.opengl.gluStrUtil;
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'bind_buffer', 'Invalid gl.bindBuffer() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the allowable values.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(-1, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'buffer_data', 'Invalid gl.bufferData() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var buffer = gl.createBuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(-1, 0, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if usage is not gl.STREAM_DRAW, gl.STATIC_DRAW, or gl.DYNAMIC_DRAW.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.ARRAY_BUFFER, 0, -1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if size is negative.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.ARRAY_BUFFER, -1, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the reserved buffer object name 0 is bound to target.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.ARRAY_BUFFER, 0, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(buffer);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'buffer_sub_data', 'Invalid gl.bufferSubData() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var buffer = gl.createBuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.ARRAY_BUFFER, 10, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferSubData(-1, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the reserved buffer object name 0 is bound to target.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferSubData(gl.ARRAY_BUFFER, 0, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(buffer);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'buffer_sub_data_size_offset', 'Invalid gl.bufferSubData() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var buffer = gl.createBuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.ARRAY_BUFFER, 10, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if offset is negative');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferSubData(gl.ARRAY_BUFFER, -1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if the data would be written past the end of the buffer.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferSubData(gl.ARRAY_BUFFER, 7, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferSubData(gl.ARRAY_BUFFER, 15, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.bufferSubData(gl.ARRAY_BUFFER, 0, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(buffer);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'clear', 'Invalid gl.clear() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if any bit other than the three defined bits is set in mask.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clear(0x0200);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clear(0x1000);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clear(0x0010);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'read_pixels', 'Invalid gl.readPixels() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the combination of format and type is unsupported.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, ushortData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the ArrayBuffer type does not match the type parameter.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, ushortData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if either width or height is negative.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, -1, 1, gl.RGBA, gl.UNSIGNED_BYTE, ubyteData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, -1, gl.RGBA, gl.UNSIGNED_BYTE, ubyteData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, -1, -1, gl.RGBA, gl.UNSIGNED_BYTE, ubyteData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_FRAMEBUFFER_OPERATION is generated if the currently bound framebuffer is not framebuffer complete.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, ubyteData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_FRAMEBUFFER_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('Unsupported combinations of format and type will generate a gl.INVALID_OPERATION error.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_SHORT_5_6_5, ushortData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.ALPHA, gl.UNSIGNED_SHORT_5_6_5, ushortData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGB, gl.UNSIGNED_SHORT_4_4_4_4, ushortData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.ALPHA, gl.UNSIGNED_SHORT_4_4_4_4, ushortData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGB, gl.UNSIGNED_SHORT_5_5_5_1, ushortData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.ALPHA, gl.UNSIGNED_SHORT_5_5_5_1, ushortData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.RGBA/gl.UNSIGNED_BYTE is always accepted and the other acceptable pair can be discovered by querying gl.IMPLEMENTATION_COLOR_READ_FORMAT and gl.IMPLEMENTATION_COLOR_READ_TYPE.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, ubyteData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var readFormat = /** @type {number} */ (gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var readType = /** @type {number} */ (gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, readFormat, readType, ubyteData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'read_pixels_fbo_format_mismatch', 'Invalid gl.readPixels() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if currently bound framebuffer format is incompatible with format and type.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, floatData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32I, 32, 32, 0, gl.RGBA_INTEGER, gl.INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, floatData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32UI, 32, 32, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, floatData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.READ_FRAMEBUFFER_BINDING is non-zero, the read framebuffer is complete, and the value of gl.SAMPLE_BUFFERS for the read framebuffer is greater than zero.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var rbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA8, 32, 32);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var binding = /** @type {WebGLFramebuffer} */ (gl.getParameter(gl.READ_FRAMEBUFFER_BINDING));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.READ_FRAMEBUFFER_BINDING: ' + binding);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var sampleBuffers = /** @type {number} */ (gl.getParameter(gl.SAMPLE_BUFFERS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.SAMPLE_BUFFERS: ' + sampleBuffers);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.testFailed('expected gl.READ_FRAMEBUFFER_BINDING to be non-zero and gl.SAMPLE_BUFFERS to be greater than zero');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, ubyteData);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var bufUniform = gl.createBuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.UNIFORM_BUFFER, bufUniform);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.UNIFORM_BUFFER, bufEmpty, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var bufTF = gl.createBuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, bufTF);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, bufEmpty, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.TRANSFORM_FEEDBACK_BUFFER or gl.UNIFORM_BUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.ARRAY_BUFFER, 0, bufUniform, 0, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if target is gl.TRANSFORM_FEEDBACK_BUFFER and index is greater than or equal to gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxTFSize = /** @type {number} */ (gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, maxTFSize, bufTF, 0, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if target is gl.UNIFORM_BUFFER and index is greater than or equal to gl.MAX_UNIFORM_BUFFER_BINDINGS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxUSize = /** @type {number} */ (gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.UNIFORM_BUFFER, maxUSize, bufUniform, 0, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if size is less than or equal to zero.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.UNIFORM_BUFFER, 0, bufUniform, 0, -1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.UNIFORM_BUFFER, 0, bufUniform, 0, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if target is gl.TRANSFORM_FEEDBACK_BUFFER and size or offset are not multiples of 4.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, bufTF, 4, 5);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, bufTF, 5, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, 0, bufTF, 5, 7);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if target is gl.UNIFORM_BUFFER and offset is not a multiple of gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var alignment = /** @type {number} */ (gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferRange(gl.UNIFORM_BUFFER, 0, bufUniform, alignment + 1, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(bufUniform);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(bufTF);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var bufUniform = gl.createBuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.UNIFORM_BUFFER, bufUniform);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.UNIFORM_BUFFER, bufEmpty, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var bufTF = gl.createBuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, bufTF);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.TRANSFORM_FEEDBACK_BUFFER, bufEmpty, gl.STREAM_DRAW);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.TRANSFORM_FEEDBACK_BUFFER or gl.UNIFORM_BUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferBase(-1, 0, bufUniform);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferBase(gl.ARRAY_BUFFER, 0, bufUniform);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if target is gl.UNIFORM_BUFFER and index is greater than or equal to gl.MAX_UNIFORM_BUFFER_BINDINGS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxUSize = /** @type {number} */ (gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferBase(gl.UNIFORM_BUFFER, maxUSize, bufUniform);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if target is gl.TRANSFORM_FEEDBACK_BUFFER andindex is greater than or equal to gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxTFSize = /** @type {number} */ (gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, maxTFSize, bufTF);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(bufUniform);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(bufTF);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'clear_bufferiv', 'Invalid gl.clearBufferiv() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32I, 32, 32, 0, gl.RGBA_INTEGER, gl.INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if buffer is not an accepted value.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferiv(-1, 0, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferiv(gl.FRAMEBUFFER, 0, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if buffer is gl.COLOR, gl.FRONT, gl.BACK, gl.LEFT, gl.RIGHT, or gl.FRONT_AND_BACK and drawBuffer is greater than or equal to gl.MAX_DRAW_BUFFERS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxDrawBuffers = /** @type {number} */ (gl.getParameter(gl.MAX_DRAW_BUFFERS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferiv(gl.COLOR, maxDrawBuffers, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if buffer is gl.DEPTH or gl.DEPTH_STENCIL.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferiv(gl.DEPTH, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferiv(gl.DEPTH_STENCIL, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if buffer is gl.STENCIL and drawBuffer is not zero.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferiv(gl.STENCIL, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'clear_bufferuiv', 'Invalid gl.clearBufferuiv() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32UI, 32, 32, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if buffer is not an accepted value.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferuiv(-1, 0, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferuiv(gl.FRAMEBUFFER, 0, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if buffer is gl.COLOR, gl.FRONT, gl.BACK, gl.LEFT, gl.RIGHT, or gl.FRONT_AND_BACK and drawBuffer is greater than or equal to gl.MAX_DRAW_BUFFERS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxDrawBuffers = /** @type {number} */ (gl.getParameter(gl.MAX_DRAW_BUFFERS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferuiv(gl.COLOR, maxDrawBuffers, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if buffer is gl.DEPTH, gl.STENCIL or gl.DEPTH_STENCIL.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferuiv(gl.DEPTH, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferuiv(gl.STENCIL, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferuiv(gl.DEPTH_STENCIL, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'clear_bufferfv', 'Invalid gl.clearBufferfv() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                if (gl.getExtension('EXT_color_buffer_float')) {
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 32, 32, 0, gl.RGBA, gl.FLOAT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    bufferedLogToConsole('gl.INVALID_ENUM is generated if buffer is not an accepted value.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.clearBufferfv(-1, 0, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.clearBufferfv(gl.FRAMEBUFFER, 0, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    bufferedLogToConsole('gl.INVALID_VALUE is generated if buffer is gl.COLOR, gl.FRONT, gl.BACK, gl.LEFT, gl.RIGHT, or gl.FRONT_AND_BACK and drawBuffer is greater than or equal to gl.MAX_DRAW_BUFFERS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    var maxDrawBuffers = /** @type {number} */ (gl.getParameter(gl.MAX_DRAW_BUFFERS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.clearBufferfv(gl.COLOR, maxDrawBuffers, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    bufferedLogToConsole('gl.INVALID_ENUM is generated if buffer is gl.STENCIL or gl.DEPTH_STENCIL.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.clearBufferfv(gl.STENCIL, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.clearBufferfv(gl.DEPTH_STENCIL, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    bufferedLogToConsole('gl.INVALID_VALUE is generated if buffer is gl.DEPTH and drawBuffer is not zero.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.clearBufferfv(gl.DEPTH, 1, data);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'clear_bufferfi', 'Invalid gl.clearBufferfi() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if buffer is not an accepted value.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferfi(-1, 0, 1.0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferfi(gl.FRAMEBUFFER, 0, 1.0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if buffer is not gl.DEPTH_STENCIL.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferfi(gl.DEPTH, 0, 1.0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferfi(gl.STENCIL, 0, 1.0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferfi(gl.COLOR, 0, 1.0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if buffer is gl.DEPTH_STENCIL and drawBuffer is not zero.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.clearBufferfi(gl.DEPTH_STENCIL, 1, 1.0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'copy_buffer_sub_data', 'Invalid gl.copyBufferSubData() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    r: gl.createBuffer(),
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    w: gl.createBuffer()
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.COPY_READ_BUFFER, buf.r);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.COPY_READ_BUFFER, 32, gl.DYNAMIC_COPY);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.COPY_WRITE_BUFFER, buf.w);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bufferData(gl.COPY_WRITE_BUFFER, 32, gl.DYNAMIC_COPY);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if any of readoffset, writeoffset or size is negative.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, -4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, -1, 0, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, -1, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if readoffset + size exceeds the size of the buffer object bound to readtarget.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, 36);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 24, 0, 16);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 36, 0, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if writeoffset + size exceeds the size of the buffer object bound to writetarget.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, 36);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 24, 16);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 36, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if the same buffer object is bound to both readtarget and writetarget and the ranges [readoffset, readoffset + size) and [writeoffset, writeoffset + size) overlap.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.COPY_WRITE_BUFFER, buf.r);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 16, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, 4);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 16, 18);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.COPY_WRITE_BUFFER, buf.w);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if null is bound to readtarget or writetarget.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.COPY_READ_BUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, 16);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.COPY_READ_BUFFER, buf.r);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.COPY_WRITE_BUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, 16);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindBuffer(gl.COPY_WRITE_BUFFER, buf.w);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(buf.w);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteBuffer(buf.r);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxDrawBuffers = /** @type {number} */ (gl.getParameter(gl.MAX_DRAW_BUFFERS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.NONE,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.BACK,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.COLOR_ATTACHMENT0,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.DEPTH_ATTACHMENT
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if one of the values in bufs is not an accepted value.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.drawBuffers(values.slice(2, 4));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the GL is bound to the default framebuffer and the number of queried buffers is not 1.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.drawBuffers(values.slice(0, 2));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the GL is bound to the default framebuffer and the value in bufs is one of the gl.COLOR_ATTACHMENTn tokens.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.drawBuffers(values.slice(2, 3));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the GL is bound to a framebuffer object and the ith buffer listed in bufs is anything other than gl.NONE or gl.COLOR_ATTACHMENTSi.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.drawBuffers(values.slice(1, 2));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.FRAMEBUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(-1, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('glINVALID_ENUM is generated if target is not gl.RENDERBUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(-1, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.FRAMEBUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.checkFramebufferStatus(-1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.checkFramebufferStatus(gl.RENDERBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var rbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(-1, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if renderbuffertarget is not gl.RENDERBUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, -1, rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if zero is bound to target.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var tex2D = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var texCube = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, tex2D);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCube);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(-1, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if textarget is not an accepted texture target.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, -1, tex2D, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if level is less than 0 or larger than log_2 of maximum texture size.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxTexSize = /** @type {number} */ (gl.getParameter(gl.MAX_TEXTURE_SIZE));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxCubeTexSize = /** @type {number} */ (gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex2D, -1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex2D, maxSizePlane);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, texCube, maxSizeCube);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if textarget and texture are not compatible.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, tex2D, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(tex2D);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texCube, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texCube);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if zero is bound to target.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var rbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.RENDERBUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(-1, gl.RGBA4, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.FRAMEBUFFER, gl.RGBA4, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if internalformat is not a color-renderable, depth-renderable, or stencil-renderable format.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, -1, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                if (gl.getExtension('EXT_color_buffer_half_float') === null) {
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGB16F, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8_SNORM, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is less than zero.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, -1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 1, -1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, -1, -1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is greater than gl.MAX_RENDERBUFFER_SIZE.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxSize = /** @type {number} */ (gl.getParameter(gl.MAX_RENDERBUFFER_SIZE));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 1, maxSize + 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, maxSize + 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, maxSize + 1, maxSize + 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteRenderbuffer(rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.createTexture(), gl.createTexture()
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.createRenderbuffer(), gl.createRenderbuffer()
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.createFramebuffer(), gl.createFramebuffer()
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, 32, 32);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[0], 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, rbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, 32, 32);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[1], 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, rbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.DRAW_FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if mask contains any of the gl.DEPTH_BUFFER_BIT or gl.STENCIL_BUFFER_BIT and filter is not gl.NEAREST.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT, gl.LINEAR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.LINEAR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT, gl.LINEAR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if mask contains gl.COLOR_BUFFER_BIT and read buffer format is incompatible with draw buffer format.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32UI, 32, 32, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[0], 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('// Read buffer: gl.RGBA32UI, draw buffer: gl.RGBA');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32I, 32, 32, 0, gl.RGBA_INTEGER, gl.INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[0], 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('// Read buffer: gl.RGBA32I, draw buffer: gl.RGBA');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[0], 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32I, 32, 32, 0, gl.RGBA_INTEGER, gl.INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[1], 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('// Read buffer: gl.RGBA8, draw buffer: gl.RGBA32I');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if filter is gl.LINEAR and the read buffer contains integer data.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32UI, 32, 32, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[0], 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32UI, 32, 32, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture[1], 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('// Read buffer: gl.RGBA32UI, filter: gl.LINEAR');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.COLOR_BUFFER_BIT, gl.LINEAR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if mask contains gl.DEPTH_BUFFER_BIT or gl.STENCIL_BUFFER_BIT and the source and destination depth and stencil formats do not match.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH32F_STENCIL8, 32, 32);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, rbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.DEPTH_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.STENCIL_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texture[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texture[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteRenderbuffer(rbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteRenderbuffer(rbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.createRenderbuffer(), gl.createRenderbuffer()
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.createFramebuffer(), gl.createFramebuffer()
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA8, 32, 32);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.READ_FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if the value of gl.SAMPLE_BUFFERS for the draw buffer is greater than zero.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA8, 32, 32);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.SAMPLE_BUFFERS for the read buffer is greater than zero and the formats of draw and read buffers are not identical.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA4, 32, 32);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 0, 0, 16, 16, gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if gl.SAMPLE_BUFFERS for the read buffer is greater than zero and the source and destination rectangles are not defined with the same (X0, Y0) and (X1, Y1) bounds.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, 32, 32);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, rbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.blitFramebuffer(0, 0, 16, 16, 2, 2, 18, 18, gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteRenderbuffer(rbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteRenderbuffer(rbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo[0]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo[1]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var tex3D = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var tex2DArray = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var tex2D = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_3D, tex3D);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D_ARRAY, tex2DArray);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 4, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, tex2D);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(-1, gl.COLOR_ATTACHMENT0, tex3D, 0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(gl.RENDERBUFFER, gl.COLOR_ATTACHMENT0, tex3D, 0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if attachment is not one of the accepted tokens.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(gl.FRAMEBUFFER, -1, tex3D, 0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.BACK, tex3D, 0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if texture is non-zero and not the name of a 3D texture or 2D array texture.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex2D, 0, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if texture is not zero and layer is negative.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3D, 0, -1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if texture is not zero and layer is greater than gl.MAX_3D_TEXTURE_SIZE-1 for a 3D texture.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var max3DTexSize = /** @type {number} */ (gl.getParameter(gl.MAX_3D_TEXTURE_SIZE));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3D, 0, max3DTexSize);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if texture is not zero and layer is greater than gl.MAX_ARRAY_TEXTURE_LAYERS-1 for a 2D array texture.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxArrayTexLayers = /** @type {number} */ (gl.getParameter(gl.MAX_ARRAY_TEXTURE_LAYERS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex2DArray, 0, maxArrayTexLayers);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if zero is bound to target.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, tex3D, 0, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(tex3D);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(tex2DArray);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(tex2D);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'invalidate_framebuffer', 'Invalid gl.invalidateFramebuffer() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxColorAttachments = /** @type {number} */ (gl.getParameter(gl.MAX_COLOR_ATTACHMENTS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.COLOR_ATTACHMENT0
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.FRAMEBUFFER, gl.READ_FRAMEBUFFER or gl.DRAW_FRAMEBUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.invalidateFramebuffer(-1, attachments);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.invalidateFramebuffer(gl.BACK, attachments);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if attachments contains gl.COLOR_ATTACHMENTm and m is greater than or equal to the value of gl.MAX_COLOR_ATTACHMENTS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.invalidateFramebuffer(gl.FRAMEBUFFER, [gl.COLOR_ATTACHMENT0 + maxColorAttachments]);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteTexture(texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:            'invalidate_sub_framebuffer', 'Invalid gl.invalidateSubFramebuffer() usage', gl,
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var fbo = gl.createFramebuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var texture = gl.createTexture();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindTexture(gl.TEXTURE_2D, texture);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.NO_ERROR);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxColorAttachments = /** @type {number} */ (gl.getParameter(gl.MAX_COLOR_ATTACHMENTS));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var att0 = [gl.COLOR_ATTACHMENT0];
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var attm = [gl.COLOR_ATTACHMENT0 + maxColorAttachments];
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.FRAMEBUFFER, gl.READ_FRAMEBUFFER or gl.DRAW_FRAMEBUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.invalidateSubFramebuffer(-1, att0, 0, 0, 16, 16);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.invalidateSubFramebuffer(gl.BACK, att0, 0, 0, 16, 16);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if attachments contains gl.COLOR_ATTACHMENTm and m is greater than or equal to the value of gl.MAX_COLOR_ATTACHMENTS.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.invalidateSubFramebuffer(gl.FRAMEBUFFER, attm, 0, 0, 16, 16);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteFramebuffer(fbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var rbo = gl.createRenderbuffer();
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, rbo);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                /** @type {Int32Array} */ var samplesSupportedRGBA4 = /** @type {Int32Array} */ gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA4, gl.SAMPLES);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if target is not gl.RENDERBUFFER.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(-1, 2, gl.RGBA4, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.FRAMEBUFFER, 2, gl.RGBA4, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_OPERATION is generated if samples is greater than the maximum number of samples supported for internalformat.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, maxSamplesSupportedRGBA4 + 1, gl.RGBA4, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_OPERATION);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_ENUM is generated if internalformat is not a color-renderable, depth-renderable, or stencil-renderable format.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 2, -1, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                if (gl.getExtension('EXT_color_buffer_half_float') === null) {
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 2, gl.RGB16F, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                    this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 2, gl.RGBA8_SNORM, 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_ENUM);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is less than zero.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 2, gl.RGBA4, -1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 2, gl.RGBA4, 1, -1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 2, gl.RGBA4, -1, -1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                bufferedLogToConsole('gl.INVALID_VALUE is generated if width or height is greater than gl.MAX_RENDERBUFFER_SIZE.');
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                var maxSize = /** @type {number} */ (gl.getParameter(gl.MAX_RENDERBUFFER_SIZE));
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA4, 1, maxSize + 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA4, maxSize + 1, 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, 4, gl.RGBA4, maxSize + 1, maxSize + 1);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                this.expectError(gl.INVALID_VALUE);
deqp/functional/gles3/es3fNegativeBufferApiTests.js:                gl.deleteRenderbuffer(rbo);
deqp/functional/gles3/es3fShaderApiTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderApiTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderApiTests.js:    var shaderObject = gl.createShader(gluShaderProgram.getGLShaderType(gl, this.m_shaderType));
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteShader(shaderObject);
deqp/functional/gles3/es3fShaderApiTests.js:    var status = /** @type {boolean} */ (gl.getShaderParameter(shader, gl.COMPILE_STATUS));
deqp/functional/gles3/es3fShaderApiTests.js:    var shaderObject = gl.createShader(gluShaderProgram.getGLShaderType(gl, this.m_shaderType));
deqp/functional/gles3/es3fShaderApiTests.js:    gl.shaderSource(shaderObject, shaderSource);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.compileShader(shaderObject);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteShader(shaderObject);
deqp/functional/gles3/es3fShaderApiTests.js:    var shaderObject = gl.createShader(gluShaderProgram.getGLShaderType(gl, this.m_shaderType));
deqp/functional/gles3/es3fShaderApiTests.js:    gl.shaderSource(shaderObject, firstSource);
deqp/functional/gles3/es3fShaderApiTests.js:    this.check(firstSource == gl.getShaderSource(shaderObject));
deqp/functional/gles3/es3fShaderApiTests.js:    gl.shaderSource(shaderObject, secondSource);
deqp/functional/gles3/es3fShaderApiTests.js:    this.check(secondSource == gl.getShaderSource(shaderObject));
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteShader(shaderObject);
deqp/functional/gles3/es3fShaderApiTests.js:    var vertShader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderApiTests.js:    var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.shaderSource(vertShader, vertSource);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.compileShader(vertShader);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.shaderSource(fragShader, fragSource);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.compileShader(fragShader);
deqp/functional/gles3/es3fShaderApiTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderApiTests.js:    gl.attachShader(program, this.m_vertShader);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.attachShader(program, this.m_fragShader);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteShader(this.m_vertShader);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteShader(this.m_fragShader);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteProgram(this.m_program);
deqp/functional/gles3/es3fShaderApiTests.js:    var status = /** @type {boolean} */ (gl.getShaderParameter(shader, gl.DELETE_STATUS));
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteShader(this.m_vertShader);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteShader(this.m_fragShader);
deqp/functional/gles3/es3fShaderApiTests.js:    gl.deleteProgram(this.m_program);
deqp/functional/gles3/es3fShaderApiTests.js:    this.check(!(gl.isShader(this.m_vertShader) || gl.isShader(this.m_fragShader)));
deqp/functional/gles3/es3fShaderApiTests.js:    var status = /** @type {boolean} */ (gl.getProgramParameter(program, gl.LINK_STATUS));
deqp/functional/gles3/es3fAttribLocationTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fAttribLocationTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('float', 1, gl.FLOAT),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('vec2', 1, gl.FLOAT_VEC2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('vec3', 1, gl.FLOAT_VEC3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat2', 2, gl.FLOAT_MAT2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat3', 3, gl.FLOAT_MAT3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat4', 4, gl.FLOAT_MAT4),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('int', 1, gl.INT),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('ivec2', 1, gl.INT_VEC2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('ivec3', 1, gl.INT_VEC3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('ivec4', 1, gl.INT_VEC4),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('uint', 1, gl.UNSIGNED_INT),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('uvec2', 1, gl.UNSIGNED_INT_VEC2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('uvec3', 1, gl.UNSIGNED_INT_VEC3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('uvec4', 1, gl.UNSIGNED_INT_VEC4),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat2x2', 2, gl.FLOAT_MAT2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat2x3', 2, gl.FLOAT_MAT2x3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat2x4', 2, gl.FLOAT_MAT2x4),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat3x2', 3, gl.FLOAT_MAT3x2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat3x3', 3, gl.FLOAT_MAT3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat3x4', 3, gl.FLOAT_MAT3x4),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat4x2', 4, gl.FLOAT_MAT4x2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat4x3', 4, gl.FLOAT_MAT4x3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat4x4', 4, gl.FLOAT_MAT4)
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('float', 1, gl.FLOAT),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('vec2', 1, gl.FLOAT_VEC2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('vec3', 1, gl.FLOAT_VEC3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('vec4', 1, gl.FLOAT_VEC4),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat2', 2, gl.FLOAT_MAT2),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat3', 3, gl.FLOAT_MAT3),
deqp/functional/gles3/es3fAttribLocationTests.js:            new glsAttributeLocationTests.AttribType('mat4', 4, gl.FLOAT_MAT4)
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.BACK,
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.DEPTH,
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.STENCIL
deqp/functional/gles3/es3fFboStateQueryTests.js:        var objType = gl.getFramebufferAttachmentParameter(this.m_framebufferTarget, attachments[ndx], gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
deqp/functional/gles3/es3fFboStateQueryTests.js:            this.check(objType === gl.FRAMEBUFFER_DEFAULT);
deqp/functional/gles3/es3fFboStateQueryTests.js:            this.check(objType === gl.FRAMEBUFFER_DEFAULT || objType === gl.NONE);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyAttachment(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, gl.NONE));
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyAttachment(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, null));
deqp/functional/gles3/es3fFboStateQueryTests.js:    var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindTexture(gl.TEXTURE_2D, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, 128, 128, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureID, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, gl.TEXTURE));
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, textureID));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGB8, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, gl.RENDERBUFFER));
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, renderbufferID));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:        var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.bindTexture(gl.TEXTURE_2D, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.texStorage2D(gl.TEXTURE_2D, 7, gl.RGB8, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureID, mipmapLevel);
deqp/functional/gles3/es3fFboStateQueryTests.js:        this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, mipmapLevel));
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.texStorage2D(gl.TEXTURE_CUBE_MAP, 1, gl.RGB8, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, faces[ndx], textureID, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:        this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, faces[ndx]));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindTexture(gl.TEXTURE_3D, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.texStorage3D(gl.TEXTURE_3D, 1, gl.RGBA8, 16, 16, 16);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, textureID, 0, layer);
deqp/functional/gles3/es3fFboStateQueryTests.js:        this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, layer));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindTexture(gl.TEXTURE_2D_ARRAY, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.RGBA8, 16, 16, 16);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.framebufferTextureLayer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, textureID, 0, layer);
deqp/functional/gles3/es3fFboStateQueryTests.js:        this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, layer));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGB8, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, gl.LINEAR));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.SRGB8_ALPHA8, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, gl.SRGB));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyAttachment(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, gl.LINEAR));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.R8, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RG8, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGB8, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGB565, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA4, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGB5_A1, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA8, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGB10_A2, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGB10_A2UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.SRGB8_ALPHA8, gl.UNSIGNED_NORMALIZED],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.R8I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.R8UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.R16I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.R16UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.R32I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.R32UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RG8I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RG8UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RG16I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RG16UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RG32I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RG32UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA8I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA8UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA16I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA16UI, gl.UNSIGNED_INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA32I, gl.INT],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA32UI, gl.UNSIGNED_INT]
deqp/functional/gles3/es3fFboStateQueryTests.js:        var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.bindTexture(gl.TEXTURE_2D, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.texStorage2D(gl.TEXTURE_2D, 1, colorFormat, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureID, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:        this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE, componentType));
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var objType = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, attachment, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);
deqp/functional/gles3/es3fFboStateQueryTests.js:    return objType !== gl.NONE;
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE,
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE,
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
deqp/functional/gles3/es3fFboStateQueryTests.js:        var value = /** @type {number} */ (gl.getFramebufferAttachmentParameter(target, attachment, paramNames[ndx]));
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE, gl.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE,
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, gl.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE,
deqp/functional/gles3/es3fFboStateQueryTests.js:        gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, gl.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
deqp/functional/gles3/es3fFboStateQueryTests.js:        var value = gl.getFramebufferAttachmentParameter(target, attachment, paramNames[ndx]);
deqp/functional/gles3/es3fFboStateQueryTests.js:    if (this.attachmentExists(gl.BACK)) {
deqp/functional/gles3/es3fFboStateQueryTests.js:            gl.FRAMEBUFFER,
deqp/functional/gles3/es3fFboStateQueryTests.js:            gl.BACK,
deqp/functional/gles3/es3fFboStateQueryTests.js:    if (this.attachmentExists(gl.DEPTH)) {
deqp/functional/gles3/es3fFboStateQueryTests.js:            gl.FRAMEBUFFER,
deqp/functional/gles3/es3fFboStateQueryTests.js:            gl.DEPTH,
deqp/functional/gles3/es3fFboStateQueryTests.js:    if (this.attachmentExists(gl.STENCIL)) {
deqp/functional/gles3/es3fFboStateQueryTests.js:            gl.FRAMEBUFFER,
deqp/functional/gles3/es3fFboStateQueryTests.js:            gl.STENCIL,
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA8, 8, 8, 8, 8],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGB565, 5, 6, 5, 0],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA4, 4, 4, 4, 4],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGB5_A1, 5, 5, 5, 1],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RGBA8I, 8, 8, 8, 8],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.RG32UI, 32, 32, 0, 0]
deqp/functional/gles3/es3fFboStateQueryTests.js:        this.testColorAttachment(colorAttachments[ndx][0], gl.COLOR_ATTACHMENT0, colorAttachments[ndx][1], colorAttachments[ndx][2], colorAttachments[ndx][3], colorAttachments[ndx][4]);
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.DEPTH_COMPONENT16, gl.DEPTH_ATTACHMENT, 16, 0],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.DEPTH_COMPONENT24, gl.DEPTH_ATTACHMENT, 24, 0],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.DEPTH_COMPONENT32F, gl.DEPTH_ATTACHMENT, 32, 0],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.DEPTH24_STENCIL8, gl.DEPTH_STENCIL_ATTACHMENT, 24, 8],
deqp/functional/gles3/es3fFboStateQueryTests.js:        [gl.DEPTH32F_STENCIL8, gl.DEPTH_STENCIL_ATTACHMENT, 32, 8]
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeAtLeast.bind(this, gl.FRAMEBUFFER, attachment, r, g, b, a, -1, -1);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeExactly.bind(this, gl.FRAMEBUFFER, attachment, -1, -1, -1, -1, 0, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeAtLeast.bind(this, gl.FRAMEBUFFER, attachment, -1, -1, -1, -1, depth, stencil);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeExactly.bind(this, gl.FRAMEBUFFER, attachment, 0, 0, 0, 0, -1, -1);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindTexture(gl.TEXTURE_2D, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.texStorage2D(gl.TEXTURE_2D, 1, internalFormat, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureID, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeAtLeast.bind(this, gl.FRAMEBUFFER, attachment, r, g, b, a, -1, -1);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeExactly.bind(this, gl.FRAMEBUFFER, attachment, -1, -1, -1, -1, 0, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    if (attachment == gl.DEPTH_STENCIL_ATTACHMENT)
deqp/functional/gles3/es3fFboStateQueryTests.js:    var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindTexture(gl.TEXTURE_2D, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.texStorage2D(gl.TEXTURE_2D, 1, internalFormat, 128, 128);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureID, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeAtLeast.bind(this, gl.FRAMEBUFFER, attachment, -1, -1, -1, -1, depth, stencil);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeExactly.bind(this, gl.FRAMEBUFFER, attachment, 0, 0, 0, 0, -1, -1);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyColorAttachment(gl.FRAMEBUFFER, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, gl.LINEAR));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.check(glsStateQuery.verifyAttachment(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, gl.LINEAR));
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var framebufferID = gl.createFramebuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteFramebuffer(framebufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeExactly.bind(this, gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var renderbufferID = gl.createRenderbuffer();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeExactly.bind(this, gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteRenderbuffer(renderbufferID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindTexture(gl.TEXTURE_2D, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureID, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeExactly.bind(this, gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var textureID = gl.createTexture();
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.bindTexture(gl.TEXTURE_2D, textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, textureID, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    checkAttachmentComponentSizeExactly.bind(this, gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, 0, 0, 0, 0, 0, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, null, 0);
deqp/functional/gles3/es3fFboStateQueryTests.js:    gl.deleteTexture(textureID);
deqp/functional/gles3/es3fFboStateQueryTests.js:    var red = /** @type {number} */ (gl.getParameter(gl.RED_BITS));
deqp/functional/gles3/es3fFboStateQueryTests.js:    var green = /** @type {number} */ (gl.getParameter(gl.GREEN_BITS));
deqp/functional/gles3/es3fFboStateQueryTests.js:    var blue = /** @type {number} */ (gl.getParameter(gl.BLUE_BITS));
deqp/functional/gles3/es3fFboStateQueryTests.js:    var alpha = /** @type {number} */ (gl.getParameter(gl.ALPHA_BITS));
deqp/functional/gles3/es3fFboStateQueryTests.js:    es3fFboStateQueryTests.depthBits = /** @type {number} */ (gl.getParameter(gl.DEPTH_BITS));
deqp/functional/gles3/es3fFboStateQueryTests.js:    es3fFboStateQueryTests.stencilBits = /** @type {number} */ (gl.getParameter(gl.STENCIL_BITS));
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.addChild(new es3fFboStateQueryTests.DefaultFramebufferCase('draw_framebuffer_default_framebuffer', 'default framebuffer', gl.DRAW_FRAMEBUFFER));
deqp/functional/gles3/es3fFboStateQueryTests.js:    this.addChild(new es3fFboStateQueryTests.DefaultFramebufferCase('read_framebuffer_default_framebuffer', 'default framebuffer', gl.READ_FRAMEBUFFER));
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:goog.require('framework.opengl.gluVarType');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:goog.require('framework.opengl.simplereference.sglrShaderProgram');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:    var gluVarType = framework.opengl.gluVarType;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:    var sglrShaderProgram = framework.opengl.simplereference.sglrShaderProgram;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:    var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        return /** @type {number} */ (gl.getParameter(pname));
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        var value = /** @type {number} */ (gl.getParameter(pname));
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.useProgram(null);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, null);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        bufferedLogToConsole('gl.depthRange(' + this.m_depthRange.zNear + ', ' + this.m_depthRange.zFar + ')');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.depthRange(this.m_depthRange.zNear, this.m_depthRange.zFar);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var width = gl.drawingBufferWidth;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var height = gl.drawingBufferHeight;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {WebGLUniformLocation} */ var scaleLoc = gl.getUniformLocation(program.getProgram(), 'u_scale');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.uniform3fv(scaleLoc, scale);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.viewport(0, 0, width, height);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var width = gl.drawingBufferWidth;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var height = gl.drawingBufferHeight;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var width = Math.min(256, gl.drawingBufferWidth);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var height = Math.min(256, gl.drawingBufferHeight);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        pointSizeRange = /** @type {Array<number>} */ (gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE));
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            throw new Error('Invalid gl.ALIASED_POINT_SIZE_RANGE');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var viewportX = rnd.getInt(0, gl.drawingBufferWidth - width);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var viewportY = rnd.getInt(0, gl.drawingBufferHeight - height);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.viewport(viewportX, viewportY, width, height);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.clearColor(0.0, 0.0, 0.0, 1.0);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var width = Math.min(64, gl.drawingBufferWidth);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var height = Math.min(64, gl.drawingBufferHeight);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var viewportX = rnd.getInt(0, gl.drawingBufferWidth - width);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var viewportY = rnd.getInt(0, gl.drawingBufferHeight - height);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.viewport(viewportX, viewportY, Math.floor(width / 2), height);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.viewport(viewportX + Math.floor(width / 2), viewportY, width - Math.floor(width / 2), height);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var width = gl.drawingBufferWidth;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var height = gl.drawingBufferHeight;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        this.m_positionBuffer = gl.createBuffer();
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        this.m_elementBuffer = gl.createBuffer();
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            gl.deleteBuffer(this.m_positionBuffer);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            gl.deleteBuffer(this.m_elementBuffer);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var width = gl.drawingBufferWidth;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var height = gl.drawingBufferHeight;
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {number} */ var posLoc = gl.getAttribLocation(this.m_program.getProgram(), 'a_position');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        /** @type {WebGLUniformLocation} */ var colorsLoc = gl.getUniformLocation(this.m_program.getProgram(), 'u_colors[0]');
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.viewport(viewportX, viewportY, viewportW, viewportH);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.useProgram(this.m_program.getProgram());
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, this.m_positionBuffer);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.enableVertexAttribArray(posLoc);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.vertexAttribPointer(posLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.uniform4fv(colorsLoc, [].concat.apply([], this.m_colors));
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            gl.bufferData(gl.ARRAY_BUFFER, flatPosArray.buffer, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            gl.drawArrays(gl.TRIANGLES, 0, Math.floor(flatPosArray.length / 4));
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.m_elementBuffer);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (new Uint16Array(indices)).buffer, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            gl.bufferData(gl.ARRAY_BUFFER, flatPosArray.buffer, gl.DYNAMIC_DRAW);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_vertex_attribs', 'gl_MaxVertexAttribs', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MAX_VERTEX_ATTRIBS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_vertex_uniform_vectors', 'gl_MaxVertexUniformVectors', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MAX_VERTEX_UNIFORM_VECTORS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_fragment_uniform_vectors', 'gl_MaxFragmentUniformVectors', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MAX_FRAGMENT_UNIFORM_VECTORS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_texture_image_units', 'gl_MaxTextureImageUnits', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MAX_TEXTURE_IMAGE_UNITS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_vertex_texture_image_units', 'gl_MaxVertexTextureImageUnits', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_combined_texture_image_units', 'gl_MaxCombinedTextureImageUnits', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_draw_buffers', 'gl_MaxDrawBuffers', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MAX_DRAW_BUFFERS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_vertex_output_vectors', 'gl_MaxVertexOutputVectors', function() { return es3fShaderBuiltinVarTests.getVectorsFromComps(gl.MAX_VERTEX_OUTPUT_COMPONENTS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_fragment_input_vectors', 'gl_MaxFragmentInputVectors', function() { return es3fShaderBuiltinVarTests.getVectorsFromComps(gl.MAX_FRAGMENT_INPUT_COMPONENTS); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('min_program_texel_offset', 'gl_MinProgramTexelOffset', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MIN_PROGRAM_TEXEL_OFFSET); }),
deqp/functional/gles3/es3fShaderBuiltinVarTests.js:            new BuiltinConstant('max_program_texel_offset', 'gl_MaxProgramTexelOffset', function() { return es3fShaderBuiltinVarTests.getInteger(gl.MAX_PROGRAM_TEXEL_OFFSET); })
conformance/textures/misc/texture-cube-as-fbo-attachment.html:  var textureCube = gl.createTexture();
conformance/textures/misc/texture-cube-as-fbo-attachment.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, textureCube);
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/textures/misc/texture-cube-as-fbo-attachment.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/texture-cube-as-fbo-attachment.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    gl.texImage2D(faces[ii], 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-cube-as-fbo-attachment.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup");
conformance/textures/misc/texture-cube-as-fbo-attachment.html:  var fbo = gl.createFramebuffer();
conformance/textures/misc/texture-cube-as-fbo-attachment.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, faces[ii], textureCube, 0);
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    shouldBe('gl.checkFramebufferStatus(gl.FRAMEBUFFER)', 'gl.FRAMEBUFFER_COMPLETE');
conformance/textures/misc/texture-cube-as-fbo-attachment.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors for face " + wtu.glEnumToString(gl, faces[ii]));
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.clearColor(0.5,0.5,0.5,1);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.clearDepth(1);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    textureLoc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/texture-transparent-pixels-initialized.html:    var vbo = gl.createBuffer();
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.enableVertexAttribArray(1);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.enable(gl.BLEND);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    gl.uniform1i(textureLoc, 0);
conformance/textures/misc/texture-transparent-pixels-initialized.html:    wtu.checkCanvasRect(gl, 1, gl.canvas.height - 3, 2, 2, color,
deqp/functional/gles3/es3fBufferCopyTests.js:        gl.bindBuffer(this.m_srcTarget, srcBuf);
deqp/functional/gles3/es3fBufferCopyTests.js:        gl.bufferData(this.m_srcTarget, srcRef.getPtr(), this.m_srcHint);
deqp/functional/gles3/es3fBufferCopyTests.js:        gl.bindBuffer(this.m_dstTarget, dstBuf);
deqp/functional/gles3/es3fBufferCopyTests.js:        gl.bufferData(this.m_dstTarget, dstRef.getPtr(), this.m_dstHint);
deqp/functional/gles3/es3fBufferCopyTests.js:        gl.bindBuffer(this.m_srcTarget, srcBuf);
deqp/functional/gles3/es3fBufferCopyTests.js:        gl.bindBuffer(this.m_dstTarget, dstBuf);
deqp/functional/gles3/es3fBufferCopyTests.js:        gl.copyBufferSubData(this.m_srcTarget, this.m_dstTarget, this.m_copySrcOffset, this.m_copyDstOffset, this.m_copySize);
deqp/functional/gles3/es3fBufferCopyTests.js:        gl.bindBuffer(this.m_srcTarget, buf);
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.bindBuffer(this.m_srcTarget, buf);
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.bufferData(this.m_srcTarget, ref.getPtr(), this.m_hint);
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.bindBuffer(this.m_dstTarget, buf);
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.copyBufferSubData(this.m_srcTarget, this.m_dstTarget, srcOffset, dstOffset, copySize);
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.ARRAY_BUFFER,
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.COPY_READ_BUFFER,
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.COPY_WRITE_BUFFER,
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.ELEMENT_ARRAY_BUFFER,
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.PIXEL_PACK_BUFFER,
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.PIXEL_UNPACK_BUFFER,
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.TRANSFORM_FEEDBACK_BUFFER,
deqp/functional/gles3/es3fBufferCopyTests.js:            gl.UNIFORM_BUFFER
deqp/functional/gles3/es3fBufferCopyTests.js:                if (bufferTargets[srcTargetNdx] == gl.ELEMENT_ARRAY_BUFFER ||
deqp/functional/gles3/es3fBufferCopyTests.js:                    bufferTargets[dstTargetNdx] == gl.ELEMENT_ARRAY_BUFFER)
deqp/functional/gles3/es3fBufferCopyTests.js:                var hint = gl.STATIC_DRAW;
deqp/functional/gles3/es3fBufferCopyTests.js:            var srcTarget = gl.COPY_READ_BUFFER;
deqp/functional/gles3/es3fBufferCopyTests.js:            var dstTarget = gl.COPY_WRITE_BUFFER;
deqp/functional/gles3/es3fBufferCopyTests.js:            var hint = gl.STATIC_DRAW;
deqp/functional/gles3/es3fBufferCopyTests.js:                if (bufferTargets[srcTargetNdx] == gl.ELEMENT_ARRAY_BUFFER || bufferTargets[srcTargetNdx] == gl.TRANSFORM_FEEDBACK_BUFFER ||
deqp/functional/gles3/es3fBufferCopyTests.js:                    bufferTargets[dstTargetNdx] == gl.ELEMENT_ARRAY_BUFFER || bufferTargets[dstTargetNdx] == gl.TRANSFORM_FEEDBACK_BUFFER)
deqp/functional/gles3/es3fBufferCopyTests.js:                var hint = gl.STATIC_DRAW;
conformance/textures/misc/texture-upload-size.html:var tex = gl.createTexture();
conformance/textures/misc/texture-upload-size.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-upload-size.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, upload);
conformance/textures/misc/texture-upload-size.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "when calling texImage2D");
conformance/textures/misc/texture-upload-size.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, upload);
conformance/textures/misc/texture-upload-size.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "when calling texSubImage2D with the same texture upload");
conformance/textures/misc/texture-upload-size.html:  gl.texSubImage2D(gl.TEXTURE_2D, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, upload);
conformance/textures/misc/texture-upload-size.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "when calling texSubImage2D with the same texture upload with offset 1, 1");
conformance/textures/misc/texture-size-cube-maps.html:var rotLoc = gl.getUniformLocation(program, "rotation");
conformance/textures/misc/texture-size-cube-maps.html:gl.disable(gl.DEPTH_TEST);
conformance/textures/misc/texture-size-cube-maps.html:gl.disable(gl.BLEND);
conformance/textures/misc/texture-size-cube-maps.html:var maxSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
conformance/textures/misc/texture-size-cube-maps.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/texture-size-cube-maps.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/texture-size-cube-maps.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/texture-size-cube-maps.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/texture-size-cube-maps.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/texture-size-cube-maps.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
conformance/textures/misc/texture-size-cube-maps.html:  gl.viewport(0, 0, canvasSize, canvasSize);
conformance/textures/misc/texture-size-cube-maps.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-size-cube-maps.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
conformance/textures/misc/texture-size-cube-maps.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/texture-size-cube-maps.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/texture-size-cube-maps.html:      gl.texParameteri(
conformance/textures/misc/texture-size-cube-maps.html:          gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER,
conformance/textures/misc/texture-size-cube-maps.html:          gl.NEAREST_MIPMAP_NEAREST);
conformance/textures/misc/texture-size-cube-maps.html:      gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
conformance/textures/misc/texture-size-cube-maps.html:    var err = gl.getError();
conformance/textures/misc/texture-size-cube-maps.html:    if (err == gl.OUT_OF_MEMORY) {
conformance/textures/misc/texture-size-cube-maps.html:    if (err != gl.NO_ERROR) {
conformance/textures/misc/texture-size-cube-maps.html:      gl.uniformMatrix4fv(rotLoc, false, rotMat);
conformance/textures/misc/texture-size-cube-maps.html:      gl.uniformMatrix4fv(rotLoc, false, rotMat);
conformance/textures/misc/texture-size-cube-maps.html:  gl.deleteTexture(tex);
conformance/textures/misc/texture-size-cube-maps.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/textures/misc/texture-size-cube-maps.html:  gl.texImage2D(
conformance/textures/misc/texture-size-cube-maps.html:      target, level, gl.RGBA, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:      case gl.RED:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:      case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:      case gl.SRGB8:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:      case gl.SRGB8_ALPHA8:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            ', bindingTarget=' + (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY');
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:              ', bindingTarget=' + (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP');
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:        targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:                   gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:                   gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.texImage3D(targets[tt], 0, gl[internalFormat], bitmap.width, bitmap.height, 1 /* depth */, 0,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.texSubImage3D(targets[tt], 0, 0, 0, 0, bitmap.width, bitmap.height, 1,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat], bitmap.width, bitmap.height, 0,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:                gl.texSubImage2D(targets[tt], 0, 0, 0, gl[pixelFormat], gl[pixelType], bitmap);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:                gl.texImage2D(targets[tt], 0, gl[internalFormat], gl[pixelFormat], gl[pixelType], bitmap);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    var width = gl.canvas.width;
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    var height = gl.canvas.height;
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:        loc = gl.getUniformLocation(program, "face");
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:          case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:          case gl.RGB_INTEGER:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:          case gl.RGBA_INTEGER:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.uniform1i(loc, targets[tt]);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:      case gl.RED:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:      case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:      case gl.SRGB8:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:      case gl.SRGB8_ALPHA8:
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat], bitmap.width, bitmap.height, 1 /* depth */, 0,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.texSubImage3D(bindingTarget, 0, bitmap.width / 2, 0, 0, bitmap.width / 2, bitmap.height, 1,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, bitmap.height / 2);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat], bitmap.width, bitmap.height / 2, 1 /* depth */, 0,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.texImage2D(bindingTarget, 0, gl[internalFormat], bitmap.width, bitmap.height, 0,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.texSubImage2D(bindingTarget, 0, bitmap.width / 2, 0, bitmap.width / 2, bitmap.height,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, bitmap.width / 2);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, bitmap.height / 2);
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            gl.texImage2D(bindingTarget, 0, gl[internalFormat], bitmap.width / 2, bitmap.height / 2, 0,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    var width = gl.canvas.width;
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    var height = gl.canvas.height;
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:        (bindingTarget == gl.TEXTURE_CUBE_MAP || bindingTarget == gl.TEXTURE_2D_ARRAY))
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:        runTestOnBindingTargetImageBitmap(gl.TEXTURE_3D, program, cases, optionsVal,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:        runTestOnBindingTargetImageBitmap(gl.TEXTURE_2D, program, cases, optionsVal,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            runTestOnBindingTargetImageBitmap(gl.TEXTURE_2D_ARRAY, program, cases, optionsVal,
js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js:            runTestOnBindingTargetImageBitmap(gl.TEXTURE_CUBE_MAP, program, cases, optionsVal,
deqp/functional/gles3/transformfeedback/basic_types_interleaved_points.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/es3fUniformApiTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fUniformApiTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fUniformApiTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fUniformApiTests.js:goog.require('framework.opengl.gluTexture');
deqp/functional/gles3/es3fUniformApiTests.js:goog.require('framework.opengl.gluVarType');
deqp/functional/gles3/es3fUniformApiTests.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fUniformApiTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fUniformApiTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fUniformApiTests.js:    var gluTexture = framework.opengl.gluTexture;
deqp/functional/gles3/es3fUniformApiTests.js:    var gluVarType = framework.opengl.gluVarType;
deqp/functional/gles3/es3fUniformApiTests.js:        var vertexTexUnitsSupported = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS));
deqp/functional/gles3/es3fUniformApiTests.js:        var fragmentTexUnitsSupported = /** @type {number} */ (gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));
deqp/functional/gles3/es3fUniformApiTests.js:        var combinedTexUnitsSupported = /** @type {number} */ (gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS));
deqp/functional/gles3/es3fUniformApiTests.js:            texture = gluTexture.texture2DFromFormat(gl, gl.RGBA, gl.UNSIGNED_BYTE, width, height);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.activeTexture(gl.TEXTURE0 + value.val.samplerV.unit);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fUniformApiTests.js:            texture = gluTexture.cubeFromFormat(gl, gl.RGBA, gl.UNSIGNED_BYTE, width);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.activeTexture(gl.TEXTURE0 + value.val.samplerV.unit);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fUniformApiTests.js:           gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fUniformApiTests.js:       numActiveUniforms = /** @type {WebGLProgram} */ (gl.getProgramParameter(programGL, gl.ACTIVE_UNIFORMS));
deqp/functional/gles3/es3fUniformApiTests.js:            /** @type {number} (GLenum)*/ var reportedTypeGL = gl.NONE;
deqp/functional/gles3/es3fUniformApiTests.js:           activeInfo = gl.getActiveUniform(programGL, unifNdx);
deqp/functional/gles3/es3fUniformApiTests.js:        /** @type {Array<number>} */ var validUniformIndices = []; // This shall have the same contents, and in same order, as uniformIndices, but with gl.INVALID_INDEX entries removed.
deqp/functional/gles3/es3fUniformApiTests.js:       uniformIndices = gl.getUniformIndices(programGL, queryNamesC);
deqp/functional/gles3/es3fUniformApiTests.js:            if (uniformIndices[i] != gl.INVALID_INDEX)
deqp/functional/gles3/es3fUniformApiTests.js:                    bufferedLogToConsole('// FAILURE: uniform with name ' + basicUniformReportsRef[i].name + ' received gl.INVALID_INDEX');
deqp/functional/gles3/es3fUniformApiTests.js:           uniformSizeBuf = gl.getActiveUniforms(programGL, validUniformIndices, gl.UNIFORM_SIZE);
deqp/functional/gles3/es3fUniformApiTests.js:           uniformTypeBuf = gl.getActiveUniforms(programGL, validUniformIndices, gl.UNIFORM_TYPE);
deqp/functional/gles3/es3fUniformApiTests.js:                if (uniformIndices[unifNdx] == gl.INVALID_INDEX)
deqp/functional/gles3/es3fUniformApiTests.js:            /** @type {WebGLUniformLocation} */ var location = gl.getUniformLocation(programGL, queryName);
deqp/functional/gles3/es3fUniformApiTests.js:            var result = /** @type {number} */ (gl.getUniform(programGL, location));
deqp/functional/gles3/es3fUniformApiTests.js:            /** @type {WebGLUniformLocation} */ var location = gl.getUniformLocation(programGL, queryName);
deqp/functional/gles3/es3fUniformApiTests.js:                        case 1: gl.uniform1f(location, valuesToAssign[0].val[0]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 2: gl.uniform2f(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 3: gl.uniform3f(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1], valuesToAssign[0].val[2]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 4: gl.uniform4f(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1], valuesToAssign[0].val[2], valuesToAssign[0].val[3]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 1: gl.uniform1fv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 2: gl.uniform2fv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 3: gl.uniform3fv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 4: gl.uniform4fv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT2: gl.uniformMatrix2fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT3: gl.uniformMatrix3fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT4: gl.uniformMatrix4fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT2X3: gl.uniformMatrix2x3fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT2X4: gl.uniformMatrix2x4fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT3X2: gl.uniformMatrix3x2fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT3X4: gl.uniformMatrix3x4fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT4X2: gl.uniformMatrix4x2fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                    case gluShaderUtil.DataType.FLOAT_MAT4X3: gl.uniformMatrix4x3fv(location, transposeGL, new Float32Array(buffer)); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 1: gl.uniform1i(location, valuesToAssign[0].val[0]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 2: gl.uniform2i(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 3: gl.uniform3i(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1], valuesToAssign[0].val[2]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 4: gl.uniform4i(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1], valuesToAssign[0].val[2], valuesToAssign[0].val[3]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 1: gl.uniform1iv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 2: gl.uniform2iv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 3: gl.uniform3iv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 4: gl.uniform4iv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 1: gl.uniform1ui(location, valuesToAssign[0].val[0]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 2: gl.uniform2ui(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 3: gl.uniform3ui(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1], valuesToAssign[0].val[2]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 4: gl.uniform4ui(location, valuesToAssign[0].val[0], valuesToAssign[0].val[1], valuesToAssign[0].val[2], valuesToAssign[0].val[3]); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 1: gl.uniform1uiv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 2: gl.uniform2uiv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 3: gl.uniform3uiv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                        case 4: gl.uniform4uiv(location, buffer); break;
deqp/functional/gles3/es3fUniformApiTests.js:                   gl.uniform1i(location, uniform.finalValue.val.samplerV.unit);
deqp/functional/gles3/es3fUniformApiTests.js:                   gl.uniform1iv(location, unit);
deqp/functional/gles3/es3fUniformApiTests.js:        /** @const */ var viewportW = Math.min(gl.canvas.width, es3fUniformApiTests.VIEWPORT_WIDTH);
deqp/functional/gles3/es3fUniformApiTests.js:        /** @const */ var viewportH = Math.min(gl.canvas.height, es3fUniformApiTests.VIEWPORT_HEIGHT);
deqp/functional/gles3/es3fUniformApiTests.js:        /** @const */ var viewportX = rnd.getInt(0, gl.canvas.width - viewportW);
deqp/functional/gles3/es3fUniformApiTests.js:        /** @const */ var viewportY = rnd.getInt(0, gl.canvas.height - viewportH);
deqp/functional/gles3/es3fUniformApiTests.js:       gl.viewport(viewportX, viewportY, viewportW, viewportH);
deqp/functional/gles3/es3fUniformApiTests.js:        /** @type {number} */ var posLoc = gl.getAttribLocation(program.getProgram(), 'a_position');
deqp/functional/gles3/es3fUniformApiTests.js:        gl.enableVertexAttribArray(posLoc);
deqp/functional/gles3/es3fUniformApiTests.js:        var gl_position_buffer = gl.createBuffer();
deqp/functional/gles3/es3fUniformApiTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, gl_position_buffer);
deqp/functional/gles3/es3fUniformApiTests.js:        gl.bufferData(gl.ARRAY_BUFFER, position, gl.STATIC_DRAW);
deqp/functional/gles3/es3fUniformApiTests.js:        gl.vertexAttribPointer(posLoc, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fUniformApiTests.js:        var gl_index_buffer = gl.createBuffer();
deqp/functional/gles3/es3fUniformApiTests.js:        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl_index_buffer);
deqp/functional/gles3/es3fUniformApiTests.js:        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
deqp/functional/gles3/es3fUniformApiTests.js:        gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);
deqp/functional/gles3/es3fUniformApiTests.js:       gl.useProgram(program.getProgram());
deqp/functional/gles3/transformfeedback/array_element_separate_triangles.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/es3fShaderPrecisionTests.js:goog.require('framework.opengl.gluDrawUtil');
deqp/functional/gles3/es3fShaderPrecisionTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderPrecisionTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderPrecisionTests.js:    var gluDrawUtil = framework.opengl.gluDrawUtil;
deqp/functional/gles3/es3fShaderPrecisionTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderPrecisionTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderPrecisionTests.js:        this.m_framebuffer = gl.createFramebuffer();
deqp/functional/gles3/es3fShaderPrecisionTests.js:        this.m_renderbuffer = gl.createRenderbuffer();
deqp/functional/gles3/es3fShaderPrecisionTests.js:        gl.bindRenderbuffer(gl.RENDERBUFFER, this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:        gl.renderbufferStorage(gl.RENDERBUFFER, gl.R32UI, es3fShaderPrecisionTests.FRAMEBUFFER_WIDTH, es3fShaderPrecisionTests.FRAMEBUFFER_HEIGHT);
deqp/functional/gles3/es3fShaderPrecisionTests.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:        assertMsgOptions(gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE, 'Framebuffer is incomplete', false, true);
deqp/functional/gles3/es3fShaderPrecisionTests.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.deleteFramebuffer(this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.deleteRenderbuffer(this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.useProgram(prog);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.readPixels(0, 0, es3fShaderPrecisionTests.FRAMEBUFFER_WIDTH,
deqp/functional/gles3/es3fShaderPrecisionTests.js:				es3fShaderPrecisionTests.FRAMEBUFFER_HEIGHT, gl.RGBA_INTEGER, gl.UNSIGNED_INT, pixels_uint);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fShaderPrecisionTests.js:        this.m_framebuffer = gl.createFramebuffer();
deqp/functional/gles3/es3fShaderPrecisionTests.js:        this.m_renderbuffer = gl.createRenderbuffer();
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindRenderbuffer(gl.RENDERBUFFER, this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.renderbufferStorage(gl.RENDERBUFFER, gl.R32I, es3fShaderPrecisionTests.FRAMEBUFFER_WIDTH, es3fShaderPrecisionTests.FRAMEBUFFER_HEIGHT);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		assertMsgOptions(gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE, 'Framebuffer is incomplete', false, true);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.deleteFramebuffer(this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.deleteRenderbuffer(this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.useProgram(prog);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.readPixels(0, 0, es3fShaderPrecisionTests.FRAMEBUFFER_WIDTH,
deqp/functional/gles3/es3fShaderPrecisionTests.js:				gl.RGBA_INTEGER, gl.INT, pixels);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fShaderPrecisionTests.js:        this.m_framebuffer = gl.createFramebuffer();
deqp/functional/gles3/es3fShaderPrecisionTests.js:        this.m_renderbuffer = gl.createRenderbuffer();
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindRenderbuffer(gl.RENDERBUFFER, this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.renderbufferStorage(gl.RENDERBUFFER, gl.R32UI, es3fShaderPrecisionTests.FRAMEBUFFER_WIDTH, es3fShaderPrecisionTests.FRAMEBUFFER_HEIGHT);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		assertMsgOptions(gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE, 'Framebuffer is incomplete', false, true);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.deleteFramebuffer(this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.deleteRenderbuffer(this.m_renderbuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.useProgram(prog);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, this.m_framebuffer);
deqp/functional/gles3/es3fShaderPrecisionTests.js:			gl.readPixels(0, 0, es3fShaderPrecisionTests.FRAMEBUFFER_WIDTH,
deqp/functional/gles3/es3fShaderPrecisionTests.js:				es3fShaderPrecisionTests.FRAMEBUFFER_HEIGHT, gl.RGBA_INTEGER, gl.UNSIGNED_INT, pixels);
deqp/functional/gles3/es3fShaderPrecisionTests.js:		gl.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderTypes = [gl.VERTEX_SHADER, gl.FRAGMENT_SHADER];
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var shader = gl.createShader(shaderTypes[ndx]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var result = glsStateQuery.verifyShader(shader, gl.SHADER_TYPE, shaderTypes[ndx]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.deleteShader(shader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    result = glsStateQuery.verifyShader(shaderVert, gl.COMPILE_STATUS, false);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    result = glsStateQuery.verifyShader(shaderFrag, gl.COMPILE_STATUS, false);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, commonTestVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, commonTestFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    result = glsStateQuery.verifyShader(shaderVert, gl.COMPILE_STATUS, true);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    result = glsStateQuery.verifyShader(shaderFrag, gl.COMPILE_STATUS, true);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var log = gl.getShaderInfoLog(shader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shader, brokenShader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    log = gl.getShaderInfoLog(shader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shader = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(gl.getShaderSource(shader) === '');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shader, brokenShader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(gl.getShaderSource(shader) === brokenShader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, commonTestVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, commonTestFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderVert, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderFrag, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderProg = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(shaderProg, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(shaderProg, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(shaderProg);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(shaderProg, gl.LINK_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderVert, gl.DELETE_STATUS, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderFrag, gl.DELETE_STATUS, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(shaderProg, gl.DELETE_STATUS, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(shaderProg);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(shaderProg);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderVert, gl.DELETE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderFrag, gl.DELETE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(shaderProg, gl.DELETE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var attribute_count = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var attrib = gl.getVertexAttrib(index, gl.CURRENT_VERTEX_ATTRIB);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var attribute_count = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttrib4f(index, x, y, z, w);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttrib3f(index, x, y, z);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttrib2f(index, x, y);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttrib1f(index, x);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var attribute_count = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribI4i(index, x, y, z, w);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var attribute_count = /** @type {number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribI4ui(index, x, y, z, w);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, brokenShader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, brokenShader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var log = gl.getProgramInfoLog(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, commonTestVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, commonTestFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderVert, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderFrag, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.LINK_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.validateProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.VALIDATE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, commonTestVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, brokenShader);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderVert, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderFrag, gl.COMPILE_STATUS, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.LINK_STATUS, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.validateProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.VALIDATE_STATUS, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, commonTestVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, commonTestFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.ATTACHED_SHADERS, 0));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.ATTACHED_SHADERS, 1));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.ATTACHED_SHADERS, 2));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaders = gl.getAttachedShaders(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.ACTIVE_UNIFORMS, 3));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var indices = gl.getUniformIndices(program, uniformNames);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var uniform = gl.getActiveUniform(program, index);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['float', '', 'highp', '', 'uniformValue', gl.FLOAT, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['float[2]', '', 'highp', '', 'uniformValue[1]', gl.FLOAT, 2, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['vec2', '', 'highp', '', 'uniformValue.x', gl.FLOAT_VEC2, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['vec3', '', 'highp', '', 'uniformValue.x', gl.FLOAT_VEC3, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['vec4', '', 'highp', '', 'uniformValue.x', gl.FLOAT_VEC4, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['int', '', 'highp', '', 'float(uniformValue)', gl.INT, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['ivec2', '', 'highp', '', 'float(uniformValue.x)', gl.INT_VEC2, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['ivec3', '', 'highp', '', 'float(uniformValue.x)', gl.INT_VEC3, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['ivec4', '', 'highp', '', 'float(uniformValue.x)', gl.INT_VEC4, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['uint', '', 'highp', '', 'float(uniformValue)', gl.UNSIGNED_INT, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['uvec2', '', 'highp', '', 'float(uniformValue.x)', gl.UNSIGNED_INT_VEC2, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['uvec3', '', 'highp', '', 'float(uniformValue.x)', gl.UNSIGNED_INT_VEC3, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['uvec4', '', 'highp', '', 'float(uniformValue.x)', gl.UNSIGNED_INT_VEC4, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['bool', '', '', '', 'float(uniformValue)', gl.BOOL, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['bvec2', '', '', '', 'float(uniformValue.x)', gl.BOOL_VEC2, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['bvec3', '', '', '', 'float(uniformValue.x)', gl.BOOL_VEC3, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['bvec4', '', '', '', 'float(uniformValue.x)', gl.BOOL_VEC4, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat2', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT2, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat3', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT3, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat4', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT4, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat2x3', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT2x3, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat2x4', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT2x4, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat3x2', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT3x2, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat3x4', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT3x4, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat4x2', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT4x2, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['mat4x3', '', 'highp', '', 'float(uniformValue[0][0])', gl.FLOAT_MAT4x3, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['sampler2D', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.SAMPLER_2D, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['sampler3D', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.SAMPLER_3D, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['samplerCube', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.SAMPLER_CUBE, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['sampler2DShadow', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.SAMPLER_2D_SHADOW, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['sampler2DArray', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.SAMPLER_2D_ARRAY, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['sampler2DArrayShadow', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.SAMPLER_2D_ARRAY_SHADOW, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['samplerCubeShadow', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.SAMPLER_CUBE_SHADOW, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['isampler2D', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.INT_SAMPLER_2D, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['isampler3D', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.INT_SAMPLER_3D, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['isamplerCube', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.INT_SAMPLER_CUBE, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['isampler2DArray', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.INT_SAMPLER_2D_ARRAY, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['usampler2D', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.UNSIGNED_INT_SAMPLER_2D, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['usampler3D', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.UNSIGNED_INT_SAMPLER_3D, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['usamplerCube', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.UNSIGNED_INT_SAMPLER_CUBE, 1, false],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        ['usampler2DArray', '', 'highp', '', 'float(textureSize(uniformValue,0).r)', gl.UNSIGNED_INT_SAMPLER_2D_ARRAY, 1, false]
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, vertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.shaderSource(shaderFrag, frag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        if (this.check(glsStateQuery.verifyProgram(program, gl.LINK_STATUS, true), 'Program link fail' + gl.getProgramInfoLog(program))) {
deqp/functional/gles3/es3fShaderStateQueryTests.js:            var indices = gl.getUniformIndices(program, ['uniformValue']);
deqp/functional/gles3/es3fShaderStateQueryTests.js:            var info_type = gl.getActiveUniforms(program, indices, gl.UNIFORM_TYPE)[0];
deqp/functional/gles3/es3fShaderStateQueryTests.js:            var info_size = gl.getActiveUniforms(program, indices, gl.UNIFORM_SIZE)[0];
deqp/functional/gles3/es3fShaderStateQueryTests.js:            var info_is_row_major = gl.getActiveUniforms(program, indices, gl.UNIFORM_IS_ROW_MAJOR)[0];
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderVert, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderFrag, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.LINK_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.ACTIVE_UNIFORM_BLOCKS, 2));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var longlongUniformBlockIndex = gl.getUniformBlockIndex(program, 'longlongUniformBlockName');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shortUniformBlockIndex = gl.getUniformBlockIndex(program, 'shortUniformBlockName');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var uniformIndices = gl.getUniformIndices(program, uniformNames);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var uniformsBlockIndices = gl.getActiveUniforms(program, uniformIndices, gl.UNIFORM_BLOCK_INDEX);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyActiveUniformBlock(program, longlongUniformBlockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyActiveUniformBlock(program, longlongUniformBlockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyActiveUniformBlock(program, shortUniformBlockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyActiveUniformBlock(program, shortUniformBlockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyActiveUniformBlock(program, longlongUniformBlockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS, 1));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyActiveUniformBlock(program, shortUniformBlockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS, 2));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shortUniformBlockIndices = gl.getActiveUniformBlockParameter(program, shortUniformBlockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var name = gl.getActiveUniformBlockName(program, longlongUniformBlockIndex);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    name = gl.getActiveUniformBlockName(program, shortUniformBlockIndex)
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderProg = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(shaderProg, gl.TRANSFORM_FEEDBACK_BUFFER_MODE, gl.INTERLEAVED_ATTRIBS));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, transformFeedbackTestVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, transformFeedbackTestFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderVert, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyShader(shaderFrag, gl.COMPILE_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(shaderProg, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(shaderProg, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var bufferModes = [gl.SEPARATE_ATTRIBS, gl.INTERLEAVED_ATTRIBS];
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.transformFeedbackVaryings(shaderProg, transform_feedback_outputs, bufferModes[ndx]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.linkProgram(shaderProg);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyProgram(shaderProg, gl.LINK_STATUS, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyProgram(shaderProg, gl.TRANSFORM_FEEDBACK_BUFFER_MODE, bufferModes[ndx]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var varyings = /** @type {number} */ (gl.getProgramParameter(shaderProg, gl.TRANSFORM_FEEDBACK_VARYINGS));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var info = gl.getTransformFeedbackVarying(shaderProg, index);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.compare(info.type, gl.FLOAT_VEC4));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(shaderProg);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    while (gl.getError() != gl.NO_ERROR) {}
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyProgram(program, gl.ACTIVE_ATTRIBUTES, 2));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var info = gl.getActiveAttrib(program, attributeNdx);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [3, gl.FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [2, gl.FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [3, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [2, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, false, 0]
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buf = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribPointer(0, pointers[ndx][0], pointers[ndx][1], pointers[ndx][3], pointers[ndx][2], pointers[ndx][4]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_SIZE, pointers[ndx][0]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_SIZE, 4));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, pointers[0][0], pointers[0][1], pointers[0][3], pointers[0][2], 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, pointers[1][0], pointers[1][1], pointers[1][3], pointers[1][2], 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_SIZE, pointers[1][0]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_SIZE, pointers[0][0]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.HALF_FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.INT_2_10_10_10_REV, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.UNSIGNED_INT_2_10_10_10_REV, 0, false, 0]
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buf = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribPointer(0, pointers[ndx][0], pointers[ndx][1], pointers[ndx][3], pointers[ndx][2], pointers[ndx][4]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_TYPE, pointers[ndx][1]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_INT, 0, false, 0]
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribIPointer(0, pointersI[ndx][0], pointersI[ndx][1], pointersI[ndx][2], pointersI[ndx][4]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_TYPE, pointersI[ndx][1]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_TYPE, gl.FLOAT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 1, gl.SHORT, false, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_TYPE, gl.SHORT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_TYPE, gl.FLOAT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 1, 0, gl.INVALID_OPERATION],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 4, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.HALF_FLOAT, 0, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.HALF_FLOAT, 1, 0, gl.INVALID_OPERATION],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.HALF_FLOAT, 4, 0, gl.NO_ERROR]
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buf = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribPointer(0, pointers[ndx][0], pointers[ndx][1], false, pointers[ndx][2], pointers[ndx][3]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        if (pointers[ndx][4] == gl.NO_ERROR) {
deqp/functional/gles3/es3fShaderStateQueryTests.js:            this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_STRIDE, pointers[ndx][2]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 1, 0, gl.INVALID_OPERATION],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 4, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.UNSIGNED_BYTE, 0, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.UNSIGNED_BYTE, 1, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.UNSIGNED_BYTE, 4, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [2, gl.SHORT, 0, 0, gl.NO_ERROR],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [2, gl.SHORT, 1, 0, gl.INVALID_OPERATION],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [2, gl.SHORT, 4, 0, gl.NO_ERROR]
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribIPointer(0, pointersI[ndx][0], pointersI[ndx][1], pointersI[ndx][2], pointersI[ndx][3]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        if (pointersI[ndx][4] == gl.NO_ERROR) {
deqp/functional/gles3/es3fShaderStateQueryTests.js:            this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_STRIDE, pointersI[ndx][2]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_STRIDE, 0));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 4, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 1, gl.SHORT, false, 8, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_STRIDE, 8));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_STRIDE, 4));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.HALF_FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.INT_2_10_10_10_REV, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.UNSIGNED_INT_2_10_10_10_REV, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.BYTE, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.SHORT, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.HALF_FLOAT, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_BYTE, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_SHORT, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_INT, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.INT_2_10_10_10_REV, 0, true, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.UNSIGNED_INT_2_10_10_10_REV, 0, true, 0]
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buf = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribPointer(0, pointers[ndx][0], pointers[ndx][1], pointers[ndx][3], pointers[ndx][2], pointers[ndx][4]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED, pointers[ndx][3]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_INT, 0, false, 0]
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribIPointer(0, pointersI[ndx][0], pointersI[ndx][1], pointersI[ndx][2], pointersI[ndx][4]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 1, gl.INT, true, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 1, gl.INT, false, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.HALF_FLOAT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.INT_2_10_10_10_REV, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.UNSIGNED_INT_2_10_10_10_REV, 0, false, 0]
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buf = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribPointer(0, pointers[ndx][0], pointers[ndx][1], pointers[ndx][3], pointers[ndx][2], pointers[ndx][4]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_INTEGER, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_BYTE, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_SHORT, 0, false, 0],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.UNSIGNED_INT, 0, false, 0]
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribIPointer(0, pointersI[ndx][0], pointersI[ndx][1], pointersI[ndx][2], pointersI[ndx][4]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_INTEGER, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_INTEGER, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribIPointer(0, 1, gl.INT, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_INTEGER, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_INTEGER, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.enableVertexAttribArray(0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.disableVertexAttribArray(0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.enableVertexAttribArray(0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.disableVertexAttribArray(0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED, false));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED, true));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_DIVISOR, 0));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribDivisor(0, 1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_DIVISOR, 1));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribDivisor(0, 5);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_DIVISOR, 5));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribDivisor(0, 1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribDivisor(0, 5);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_DIVISOR, 5));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_DIVISOR, 1));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buffer = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, buffer));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buffer);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buffer0 = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buffer1 = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buffer1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, buffer1));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, buffer0));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buffer0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buffer1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.BYTE, 0, false, 2 * 4],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.SHORT, 0, false, 1 * 4],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.INT, 0, false, 2 * 4],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, false, 0 * 4],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, false, 3 * 4],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.FLOAT, 0, false, 2 * 4],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [1, gl.HALF_FLOAT, 0, false, 0 * 4],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.HALF_FLOAT, 0, false, 1 * 4],
deqp/functional/gles3/es3fShaderStateQueryTests.js:        [4, gl.HALF_FLOAT, 0, false, 2 * 4]
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var buf = gl.createBuffer();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindBuffer(gl.ARRAY_BUFFER, buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.vertexAttribPointer(0, pointers[ndx][0], pointers[ndx][1], pointers[ndx][3], pointers[ndx][2], pointers[ndx][4]);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_POINTER, pointers[ndx][4]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao0 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var vao1 = gl.createVertexArray();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_POINTER, 0));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 8);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 4);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_POINTER, 4));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.bindVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_POINTER, 8));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteVertexArray(vao1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteBuffer(buf);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'floatUniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform1f(location, 1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'float2Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform2f(location, 1, 2);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'float3Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform3f(location, 1, 2, 3);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'float4Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform4f(location, 1, 2, 3, 4);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'intUniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform1i(location, 1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'int2Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform2i(location, 1, 2);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'int3Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform3i(location, 1, 2, 3);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'int4Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform4i(location, 1, 2, 3, 4);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'uintUniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform1ui(location, 1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'uint2Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform2ui(location, 1, 2);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'uint3Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform3ui(location, 1, 2, 3);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'uint4Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform4ui(location, 1, 2, 3, 4);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'boolUniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform1i(location, 1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'bool2Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform2i(location, 1, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'bool3Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform3i(location, 1, 0, 1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'bool4Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform4i(location, 1, 0, 1, 0);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.useProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        location = gl.getUniformLocation(program, 'uniformSampler');
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.uniform1i(location, 1);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.useProgram(null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:        gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'arrayUniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform1fv(location, new Float32Array(uniformValue.slice(0, 5)));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'arrayUniform[0]'), uniformValue[0]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'arrayUniform[1]'), uniformValue[1]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'arrayUniform[2]'), uniformValue[2]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'arrayUniform[3]'), uniformValue[3]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'arrayUniform[4]'), uniformValue[4]));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'array2Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform2fv(location, new Float32Array(uniformValue.slice(0, 10)));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array2Uniform[0]'), new Float32Array([uniformValue[2 * 0], uniformValue[(2 * 0) + 1]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array2Uniform[1]'), new Float32Array([uniformValue[2 * 1], uniformValue[(2 * 1) + 1]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array2Uniform[2]'), new Float32Array([uniformValue[2 * 2], uniformValue[(2 * 2) + 1]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array2Uniform[3]'), new Float32Array([uniformValue[2 * 3], uniformValue[(2 * 3) + 1]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array2Uniform[4]'), new Float32Array([uniformValue[2 * 4], uniformValue[(2 * 4) + 1]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'array3Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform3fv(location, new Float32Array(uniformValue.slice(0, 15)));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array3Uniform[0]'), new Float32Array([uniformValue[3 * 0], uniformValue[(3 * 0) + 1], uniformValue[(3 * 0) + 2]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array3Uniform[1]'), new Float32Array([uniformValue[3 * 1], uniformValue[(3 * 1) + 1], uniformValue[(3 * 1) + 2]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array3Uniform[2]'), new Float32Array([uniformValue[3 * 2], uniformValue[(3 * 2) + 1], uniformValue[(3 * 2) + 2]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array3Uniform[3]'), new Float32Array([uniformValue[3 * 3], uniformValue[(3 * 3) + 1], uniformValue[(3 * 3) + 2]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array3Uniform[4]'), new Float32Array([uniformValue[3 * 4], uniformValue[(3 * 4) + 1], uniformValue[(3 * 4) + 2]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'array4Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniform4fv(location, new Float32Array(uniformValue));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array4Uniform[0]'), new Float32Array([uniformValue[4 * 0], uniformValue[(4 * 0) + 1], uniformValue[(4 * 0) + 2], uniformValue[(4 * 0) + 3]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array4Uniform[1]'), new Float32Array([uniformValue[4 * 1], uniformValue[(4 * 1) + 1], uniformValue[(4 * 1) + 2], uniformValue[(4 * 1) + 3]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array4Uniform[2]'), new Float32Array([uniformValue[4 * 2], uniformValue[(4 * 2) + 1], uniformValue[(4 * 2) + 2], uniformValue[(4 * 2) + 3]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array4Uniform[3]'), new Float32Array([uniformValue[4 * 3], uniformValue[(4 * 3) + 1], uniformValue[(4 * 3) + 2], uniformValue[(4 * 3) + 3]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.check(glsStateQuery.verifyUniform(program, gl.getUniformLocation(program, 'array4Uniform[4]'), new Float32Array([uniformValue[4 * 4], uniformValue[(4 * 4) + 1], uniformValue[(4 * 4) + 2], uniformValue[(4 * 4) + 3]])));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderVert = gl.createShader(gl.VERTEX_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var shaderFrag = gl.createShader(gl.FRAGMENT_SHADER);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderVert, testVertSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.shaderSource(shaderFrag, testFragSource);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.compileShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var program = gl.createProgram();
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.attachShader(program, shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.linkProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'mat2Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniformMatrix2fv(location, false, m2);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniformMatrix2fv(location, true, m2);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'mat3Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniformMatrix3fv(location, false, m3);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniformMatrix3fv(location, true, m3);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    location = gl.getUniformLocation(program, 'mat4Uniform');
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniformMatrix4fv(location, false, m4);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.uniformMatrix4fv(location, true, m4);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.useProgram(null);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderVert);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteShader(shaderFrag);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    gl.deleteProgram(program);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    requirements[gl.LOW_FLOAT] = [0, 0, 8];
deqp/functional/gles3/es3fShaderStateQueryTests.js:    requirements[gl.MEDIUM_FLOAT] = [13, 13, 10];
deqp/functional/gles3/es3fShaderStateQueryTests.js:    requirements[gl.HIGH_FLOAT] = [127, 127, 23];
deqp/functional/gles3/es3fShaderStateQueryTests.js:    requirements[gl.LOW_INT] = [8, 7, 0];
deqp/functional/gles3/es3fShaderStateQueryTests.js:    requirements[gl.MEDIUM_INT] = [15, 14, 0];
deqp/functional/gles3/es3fShaderStateQueryTests.js:    requirements[gl.HIGH_INT] = [31, 30, 0];
deqp/functional/gles3/es3fShaderStateQueryTests.js:    var result = gl.getShaderPrecisionFormat(this.m_shaderType, this.m_precisionType);
deqp/functional/gles3/es3fShaderStateQueryTests.js:    if (this.m_precisionType == gl.HIGH_FLOAT) {
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_vertex_lowp_float', 'GetShaderPrecisionFormat', gl.VERTEX_SHADER, gl.LOW_FLOAT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_vertex_mediump_float', 'GetShaderPrecisionFormat', gl.VERTEX_SHADER, gl.MEDIUM_FLOAT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_vertex_highp_float', 'GetShaderPrecisionFormat', gl.VERTEX_SHADER, gl.HIGH_FLOAT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_vertex_lowp_int', 'GetShaderPrecisionFormat', gl.VERTEX_SHADER, gl.LOW_INT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_vertex_mediump_int', 'GetShaderPrecisionFormat', gl.VERTEX_SHADER, gl.MEDIUM_INT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_vertex_highp_int', 'GetShaderPrecisionFormat', gl.VERTEX_SHADER, gl.HIGH_INT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_fragment_lowp_float', 'GetShaderPrecisionFormat', gl.FRAGMENT_SHADER, gl.LOW_FLOAT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_fragment_mediump_float', 'GetShaderPrecisionFormat', gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_fragment_highp_float', 'GetShaderPrecisionFormat', gl.FRAGMENT_SHADER, gl.HIGH_FLOAT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_fragment_lowp_int', 'GetShaderPrecisionFormat', gl.FRAGMENT_SHADER, gl.LOW_INT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_fragment_mediump_int', 'GetShaderPrecisionFormat', gl.FRAGMENT_SHADER, gl.MEDIUM_INT));
deqp/functional/gles3/es3fShaderStateQueryTests.js:    this.addChild(new es3fShaderStateQueryTests.PrecisionFormatCase('precision_fragment_highp_int', 'GetShaderPrecisionFormat', gl.FRAGMENT_SHADER, gl.HIGH_INT));
deqp/functional/gles3/es3fFramebufferBlitTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fFramebufferBlitTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFramebufferBlitTests.js:goog.require('framework.opengl.simplereference.sglrGLContext');
deqp/functional/gles3/es3fFramebufferBlitTests.js:goog.require('framework.opengl.simplereference.sglrReferenceContext');
deqp/functional/gles3/es3fFramebufferBlitTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFramebufferBlitTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fFramebufferBlitTests.js:    var sglrReferenceContext = framework.opengl.simplereference.sglrReferenceContext;
deqp/functional/gles3/es3fFramebufferBlitTests.js:    var sglrGLContext = framework.opengl.simplereference.sglrGLContext;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @type {number} */ var colorFormat = gl.RGBA8;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, srcRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, size[0], size[1]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, srcRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, dstRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, size[0], size[1]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, dstRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @const {number} */ var format = gl.RGBA;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @const {number} */ var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindTexture(gl.TEXTURE_2D, gridTex);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, format, texW, texH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:                           gl.COLOR_BUFFER_BIT, this.m_filter);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        es3fFramebufferBlitTests.BlitRectCase.call(this, name, desc, gl.NEAREST, srcSize, srcRect, dstSize, dstRect, 1);
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA32I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA32UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA16I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA16UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA8,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA8I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA8UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.SRGB8_ALPHA8,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGB10_A2,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGB10_A2UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA4,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGB5_A1,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGB8,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGB565,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG32I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG32UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG16I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG16UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG8,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG8I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG8UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R32I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R32UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R16I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R16UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R8,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R8I,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R8UI,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            // gl.EXT_color_buffer_float
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA32F,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RGBA16F,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R11F_G11F_B10F,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG32F,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.RG16F,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R32F,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.R16F
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.DEPTH_COMPONENT32F,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.DEPTH_COMPONENT24,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.DEPTH_COMPONENT16,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.DEPTH32F_STENCIL8,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.DEPTH24_STENCIL8,
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.STENCIL_INDEX8
deqp/functional/gles3/es3fFramebufferBlitTests.js:                rectGroup.addChild(new es3fFramebufferBlitTests.BlitRectCase((name + '_nearest'), '', gl.NEAREST, srcSize, srcRect, dstSize, dstRect));
deqp/functional/gles3/es3fFramebufferBlitTests.js:                rectGroup.addChild(new es3fFramebufferBlitTests.BlitRectCase((name + '_linear'), '', gl.LINEAR, srcSize, srcRect, dstSize, dstRect));
deqp/functional/gles3/es3fFramebufferBlitTests.js:            /** @type {number} */ var buffers = (depth ? gl.DEPTH_BUFFER_BIT : 0) | (stencil ? gl.STENCIL_BUFFER_BIT : 0);
deqp/functional/gles3/es3fFramebufferBlitTests.js:                depthStencilGroup.addChild(new es3fFramebufferBlitTests.BlitDepthStencilCase((fmtName + '_depth_only'), '', format, buffers, [128, 128], [0, 0, 128, 128], buffers, [128, 128], [0, 0, 128, 128], gl.DEPTH_BUFFER_BIT));
deqp/functional/gles3/es3fFramebufferBlitTests.js:                depthStencilGroup.addChild(new es3fFramebufferBlitTests.BlitDepthStencilCase((fmtName + '_stencil_only'), '', format, buffers, [128, 128], [0, 0, 128, 128], buffers, [128, 128], [0, 0, 128, 128], gl.STENCIL_BUFFER_BIT));
deqp/functional/gles3/es3fFramebufferBlitTests.js:            var filter = gluTextureUtil.isGLInternalColorFormatFilterable(format) ? gl.LINEAR : gl.NEAREST;
deqp/functional/gles3/es3fFramebufferBlitTests.js:                    defaultFbGroup[fmtNdx % numDefaultFbSubGroups].addChild(new es3fFramebufferBlitTests.DefaultFramebufferBlitCase((es3fFboTestUtil.getFormatName(format) + '_nearest_' + name + '_blit_from_default'), '', format, gl.NEAREST, es3fFramebufferBlitTests.BlitDirection.BLIT_DEFAULT_TO_TARGET, areas[areaNdx].area));
deqp/functional/gles3/es3fFramebufferBlitTests.js:                    defaultFbGroup[fmtNdx % numDefaultFbSubGroups].addChild(new es3fFramebufferBlitTests.DefaultFramebufferBlitCase((es3fFboTestUtil.getFormatName(format) + '_nearest_' + name + '_blit_to_default'), '', format, gl.NEAREST, es3fFramebufferBlitTests.BlitDirection.BLIT_TO_DEFAULT_FROM_TARGET, areas[areaNdx].area));
deqp/functional/gles3/es3fFramebufferBlitTests.js:                    defaultFbGroup[fmtNdx % numDefaultFbSubGroups].addChild(new es3fFramebufferBlitTests.DefaultFramebufferBlitCase((es3fFboTestUtil.getFormatName(format) + '_linear_' + name + '_blit_from_default'), '', format, gl.LINEAR, es3fFramebufferBlitTests.BlitDirection.BLIT_DEFAULT_TO_TARGET, areas[areaNdx].area));
deqp/functional/gles3/es3fFramebufferBlitTests.js:                    defaultFbGroup[fmtNdx % numDefaultFbSubGroups].addChild(new es3fFramebufferBlitTests.DefaultFramebufferBlitCase((es3fFboTestUtil.getFormatName(format) + '_linear_' + name + '_blit_to_default'), '', format, gl.LINEAR, es3fFramebufferBlitTests.BlitDirection.BLIT_TO_DEFAULT_FROM_TARGET, areas[areaNdx].area));
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, srcRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_srcFormat, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, srcRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, dstRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_dstFormat, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, dstRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.bindFramebuffer(gl.FRAMEBUFFER, ndx ? dstFbo : srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.blitFramebuffer(0, 0, this.m_size[0], this.m_size[1], 0, 0, this.m_size[0], this.m_size[1], gl.COLOR_BUFFER_BIT, gl.NEAREST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @const {number} */ var colorFormat = gl.RGBA8;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, srcColorRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, this.m_srcSize[0], this.m_srcSize[1]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, srcDepthStencilRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_format, this.m_srcSize[0], this.m_srcSize[1]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, srcColorRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        if (this.m_srcBuffers & gl.DEPTH_BUFFER_BIT)
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, srcDepthStencilRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        if (this.m_srcBuffers & gl.STENCIL_BUFFER_BIT)
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, srcDepthStencilRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.clearBufferfi(gl.DEPTH_STENCIL, 0, 1.0, 0);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, dstColorRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, colorFormat, this.m_dstSize[0], this.m_dstSize[1]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, dstDepthStencilRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.renderbufferStorage(gl.RENDERBUFFER, this.m_format, this.m_dstSize[0], this.m_dstSize[1]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, dstColorRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        if (this.m_dstBuffers & gl.DEPTH_BUFFER_BIT)
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, dstDepthStencilRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        if (this.m_dstBuffers & gl.STENCIL_BUFFER_BIT)
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, dstDepthStencilRbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.clearBufferfi(gl.DEPTH_STENCIL, 0, 1.0, 0);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.stencilFunc(gl.ALWAYS, 7, 0xff);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @const {number} */ var format = gl.RGBA;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @const {number} */ var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindTexture(gl.TEXTURE_2D, gridTex);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, format, texW, texH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.stencilFunc(gl.ALWAYS, 1, 0xff);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.blitFramebuffer(this.m_srcRect[0], this.m_srcRect[1], this.m_srcRect[2], this.m_srcRect[3], this.m_dstRect[0], this.m_dstRect[1], this.m_dstRect[2], this.m_dstRect[3], this.m_copyBuffers, gl.NEAREST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, dstFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.stencilOp(gl.KEEP, gl.DECR, gl.KEEP);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.stencilFunc(gl.ALWAYS, 0, 0xff);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        if (this.m_dstBuffers & gl.STENCIL_BUFFER_BIT) {
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.stencilFunc(gl.EQUAL, 6, 0xff);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindTexture(gl.TEXTURE_2D, tex);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.m_filter);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.m_filter);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, this.m_format, texW, texH, 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, null);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.blitFramebuffer(0, 0, ctx.getWidth(), ctx.getHeight(), 0, 0, texW, texH, gl.COLOR_BUFFER_BIT, this.m_filter);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.clearBufferfv(gl.COLOR, 0, [1.0, 0.0, 0.0, 1.0]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.blitFramebuffer(0, 0, texW, texH, Math.floor(ctx.getWidth() / 2), 0, ctx.getWidth(), ctx.getHeight(), gl.COLOR_BUFFER_BIT, this.m_filter);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        if (gl.drawingBufferWidth < minViewportSize ||
deqp/functional/gles3/es3fFramebufferBlitTests.js:            gl.drawingBufferHeight < minViewportSize)
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.m_viewportWidth = gl.drawingBufferWidth;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.m_viewportHeight = gl.drawingBufferHeight;
deqp/functional/gles3/es3fFramebufferBlitTests.js:                         ([gl.drawingBufferWidth, gl.drawingBufferHeight]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindTexture(gl.TEXTURE_2D, fboTex);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.m_filter);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.m_filter);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, this.m_format, fboTexW, fboTexH, 0, transferFmt.format, transferFmt.dataType, null);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, fbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fboTex, 0);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @const {number} */ var internalFormat = gl.RGBA8;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @const {number} */ var format = gl.RGBA;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @const {number} */ var dataType = gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fFramebufferBlitTests.js:        /** @type {WebGLTexture|framework.opengl.simplereference.sglrReferenceContext.TextureContainer|null} */
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindTexture(gl.TEXTURE_2D, gridTex);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.texImage2D(gl.TEXTURE_2D, 0, internalFormat, gridTexW, gridTexH, 0, format, dataType, data.getAccess().getDataPtr());
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, sourceFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.clearBufferfv(gl.COLOR, 0, [1.0, 0.0, 0.0, 1.0]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, sourceFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, targetFbo);
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.clearBufferfv(gl.COLOR, 0, [1.0, 1.0, 0.0, 1.0]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.clearBufferiv(gl.COLOR, 0, [0, 0, 0, 0]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:            ctx.clearBufferuiv(gl.COLOR, 0, [0, 0, 0, 0]);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.blitFramebuffer(this.m_srcRect[0], this.m_srcRect[1], this.m_srcRect[2], this.m_srcRect[3], this.m_dstRect[0], this.m_dstRect[1], this.m_dstRect[2], this.m_dstRect[3], gl.COLOR_BUFFER_BIT, this.m_filter);
deqp/functional/gles3/es3fFramebufferBlitTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, targetFbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fFboMultisampleTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fFboMultisampleTests.js:        if (this.m_depthStencilFormat != gl.NONE) {
deqp/functional/gles3/es3fFboMultisampleTests.js:        /** @type {tcuTexture.TextureFormat} */ var depthStencilFmt = this.m_depthStencilFormat != gl.NONE ? gluTextureUtil.mapGLInternalFormat(this.m_depthStencilFormat) : new tcuTexture.TextureFormat(null, null);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, msaaColorRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, this.m_colorFormat, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.bindRenderbuffer(gl.RENDERBUFFER, msaaDepthStencilRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.renderbufferStorageMultisample(gl.RENDERBUFFER, this.m_numSamples, this.m_depthStencilFormat, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, msaaFbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, msaaColorRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, msaaDepthStencilRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, msaaDepthStencilRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.bindRenderbuffer(gl.RENDERBUFFER, resolveColorRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.renderbufferStorageMultisample(gl.RENDERBUFFER, 0, this.m_colorFormat, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.bindRenderbuffer(gl.RENDERBUFFER, resolveDepthStencilRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.renderbufferStorageMultisample(gl.RENDERBUFFER, 0, this.m_depthStencilFormat, this.m_size[0], this.m_size[1]);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, resolveFbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, resolveColorRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, resolveDepthStencilRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, resolveDepthStencilRbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:        this.checkFramebufferStatus(gl.FRAMEBUFFER);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.bindFramebuffer(gl.FRAMEBUFFER, msaaFbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.clearBufferfi(gl.DEPTH_STENCIL, 0, 1.0, 0);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.depthFunc(gl.ALWAYS);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.stencilFunc(gl.ALWAYS, 0, 0xff);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.bindFramebuffer(gl.DRAW_FRAMEBUFFER, resolveFbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.blitFramebuffer(0, 0, this.m_size[0], this.m_size[1], 0, 0, this.m_size[0], this.m_size[1], gl.COLOR_BUFFER_BIT | (depth ? gl.DEPTH_BUFFER_BIT : 0) | (stencil ? gl.STENCIL_BUFFER_BIT : 0), gl.NEAREST);
deqp/functional/gles3/es3fFboMultisampleTests.js:        ctx.bindFramebuffer(gl.READ_FRAMEBUFFER, resolveFbo);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.enable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.depthFunc(gl.LESS);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.disable(gl.DEPTH_TEST);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.enable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
deqp/functional/gles3/es3fFboMultisampleTests.js:                ctx.stencilFunc(gl.EQUAL, s, 0xff);
deqp/functional/gles3/es3fFboMultisampleTests.js:            ctx.disable(gl.STENCIL_TEST);
deqp/functional/gles3/es3fFboMultisampleTests.js:        if (this.m_depthStencilFormat != gl.NONE)
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RGBA8,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.SRGB8_ALPHA8,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RGB10_A2,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RGBA4,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RGB5_A1,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RGB8,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RGB565,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RG8,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.R8,
deqp/functional/gles3/es3fFboMultisampleTests.js:            // gl.EXT_color_buffer_float
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RGBA32F,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RGBA16F,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.R11F_G11F_B10F,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RG32F,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.RG16F,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.R32F,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.R16F
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.DEPTH_COMPONENT32F,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.DEPTH_COMPONENT24,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.DEPTH_COMPONENT16,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.DEPTH32F_STENCIL8,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.DEPTH24_STENCIL8,
deqp/functional/gles3/es3fFboMultisampleTests.js:            gl.STENCIL_INDEX8
deqp/functional/gles3/es3fFboMultisampleTests.js:                sampleCountGroup.addChild(new es3fFboMultisampleTests.BasicFboMultisampleCase(es3fFboTestUtil.getFormatName(colorFormats[fmtNdx]), '', colorFormats[fmtNdx], gl.NONE, [119, 131], samples));
deqp/functional/gles3/es3fFboMultisampleTests.js:                sampleCountGroup.addChild(new es3fFboMultisampleTests.BasicFboMultisampleCase(es3fFboTestUtil.getFormatName(depthStencilFormats[fmtNdx]), '', gl.RGBA8, depthStencilFormats[fmtNdx], [119, 131], samples));
deqp/functional/gles3/es3fInstancedRenderingTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fInstancedRenderingTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fInstancedRenderingTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fInstancedRenderingTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fInstancedRenderingTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fInstancedRenderingTests.js:var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.getError();
deqp/functional/gles3/es3fInstancedRenderingTests.js:        var numVertexAttribArrays = /** @type{number} */ (gl.getParameter(gl.MAX_VERTEX_ATTRIBS));
deqp/functional/gles3/es3fInstancedRenderingTests.js:            gl.disableVertexAttribArray(idx);
deqp/functional/gles3/es3fInstancedRenderingTests.js:            gl.vertexAttribDivisor(idx, 0);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        /** @type {number} */ var width = Math.min(gl.drawingBufferWidth, es3fInstancedRenderingTests.MAX_RENDER_WIDTH);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        /** @type {number} */ var height = Math.min(gl.drawingBufferHeight, es3fInstancedRenderingTests.MAX_RENDER_HEIGHT);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        /** @type {number} */ var xOffsetMax = gl.drawingBufferWidth - width;
deqp/functional/gles3/es3fInstancedRenderingTests.js:        /** @type {number} */ var yOffsetMax = gl.drawingBufferHeight - height;
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.viewport(xOffset, yOffset, width, height);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.readPixels(xOffset, yOffset, resImg.m_width, resImg.m_height, resImgTransferFormat.format, resImgTransferFormat.dataType, resultImg.m_pixels);
deqp/functional/gles3/es3fInstancedRenderingTests.js:            gl.enableVertexAttribArray(curLoc);
deqp/functional/gles3/es3fInstancedRenderingTests.js:            gl.vertexAttribDivisor(curLoc, divisor);
deqp/functional/gles3/es3fInstancedRenderingTests.js:            var curLocGlBuffer = gl.createBuffer();
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, curLocGlBuffer);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bufferData(gl.ARRAY_BUFFER, bufferCurLoc, gl.STATIC_DRAW);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.vertexAttribPointer(curLoc, typeSize, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, curLocGlBuffer);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bufferData(gl.ARRAY_BUFFER, bufferCurLoc, gl.STATIC_DRAW);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.vertexAttribIPointer(curLoc, typeSize, gl.INT, 0, 0);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, curLocGlBuffer);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bufferData(gl.ARRAY_BUFFER, bufferCurLoc, gl.STATIC_DRAW);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.vertexAttribIPointer(curLoc, typeSize, gl.UNSIGNED_INT, 0, 0);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, curLocGlBuffer);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bufferData(gl.ARRAY_BUFFER, bufferCurLoc, gl.STATIC_DRAW);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.vertexAttribPointer(curLoc, numRows, gl.FLOAT, false, numCols * numRows * 4, 0);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.useProgram(program);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        /** @type {number} */ var positionLoc = gl.getAttribLocation(program, 'a_position');
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.enableVertexAttribArray(positionLoc);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        var positionBuffer = gl.createBuffer();
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.bufferData(gl.ARRAY_BUFFER, bufferGridVertexPosition, gl.STATIC_DRAW);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.vertexAttribPointer(positionLoc, 2, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                /** @type {number} */ var offsetLoc = gl.getAttribLocation(program, 'a_instanceOffset');
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.enableVertexAttribArray(offsetLoc);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.vertexAttribDivisor(offsetLoc, 1);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                var offsetLocGlBuffer = gl.createBuffer();
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bindBuffer(gl.ARRAY_BUFFER, offsetLocGlBuffer);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.bufferData(gl.ARRAY_BUFFER, bufferOffsetLoc, gl.STATIC_DRAW);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                gl.vertexAttribPointer(offsetLoc, es3fInstancedRenderingTests.OFFSET_COMPONENTS, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fInstancedRenderingTests.js:                /** @type {number} */ var rLoc = gl.getAttribLocation(program, 'a_instanceR');
deqp/functional/gles3/es3fInstancedRenderingTests.js:            /** @type {number} */ var gLoc = gl.getAttribLocation(program, 'a_instanceG');
deqp/functional/gles3/es3fInstancedRenderingTests.js:            /** @type {number} */ var bLoc = gl.getAttribLocation(program, 'a_instanceB');
deqp/functional/gles3/es3fInstancedRenderingTests.js:            gl.drawArraysInstanced(gl.TRIANGLES, 0, Math.floor(this.m_gridVertexPositions.length / numPositionComponents), this.m_numInstances);
deqp/functional/gles3/es3fInstancedRenderingTests.js:            var gridIndicesGLBuffer = gl.createBuffer();
deqp/functional/gles3/es3fInstancedRenderingTests.js:            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gridIndicesGLBuffer);
deqp/functional/gles3/es3fInstancedRenderingTests.js:            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, bufferGridIndices, gl.STATIC_DRAW);
deqp/functional/gles3/es3fInstancedRenderingTests.js:            gl.drawElementsInstanced(gl.TRIANGLES, this.m_gridIndices.length, gl.UNSIGNED_SHORT, 0, this.m_numInstances);
deqp/functional/gles3/es3fInstancedRenderingTests.js:        gl.useProgram(null);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.disable(gl.DITHER);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.clearColor(0,0,0,1);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.clearDepth(1);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.disable(gl.BLEND);
conformance/textures/misc/tex-image-with-format-and-type.html:    textureLoc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.RGBA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.RGBA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_SHORT_4_4_4_4,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.RGBA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_SHORT_5_5_5_1,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.RGB,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.RGB,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_SHORT_5_6_5,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.ALPHA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.LUMINANCE,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.LUMINANCE_ALPHA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.RGBA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.RGBA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_SHORT_4_4_4_4,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.RGBA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_SHORT_5_5_5_1,
conformance/textures/misc/tex-image-with-format-and-type.html:                    format: gl.RGB,
conformance/textures/misc/tex-image-with-format-and-type.html:                    type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                    format: gl.RGB,
conformance/textures/misc/tex-image-with-format-and-type.html:                    type: gl.UNSIGNED_SHORT_5_6_5,
conformance/textures/misc/tex-image-with-format-and-type.html:                    format: gl.ALPHA,
conformance/textures/misc/tex-image-with-format-and-type.html:                    type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                    format: gl.LUMINANCE,
conformance/textures/misc/tex-image-with-format-and-type.html:                    type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:                format: gl.LUMINANCE_ALPHA,
conformance/textures/misc/tex-image-with-format-and-type.html:                type: gl.UNSIGNED_BYTE,
conformance/textures/misc/tex-image-with-format-and-type.html:            case gl.UNSIGNED_BYTE:
conformance/textures/misc/tex-image-with-format-and-type.html:                case gl.RGBA:
conformance/textures/misc/tex-image-with-format-and-type.html:                case gl.RGB:
conformance/textures/misc/tex-image-with-format-and-type.html:                case gl.ALPHA:
conformance/textures/misc/tex-image-with-format-and-type.html:                case gl.LUMINANCE:
conformance/textures/misc/tex-image-with-format-and-type.html:                case gl.LUMINANCE_ALPHA:
conformance/textures/misc/tex-image-with-format-and-type.html:            case gl.UNSIGNED_SHORT_4_4_4_4:
conformance/textures/misc/tex-image-with-format-and-type.html:            case gl.UNSIGNED_SHORT_5_5_5_1:
conformance/textures/misc/tex-image-with-format-and-type.html:            case gl.UNSIGNED_SHORT_5_6_5:
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/tex-image-with-format-and-type.html:    var texture = gl.createTexture();
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, testCase.premultiplyAlpha);
conformance/textures/misc/tex-image-with-format-and-type.html:        gl.texImage2D(gl.TEXTURE_2D, 0, testCase.format, testCase.width, testCase.height, 0,
conformance/textures/misc/tex-image-with-format-and-type.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, testCase.format, testCase.type, data);
conformance/textures/misc/tex-image-with-format-and-type.html:            gl.texImage2D(gl.TEXTURE_2D, 0, testCase.format, testCase.format, testCase.type, data);
conformance/textures/misc/tex-image-with-format-and-type.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, testCase.width, testCase.height, testCase.format, testCase.type, data);
conformance/textures/misc/tex-image-with-format-and-type.html:            gl.texImage2D(gl.TEXTURE_2D, 0, testCase.format, testCase.width, testCase.height, 0, testCase.format, testCase.type, data);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.uniform1i(textureLoc, 0);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.deleteTexture(texture);
conformance/textures/misc/tex-image-with-format-and-type.html:    gl.readPixels(0, 0, testCase.width, testCase.height, gl.RGBA, gl.UNSIGNED_BYTE, buf);
deqp/functional/gles3/es3fShaderCommonFunctionTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderCommonFunctionTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderCommonFunctionTests.js:goog.require('framework.opengl.gluVarType');
deqp/functional/gles3/es3fShaderCommonFunctionTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fShaderCommonFunctionTests.js:    var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderCommonFunctionTests.js:    var gluVarType = framework.opengl.gluVarType;
deqp/functional/gles3/transformfeedback/random_interleaved_lines.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
js/tests/ext-color-buffer-half-float.js:    var texture = gl.createTexture();
js/tests/ext-color-buffer-half-float.js:    gl.bindTexture(gl.TEXTURE_2D, texture);
js/tests/ext-color-buffer-half-float.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/ext-color-buffer-half-float.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/ext-color-buffer-half-float.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/ext-color-buffer-half-float.js:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/ext-color-buffer-half-float.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texture parameter setup should succeed");
js/tests/ext-color-buffer-half-float.js:    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, buf);
js/tests/ext-color-buffer-half-float.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "readPixels from floating-point framebuffer should succeed");
js/tests/ext-color-buffer-half-float.js:    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, type, null);
js/tests/ext-color-buffer-half-float.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "floating-point texture allocation should succeed");
js/tests/ext-color-buffer-half-float.js:    var fbo = gl.createFramebuffer();
js/tests/ext-color-buffer-half-float.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
js/tests/ext-color-buffer-half-float.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
js/tests/ext-color-buffer-half-float.js:    gl.bindTexture(gl.TEXTURE_2D, null);
js/tests/ext-color-buffer-half-float.js:    var completeStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
js/tests/ext-color-buffer-half-float.js:        if (completeStatus == gl.FRAMEBUFFER_COMPLETE && !enabled)
js/tests/ext-color-buffer-half-float.js:    if (completeStatus != gl.FRAMEBUFFER_COMPLETE) {
js/tests/ext-color-buffer-half-float.js:        if (version == 1 && format == gl.RGB)
js/tests/ext-color-buffer-half-float.js:        gl.bindTexture(gl.TEXTURE_2D, texture);
js/tests/ext-color-buffer-half-float.js:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height * texSubImageCover, format, type, data);
js/tests/ext-color-buffer-half-float.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "texSubImage2D should succeed if EXT_color_buffer_half_float is enabled");
js/tests/ext-color-buffer-half-float.js:        gl.bindTexture(gl.TEXTURE_2D, null);
js/tests/ext-color-buffer-half-float.js:        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
js/tests/ext-color-buffer-half-float.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "rendering to floating-point texture should succeed");
js/tests/ext-color-buffer-half-float.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
js/tests/ext-color-buffer-half-float.js:    gl.bindTexture(gl.TEXTURE_2D, texture);
js/tests/ext-color-buffer-half-float.js:    gl.useProgram(testProgram);
js/tests/ext-color-buffer-half-float.js:    gl.uniform1i(gl.getUniformLocation(testProgram, "tex"), 0);
js/tests/ext-color-buffer-half-float.js:    gl.uniform4fv(gl.getUniformLocation(testProgram, "subtractor"), subtractor);
js/tests/ext-color-buffer-half-float.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "rendering from floating-point texture should succeed");
js/tests/ext-color-buffer-half-float.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
js/tests/ext-color-buffer-half-float.js:        samples = Array.prototype.slice.call(gl.getInternalformatParameter(gl.RENDERBUFFER, internalFormat, gl.SAMPLES));
js/tests/ext-color-buffer-half-float.js:        var colorbuffer = gl.createRenderbuffer();
js/tests/ext-color-buffer-half-float.js:        gl.bindRenderbuffer(gl.RENDERBUFFER, colorbuffer);
js/tests/ext-color-buffer-half-float.js:            gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);
js/tests/ext-color-buffer-half-float.js:            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples[ndx], internalFormat, width, height);
js/tests/ext-color-buffer-half-float.js:            wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "floating-point renderbuffer allocation should fail if EXT_color_buffer_half_float is not enabled or this is a 32 bit format");
js/tests/ext-color-buffer-half-float.js:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "floating-point renderbuffer allocation should succeed if EXT_color_buffer_half_float is enabled");
js/tests/ext-color-buffer-half-float.js:        var fbo = gl.createFramebuffer();
js/tests/ext-color-buffer-half-float.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
js/tests/ext-color-buffer-half-float.js:        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorbuffer);
js/tests/ext-color-buffer-half-float.js:        var completeStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
js/tests/ext-color-buffer-half-float.js:        if (completeStatus != gl.FRAMEBUFFER_COMPLETE) {
js/tests/ext-color-buffer-half-float.js:            resolveColorRbo = gl.createRenderbuffer();
js/tests/ext-color-buffer-half-float.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, resolveColorRbo);
js/tests/ext-color-buffer-half-float.js:            gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);
js/tests/ext-color-buffer-half-float.js:            resolveFbo = gl.createFramebuffer();
js/tests/ext-color-buffer-half-float.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, resolveFbo);
js/tests/ext-color-buffer-half-float.js:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, resolveColorRbo);
js/tests/ext-color-buffer-half-float.js:            completeStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
js/tests/ext-color-buffer-half-float.js:            if (completeStatus != gl.FRAMEBUFFER_COMPLETE) {
js/tests/ext-color-buffer-half-float.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
js/tests/ext-color-buffer-half-float.js:        gl.clearColor(1000.0, 1000.0, 1000.0, 1000.0);
js/tests/ext-color-buffer-half-float.js:        gl.clear(gl.COLOR_BUFFER_BIT);
js/tests/ext-color-buffer-half-float.js:            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, resolveFbo);
js/tests/ext-color-buffer-half-float.js:            gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, gl.COLOR_BUFFER_BIT, gl.NEAREST);
js/tests/ext-color-buffer-half-float.js:            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, resolveFbo);
js/tests/ext-color-buffer-half-float.js:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB16F, width, height, 0, gl.RGB, gl.FLOAT, null);
js/tests/ext-color-buffer-half-float.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "RGB16F texture allocation should succeed");
js/tests/ext-color-buffer-half-float.js:    var fbo = gl.createFramebuffer();
js/tests/ext-color-buffer-half-float.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
js/tests/ext-color-buffer-half-float.js:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
js/tests/ext-color-buffer-half-float.js:    gl.bindTexture(gl.TEXTURE_2D, null);
js/tests/ext-color-buffer-half-float.js:    var completeStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
js/tests/ext-color-buffer-half-float.js:    if (completeStatus == gl.FRAMEBUFFER_COMPLETE)
js/tests/ext-color-buffer-half-float.js:    gl.deleteTexture(texture);
js/tests/ext-color-buffer-half-float.js:    var colorbuffer = gl.createRenderbuffer();
js/tests/ext-color-buffer-half-float.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, colorbuffer);
js/tests/ext-color-buffer-half-float.js:    gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGB16F, width, height);
js/tests/ext-color-buffer-half-float.js:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "RGB16F renderbuffer allocation should fail with or without enabling EXT_color_buffer_half_float");
js/tests/ext-color-buffer-half-float.js:    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
js/tests/ext-color-buffer-half-float.js:    gl.deleteRenderbuffer(colorbuffer);
js/tests/ext-color-buffer-half-float.js:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
js/tests/ext-color-buffer-half-float.js:    gl.deleteFramebuffer(fbo);
js/tests/ext-color-buffer-half-float.js:    gl.getExtension("EXT_color_buffer_half_float").myProperty = 2;
js/tests/ext-color-buffer-half-float.js:    shouldBe('gl.getExtension("EXT_color_buffer_half_float").myProperty', '2');
js/tests/ext-color-buffer-half-float.js:    var maxSamples = gl.getParameter(gl.MAX_SAMPLES);
js/tests/ext-color-buffer-half-float.js:    var formats = new Array(gl.RGBA16F, gl.R16F, gl.RG16F);
js/tests/ext-color-buffer-half-float.js:        var samples = gl.getInternalformatParameter(gl.RENDERBUFFER, formats[fmt], gl.SAMPLES);
js/tests/ext-color-buffer-half-float.js:        var type = version > 1 ? gl.HALF_FLOAT : 0x8D61 /* HALF_FLOAT_OES */;
js/tests/ext-color-buffer-half-float.js:        var texSrc = gl.createTexture();
js/tests/ext-color-buffer-half-float.js:        gl.bindTexture(gl.TEXTURE_2D, texSrc);
js/tests/ext-color-buffer-half-float.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/ext-color-buffer-half-float.js:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/ext-color-buffer-half-float.js:        gl.texImage2D(gl.TEXTURE_2D, level, internalformat, width, height, 0, format, type, data);
js/tests/ext-color-buffer-half-float.js:        var fbo = gl.createFramebuffer();
js/tests/ext-color-buffer-half-float.js:        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
js/tests/ext-color-buffer-half-float.js:        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texSrc, level);
js/tests/ext-color-buffer-half-float.js:        var texDest = gl.createTexture();
js/tests/ext-color-buffer-half-float.js:        gl.bindTexture(gl.TEXTURE_2D, texDest);
js/tests/ext-color-buffer-half-float.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setup framebuffer with texture should succeed.");
js/tests/ext-color-buffer-half-float.js:            if (version == 1 && format == gl.RGB && gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT) {
js/tests/ext-color-buffer-half-float.js:                shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
js/tests/ext-color-buffer-half-float.js:                gl.copyTexImage2D(gl.TEXTURE_2D, level, destFormat, 0, 0, width, height, 0);
js/tests/ext-color-buffer-half-float.js:                wtu.glErrorShouldBe(gl, testcase.valid ? gl.NO_ERROR : [gl.INVALID_ENUM, gl.INVALID_OPERATION], "CopyTexImage2D");
js/tests/ext-color-buffer-half-float.js:            shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
js/tests/ext-color-buffer-half-float.js:            gl.copyTexImage2D(gl.TEXTURE_2D, level, destFormat, 0, 0, width, height, 0);
js/tests/ext-color-buffer-half-float.js:            wtu.glErrorShouldBe(gl, [gl.INVALID_ENUM, gl.INVALID_FRAMEBUFFER_OPERATION], "CopyTexImage2D should fail.");
js/tests/ext-color-buffer-half-float.js:        gl.deleteTexture(texDest);
js/tests/ext-color-buffer-half-float.js:        gl.deleteTexture(texSrc);
js/tests/ext-color-buffer-half-float.js:        gl.deleteFramebuffer(fbo);
js/tests/ext-color-buffer-half-float.js:    gl.R16F = 0x822D;
js/tests/ext-color-buffer-half-float.js:    gl.RG16F = 0x822F;
js/tests/ext-color-buffer-half-float.js:    gl.RGB16F = 0x881B;
js/tests/ext-color-buffer-half-float.js:    gl.RGBA16F = 0x881A;
js/tests/ext-color-buffer-half-float.js:    runFloatTextureRenderTargetTest(false, "gl.R16F", gl.RED, gl.FLOAT);
js/tests/ext-color-buffer-half-float.js:    runFloatTextureRenderTargetTest(false, "gl.RG16F", gl.RG, gl.FLOAT);
js/tests/ext-color-buffer-half-float.js:    runFloatTextureRenderTargetTest(false, "gl.RGBA16F", gl.RGBA, gl.FLOAT);
js/tests/ext-color-buffer-half-float.js:  runFloatRenderbufferRenderTargetTest(false, "gl.R16F");
js/tests/ext-color-buffer-half-float.js:  runFloatRenderbufferRenderTargetTest(false, "gl.RG16F");
js/tests/ext-color-buffer-half-float.js:  runFloatRenderbufferRenderTargetTest(false, "gl.RGBA16F");
js/tests/ext-color-buffer-half-float.js:  runFloatRenderbufferRenderTargetTest(false, "gl.R32F");
js/tests/ext-color-buffer-half-float.js:  runFloatRenderbufferRenderTargetTest(false, "gl.RG32F");
js/tests/ext-color-buffer-half-float.js:  runFloatRenderbufferRenderTargetTest(false, "gl.RGBA32F");
js/tests/ext-color-buffer-half-float.js:  runFloatRenderbufferRenderTargetTest(false, "gl.R11F_G11F_B10F");
js/tests/ext-color-buffer-half-float.js:    oesTextureHalfFloat = gl.getExtension("OES_texture_half_float");
js/tests/ext-color-buffer-half-float.js:    if (oesTextureHalfFloat && gl.getSupportedExtensions().includes("EXT_color_buffer_half_float")) {
js/tests/ext-color-buffer-half-float.js:        runFloatTextureRenderTargetTest(true, "gl.RGBA", gl.RGBA, oesTextureHalfFloat.HALF_FLOAT_OES, testProgram, 4, [1000, 1000, 1000, 1000], 0);
js/tests/ext-color-buffer-half-float.js:        runFloatTextureRenderTargetTest(true, "gl.RGB", gl.RGB, oesTextureHalfFloat.HALF_FLOAT_OES, testProgram, 3, [1000, 1000, 1000, 1], 0);
js/tests/ext-color-buffer-half-float.js:  if (!(ext = gl.getExtension("EXT_color_buffer_half_float"))) {
js/tests/ext-color-buffer-half-float.js:      shouldBe("ext.RGB16F_EXT", "gl.RGB16F");
js/tests/ext-color-buffer-half-float.js:      shouldBe("ext.RGBA16F_EXT", "gl.RGBA16F");
js/tests/ext-color-buffer-half-float.js:          runFloatTextureRenderTargetTest(true, "gl.R16F", gl.RED, gl.FLOAT, testProgram, 1, [1000, 1, 1, 1], 0);
js/tests/ext-color-buffer-half-float.js:          runFloatTextureRenderTargetTest(true, "gl.RG16F", gl.RG, gl.FLOAT, testProgram, 2, [1000, 1000, 1, 1], 0);
js/tests/ext-color-buffer-half-float.js:          runFloatTextureRenderTargetTest(true, "gl.RGBA16F", gl.RGBA, gl.FLOAT, testProgram, 4, [1000, 1000, 1000, 1000], 0);
js/tests/ext-color-buffer-half-float.js:          runFloatRenderbufferRenderTargetTest(true, "gl.R16F", testProgram, 1, [1000, 1, 1, 1]);
js/tests/ext-color-buffer-half-float.js:          runFloatRenderbufferRenderTargetTest(true, "gl.RG16F", testProgram, 2, [1000, 1000, 1, 1]);
js/tests/ext-color-buffer-half-float.js:          runFloatRenderbufferRenderTargetTest(true, "gl.RGBA16F", testProgram, 4, [1000, 1000, 1000, 1000]);
js/tests/ext-color-buffer-half-float.js:          runFloatTextureRenderTargetTest(true, "gl.RGBA", gl.RGBA, oesTextureHalfFloat.HALF_FLOAT_OES, testProgram, 4, [1000, 1000, 1000, 1000], 0);
js/tests/ext-color-buffer-half-float.js:          runFloatTextureRenderTargetTest(true, "gl.RGB", gl.RGB, oesTextureHalfFloat.HALF_FLOAT_OES, testProgram, 3, [1000, 1000, 1000, 1], 0);
js/tests/ext-color-buffer-half-float.js:          runFloatTextureRenderTargetTest(false, "gl.LUMINANCE_ALPHA", gl.LUMINANCE_ALPHA, oesTextureHalfFloat.HALF_FLOAT_OES, testProgram, 2, [1000, 1000, 1000, 1000], 0);
js/tests/ext-color-buffer-half-float.js:          runFloatTextureRenderTargetTest(false, "gl.LUMINANCE", gl.LUMINANCE, oesTextureHalfFloat.HALF_FLOAT_OES, testProgram, 1, [1000, 1, 1, 1], 0);
deqp/functional/gles3/transformfeedback/array_interleaved_triangles.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
js/tests/oes-texture-float-and-half-float-linear.js:        if (!gl.getExtension(extensionName))
js/tests/oes-texture-float-and-half-float-linear.js:        var magF = [gl.NEAREST, gl.LINEAR];
js/tests/oes-texture-float-and-half-float-linear.js:        var minF = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR];
js/tests/oes-texture-float-and-half-float-linear.js:        var vs = wtu.loadShader(gl, positionVertexShader, gl.VERTEX_SHADER);
js/tests/oes-texture-float-and-half-float-linear.js:        var fs_2d = wtu.loadShader(gl, tex2DFShader, gl.FRAGMENT_SHADER);
js/tests/oes-texture-float-and-half-float-linear.js:        var fs_cube = wtu.loadShader(gl, texCubeFShader, gl.FRAGMENT_SHADER);
js/tests/oes-texture-float-and-half-float-linear.js:        gl.useProgram(program);
js/tests/oes-texture-float-and-half-float-linear.js:                if (magF[kk] == gl.LINEAR || (minF[ii] != gl.NEAREST && minF[ii] != gl.NEAREST_MIPMAP_NEAREST))
js/tests/oes-texture-float-and-half-float-linear.js:                runEachTest(gl.TEXTURE_2D, magF[kk], minF[ii], linear, extensionEnabled, color);
js/tests/oes-texture-float-and-half-float-linear.js:        gl.useProgram(programCube);
js/tests/oes-texture-float-and-half-float-linear.js:                if (magF[kk] == gl.LINEAR || (minF[ii] != gl.NEAREST && minF[ii] != gl.NEAREST_MIPMAP_NEAREST))
js/tests/oes-texture-float-and-half-float-linear.js:                runEachTest(gl.TEXTURE_CUBE_MAP, magF[kk], minF[ii], linear, extensionEnabled, color);
js/tests/oes-texture-float-and-half-float-linear.js:        var format = gl.RGBA;
js/tests/oes-texture-float-and-half-float-linear.js:        var texture = gl.createTexture();
js/tests/oes-texture-float-and-half-float-linear.js:        gl.bindTexture(textureTarget, texture);
js/tests/oes-texture-float-and-half-float-linear.js:        gl.texParameteri(textureTarget, gl.TEXTURE_MAG_FILTER, magFilter);
js/tests/oes-texture-float-and-half-float-linear.js:        gl.texParameteri(textureTarget, gl.TEXTURE_MIN_FILTER, minFilter);
js/tests/oes-texture-float-and-half-float-linear.js:        gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/oes-texture-float-and-half-float-linear.js:        gl.texParameteri(textureTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/oes-texture-float-and-half-float-linear.js:        if (textureTarget == gl.TEXTURE_2D) {
js/tests/oes-texture-float-and-half-float-linear.js:            gl.texImage2D(gl.TEXTURE_2D, 0, format, format, gl[pixelType], canvas2d);
js/tests/oes-texture-float-and-half-float-linear.js:            if (minFilter != gl.NEAREST && minFilter != gl.LINEAR) {
js/tests/oes-texture-float-and-half-float-linear.js:                wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors during texture setup");
js/tests/oes-texture-float-and-half-float-linear.js:                gl.generateMipmap(gl.TEXTURE_2D);
js/tests/oes-texture-float-and-half-float-linear.js:                if (gl.getError() != gl.NO_ERROR) {
js/tests/oes-texture-float-and-half-float-linear.js:        } else if (textureTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/oes-texture-float-and-half-float-linear.js:                gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/oes-texture-float-and-half-float-linear.js:                gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/oes-texture-float-and-half-float-linear.js:                gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/oes-texture-float-and-half-float-linear.js:                gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/oes-texture-float-and-half-float-linear.js:                gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/oes-texture-float-and-half-float-linear.js:                gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/oes-texture-float-and-half-float-linear.js:                    gl.texImage2D(targets[tt], 0, format, format, gl[pixelType], canvas2d);
js/tests/oes-texture-float-and-half-float-linear.js:                if (minFilter != gl.NEAREST && minFilter != gl.LINEAR) {
js/tests/oes-texture-float-and-half-float-linear.js:                    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors during texture setup");
js/tests/oes-texture-float-and-half-float-linear.js:                    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
js/tests/oes-texture-float-and-half-float-linear.js:                    if (gl.getError() != gl.NO_ERROR) {
js/tests/oes-texture-float-and-half-float-linear.js:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, extensionTypeName + " texture with non-Linear filter should succeed with NO_ERROR no matter whether " + extensionName + " is enabled or not");
js/tests/oes-texture-float-and-half-float-linear.js:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, extensionTypeName + " texture with Linear filter should produce [0, 0, 0, 1.0] with NO_ERROR if " + extensionName + " isn't enabled");
js/tests/oes-texture-float-and-half-float-linear.js:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, extensionTypeName + " texture with Linear filter should succeed with NO_ERROR if " + extensionTypeName + " is enabled");
deqp/functional/gles3/transformfeedback/array_element_interleaved_lines.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/textures/misc/tex-image-canvas-corruption.html:var texture = gl.createTexture();
conformance/textures/misc/tex-image-canvas-corruption.html:  gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/tex-image-canvas-corruption.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);
deqp/functional/gles3/transformfeedback/random_separate_points.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.clearColor(0.0, 1.0, 0.0, 1.0);
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.clear(gl.COLOR_BUFFER_BIT);
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        var tex = gl.createTexture();
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, 2 * canvas.height,
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:                      0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, canvas.width, canvas.height);
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.deleteProgram(program);
conformance/textures/misc/copy-tex-sub-image-2d-partial-texture.html:        gl.deleteTexture(tex);
conformance/textures/misc/texture-hd-dpi.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance/textures/misc/texture-hd-dpi.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-hd-dpi.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-hd-dpi.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);
conformance/textures/misc/texture-hd-dpi.html:  gl2.clear(gl.COLOR_BUFFER_BIT);
conformance/textures/misc/texture-hd-dpi.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-hd-dpi.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-hd-dpi.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);
conformance/textures/misc/texture-hd-dpi.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors");
conformance/textures/misc/texture-formats-test.html:      var tex = gl.createTexture();
conformance/textures/misc/texture-formats-test.html:      gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-formats-test.html:      gl.texImage2D(gl.TEXTURE_2D,
conformance/textures/misc/texture-formats-test.html:                    gl.UNSIGNED_BYTE,  // type
conformance/textures/misc/texture-formats-test.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-formats-test.html:      var err = gl.getError();
conformance/textures/misc/texture-formats-test.html:      if (err == gl.NO_ERROR) {
conformance/textures/misc/texture-formats-test.html:      } else if (err == gl.INVALID_ENUM || err == gl.INVALID_VALUE) {
conformance/textures/misc/texture-formats-test.html:    testValidFormat(gl[formatName], "gl." + formatName);
conformance/textures/misc/texture-formats-test.html:  debug("checking non 0 border parameter to gl.TexImage2D");
conformance/textures/misc/texture-formats-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/textures/misc/texture-formats-test.html:            "non 0 border to gl.TexImage2D should return INVALID_VALUE");
conformance/textures/misc/texture-formats-test.html:    var tex = gl.createTexture();
conformance/textures/misc/texture-formats-test.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-formats-test.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-formats-test.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-formats-test.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/texture-formats-test.html:    var loc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/texture-formats-test.html:    gl.uniform1i(loc, 0);
conformance/textures/misc/texture-formats-test.html:      debug("checking gl.texImage2D with " + desc);
conformance/textures/misc/texture-formats-test.html:      gl.texImage2D(gl.TEXTURE_2D,
conformance/textures/misc/texture-formats-test.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-formats-test.html:                "gl.texImage2D with " + desc + " should generate NO_ERROR");
conformance/textures/misc/texture-formats-test.html:       0, 255, 0, 255, gl.UNSIGNED_BYTE, gl.RGBA,
conformance/textures/misc/texture-formats-test.html:       0, 0, 255, 255, gl.UNSIGNED_SHORT_4_4_4_4, gl.RGBA,
conformance/textures/misc/texture-formats-test.html:       0, 255, 0, 255, gl.UNSIGNED_SHORT_5_6_5, gl.RGB,
conformance/textures/misc/texture-formats-test.html:       0, 0, 255, 255, gl.UNSIGNED_SHORT_5_5_5_1, gl.RGBA,
conformance/textures/misc/texture-formats-test.html:       255, 255, 255, 255, gl.UNSIGNED_BYTE, gl.LUMINANCE,
conformance/textures/misc/texture-formats-test.html:       0, 0, 0, 128, gl.UNSIGNED_BYTE, gl.ALPHA,
conformance/textures/misc/texture-formats-test.html:       128, 128, 128, 192, gl.UNSIGNED_BYTE, gl.LUMINANCE_ALPHA,
conformance/textures/misc/texture-formats-test.html:  gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
deqp/functional/gles3/es3fStringQueryTests.js:            var string = /** @type {string} */ (gl.getParameter(gl.RENDERER));
deqp/functional/gles3/es3fStringQueryTests.js:            var string = /** @type {string} */ (gl.getParameter(gl.VENDOR));
deqp/functional/gles3/es3fStringQueryTests.js:            var string = /** @type {string} */ (gl.getParameter(gl.VERSION));
deqp/functional/gles3/es3fStringQueryTests.js:            var string = /** @type {string} */ (gl.getParameter(gl.SHADING_LANGUAGE_VERSION));
deqp/functional/gles3/es3fStringQueryTests.js:            /** @type {Array<string>} */ var extensions = gl.getSupportedExtensions();
deqp/functional/gles3/es3fStringQueryTests.js:            // [dag] check that all extensions from gl.getSupportedExtensions() are found using gl.getExtension()
deqp/functional/gles3/es3fStringQueryTests.js:                /** @type {Object} */ var extension = gl.getExtension(extensions[i]);
deqp/functional/gles3/es3fStringQueryTests.js:            // [dag] check that gl.getExtension() returns null for items not in gl.getSupportedExtensions()
deqp/functional/gles3/es3fStringQueryTests.js:            this.check(gl.getExtension('Random_String') === null, 'Extension query methods are not consistent.');
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-image-bitmap.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-image-bitmap.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-image-bitmap-from-image-bitmap.js:        gl.disable(gl.BLEND);
js/glsl-conformance-test.js:    vShader = wtu.loadShader(gl, vSource, gl.VERTEX_SHADER);
js/glsl-conformance-test.js:  var debugShaders = gl.getExtension('WEBGL_debug_shaders');
js/glsl-conformance-test.js:    fShader = wtu.loadShader(gl, fSource, gl.FRAGMENT_SHADER);
js/glsl-conformance-test.js:    var program = gl.createProgram();
js/glsl-conformance-test.js:    gl.attachShader(program, vShader);
js/glsl-conformance-test.js:    gl.attachShader(program, fShader);
js/glsl-conformance-test.js:      gl.bindAttribLocation(program, 0, "vPosition");
js/glsl-conformance-test.js:      gl.bindAttribLocation(program, 1, "texCoord0");
js/glsl-conformance-test.js:    gl.linkProgram(program);
js/glsl-conformance-test.js:    var linked = (gl.getProgramParameter(program, gl.LINK_STATUS) != 0);
js/glsl-conformance-test.js:      var error = gl.getProgramInfoLog(program);
js/glsl-conformance-test.js:  gl.useProgram(program);
js/glsl-conformance-test.js:      var uniformLocation = gl.getUniformLocation(program, info.uniforms[i].name);
js/glsl-conformance-test.js:  wtu.insertImage(div, "result", wtu.makeImageFromCanvas(gl.canvas));
conformance/textures/misc/origin-clean-conformance.html:var defaultImgUrl = "https://get.webgl.org/conformance-resources/opengl_logo.jpg";
conformance/textures/misc/origin-clean-conformance.html:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, src);
conformance/textures/misc/origin-clean-conformance.html:      gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, src);
conformance/textures/misc/origin-clean-conformance.html:      gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/textures/misc/origin-clean-conformance.html:  var tex = gl.createTexture();
conformance/textures/misc/origin-clean-conformance.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/origin-clean-conformance.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.disable(gl.BLEND);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:              ', bindingTarget=' + (bindingTarget == gl.TEXTURE_3D ? 'TEXTURE_3D' : 'TEXTURE_2D_ARRAY') +
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, sourceSubRectangle[0]);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, sourceSubRectangle[1]);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat], uploadWidth, uploadHeight, depth, 0,
js/tests/tex-image-and-sub-image-3d-with-image-data.js:            gl.texSubImage3D(bindingTarget, 0, 0, 0, 0, uploadWidth, uploadHeight, depth,
js/tests/tex-image-and-sub-image-3d-with-image-data.js:            gl.texImage3D(bindingTarget, 0, gl[internalFormat], uploadWidth, uploadHeight, depth, 0,
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors from texture upload");
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        var rCoordLocation = gl.getUniformLocation(program, 'uRCoord');
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        gl.uniform1f(rCoordLocation, rTexCoord);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        var width = gl.canvas.width;
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        var height = gl.canvas.height;
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        var texelH = Math.floor(gl.canvas.height / expectedH);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        var texelW = Math.floor(gl.canvas.width / expectedW);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        runTestOnBindingTarget(gl.TEXTURE_3D, program);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        runTestOnBindingTarget(gl.TEXTURE_2D_ARRAY, program);
js/tests/tex-image-and-sub-image-3d-with-image-data.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
js/tests/tex-image-and-sub-image-3d-with-image-data.js:          case gl.RED:
js/tests/tex-image-and-sub-image-3d-with-image-data.js:          case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-image-data.js:          case gl.RG:
js/tests/tex-image-and-sub-image-3d-with-image-data.js:          case gl.RG_INTEGER:
js/tests/tex-image-and-sub-image-3d-with-image-data.js:                                img.src = gl.canvas.toDataURL("image/png");
conformance/textures/misc/default-texture.html:gl.drawArrays(gl.TRIANGLES, 0, 6);
js/tests/tex-image-and-sub-image-2d-with-image.js:        case gl.RED:
js/tests/tex-image-and-sub-image-2d-with-image.js:        case gl.RED_INTEGER:
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.clearColor(0,0,0,1);
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.clearDepth(1);
js/tests/tex-image-and-sub-image-2d-with-image.js:              (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP') +
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.colorMask(1, 1, 1, 0);
js/tests/tex-image-and-sub-image-2d-with-image.js:        var texture = gl.createTexture();
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.bindTexture(bindingTarget, texture);
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
js/tests/tex-image-and-sub-image-2d-with-image.js:        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
js/tests/tex-image-and-sub-image-2d-with-image.js:        wtu.failIfGLError(gl, 'gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);');
js/tests/tex-image-and-sub-image-2d-with-image.js:        var targets = [gl.TEXTURE_2D];
js/tests/tex-image-and-sub-image-2d-with-image.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-image.js:            targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
js/tests/tex-image-and-sub-image-2d-with-image.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
js/tests/tex-image-and-sub-image-2d-with-image.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-image.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
js/tests/tex-image-and-sub-image-2d-with-image.js:                       gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
js/tests/tex-image-and-sub-image-2d-with-image.js:                       gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
js/tests/tex-image-and-sub-image-2d-with-image.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, sourceSubRectangle[0]);
js/tests/tex-image-and-sub-image-2d-with-image.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, sourceSubRectangle[1]);
js/tests/tex-image-and-sub-image-2d-with-image.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-image.js:                    gl.texSubImage2D(targets[tt], 0, 0, 0,
js/tests/tex-image-and-sub-image-2d-with-image.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat],
js/tests/tex-image-and-sub-image-2d-with-image.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat], image.width, image.height, 0,
js/tests/tex-image-and-sub-image-2d-with-image.js:                    gl.texSubImage2D(targets[tt], 0, 0, 0, gl[pixelFormat], gl[pixelType], image);
js/tests/tex-image-and-sub-image-2d-with-image.js:                    gl.texImage2D(targets[tt], 0, gl[internalFormat], gl[pixelFormat], gl[pixelType], image);
js/tests/tex-image-and-sub-image-2d-with-image.js:            gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, 0);
js/tests/tex-image-and-sub-image-2d-with-image.js:            gl.pixelStorei(gl.UNPACK_SKIP_ROWS, 0);
js/tests/tex-image-and-sub-image-2d-with-image.js:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-image.js:            loc = gl.getUniformLocation(program, "face");
js/tests/tex-image-and-sub-image-2d-with-image.js:            if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
js/tests/tex-image-and-sub-image-2d-with-image.js:                gl.uniform1i(loc, targets[tt]);
js/tests/tex-image-and-sub-image-2d-with-image.js:            wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
js/tests/tex-image-and-sub-image-2d-with-image.js:                            gl.TEXTURE_2D, program);
js/tests/tex-image-and-sub-image-2d-with-image.js:                                gl.TEXTURE_CUBE_MAP, program);
js/tests/tex-image-and-sub-image-2d-with-image.js:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/functional/gles3/transformfeedback/basic_types_separate_points.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/textures/misc/tex-image-with-invalid-data.html:    tex = gl.createTexture();
conformance/textures/misc/tex-image-with-invalid-data.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/tex-image-with-invalid-data.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 64, 64, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/tex-image-with-invalid-data.html:    gl.deleteTexture(tex);
conformance/textures/misc/tex-image-with-invalid-data.html:    if (expected == gl.INVALID_OPERATION) {
conformance/textures/misc/tex-image-with-invalid-data.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 64, 64, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/tex-image-with-invalid-data.html:     gl.INVALID_OPERATION);
conformance/textures/misc/tex-image-with-invalid-data.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, buffer);
conformance/textures/misc/tex-image-with-invalid-data.html:     gl.INVALID_OPERATION);
conformance/textures/misc/tex-image-with-invalid-data.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 64, 64, 0, gl.RGBA, gl.UNSIGNED_BYTE, tooSmall);
conformance/textures/misc/tex-image-with-invalid-data.html:     gl.INVALID_OPERATION);
conformance/textures/misc/tex-image-with-invalid-data.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 64, 64, 0, gl.RGBA, gl.UNSIGNED_BYTE, 42);
conformance/textures/misc/tex-image-with-invalid-data.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 64, 64, 0, gl.RGBA, gl.UNSIGNED_BYTE, 42);
conformance/textures/misc/tex-image-with-invalid-data.html:         gl.INVALID_OPERATION);
conformance/textures/misc/tex-image-with-invalid-data.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 64, 64, 0, gl.RGBA, gl.UNSIGNED_BYTE, "not a buffer");
conformance/textures/misc/tex-image-with-invalid-data.html:            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 64, 64, 0, gl.RGBA, gl.UNSIGNED_BYTE, "not a buffer");
conformance/textures/misc/tex-image-with-invalid-data.html:         gl.INVALID_OPERATION);
conformance/textures/misc/tex-image-with-invalid-data.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 64, 64, gl.RGBA, gl.UNSIGNED_BYTE, tooSmall);
conformance/textures/misc/tex-image-with-invalid-data.html:     gl.INVALID_OPERATION);
conformance/textures/misc/tex-image-with-invalid-data.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 64, 64, gl.RGBA, gl.UNSIGNED_BYTE, 42);
conformance/textures/misc/tex-image-with-invalid-data.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 64, 64, gl.RGBA, gl.UNSIGNED_BYTE, 42);
conformance/textures/misc/tex-image-with-invalid-data.html:         gl.INVALID_OPERATION);
conformance/textures/misc/tex-image-with-invalid-data.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 64, 64, gl.RGBA, gl.UNSIGNED_BYTE, "not a buffer");
conformance/textures/misc/tex-image-with-invalid-data.html:            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 64, 64, gl.RGBA, gl.UNSIGNED_BYTE, "not a buffer");
conformance/textures/misc/tex-image-with-invalid-data.html:         gl.INVALID_OPERATION);
deqp/functional/gles3/transformfeedback/array_element_separate_points.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/es3fShaderLoopTests.js:goog.require('framework.opengl.gluShaderUtil');
deqp/functional/gles3/es3fShaderLoopTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fShaderLoopTests.js:var gluShaderUtil = framework.opengl.gluShaderUtil;
deqp/functional/gles3/es3fShaderLoopTests.js:var gluShaderProgram = framework.opengl.gluShaderProgram;
conformance/textures/misc/mipmap-fbo.html:    var texture = gl.createTexture();
conformance/textures/misc/mipmap-fbo.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/mipmap-fbo.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/mipmap-fbo.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
conformance/textures/misc/mipmap-fbo.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/mipmap-fbo.html:    gl.bindTexture(gl.TEXTURE_2D, null);
conformance/textures/misc/mipmap-fbo.html:    var fbo = gl.createFramebuffer();
conformance/textures/misc/mipmap-fbo.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/textures/misc/mipmap-fbo.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/textures/misc/mipmap-fbo.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/textures/misc/mipmap-fbo.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/textures/misc/mipmap-fbo.html:    gl.viewport(0, 0, 32, 32);
conformance/textures/misc/mipmap-fbo.html:    gl.clearColor(1, 0, 1, 1);
conformance/textures/misc/mipmap-fbo.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/textures/misc/mipmap-fbo.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
conformance/textures/misc/mipmap-fbo.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/mipmap-fbo.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance/textures/misc/mipmap-fbo.html:    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
conformance/textures/misc/mipmap-fbo.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/mipmap-fbo.html:    var tex2 = gl.createTexture();
conformance/textures/misc/mipmap-fbo.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex2);
conformance/textures/misc/mipmap-fbo.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/mipmap-fbo.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
conformance/textures/misc/mipmap-fbo.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/mipmap-fbo.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/mipmap-fbo.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/mipmap-fbo.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/mipmap-fbo.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/mipmap-fbo.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/textures/misc/mipmap-fbo.html:        gl.texImage2D(cube_map_faces[i], 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/mipmap-fbo.html:    var fb2 = gl.createFramebuffer();
conformance/textures/misc/mipmap-fbo.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/textures/misc/mipmap-fbo.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, tex2, 0);
conformance/textures/misc/mipmap-fbo.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors after attaching cube map face.");
conformance/textures/misc/mipmap-fbo.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/textures/misc/mipmap-fbo.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance/textures/misc/mipmap-fbo.html:    var colorLocation = gl.getUniformLocation(colorProgram, 'u_color');
conformance/textures/misc/mipmap-fbo.html:    gl.uniform4f(colorLocation, 0.0, 1.0, 0.0, 1.0);
conformance/textures/misc/mipmap-fbo.html:    gl.viewport(0, 0, 32, 32);
conformance/textures/misc/texparameter-test.html:    gl.REPEAT,
conformance/textures/misc/texparameter-test.html:    gl.CLAMP_TO_EDGE,
conformance/textures/misc/texparameter-test.html:    gl.MIRRORED_REPEAT,
conformance/textures/misc/texparameter-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/textures/misc/texparameter-test.html:        var texture = gl.createTexture();
conformance/textures/misc/texparameter-test.html:        gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/texparameter-test.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas_texture);
conformance/textures/misc/texparameter-test.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/texparameter-test.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/texparameter-test.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, texParam[ii]);
conformance/textures/misc/texparameter-test.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, texParam[ii]);
conformance/textures/misc/texparameter-test.html:    gl.clearColor(1, 1, 1, 1);
conformance/textures/misc/texparameter-test.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/texparameter-test.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/texparameter-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texparameter-test.html:    gl.readPixels(0, 0, 12, 12, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/textures/misc/texparameter-test.html:                case gl.REPEAT:
conformance/textures/misc/texparameter-test.html:                case gl.CLAMP_TO_EDGE:
conformance/textures/misc/texparameter-test.html:                case gl.MIRRORED_REPEAT:
deqp/functional/gles3/es3fReadPixelTests.js:goog.require('framework.opengl.gluShaderProgram');
deqp/functional/gles3/es3fReadPixelTests.js:goog.require('framework.opengl.gluTextureUtil');
deqp/functional/gles3/es3fReadPixelTests.js:    var gluTextureUtil = framework.opengl.gluTextureUtil;
deqp/functional/gles3/es3fReadPixelTests.js:    var gluShaderProgram = framework.opengl.gluShaderProgram;
deqp/functional/gles3/es3fReadPixelTests.js:        /** @type {number} */ this.m_format = format !== undefined ? format : gl.RGBA;
deqp/functional/gles3/es3fReadPixelTests.js:        /** @type {number} */ this.m_type = type !== undefined ? type : gl.UNSIGNED_BYTE;
deqp/functional/gles3/es3fReadPixelTests.js:        gl.useProgram(program.getProgram());
deqp/functional/gles3/es3fReadPixelTests.js:        coordLoc = gl.getAttribLocation(program.getProgram(), 'i_coord');
deqp/functional/gles3/es3fReadPixelTests.js:        gl.enableVertexAttribArray(coordLoc);
deqp/functional/gles3/es3fReadPixelTests.js:        /** @type {WebGLBuffer} */ var coordsGLBuffer = gl.createBuffer();
deqp/functional/gles3/es3fReadPixelTests.js:        gl.bindBuffer(gl.ARRAY_BUFFER, coordsGLBuffer);
deqp/functional/gles3/es3fReadPixelTests.js:        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coords), gl.STATIC_DRAW);
deqp/functional/gles3/es3fReadPixelTests.js:        gl.vertexAttribPointer(coordLoc, 2, gl.FLOAT, false, 0, 0);
deqp/functional/gles3/es3fReadPixelTests.js:        gl.drawArrays(gl.TRIANGLES, 0, 6);
deqp/functional/gles3/es3fReadPixelTests.js:        gl.disableVertexAttribArray(coordLoc);
deqp/functional/gles3/es3fReadPixelTests.js:            this.m_format = /** @type {number} */ (gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT));
deqp/functional/gles3/es3fReadPixelTests.js:            this.m_type = /** @type {number} */ (gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE));
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.BYTE:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_BYTE:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.SHORT:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_SHORT:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.INT:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_INT:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.FLOAT:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.HALF_FLOAT:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_SHORT_5_6_5:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_SHORT_4_4_4_4:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_SHORT_5_5_5_1:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_INT_2_10_10_10_REV:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_INT_10F_11F_11F_REV:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_INT_24_8:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.FLOAT_32_UNSIGNED_INT_24_8_REV:
deqp/functional/gles3/es3fReadPixelTests.js:            case gl.UNSIGNED_INT_5_9_9_9_REV:
deqp/functional/gles3/es3fReadPixelTests.js:        if (this.m_format === gl.RGBA_INTEGER) {
deqp/functional/gles3/es3fReadPixelTests.js:            if (this.m_type === gl.UNSIGNED_INT) {
deqp/functional/gles3/es3fReadPixelTests.js:                renderbuffer = gl.createRenderbuffer();
deqp/functional/gles3/es3fReadPixelTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
deqp/functional/gles3/es3fReadPixelTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA32UI, this.m_width, this.m_height);
deqp/functional/gles3/es3fReadPixelTests.js:            } else if (this.m_type === gl.INT) {
deqp/functional/gles3/es3fReadPixelTests.js:                renderbuffer = gl.createRenderbuffer();
deqp/functional/gles3/es3fReadPixelTests.js:                gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
deqp/functional/gles3/es3fReadPixelTests.js:                gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA32I, this.m_width, this.m_height);
deqp/functional/gles3/es3fReadPixelTests.js:            gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
deqp/functional/gles3/es3fReadPixelTests.js:            framebuffer = gl.createFramebuffer();
deqp/functional/gles3/es3fReadPixelTests.js:            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
deqp/functional/gles3/es3fReadPixelTests.js:            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderbuffer);
deqp/functional/gles3/es3fReadPixelTests.js:        } else if (this.m_format === gl.RGBA || /*this.m_format === gl.BGRA ||*/ this.m_format === gl.RGB) {
deqp/functional/gles3/es3fReadPixelTests.js:        gl.viewport(0, 0, width, height);
deqp/functional/gles3/es3fReadPixelTests.js:        if (this.m_format === gl.RGBA || this.m_format === gl.RGB) {
deqp/functional/gles3/es3fReadPixelTests.js:            gl.clearColor(red, green, blue, alpha);
deqp/functional/gles3/es3fReadPixelTests.js:            gl.clearBufferfv(gl.COLOR, 0, color);
deqp/functional/gles3/es3fReadPixelTests.js:        } else if (this.m_format === gl.RGBA_INTEGER) {
deqp/functional/gles3/es3fReadPixelTests.js:            if (this.m_type === gl.INT) {
deqp/functional/gles3/es3fReadPixelTests.js:                gl.clearBufferiv(gl.COLOR, 0, color);
deqp/functional/gles3/es3fReadPixelTests.js:            } else if (this.m_type === gl.UNSIGNED_INT) {
deqp/functional/gles3/es3fReadPixelTests.js:                gl.clearBufferuiv(gl.COLOR, 0, color);
deqp/functional/gles3/es3fReadPixelTests.js:        gl.readPixels(0, 0, this.m_width, this.m_height, this.m_format, this.m_type, pixelData);
deqp/functional/gles3/es3fReadPixelTests.js:            gl.deleteFramebuffer(framebuffer);
deqp/functional/gles3/es3fReadPixelTests.js:            gl.deleteRenderbuffer(renderbuffer);
deqp/functional/gles3/es3fReadPixelTests.js:        this.m_alignment = /** @type {number} */ (gl.getParameter(gl.PACK_ALIGNMENT));
deqp/functional/gles3/es3fReadPixelTests.js:        bufferedLogToConsole('gl.PACK_ALIGNMENT: ' + this.m_alignment);
deqp/functional/gles3/es3fReadPixelTests.js:        this.m_rowLength = /** @type {number} */ (gl.getParameter(gl.PACK_ROW_LENGTH));
deqp/functional/gles3/es3fReadPixelTests.js:        bufferedLogToConsole('gl.PACK_ROW_LENGTH: ' + this.m_rowLength);
deqp/functional/gles3/es3fReadPixelTests.js:        this.m_skipRows = /** @type {number} */ (gl.getParameter(gl.PACK_SKIP_ROWS));
deqp/functional/gles3/es3fReadPixelTests.js:        bufferedLogToConsole('gl.PACK_SKIP_ROWS: ' + this.m_skipRows);
deqp/functional/gles3/es3fReadPixelTests.js:        this.m_skipPixels = /** @type {number} */ (gl.getParameter(gl.PACK_SKIP_PIXELS));
deqp/functional/gles3/es3fReadPixelTests.js:        bufferedLogToConsole('gl.PACK_SKIP_PIXELS: ' + this.m_skipPixels);
deqp/functional/gles3/es3fReadPixelTests.js:        gl.viewport(0, 0, this.m_width, this.m_height);
deqp/functional/gles3/es3fReadPixelTests.js:        var redBits = /** @type {number} */ (gl.getParameter(gl.RED_BITS));
deqp/functional/gles3/es3fReadPixelTests.js:        var blueBits = /** @type {number} */ (gl.getParameter(gl.BLUE_BITS));
deqp/functional/gles3/es3fReadPixelTests.js:        var greenBits = /** @type {number} */ (gl.getParameter(gl.GREEN_BITS));
deqp/functional/gles3/es3fReadPixelTests.js:        var alphaBits = /** @type {number} */ (gl.getParameter(gl.ALPHA_BITS));
deqp/functional/gles3/es3fReadPixelTests.js:        // \note gl.RGBA_INTEGER uses always renderbuffers that are never multisampled. Otherwise default framebuffer is used.
deqp/functional/gles3/es3fReadPixelTests.js:        if (this.m_format !== gl.RGBA_INTEGER && /** @type {number} */ (gl.getParameter(gl.SAMPLES)) > 1) {
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_1', '', false, 1, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_2', '', false, 2, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_4', '', false, 4, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_8', '', false, 8, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_1', '', false, 1, 0, 0, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_2', '', false, 2, 0, 0, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_4', '', false, 4, 0, 0, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_8', '', false, 8, 0, 0, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_1', '', false, 1, 0, 0, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_2', '', false, 2, 0, 0, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_4', '', false, 4, 0, 0, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupAlignment.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_8', '', false, 8, 0, 0, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_17', '', false, 4, 17, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_19', '', false, 4, 19, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_23', '', false, 4, 23, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_29', '', false, 4, 29, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_17', '', false, 4, 17, 0, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_19', '', false, 4, 19, 0, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_23', '', false, 4, 23, 0, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_29', '', false, 4, 29, 0, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_17', '', false, 4, 17, 0, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_19', '', false, 4, 19, 0, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_23', '', false, 4, 23, 0, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupRowLength.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_29', '', false, 4, 29, 0, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_0_3', '', false, 4, 17, 0, 3, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_3_0', '', false, 4, 17, 3, 0, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_3_3', '', false, 4, 17, 3, 3, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_ubyte_3_5', '', false, 4, 17, 3, 5, gl.RGBA, gl.UNSIGNED_BYTE));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_0_3', '', false, 4, 17, 0, 3, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_3_0', '', false, 4, 17, 3, 0, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_3_3', '', false, 4, 17, 3, 3, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_int_3_5', '', false, 4, 17, 3, 5, gl.RGBA_INTEGER, gl.INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_0_3', '', false, 4, 17, 0, 3, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_3_0', '', false, 4, 17, 3, 0, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_3_3', '', false, 4, 17, 3, 3, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
deqp/functional/gles3/es3fReadPixelTests.js:        groupSkip.addChild(new es3fReadPixelTests.ReadPixelsTest('rgba_uint_3_5', '', false, 4, 17, 3, 5, gl.RGBA_INTEGER, gl.UNSIGNED_INT));
conformance/textures/misc/tex-image-and-uniform-binding-bugs.html:shouldBeUndefined("gl.useProgram(floatProgram)");
conformance/textures/misc/tex-image-and-uniform-binding-bugs.html:var fval4Loc = gl.getUniformLocation(floatProgram, "fval4");
conformance/textures/misc/tex-image-and-uniform-binding-bugs.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/tex-image-and-uniform-binding-bugs.html:shouldBeUndefined("gl.uniform4fv(fval4Loc, new Float32Array([0.1, 0.2, 0.4, 1.0]));");
conformance/textures/misc/tex-image-and-uniform-binding-bugs.html:var texture = gl.createTexture();
conformance/textures/misc/tex-image-and-uniform-binding-bugs.html:shouldBeUndefined("gl.bindTexture(gl.TEXTURE_2D, texture)");
conformance/textures/misc/tex-image-and-uniform-binding-bugs.html:shouldBeUndefined("gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, tmpcanvas)");
conformance/textures/misc/texture-copying-feedback-loops.html:var texture = gl.createTexture();
conformance/textures/misc/texture-copying-feedback-loops.html:gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-copying-feedback-loops.html:var texture2 = gl.createTexture();
conformance/textures/misc/texture-copying-feedback-loops.html:gl.bindTexture(gl.TEXTURE_2D, texture2);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-copying-feedback-loops.html:var framebuffer = gl.createFramebuffer();
conformance/textures/misc/texture-copying-feedback-loops.html:gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
conformance/textures/misc/texture-copying-feedback-loops.html:assertMsg(gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE,
conformance/textures/misc/texture-copying-feedback-loops.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "after setup");
conformance/textures/misc/texture-copying-feedback-loops.html:gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.copyTexImage2D(gl.TEXTURE_2D, 1, gl.RGBA, 0, 0, 2, 2, 0);
conformance/textures/misc/texture-copying-feedback-loops.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-copying-feedback-loops.html:gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 2, 2, 0);
conformance/textures/misc/texture-copying-feedback-loops.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/textures/misc/texture-copying-feedback-loops.html:gl.bindTexture(gl.TEXTURE_2D, texture2);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, 2, 2, 0);
conformance/textures/misc/texture-copying-feedback-loops.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-copying-feedback-loops.html:gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.copyTexSubImage2D(gl.TEXTURE_2D, 1, 0, 0, 0, 0, 1, 1);
conformance/textures/misc/texture-copying-feedback-loops.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-copying-feedback-loops.html:gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 1, 1);
conformance/textures/misc/texture-copying-feedback-loops.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/textures/misc/texture-copying-feedback-loops.html:gl.bindTexture(gl.TEXTURE_2D, texture2);
conformance/textures/misc/texture-copying-feedback-loops.html:gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, 1, 1);
conformance/textures/misc/texture-copying-feedback-loops.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-complete.html:  gl.disable(gl.DEPTH_TEST);
conformance/textures/misc/texture-complete.html:  gl.disable(gl.BLEND);
conformance/textures/misc/texture-complete.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-complete.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-complete.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d);
conformance/textures/misc/texture-complete.html:  var loc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/texture-complete.html:  gl.uniform1i(loc, 0);
deqp/functional/gles3/transformfeedback/random_interleaved_points.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    case gl.UNSIGNED_BYTE: {
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    case gl.UNSIGNED_SHORT_4_4_4_4: {
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    case gl.UNSIGNED_SHORT_5_5_5_1: {
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    case gl.UNSIGNED_BYTE:           return 'UNSIGNED_BYTE';
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    case gl.UNSIGNED_SHORT_5_5_5_1:  return 'UNSIGNED_SHORT_5_5_5_1';
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    case gl.UNSIGNED_SHORT_4_4_4_4:  return 'UNSIGNED_SHORT_4_4_4_4';
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:          ', bindingTarget=' + (bindingTarget == gl.TEXTURE_2D ? 'TEXTURE_2D' : 'TEXTURE_CUBE_MAP'));
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.colorMask(true, true, true, true);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.clearColor(0, 0, 0, 1.0);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.colorMask(true, true, true, false);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    var texture = gl.createTexture();
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.bindTexture(bindingTarget, texture);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.texParameteri(bindingTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.texParameteri(bindingTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.texParameteri(bindingTarget, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultiplyAlpha);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    if (bindingTarget == gl.TEXTURE_CUBE_MAP)
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    if (gl.getError() != gl.NO_ERROR)
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    var targets = [gl.TEXTURE_2D];
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:        targets = [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:                   gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:                   gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:                   gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            gl.texImage2D(targets[tt], 0, gl.RGBA, texWidth, texHeight, 0,
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:                          gl.RGBA, type, null);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            if (gl.getError() != gl.NO_ERROR)
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            gl.texSubImage2D(targets[tt], 0, 0, 0, texWidth, texHeight, gl.RGBA, type, data);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            if (gl.getError() != gl.NO_ERROR)
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            gl.texImage2D(targets[tt], 0, gl.RGBA, texWidth, texHeight, 0, gl.RGBA, type, data);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            if (gl.getError() != gl.NO_ERROR)
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    var testWidth  = gl.drawingBufferWidth;
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    var testHeight = gl.drawingBufferHeight / 2;
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:        loc = gl.getUniformLocation(program, "face");
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            gl.uniform1i(loc, targets[tt]);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:        gl.texImage2D(targets[tt], 0, gl.RGBA, partWidth * 2, partHeight * 2, 0, gl.RGBA, type, data);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:        gl.texSubImage2D(targets[tt], 0, 0, 0, partWidth, partHeight, gl.RGBA, type, data);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    var halfWidth  = gl.drawingBufferWidth / 2;
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    var halfHeight = gl.drawingBufferHeight / 2;
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    var quarterHeight = gl.drawingBufferHeight / 4;
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            gl.uniform1i(loc, targets[tt]);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:        gl.texSubImage2D(targets[tt], 0, partWidth, partHeight, partWidth, partHeight, gl.RGBA, type, data);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:        if (bindingTarget == gl.TEXTURE_CUBE_MAP) {
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:            gl.uniform1i(loc, targets[tt]);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:    var types = [ gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT_5_5_5_1, gl.UNSIGNED_SHORT_4_4_4_4 ];
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:runTest(gl.TEXTURE_2D, program);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:runTest(gl.TEXTURE_CUBE_MAP, program);
conformance/textures/misc/tex-image-and-sub-image-2d-with-array-buffer-view.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
js/tests/gl-get-tex-parameter.js:  var tex = gl.createTexture();
js/tests/gl-get-tex-parameter.js:  gl.activeTexture(gl.TEXTURE0 + ii);
js/tests/gl-get-tex-parameter.js:  gl.bindTexture(gl[target], tex);
js/tests/gl-get-tex-parameter.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
js/tests/gl-get-tex-parameter.js:      gl.activeTexture(gl.TEXTURE0 + ii);
js/tests/gl-get-tex-parameter.js:  var a = 'gl.getTexParameter(gl["' + target + '"], gl["' + stateInfo.state + '"])';
js/tests/gl-get-tex-parameter.js:      gl.texParameterf(gl[target], gl[stateInfo.state], getStateInfoValue(stateInfo, 'value1', 'Set'));
js/tests/gl-get-tex-parameter.js:      gl.texParameteri(gl[target], gl[stateInfo.state], getStateInfoValue(stateInfo, 'value1', 'Set'));
js/tests/gl-get-tex-parameter.js:  var a = 'gl.getTexParameter(gl["' + target + '"], gl["' + stateInfo.state + '"])';
js/tests/gl-get-tex-parameter.js:        gl.texParameterf(gl[target], gl[stateInfo.state], getStateInfoValue(stateInfo, getItem(count), 'Set'));
js/tests/gl-get-tex-parameter.js:        gl.texParameteri(gl[target], gl[stateInfo.state], getStateInfoValue(stateInfo, getItem(count), 'Set'));
js/tests/gl-get-tex-parameter.js:    var a = 'gl.getTexParameter(gl["' + target + '"], gl["' + stateInfo.state + '"])';
js/tests/gl-get-tex-parameter.js:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
js/glsl-generator.js:      var referenceVertexShader = wtu.loadShader(gl, referenceVertexShaderSource, gl.VERTEX_SHADER, testFailed, true, 'reference');
js/glsl-generator.js:      var referenceFragmentShader = wtu.loadShader(gl, referenceFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true, 'reference');
js/glsl-generator.js:      var testVertexShader = wtu.loadShader(gl, testVertexShaderSource, gl.VERTEX_SHADER, testFailed, true, 'test');
js/glsl-generator.js:      var testFragmentShader = wtu.loadShader(gl, testFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true, 'test');
js/glsl-generator.js:    var posLoc = gl.getAttribLocation(program, "aPosition");
js/glsl-generator.js:    gl.useProgram(program);
js/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
js/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
js/glsl-generator.js:      var referenceVertexShader = wtu.loadShader(gl, referenceVertexShaderSource, gl.VERTEX_SHADER, testFailed, true, 'reference');
js/glsl-generator.js:      var referenceFragmentShader = wtu.loadShader(gl, referenceFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true, 'reference');
js/glsl-generator.js:      var testVertexShader = wtu.loadShader(gl, testVertexShaderSource, gl.VERTEX_SHADER, testFailed, true, 'test');
js/glsl-generator.js:      var testFragmentShader = wtu.loadShader(gl, testFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true, 'test');
js/glsl-generator.js:    var posLoc = gl.getAttribLocation(program, "aPosition");
js/glsl-generator.js:    gl.useProgram(program);
js/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
js/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
js/glsl-generator.js:  var referenceVertexShaderColorBuffer = gl.createBuffer();
js/glsl-generator.js:      var testVertexShader = wtu.loadShader(gl, testVertexShaderSource, gl.VERTEX_SHADER, testFailed, true);
js/glsl-generator.js:      var testFragmentShader = wtu.loadShader(gl, testFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed, true);
js/glsl-generator.js:        var referenceFragmentShader = wtu.loadShader(gl, referenceFragmentShaderSource, gl.FRAGMENT_SHADER, testFailed);
js/glsl-generator.js:        var referenceVertexShader = wtu.loadShader(gl, referenceVertexShaderSource, gl.VERTEX_SHADER, testFailed);
js/glsl-generator.js:    var posLoc = gl.getAttribLocation(program, "aPosition");
js/glsl-generator.js:    gl.useProgram(program);
js/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
js/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
js/glsl-generator.js:    gl.bindBuffer(gl.ARRAY_BUFFER, indexedQuadForReferenceVertexShader[0]);
js/glsl-generator.js:    gl.enableVertexAttribArray(0);
js/glsl-generator.js:    gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
js/glsl-generator.js:    gl.bindBuffer(gl.ARRAY_BUFFER, referenceVertexShaderColorBuffer);
js/glsl-generator.js:    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
js/glsl-generator.js:    gl.enableVertexAttribArray(1);
js/glsl-generator.js:    gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, true, 0, 0);
js/glsl-generator.js:    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexedQuadForReferenceVertexShader[1]);
js/glsl-generator.js:    gl.useProgram(referenceVertexShaderProgram);
js/glsl-generator.js:    gl.disableVertexAttribArray(0);
js/glsl-generator.js:    gl.disableVertexAttribArray(1);
js/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
js/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
js/glsl-generator.js:    gl.activeTexture(gl.TEXTURE0);
js/glsl-generator.js:    gl.bindTexture(gl.TEXTURE_2D, texture);
js/glsl-generator.js:    var texLoc = gl.getUniformLocation(program, "tex");
js/glsl-generator.js:    gl.uniform1i(texLoc, 0);
js/glsl-generator.js:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from draw");
js/glsl-generator.js:    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, img);
js/glsl-generator.js:      var texture = gl.createTexture();
js/glsl-generator.js:      gl.bindTexture(gl.TEXTURE_2D, texture);
js/glsl-generator.js:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
js/glsl-generator.js:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
js/glsl-generator.js:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
js/glsl-generator.js:      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
js/glsl-generator.js:      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0,
js/glsl-generator.js:                    gl.RGBA, gl.UNSIGNED_BYTE, data);
conformance/textures/misc/00_test_list.txt:--min-version 1.0.2 tex-image-webgl.html
conformance/textures/misc/tex-image-webgl.html:gl.disable(gl.DITHER);
conformance/textures/misc/tex-image-webgl.html:gl1.disable(gl.DITHER);
conformance/textures/misc/tex-image-webgl.html:gl1.disable(gl.BLEND);
conformance/textures/misc/tex-image-webgl.html:gl1.disable(gl.DEPTH_TEST);
conformance/textures/misc/tex-image-webgl.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/tex-image-webgl.html:gl.disable(gl.BLEND);
conformance/textures/misc/tex-image-webgl.html:gl.disable(gl.DEPTH_TEST);
conformance/textures/misc/tex-image-webgl.html:var tex = gl.createTexture();
conformance/textures/misc/tex-image-webgl.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/tex-image-webgl.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, gl1.canvas);
conformance/textures/misc/tex-image-webgl.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/tex-image-webgl.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/tex-image-webgl.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/tex-image-webgl.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/tex-image-webgl.html:gl1.bindTexture(gl.TEXTURE_2D, tex1);
conformance/textures/misc/tex-image-webgl.html:gl1.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255]));
conformance/textures/misc/tex-image-webgl.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, gl1.canvas);
conformance/textures/misc/texture-mips.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-mips.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-mips.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance/textures/misc/texture-mips.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "for generateMipmap with mip 0 is 0x0");
conformance/textures/misc/texture-mips.html:  gl.texImage2D(
conformance/textures/misc/texture-mips.html:      gl.TEXTURE_2D, 1, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-mips.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance/textures/misc/texture-mips.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "for generateMipmap with mip 0 is 0x0");
conformance/textures/misc/texture-mips.html:  tex = gl.createTexture();
conformance/textures/misc/texture-mips.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
conformance/textures/misc/texture-mips.html:  gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
conformance/textures/misc/texture-mips.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "for generateMipmap with mip 0 is 0x0");
conformance/textures/misc/texture-mips.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/texture-mips.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/texture-mips.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/texture-mips.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/texture-mips.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/texture-mips.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/textures/misc/texture-mips.html:    gl.texImage2D(
conformance/textures/misc/texture-mips.html:        faces[ii], 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-mips.html:    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
conformance/textures/misc/texture-mips.html:    wtu.glErrorShouldBe(gl, ii == 5 ? gl.NO_ERROR : gl.INVALID_OPERATION, "for generateMipmap with " + (ii + 1) + " faces");
conformance/textures/misc/texture-mips.html:  gl.disable(gl.DEPTH_TEST);
conformance/textures/misc/texture-mips.html:  gl.disable(gl.BLEND);
conformance/textures/misc/texture-mips.html:  var texLoc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/texture-mips.html:  gl.uniform1i(texLoc, 0);
conformance/textures/misc/texture-mips.html:  var multLoc = gl.getUniformLocation(program, "uMult");
conformance/textures/misc/texture-mips.html:  gl.uniform4f(multLoc, 1, 1, 1, 1);
conformance/textures/misc/texture-mips.html:  gl.bindTexture(gl.TEXTURE_2D, clearTex);
conformance/textures/misc/texture-mips.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-mips.html:  debug('gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);');
conformance/textures/misc/texture-mips.html:  gl.uniform4f(multLoc, 1, 1, 1, 1);
conformance/textures/misc/texture-mips.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-mips.html:  texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
conformance/textures/misc/texture-mips.html:  gl.uniform4f(multLoc, 16, 16, 1, 1);
conformance/textures/misc/texture-mips.html:  gl.uniform4f(multLoc, 1, 1, 1, 1);
conformance/textures/misc/texture-mips.html:  gl.uniform4f(multLoc, 1, 1, 1, 1);
conformance/textures/misc/texture-mips.html:  texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/texture-mips.html:  texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
conformance/textures/misc/texture-mips.html:  gl.uniform4f(multLoc, 16, 16, 1, 1);
conformance/textures/misc/texture-mips.html:  gl.uniform4f(multLoc, 1, 1, 1, 1);
conformance/textures/misc/texture-mips.html:  gl.uniform4f(multLoc, 1, 1, 1, 1);
conformance/textures/misc/texture-mips.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/textures/misc/texture-mips.html:    debug("<hr/>gl.createTexture()");
conformance/textures/misc/texture-mips.html:    return gl.createTexture();
conformance/textures/misc/texture-mips.html:    debug("gl.texParameteri(" +
conformance/textures/misc/texture-mips.html:    gl.texParameteri(target, pname, value);
conformance/textures/misc/texture-mips.html:    debug("gl.generateMipmap(gl.TEXTURE_2D)");
conformance/textures/misc/texture-mips.html:    gl.generateMipmap(gl.TEXTURE_2D);
conformance/textures/misc/texture-mips.html:    debug("gl.texImage2D(gl.TEXTURE_2D, " + level + ", gl.RGBA, " + size + ", " + size +
conformance/textures/misc/texture-mips.html:          ", 0, gl.RGBA, gl.UNSIGNED_BYTE, " + color + ");");
conformance/textures/misc/gl-pixelstorei.html:  description("This test checks that drawImage and readPixels are not effected by gl.Pixelstorei(gl.PACK_ALIGNMENT) and visa versa");
conformance/textures/misc/gl-pixelstorei.html:  var vertexObject = gl.createBuffer();
conformance/textures/misc/gl-pixelstorei.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/textures/misc/gl-pixelstorei.html:  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/textures/misc/gl-pixelstorei.html:  gl.enableVertexAttribArray(0);
conformance/textures/misc/gl-pixelstorei.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/textures/misc/gl-pixelstorei.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/gl-pixelstorei.html:  gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/textures/misc/gl-pixelstorei.html:    gl.pixelStorei(gl.PACK_ALIGNMENT, table[ii]);
conformance/textures/misc/gl-pixelstorei.html:    assertMsg(gl.getParameter(gl.PACK_ALIGNMENT) == table[ii],
deqp/functional/gles3/transformfeedback/array_interleaved_points.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/textures/misc/cube-incomplete-fbo.html:    var tex2 = gl.createTexture();
conformance/textures/misc/cube-incomplete-fbo.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex2);
conformance/textures/misc/cube-incomplete-fbo.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/cube-incomplete-fbo.html:    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/cube-incomplete-fbo.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/cube-incomplete-fbo.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/cube-incomplete-fbo.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/cube-incomplete-fbo.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/cube-incomplete-fbo.html:        gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/cube-incomplete-fbo.html:        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/textures/misc/cube-incomplete-fbo.html:        gl.texImage2D(cube_map_faces[i], 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/cube-incomplete-fbo.html:    var fb2 = gl.createFramebuffer();
conformance/textures/misc/cube-incomplete-fbo.html:    gl.bindFramebuffer(gl.FRAMEBUFFER, fb2);
conformance/textures/misc/cube-incomplete-fbo.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, tex2, 0);
conformance/textures/misc/cube-incomplete-fbo.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors after attaching cube map face.");
conformance/textures/misc/cube-incomplete-fbo.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
conformance/textures/misc/cube-incomplete-fbo.html:    gl.texImage2D(cube_map_faces[5], 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/cube-incomplete-fbo.html:    shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/textures/misc/texture-attachment-formats.html:    gl.texImage2D(gl.TEXTURE_2D,
conformance/textures/misc/texture-attachment-formats.html:    var fbStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance/textures/misc/texture-attachment-formats.html:    if (fbStatus != gl.FRAMEBUFFER_COMPLETE) {
conformance/textures/misc/texture-attachment-formats.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/textures/misc/texture-attachment-formats.html:  gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
conformance/textures/misc/texture-attachment-formats.html:  var fbo = gl.createFramebuffer();
conformance/textures/misc/texture-attachment-formats.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/textures/misc/texture-attachment-formats.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-attachment-formats.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-attachment-formats.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-attachment-formats.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-attachment-formats.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/texture-attachment-formats.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/texture-attachment-formats.html:  gl.framebufferTexture2D(
conformance/textures/misc/texture-attachment-formats.html:      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/textures/misc/texture-attachment-formats.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/textures/misc/texture-active-bind-2.html:  var vertexObject = gl.createBuffer();
conformance/textures/misc/texture-active-bind-2.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/textures/misc/texture-active-bind-2.html:  gl.bufferData(
conformance/textures/misc/texture-active-bind-2.html:      gl.ARRAY_BUFFER,
conformance/textures/misc/texture-active-bind-2.html:      gl.STATIC_DRAW);
conformance/textures/misc/texture-active-bind-2.html:  gl.enableVertexAttribArray(0);
conformance/textures/misc/texture-active-bind-2.html:  gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);
conformance/textures/misc/texture-active-bind-2.html:  var vertexObject = gl.createBuffer();
conformance/textures/misc/texture-active-bind-2.html:  gl.bindBuffer(gl.ARRAY_BUFFER, vertexObject);
conformance/textures/misc/texture-active-bind-2.html:  gl.bufferData(
conformance/textures/misc/texture-active-bind-2.html:      gl.ARRAY_BUFFER,
conformance/textures/misc/texture-active-bind-2.html:      gl.STATIC_DRAW);
conformance/textures/misc/texture-active-bind-2.html:  gl.enableVertexAttribArray(1);
conformance/textures/misc/texture-active-bind-2.html:  gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);
conformance/textures/misc/texture-active-bind-2.html:  gl.activeTexture(gl.TEXTURE1);
conformance/textures/misc/texture-active-bind-2.html:  var tex2d = gl.createTexture();
conformance/textures/misc/texture-active-bind-2.html:  gl.bindTexture(gl.TEXTURE_2D, tex2d);
conformance/textures/misc/texture-active-bind-2.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d);
conformance/textures/misc/texture-active-bind-2.html:  var texCube = gl.createTexture();
conformance/textures/misc/texture-active-bind-2.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCube);
conformance/textures/misc/texture-active-bind-2.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/texture-active-bind-2.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/texture-active-bind-2.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/texture-active-bind-2.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/texture-active-bind-2.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/texture-active-bind-2.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
conformance/textures/misc/texture-active-bind-2.html:    gl.texImage2D(targets[ii], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d);
conformance/textures/misc/texture-active-bind-2.html:  var tex2dLoc = gl.getUniformLocation(program2d, "tex2d");
conformance/textures/misc/texture-active-bind-2.html:  var world2dLoc = gl.getUniformLocation(program2d, "world");
conformance/textures/misc/texture-active-bind-2.html:  var texCubeLoc = gl.getUniformLocation(programCube, "texCube");
conformance/textures/misc/texture-active-bind-2.html:  var worldCubeLoc = gl.getUniformLocation(programCube, "world");
conformance/textures/misc/texture-active-bind-2.html:  gl.useProgram(program2d);
conformance/textures/misc/texture-active-bind-2.html:  gl.uniform1i(tex2dLoc, 1);
conformance/textures/misc/texture-active-bind-2.html:  gl.useProgram(programCube);
conformance/textures/misc/texture-active-bind-2.html:  gl.uniform1i(texCubeLoc, 1);
conformance/textures/misc/texture-active-bind-2.html:  gl.clearColor(1,0,0,1);
conformance/textures/misc/texture-active-bind-2.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/texture-active-bind-2.html:    gl.useProgram(programs[x]);
conformance/textures/misc/texture-active-bind-2.html:    gl.uniformMatrix4fv(
conformance/textures/misc/texture-active-bind-2.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texture-active-bind-2.html:  gl.activeTexture(gl.TEXTURE2);
conformance/textures/misc/texture-active-bind-2.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/texture-active-bind-2.html:  gl.bindTexture(gl.TEXTURE_2D, tex2d);
conformance/textures/misc/texture-active-bind-2.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCube);
conformance/textures/misc/texture-active-bind-2.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
conformance/textures/misc/texture-active-bind-2.html:  gl.useProgram(program2d);
conformance/textures/misc/texture-active-bind-2.html:  gl.uniform1i(tex2dLoc, 2);
conformance/textures/misc/texture-active-bind-2.html:  gl.uniformMatrix4fv(world2dLoc, false, worldMatrix);
conformance/textures/misc/texture-active-bind-2.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texture-active-bind-2.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/texture-active-bind-2.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCube);
conformance/textures/misc/texture-active-bind-2.html:  gl.bindTexture(gl.TEXTURE_2D, tex2d);
conformance/textures/misc/texture-active-bind-2.html:  gl.bindTexture(gl.TEXTURE_2D, null);
conformance/textures/misc/texture-active-bind-2.html:  gl.useProgram(programCube);
conformance/textures/misc/texture-active-bind-2.html:  gl.uniform1i(texCubeLoc, 2);
conformance/textures/misc/texture-active-bind-2.html:  gl.uniformMatrix4fv(worldCubeLoc, false, worldMatrix);
conformance/textures/misc/texture-active-bind-2.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texture-size.html:gl.disable(gl.DEPTH_TEST);
conformance/textures/misc/texture-size.html:gl.disable(gl.BLEND);
conformance/textures/misc/texture-size.html:var tex = gl.createTexture();
conformance/textures/misc/texture-size.html:var max2DSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
conformance/textures/misc/texture-size.html:var maxCubeMapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
conformance/textures/misc/texture-size.html:    gl.useProgram(program2D);
conformance/textures/misc/texture-size.html:      gl.useProgram(programCubeMap);
conformance/textures/misc/texture-size.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-size.html:  var target = cubeMap ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;
conformance/textures/misc/texture-size.html:  gl.bindTexture(target, tex);
conformance/textures/misc/texture-size.html:  gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/texture-size.html:  gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-size.html:  gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-size.html:  var err = gl.getError();
conformance/textures/misc/texture-size.html:  if (err == gl.OUT_OF_MEMORY) {
conformance/textures/misc/texture-size.html:  if (err != gl.NO_ERROR) {
conformance/textures/misc/texture-size.html:  gl.generateMipmap(target);
conformance/textures/misc/texture-size.html:  var err = gl.getError();
conformance/textures/misc/texture-size.html:  if (err == gl.OUT_OF_MEMORY) {
conformance/textures/misc/texture-size.html:  if (err != gl.NO_ERROR) {
conformance/textures/misc/texture-size.html:  gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
conformance/textures/misc/texture-size.html:  gl.generateMipmap(target);
conformance/textures/misc/texture-size.html:  gl.deleteTexture(tex);
conformance/textures/misc/texture-size.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/textures/misc/texture-size.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/texture-size.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/texture-size.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/texture-size.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/texture-size.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/texture-size.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z] :
conformance/textures/misc/texture-size.html:    [gl.TEXTURE_2D];
conformance/textures/misc/texture-size.html:      gl.texSubImage2D(
conformance/textures/misc/texture-size.html:          target, level, 0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-size.html:      gl.texImage2D(
conformance/textures/misc/texture-size.html:          target, level, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE,
deqp/functional/gles3/transformfeedback/position.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/textures/misc/texture-size-limit.html:  { format: gl.ALPHA,           type: gl.UNSIGNED_BYTE,          size: 1, dataType: Uint8Array  },
conformance/textures/misc/texture-size-limit.html:  { format: gl.LUMINANCE,       type: gl.UNSIGNED_BYTE,          size: 1, dataType: Uint8Array  },
conformance/textures/misc/texture-size-limit.html:  { format: gl.LUMINANCE_ALPHA, type: gl.UNSIGNED_BYTE,          size: 2, dataType: Uint8Array  },
conformance/textures/misc/texture-size-limit.html:  { format: gl.RGB,             type: gl.UNSIGNED_BYTE,          size: 3, dataType: Uint8Array  },
conformance/textures/misc/texture-size-limit.html:  { format: gl.RGB,             type: gl.UNSIGNED_SHORT_5_6_5,   size: 1, dataType: Uint16Array },
conformance/textures/misc/texture-size-limit.html:  { format: gl.RGBA,            type: gl.UNSIGNED_BYTE,          size: 4, dataType: Uint8Array  },
conformance/textures/misc/texture-size-limit.html:  { format: gl.RGBA,            type: gl.UNSIGNED_SHORT_4_4_4_4, size: 1, dataType: Uint16Array },
conformance/textures/misc/texture-size-limit.html:  { format: gl.RGBA,            type: gl.UNSIGNED_SHORT_5_5_5_1, size: 1, dataType: Uint16Array }
conformance/textures/misc/texture-size-limit.html:  { target: gl.TEXTURE_2D,
conformance/textures/misc/texture-size-limit.html:    maxSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
conformance/textures/misc/texture-size-limit.html:    targets: [gl.TEXTURE_2D]
conformance/textures/misc/texture-size-limit.html:  { target: gl.TEXTURE_CUBE_MAP,
conformance/textures/misc/texture-size-limit.html:    maxSize: gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE),
conformance/textures/misc/texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/texture-size-limit.html:      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/textures/misc/texture-size-limit.html:gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
conformance/textures/misc/texture-size-limit.html:    gl.deleteTexture(tex);
conformance/textures/misc/texture-size-limit.html:    tex = gl.createTexture();
conformance/textures/misc/texture-size-limit.html:    gl.bindTexture(t.target, tex);
conformance/textures/misc/texture-size-limit.html:      gl.texImage2D(target, i, test.format, size + 1, size + 1, 0, test.format, test.type, null);
conformance/textures/misc/texture-size-limit.html:      wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "width or height out of bounds: should generate INVALID_VALUE: level is " + i + ", size is "
conformance/textures/misc/texture-size-limit.html:    gl.texImage2D(target, numLevels, test.format, 1, 1, 0, test.format, test.type, null);
conformance/textures/misc/texture-size-limit.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "level out of bounds: should generate INVALID_VALUE: level is: "
conformance/textures/misc/texture-size-limit.html:      gl.texImage2D(target, maxLevelsForFormat-1, test.format, 1, 1, 0, test.format, test.type, null);
conformance/textures/misc/texture-size-limit.html:      var err = gl.getError();
conformance/textures/misc/texture-size-limit.html:      if (err == gl.OUT_OF_MEMORY) {
conformance/textures/misc/texture-size-limit.html:      var otherDimension = t.target == gl.TEXTURE_2D ? 1 : size;
conformance/textures/misc/texture-size-limit.html:      gl.texImage2D(target, level, test.format, size, otherDimension, 0, test.format, test.type, null);
conformance/textures/misc/texture-size-limit.html:      wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no error for level: " + level + " " + size + "x" + otherDimension);
conformance/textures/misc/texture-size-limit.html:        gl.texImage2D(target, level, test.format, otherDimension, size, 0, test.format, test.type, null);
conformance/textures/misc/texture-size-limit.html:        wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no error for level: " + level + " " + otherDimension + "x" + size);
conformance/textures/misc/texture-npot.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/texture-npot.html:  { format: gl.RGBA,
conformance/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-npot.html:  { format: gl.RGB,
conformance/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-npot.html:  { format: gl.LUMINANCE,
conformance/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-npot.html:  { format: gl.ALPHA,
conformance/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-npot.html:  { format: gl.LUMINANCE_ALPHA,
conformance/textures/misc/texture-npot.html:    type: gl.UNSIGNED_BYTE,
conformance/textures/misc/texture-npot.html:  // { format: gl.RGBA,
conformance/textures/misc/texture-npot.html:  //   type: gl.UNSIGNED_SHORT_4_4_4_4,
conformance/textures/misc/texture-npot.html:  // { format: gl.RGBA,
conformance/textures/misc/texture-npot.html:  //   type: gl.UNSIGNED_SHORT_5_5_5_1,
conformance/textures/misc/texture-npot.html:  // { format: gl.RGB,
conformance/textures/misc/texture-npot.html:  //   type: gl.UNSIGNED_SHORT_5_6_5,
conformance/textures/misc/texture-npot.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/textures/misc/texture-npot.html:      "gl.texImage2D with NPOT texture with level > 0 should return INVALID_VALUE");
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-npot.html:      "gl.texImage2D with NPOT texture at level 0 should succeed");
conformance/textures/misc/texture-npot.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/textures/misc/texture-npot.html:      "gl.generateMipmap with NPOT texture should return INVALID_OPERATION");
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/texture-npot.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 1, test.format, 0, 0, 5, 3, 0);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/textures/misc/texture-npot.html:  gl.generateMipmap(gl.TEXTURE_2D);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-npot.html:      "gl.texImage2D and gl.generateMipmap with POT texture at level 0 should succeed");
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/texture-npot.html:  var tex = gl.createTexture();
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/textures/misc/texture-npot.html:      "gl.texImage2D with NPOT texture with level > 0 should return INVALID_VALUE");
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-npot.html:      "gl.texImage2D with NPOT texture at level 0 should succeed");
conformance/textures/misc/texture-npot.html:  gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/textures/misc/texture-npot.html:      "gl.generateMipmap with NPOT texture should return INVALID_OPERATION");
conformance/textures/misc/texture-npot.html:  var loc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/texture-npot.html:  gl.uniform1i(loc, 0);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/textures/misc/texture-npot.html:    debug("Switching active texture unit to gl.TEXTURE1");
conformance/textures/misc/texture-npot.html:    gl.activeTexture(gl.TEXTURE1);
conformance/textures/misc/texture-npot.html:    var error = gl.getError();
conformance/textures/misc/texture-npot.html:    if (error === gl.NO_ERROR) {
conformance/textures/misc/texture-npot.html:    } else if (error === gl.INVALID_ENUM) {
conformance/textures/misc/texture-npot.html:    gl.activeTexture(gl.TEXTURE0);
conformance/textures/misc/texture-npot.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from draw.");
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors from setup.");
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-npot.html:      "gl.texImage2D with POT texture at level 0 should succeed");
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/textures/misc/texture-npot.html:  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/textures/misc/texture-npot.html:  gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
conformance/textures/misc/texture-npot.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/textures/misc/texture-npot.html:      "gl.generateMipmap with POT texture should return succeed");
conformance/textures/misc/texture-npot.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
conformance/textures/misc/texture-npot.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/textures/misc/texture-npot.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/textures/misc/texture-npot.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/textures/misc/texture-npot.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/textures/misc/texture-npot.html:    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/textures/misc/texture-npot.html:    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
conformance/textures/misc/texture-npot.html:    gl.texImage2D(
conformance/textures/misc/texture-npot.html:        targets[tt], opt_level, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);
conformance/programs/gl-get-active-attribute.html:{ glType: gl.FLOAT,      size: 1, type: 'float', access: ''},
conformance/programs/gl-get-active-attribute.html:{ glType: gl.FLOAT_VEC2, size: 1, type: 'vec2',  access: '[1]'},
conformance/programs/gl-get-active-attribute.html:{ glType: gl.FLOAT_VEC3, size: 1, type: 'vec3',  access: '[2]'},
conformance/programs/gl-get-active-attribute.html:{ glType: gl.FLOAT_VEC4, size: 1, type: 'vec4',  access: '[3]'},
conformance/programs/gl-get-active-attribute.html:{ glType: gl.FLOAT_MAT2, size: 1, type: 'mat2',  access: '[1][1]'},
conformance/programs/gl-get-active-attribute.html:{ glType: gl.FLOAT_MAT3, size: 1, type: 'mat3',  access: '[2][2]'},
conformance/programs/gl-get-active-attribute.html:{ glType: gl.FLOAT_MAT4, size: 1, type: 'mat4',  access: '[3][3]'},
conformance/programs/gl-get-active-attribute.html:var fs = wtu.loadShaderFromScript(gl, 'fshader', gl.FRAGMENT_SHADER);
conformance/programs/gl-get-active-attribute.html:      gl.VERTEX_SHADER);
conformance/programs/gl-get-active-attribute.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from setup");
conformance/programs/gl-get-active-attribute.html:  var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
conformance/programs/gl-get-active-attribute.html:    var info = gl.getActiveAttrib(program, ii);
deqp/functional/gles3/transformfeedback/random_interleaved_triangles.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/textures/misc/tex-sub-image-2d.html:gl.disable(gl.DITHER);
conformance/textures/misc/tex-sub-image-2d.html:var textureLoc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/tex-sub-image-2d.html:var texture = gl.createTexture();
conformance/textures/misc/tex-sub-image-2d.html:gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/tex-sub-image-2d.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/tex-sub-image-2d.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/tex-sub-image-2d.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/tex-sub-image-2d.html:gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/tex-sub-image-2d.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, textureWidth, textureHeight, 0, gl.ALPHA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/tex-sub-image-2d.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, gl.ALPHA, gl.UNSIGNED_BYTE, array);
conformance/textures/misc/tex-sub-image-2d.html:gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/tex-sub-image-2d.html:gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/tex-sub-image-2d.html:gl.useProgram(program);
conformance/textures/misc/tex-sub-image-2d.html:gl.uniform1i(textureLoc, 0);
conformance/textures/misc/tex-sub-image-2d.html:gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/tex-sub-image-2d.html:gl.readPixels(0, 0, textureWidth, textureHeight, gl.RGBA, gl.UNSIGNED_BYTE, buf);
conformance/programs/program-test.html:    gl.clearColor(0.0, 0.0, 0.0, 0.0);
conformance/programs/program-test.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/programs/program-test.html:    var vs = gl.createShader(gl.VERTEX_SHADER);
conformance/programs/program-test.html:    gl.shaderSource(vs, "attribute vec4 aVertex; attribute vec4 aColor; varying vec4 vColor; void main() { vColor = aColor; gl_Position = aVertex; }");
conformance/programs/program-test.html:    gl.compileShader(vs);
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(vs, gl.COMPILE_STATUS) == true,
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors at this point");
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(vs, desktopGL['INFO_LOG_LENGTH']) === null, "invalid call to getShaderParameter should return null");
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "INFO_LOG_LENGTH is not a valid argument to getShaderParameter in WebGL");
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(vs, desktopGL['SHADER_SOURCE_LENGTH']) === null, "invalid call to getShaderParameter should return null");
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "SHADER_SOURCE_LENGTH is not a valid argument to getShaderParameter in WebGL");
conformance/programs/program-test.html:    var vs2 = gl.createShader(gl.VERTEX_SHADER);
conformance/programs/program-test.html:    gl.shaderSource(vs2, "attribute vec4 aVertex; attribute vec4 aColor; varying vec4 vColor; void main() { vColor = aColor; gl_Position = aVertex * 0.5; }");
conformance/programs/program-test.html:    gl.compileShader(vs2);
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(vs2, gl.COMPILE_STATUS) == true,
conformance/programs/program-test.html:    var vsBad = gl.createShader(gl.VERTEX_SHADER);
conformance/programs/program-test.html:    gl.shaderSource(vsBad, "WILL NOT COMPILE;");
conformance/programs/program-test.html:    gl.compileShader(vsBad);
conformance/programs/program-test.html:    //assertMsg(gl.getShaderParameter(vsBad, gl.COMPILE_STATUS) == false,
conformance/programs/program-test.html:    var fs = gl.createShader(gl.FRAGMENT_SHADER);
conformance/programs/program-test.html:    gl.shaderSource(fs, "precision mediump float; varying vec4 vColor; void main() { gl_FragColor = vColor; }");
conformance/programs/program-test.html:    gl.compileShader(fs);
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(fs, gl.COMPILE_STATUS) == true,
conformance/programs/program-test.html:    var fs2 = gl.createShader(gl.FRAGMENT_SHADER);
conformance/programs/program-test.html:    gl.shaderSource(fs2, "precision mediump float; varying vec4 vColor; void main() { gl_FragColor = vColor * 0.5; }");
conformance/programs/program-test.html:    gl.compileShader(fs2);
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(fs2, gl.COMPILE_STATUS) == true,
conformance/programs/program-test.html:    var fsBad = gl.createShader(gl.FRAGMENT_SHADER);
conformance/programs/program-test.html:    gl.shaderSource(fsBad, "WILL NOT COMPILE;");
conformance/programs/program-test.html:    gl.compileShader(fsBad);
conformance/programs/program-test.html:    //assertMsg(gl.getShaderParameter(fsBad, gl.COMPILE_STATUS) == false,
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors at this point");
conformance/programs/program-test.html:        var prog = gl.createProgram();
conformance/programs/program-test.html:            gl.attachShader(prog, already_attached_shaders[i]);
conformance/programs/program-test.html:        if(gl.getError() != gl.NO_ERROR)
conformance/programs/program-test.html:        gl.attachShader(prog, shader);
conformance/programs/program-test.html:    checkAttachShader([], vs, gl.NO_ERROR, "attaching a vertex shader should succeed");
conformance/programs/program-test.html:    checkAttachShader([vs], vs, gl.INVALID_OPERATION,
conformance/programs/program-test.html:    checkAttachShader([], fs, gl.NO_ERROR, "attaching a fragment shader should succeed");
conformance/programs/program-test.html:    checkAttachShader([fs], fs, gl.INVALID_OPERATION,
conformance/programs/program-test.html:    checkAttachShader([vs], vs2, gl.INVALID_OPERATION,
conformance/programs/program-test.html:    checkAttachShader([fs], fs2, gl.INVALID_OPERATION,
conformance/programs/program-test.html:        var prog = gl.createProgram();
conformance/programs/program-test.html:            gl.attachShader(prog, already_attached_shaders[i]);
conformance/programs/program-test.html:        if(gl.getError() != gl.NO_ERROR)
conformance/programs/program-test.html:        gl.detachShader(prog, shader);
conformance/programs/program-test.html:    checkDetachShader([vs], vs, gl.NO_ERROR, "detaching a vertex shader should succeed");
conformance/programs/program-test.html:    checkDetachShader([fs], vs, gl.INVALID_OPERATION,
conformance/programs/program-test.html:    checkDetachShader([fs], fs, gl.NO_ERROR, "detaching a fragment shader should succeed");
conformance/programs/program-test.html:    checkDetachShader([vs], fs, gl.INVALID_OPERATION,
conformance/programs/program-test.html:        var prog = gl.createProgram();
conformance/programs/program-test.html:            gl.attachShader(prog, shaders_to_attach[i]);
conformance/programs/program-test.html:        if(gl.getError() != gl.NO_ERROR)
conformance/programs/program-test.html:            gl.detachShader(prog, shaders_to_detach[i]);
conformance/programs/program-test.html:        if(gl.getError() != gl.NO_ERROR)
conformance/programs/program-test.html:        assertMsg(doArraysHaveSameContents(gl.getAttachedShaders(prog), expected_shaders), errmsg);
conformance/programs/program-test.html:        var prog = gl.createProgram();
conformance/programs/program-test.html:            gl.attachShader(prog, shaders[i]);
conformance/programs/program-test.html:                gl.deleteShader(shaders[i]);
conformance/programs/program-test.html:        gl.bindAttribLocation(prog, 0, "aVertex");
conformance/programs/program-test.html:        gl.bindAttribLocation(prog, 1, "aColor");
conformance/programs/program-test.html:        gl.linkProgram(prog);
conformance/programs/program-test.html:        if (gl.getError() != gl.NO_ERROR)
conformance/programs/program-test.html:        assertMsg(gl.getProgramParameter(prog, gl.LINK_STATUS) == expected_status, errmsg);
conformance/programs/program-test.html:        var infolog = gl.getProgramInfoLog(prog);
conformance/programs/program-test.html:        if (gl.getError() != gl.NO_ERROR)
conformance/programs/program-test.html:        if (expected_status == true && gl.getProgramParameter(prog, gl.LINK_STATUS) == false)
conformance/programs/program-test.html:        if (gl.getError() != gl.NO_ERROR)
conformance/programs/program-test.html:            assertMsg(gl.getProgramParameter(prog, desktopGL['INFO_LOG_LENGTH']) === null, "invalid call to getProgramParameter should return null");
conformance/programs/program-test.html:            wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "INFO_LOG_LENGTH is not a valid argument to getProgramParameter in WebGL");
conformance/programs/program-test.html:            assertMsg(gl.getProgramParameter(prog, desktopGL['ACTIVE_ATTRIBUTE_MAX_LENGTH']) === null, "invalid call to getProgramParameter should return null");
conformance/programs/program-test.html:            wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "ACTIVE_ATTRIBUTE_MAX_LENGTH is not a valid argument to getProgramParameter in WebGL");
conformance/programs/program-test.html:            assertMsg(gl.getProgramParameter(prog, desktopGL['ACTIVE_UNIFORM_MAX_LENGTH']) === null, "invalid call to getProgramParameter should return null");
conformance/programs/program-test.html:            wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "ACTIVE_UNIFORM_MAX_LENGTH is not a valid argument to getProgramParameter in WebGL");
conformance/programs/program-test.html:        gl.useProgram(prog);
conformance/programs/program-test.html:            wtu.glErrorShouldBe(gl, gl.NO_ERROR, "using a valid program should succeed");
conformance/programs/program-test.html:            wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "using an invalid program should generate INVALID_OPERATION");
conformance/programs/program-test.html:    gl.useProgram(progGood1);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "using a valid program shouldn't generate a GL error");
conformance/programs/program-test.html:    var vbuf = gl.createBuffer();
conformance/programs/program-test.html:    gl.bindBuffer(gl.ARRAY_BUFFER, vbuf);
conformance/programs/program-test.html:    gl.bufferData(gl.ARRAY_BUFFER,
conformance/programs/program-test.html:                  gl.STATIC_DRAW);
conformance/programs/program-test.html:    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
conformance/programs/program-test.html:    gl.enableVertexAttribArray(0);
conformance/programs/program-test.html:    gl.vertexAttrib3f(1, 1.0, 0.0, 0.0);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors at this point #2");
conformance/programs/program-test.html:    gl.useProgram(null);
conformance/programs/program-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "drawing with a null program should generate INVALID_OPERATION");
conformance/programs/program-test.html:    gl.useProgram(progGood1);
conformance/programs/program-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing with a valid program shouldn't generate a GL error");
conformance/programs/program-test.html:    gl.useProgram(progBad1);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "using an invalid program should generate INVALID_OPERATION");
conformance/programs/program-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Try to use an invalid program should not change the current rendering state");
conformance/programs/program-test.html:    gl.useProgram(progGood2);
conformance/programs/program-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing with a valid program shouldn't generate a GL error");
conformance/programs/program-test.html:    gl.detachShader(progGood2, fs2);
conformance/programs/program-test.html:    gl.attachShader(progGood2, fsBad);
conformance/programs/program-test.html:    gl.linkProgram(progGood2);
conformance/programs/program-test.html:    assertMsg(gl.getProgramParameter(progGood2, gl.LINK_STATUS) == false,
conformance/programs/program-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing with a valid program shouldn't generate a GL error");
conformance/programs/program-test.html:    gl.useProgram(progGood1);
conformance/programs/program-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 4);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing with a valid when last used program shouldn't generate a GL error");
conformance/programs/program-test.html:    gl.useProgram(progGood1);
conformance/programs/program-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 4);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "drawing with a valid when last used program shouldn't generate a GL error");
conformance/programs/program-test.html:    gl.useProgram(progGood1);
conformance/programs/program-test.html:    gl.deleteProgram(progGood1);
conformance/programs/program-test.html:    gl.drawArrays(gl.TRIANGLES, 0, 4);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "delete the current program shouldn't change the current rendering state");
conformance/programs/program-test.html:    gl.linkProgram(progGood1);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "The current program shouldn't be deleted");
conformance/programs/program-test.html:    var fs3 = gl.createShader(gl.FRAGMENT_SHADER);
conformance/programs/program-test.html:    gl.shaderSource(fs3, "precision mediump float; varying vec4 vColor; void main() { gl_FragColor = vColor; }");
conformance/programs/program-test.html:    gl.compileShader(fs3);
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(fs3, gl.COMPILE_STATUS) == true,
conformance/programs/program-test.html:    gl.deleteShader(fs3);
conformance/programs/program-test.html:    gl.compileShader(fs3);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "an unattached shader should be deleted immediately");
conformance/programs/program-test.html:    fs3 = gl.createShader(gl.FRAGMENT_SHADER);
conformance/programs/program-test.html:    gl.shaderSource(fs3, "precision mediump float; varying vec4 vColor; void main() { gl_FragColor = vColor; }");
conformance/programs/program-test.html:    gl.compileShader(fs3);
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(fs3, gl.COMPILE_STATUS) == true,
conformance/programs/program-test.html:    gl.detachShader(progGood1, fs);
conformance/programs/program-test.html:    gl.attachShader(progGood1, fs3);
conformance/programs/program-test.html:    gl.deleteShader(fs3);
conformance/programs/program-test.html:    gl.compileShader(fs3);
conformance/programs/program-test.html:    assertMsg(gl.getShaderParameter(fs3, gl.COMPILE_STATUS) == true,
conformance/programs/program-test.html:    gl.useProgram(null);
conformance/programs/program-test.html:    gl.linkProgram(progGood1);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "a delete-marked program should be deleted once it's no longer the current program");
conformance/programs/program-test.html:    gl.compileShader(fs3);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "a delete-marked shader should be deleted once all its attachments are removed");
conformance/programs/program-test.html:    gl.useProgram(prg);
conformance/programs/program-test.html:    var posLoc = gl.getAttribLocation(prg, "a_position");
conformance/programs/program-test.html:    gl.shaderSource(fs, wtu.getScript("fshader-green"));
conformance/programs/program-test.html:    gl.compileShader(fs);
conformance/programs/program-test.html:    gl.linkProgram(prg);
conformance/programs/program-test.html:    var colorLoc = gl.getUniformLocation(prg, "u_color");
conformance/programs/program-test.html:    gl.uniform4f(colorLoc, 1, 0, 0, 1);
conformance/programs/program-test.html:    gl.linkProgram(prg);
conformance/programs/program-test.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/functional/gles3/transformfeedback/interpolation_centroid.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/programs/gl-bind-attrib-location-long-names-test.html:debug("Checking gl.bindAttribLocation with long names.");
conformance/programs/gl-bind-attrib-location-long-names-test.html:var program = gl.createProgram();
conformance/programs/gl-bind-attrib-location-long-names-test.html:var vs = wtu.loadShader(gl, vsrc, gl.VERTEX_SHADER);
conformance/programs/gl-bind-attrib-location-long-names-test.html:var fs = wtu.loadShader(gl, fsrc, gl.FRAGMENT_SHADER);
conformance/programs/gl-bind-attrib-location-long-names-test.html:gl.attachShader(program, vs);
conformance/programs/gl-bind-attrib-location-long-names-test.html:gl.attachShader(program, fs);
conformance/programs/gl-bind-attrib-location-long-names-test.html:var positions = gl.createBuffer();
conformance/programs/gl-bind-attrib-location-long-names-test.html:gl.bindBuffer(gl.ARRAY_BUFFER, positions);
conformance/programs/gl-bind-attrib-location-long-names-test.html:gl.bufferData(
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.ARRAY_BUFFER,
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.STATIC_DRAW);
conformance/programs/gl-bind-attrib-location-long-names-test.html:var colors = gl.createBuffer();
conformance/programs/gl-bind-attrib-location-long-names-test.html:gl.bindBuffer(gl.ARRAY_BUFFER, colors);
conformance/programs/gl-bind-attrib-location-long-names-test.html:gl.bufferData(
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.ARRAY_BUFFER,
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.STATIC_DRAW);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.bindAttribLocation(program, positionLocation, attribs.vPosition);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.bindAttribLocation(program, colorLocation, attribs.vColor);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.linkProgram(program);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.useProgram(program);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  var linked = (gl.getProgramParameter(program, gl.LINK_STATUS) != 0);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  debug("vPosition:" + gl.getAttribLocation(program, attribs.vPosition))
conformance/programs/gl-bind-attrib-location-long-names-test.html:  debug("vColor   :" + gl.getAttribLocation(program, attribs.vColor))
conformance/programs/gl-bind-attrib-location-long-names-test.html:  assertMsg(gl.getAttribLocation(program, attribs.vPosition) == positionLocation,
conformance/programs/gl-bind-attrib-location-long-names-test.html:  assertMsg(gl.getAttribLocation(program, attribs.vColor) == colorLocation,
conformance/programs/gl-bind-attrib-location-long-names-test.html:  var ploc = gl.getAttribLocation(program, attribs.vPosition);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  var cloc = gl.getAttribLocation(program, attribs.vColor);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, positions);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.enableVertexAttribArray(positionLocation);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, colors);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.enableVertexAttribArray(colorLocation);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.vertexAttribPointer(colorLocation, 4, gl.FLOAT, false, 0, 0);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.disableVertexAttribArray(positionLocation);
conformance/programs/gl-bind-attrib-location-long-names-test.html:  gl.disableVertexAttribArray(colorLocation);
conformance/programs/gl-bind-attrib-location-long-names-test.html:gl.disableVertexAttribArray(0);
conformance/programs/gl-bind-attrib-location-long-names-test.html:gl.vertexAttrib4f(0, 1, 0, 0, 1);
conformance/programs/gl-bind-attrib-location-long-names-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-npot-video.html:    gl.clearColor(0,0,0,1);
conformance/textures/misc/texture-npot-video.html:    gl.clearDepth(1);
conformance/textures/misc/texture-npot-video.html:    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/texture-npot-video.html:    gl.colorMask(1, 1, 1, 0);
conformance/textures/misc/texture-npot-video.html:    textureLoc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/texture-npot-video.html:    var texture = gl.createTexture();
conformance/textures/misc/texture-npot-video.html:    gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/texture-npot-video.html:    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
conformance/textures/misc/texture-npot-video.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,
conformance/textures/misc/texture-npot-video.html:                      gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-npot-video.html:        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, videoElement);
conformance/textures/misc/texture-npot-video.html:        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, videoElement);
conformance/textures/misc/texture-npot-video.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
conformance/textures/misc/texture-npot-video.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
conformance/textures/misc/texture-npot-video.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
conformance/textures/misc/texture-npot-video.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
conformance/textures/misc/texture-npot-video.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
conformance/textures/misc/texture-npot-video.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-npot-video.html:        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
conformance/textures/misc/texture-npot-video.html:        gl.generateMipmap(gl.TEXTURE_2D);
conformance/textures/misc/texture-npot-video.html:        wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "should be INVALID_OPERATION");
conformance/textures/misc/texture-npot-video.html:    gl.uniform1i(textureLoc, 0);
conformance/textures/misc/texture-npot-video.html:    wtu.checkCanvasRect(gl, 4, gl.canvas.height - 8, 2, 2, topColor,
conformance/textures/misc/texture-npot-video.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.disable(gl.DEPTH_TEST);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.disable(gl.BLEND);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  var texture2D = gl.createTexture();
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.activeTexture(gl.TEXTURE0);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.bindTexture(gl.TEXTURE_2D, texture2D);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  var textureCube = gl.createTexture();
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.activeTexture(gl.TEXTURE1);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.bindTexture(gl.TEXTURE_CUBE_MAP, textureCube);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  var texture2DLoc = gl.getUniformLocation(program, "tex2D");
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  var textureCubeLoc = gl.getUniformLocation(program, "texCube");
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.clearColor(1,0,0,1);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.uniform1i(texture2DLoc, 0);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.uniform1i(textureCubeLoc, 1);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texture-draw-with-2d-and-cube.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
deqp/functional/gles3/transformfeedback/array_separate_lines.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/textures/misc/tex-sub-image-2d-bad-args.html:var tex = gl.createTexture();
conformance/textures/misc/tex-sub-image-2d-bad-args.html:var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 1, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "no previously defined texture image");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Setup should succeed");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 1, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "y + height > texture height");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "x + width > texture width");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, -1, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "negative x");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, -1, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "negative y");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, -1, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "negative level");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:shouldThrow("gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, null)");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "null pixels");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, maxTextureLevel + 1, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, [gl.INVALID_VALUE, gl.INVALID_OPERATION], "too high level");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.FLOAT, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "bad target");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.texSubImage2D(gl.TEXTURE_3D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    wtu.glErrorShouldBe(gl, gl.INVALID_ENUM, "bad target");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "good args");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "format not same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type not same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "make texture RGB");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "format same as original RGB");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "format not same as original RGB");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGB, gl.UNSIGNED_SHORT_5_6_5, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type not same as original RGB");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "make texture RGBA UNSIGNED_BYTE");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "format same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "format not same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type not same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, largeCanvas);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "make texture RGBA UNSIGNED_BYTE");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "format same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "format not same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type not same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, largeCanvas);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "format same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, largeCanvas);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "format not same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, largeCanvas);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION, "type not same as original");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:var maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    var tex = gl.createTexture();
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.bindTexture(gl.TEXTURE_CUBE_MAP, tex);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, maxCubeMapTextureLevel + 1, 0, 0, gl.RGB, gl.UNSIGNED_BYTE, c);
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    wtu.glErrorShouldBe(gl, [gl.INVALID_VALUE, gl.INVALID_OPERATION], "too high level");
conformance/textures/misc/tex-sub-image-2d-bad-args.html:    gl.deleteTexture(tex);
conformance/textures/misc/texture-active-bind.html:  gl.disable(gl.DEPTH_TEST);
conformance/textures/misc/texture-active-bind.html:  gl.disable(gl.BLEND);
conformance/textures/misc/texture-active-bind.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-active-bind.html:  var texunits = Math.min(colors.length, gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS))
conformance/textures/misc/texture-active-bind.html:    var tex = gl.createTexture();
conformance/textures/misc/texture-active-bind.html:    gl.activeTexture(gl.TEXTURE0 + ii);
conformance/textures/misc/texture-active-bind.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/texture-active-bind.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-active-bind.html:    gl.activeTexture(gl.TEXTURE0 + ii);
conformance/textures/misc/texture-active-bind.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas2d);
conformance/textures/misc/texture-active-bind.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-active-bind.html:  var textureLoc = gl.getUniformLocation(program, "tex");
conformance/textures/misc/texture-active-bind.html:  var worldLoc = gl.getUniformLocation(program, "world");
conformance/textures/misc/texture-active-bind.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/texture-active-bind.html:  gl.clearColor(1,0,0,1);
conformance/textures/misc/texture-active-bind.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/textures/misc/texture-active-bind.html:    gl.uniform1i(textureLoc, ii);
conformance/textures/misc/texture-active-bind.html:    gl.uniformMatrix4fv(
conformance/textures/misc/texture-active-bind.html:    gl.drawArrays(gl.TRIANGLES, 0, 6);
conformance/textures/misc/texture-active-bind.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/textures/misc/copy-tex-image-2d-formats.html:  case gl.ALPHA:
conformance/textures/misc/copy-tex-image-2d-formats.html:  case gl.LUMINANCE:
conformance/textures/misc/copy-tex-image-2d-formats.html:  case gl.RGB:
conformance/textures/misc/copy-tex-image-2d-formats.html:  case gl.LUMINANCE_ALPHA:
conformance/textures/misc/copy-tex-image-2d-formats.html:  case gl.RGBA:
conformance/textures/misc/copy-tex-image-2d-formats.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "During Initialization");
conformance/textures/misc/copy-tex-image-2d-formats.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "During Initialization");
conformance/textures/misc/copy-tex-image-2d-formats.html:  var fbo = gl.createFramebuffer();
conformance/textures/misc/copy-tex-image-2d-formats.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
conformance/textures/misc/copy-tex-image-2d-formats.html:    var tex = gl.createTexture();
conformance/textures/misc/copy-tex-image-2d-formats.html:    gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/textures/misc/copy-tex-image-2d-formats.html:    gl.texImage2D(gl.TEXTURE_2D, 0, gl[backFormat], 2, 2, 0, gl[backFormat], gl.UNSIGNED_BYTE, null);
conformance/textures/misc/copy-tex-image-2d-formats.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/copy-tex-image-2d-formats.html:    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/copy-tex-image-2d-formats.html:    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/textures/misc/copy-tex-image-2d-formats.html:    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
conformance/textures/misc/copy-tex-image-2d-formats.html:    if (status == gl.FRAMEBUFFER_COMPLETE) {
conformance/textures/misc/copy-tex-image-2d-formats.html:  gl.clearColor(0.25, 1, 0.75, 0.5);
conformance/textures/misc/copy-tex-image-2d-formats.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/textures/misc/copy-tex-image-2d-formats.html:  var texture = gl.createTexture();
conformance/textures/misc/copy-tex-image-2d-formats.html:  gl.bindTexture(gl.TEXTURE_2D, texture);
conformance/textures/misc/copy-tex-image-2d-formats.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
conformance/textures/misc/copy-tex-image-2d-formats.html:  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
conformance/textures/misc/copy-tex-image-2d-formats.html:  gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl[texFormat], 0, 0, 2, 2, 0);
conformance/textures/misc/copy-tex-image-2d-formats.html:        gl, gl.INVALID_OPERATION,
conformance/textures/misc/copy-tex-image-2d-formats.html:      gl, gl.NO_ERROR,
conformance/textures/misc/copy-tex-image-2d-formats.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no errors");
deqp/functional/gles3/transformfeedback/interpolation_flat.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/transformfeedback/basic_types_separate_lines.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/transformfeedback/array_element_interleaved_triangles.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/transformfeedback/interpolation_smooth.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/transformfeedback/array_separate_points.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/uniforms/uniform-values-per-program.html:          valueLocs: [gl.getUniformLocation(program, test.name1),
conformance/uniforms/uniform-values-per-program.html:                      gl.getUniformLocation(program, test.name2)],
conformance/uniforms/uniform-values-per-program.html:          selectLoc: gl.getUniformLocation(program, "u_select"),
conformance/uniforms/uniform-values-per-program.html:          gl.useProgram(info.program);
conformance/uniforms/uniform-values-per-program.html:          gl.uniform1i(info.selectLoc, ii);
conformance/uniforms/uniform-values-per-program.html:        gl.deleteProgram(info.program);
deqp/functional/gles3/transformfeedback/array_separate_triangles.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/uniforms/gl-uniform-bool.html:debug("Checking gl.uniform1f with bool.");
conformance/uniforms/gl-uniform-bool.html:var loc = gl.getUniformLocation(program, "color");
conformance/uniforms/gl-uniform-bool.html:gl.uniform1f(loc, 1);
conformance/uniforms/gl-uniform-bool.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-uniform-bool.html:                "should be able to set bool with gl.uniform1f");
deqp/functional/gles3/transformfeedback/array_element_interleaved_points.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/transformfeedback/basic_types_interleaved_lines.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/transformfeedback/point_size.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/transformfeedback/basic_types_interleaved_triangles.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/programs/gl-get-active-uniform.html:  { glType: gl.FLOAT,        size: 1, type: 'float',       access: 'uniform0'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.FLOAT_VEC2,   size: 1, type: 'vec2',        access: 'uniform0[1]'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.FLOAT_VEC3,   size: 1, type: 'vec3',        access: 'uniform0[2]'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.FLOAT_VEC4,   size: 1, type: 'vec4',        access: 'uniform0[3]'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.FLOAT_MAT2,   size: 1, type: 'mat2',        access: 'uniform0[1][1]'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.FLOAT_MAT3,   size: 1, type: 'mat3',        access: 'uniform0[2][2]'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.FLOAT_MAT3,   size: 1, type: 'mat3',        access: 'uniform0[2][2]'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.FLOAT_MAT4,   size: 1, type: 'mat4',        access: 'uniform0[3][3]'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.INT,          size: 1, type: 'int',         access: 'float(uniform0)'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.INT_VEC2,     size: 1, type: 'ivec2',       access: 'float(uniform0[1])'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.INT_VEC3,     size: 1, type: 'ivec3',       access: 'float(uniform0[2])'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.INT_VEC4,     size: 1, type: 'ivec4',       access: 'float(uniform0[3])'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.BOOL,         size: 1, type: 'bool',        access: 'float(uniform0)'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.BOOL_VEC2,    size: 1, type: 'bvec2',       access: 'float(uniform0[1])'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.BOOL_VEC3,    size: 1, type: 'bvec3',       access: 'float(uniform0[2])'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.BOOL_VEC4,    size: 1, type: 'bvec4',       access: 'float(uniform0[3])'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.SAMPLER_2D,   size: 1, type: 'sampler2D',   access: 'texture2D(uniform0, vec2(0,0)).x'},
conformance/programs/gl-get-active-uniform.html:  { glType: gl.SAMPLER_CUBE, size: 1, type: 'samplerCube', access: 'textureCube(uniform0, vec3(0,1,0)).x'}
conformance/programs/gl-get-active-uniform.html:var vs = wtu.loadShaderFromScript(gl, 'vshader', gl.VERTEX_SHADER);
conformance/programs/gl-get-active-uniform.html:      gl.FRAGMENT_SHADER);
conformance/programs/gl-get-active-uniform.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from setup");
conformance/programs/gl-get-active-uniform.html:  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
conformance/programs/gl-get-active-uniform.html:    var info = gl.getActiveUniform(program, ii);
conformance/programs/gl-get-active-uniform.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from program A");
conformance/programs/gl-get-active-uniform.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors from program B");
conformance/programs/gl-get-active-uniform.html:var l1 = gl.getUniformLocation(p1, 'uniform0');
conformance/programs/gl-get-active-uniform.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors getting location of uniform0 p1");
conformance/programs/gl-get-active-uniform.html:var l2 = gl.getUniformLocation(p2, 'uniform0');
conformance/programs/gl-get-active-uniform.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors getting location of uniform0 p2");
conformance/programs/gl-get-active-uniform.html:gl.useProgram(p2);
conformance/programs/gl-get-active-uniform.html:gl.uniform1f(l2, 1);
conformance/programs/gl-get-active-uniform.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors setting uniform 0");
conformance/programs/gl-get-active-uniform.html:gl.uniform1f(l1, 2);
conformance/programs/gl-get-active-uniform.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/programs/gl-shader-test.html:  var shader = gl.createShader(desktopGL['GEOMETRY_SHADER_ARB']);
conformance/programs/gl-shader-test.html:  var vs = gl.createShader(gl.VERTEX_SHADER);
conformance/programs/gl-shader-test.html:  gl.shaderSource(vs, document.getElementById("vs").text);
conformance/programs/gl-shader-test.html:  gl.compileShader(vs);
conformance/programs/gl-shader-test.html:  var fs = gl.createShader(gl.FRAGMENT_SHADER);
conformance/programs/gl-shader-test.html:  gl.shaderSource(fs, document.getElementById("fs-green").text);
conformance/programs/gl-shader-test.html:  gl.compileShader(fs);
conformance/programs/gl-shader-test.html:  gl.shaderSource(fs, document.getElementById("fs-red").text);
conformance/programs/gl-shader-test.html:  var p = gl.createProgram();
conformance/programs/gl-shader-test.html:  gl.attachShader(p, vs);
conformance/programs/gl-shader-test.html:  gl.attachShader(p, fs);
conformance/programs/gl-shader-test.html:  gl.bindAttribLocation(p, 0, "vPosition");
conformance/programs/gl-shader-test.html:  gl.linkProgram(p);
conformance/programs/gl-shader-test.html:  gl.useProgram(p);
deqp/functional/gles3/transformfeedback/basic_types_separate_triangles.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/programs/program-infolog.html:var infolog = gl.getProgramInfoLog(program);
conformance/manual/angle-instanced-arrays-state-leakage.html:    gl.clearColor(1,0,0,1);
conformance/manual/angle-instanced-arrays-state-leakage.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/manual/angle-instanced-arrays-state-leakage.html:    gl.clearColor(0,1,0,1);
conformance/manual/angle-instanced-arrays-state-leakage.html:    gl.clear(gl.COLOR_BUFFER_BIT);
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  shouldBeNonNull("gl.getParameter(gl.FRAMEBUFFER_BINDING)");
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  var fb = gl.createFramebuffer();
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  var tex = gl.createTexture();
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  gl.clearColor(1,0,0,1);
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  gl.bindTexture(gl.TEXTURE_2D, tex);
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  shouldBe("gl.checkFramebufferStatus(gl.FRAMEBUFFER)", "gl.FRAMEBUFFER_COMPLETE");
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  gl.clearColor(0, 1, 0, 1);
conformance/manual/framebuffers-keep-contents-exiting-fullscreen-mode.html:  gl.clear(gl.COLOR_BUFFER_BIT);
conformance/programs/gl-bind-attrib-location-test.html:debug("Checking gl.bindAttribLocation.");
conformance/programs/gl-bind-attrib-location-test.html:var program = gl.createProgram();
conformance/programs/gl-bind-attrib-location-test.html:gl.bindAttribLocation(program, 0, "gl_foo");
conformance/programs/gl-bind-attrib-location-test.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/programs/gl-bind-attrib-location-test.html:gl.bindAttribLocation(program, 0, "gl_TexCoord0");
conformance/programs/gl-bind-attrib-location-test.html:wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/programs/gl-bind-attrib-location-test.html:var vs = wtu.loadShaderFromScript(gl, 'vshader', gl.VERTEX_SHADER);
conformance/programs/gl-bind-attrib-location-test.html:var fs = wtu.loadShaderFromScript(gl, 'fshader', gl.FRAGMENT_SHADER);
conformance/programs/gl-bind-attrib-location-test.html:gl.attachShader(program, vs);
conformance/programs/gl-bind-attrib-location-test.html:gl.attachShader(program, fs);
conformance/programs/gl-bind-attrib-location-test.html:var positions = gl.createBuffer();
conformance/programs/gl-bind-attrib-location-test.html:gl.bindBuffer(gl.ARRAY_BUFFER, positions);
conformance/programs/gl-bind-attrib-location-test.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([ 0,0.5,0, -0.5,-0.5,0, 0.5,-0.5,0 ]), gl.STATIC_DRAW);
conformance/programs/gl-bind-attrib-location-test.html:var colors = gl.createBuffer();
conformance/programs/gl-bind-attrib-location-test.html:gl.bindBuffer(gl.ARRAY_BUFFER, colors);
conformance/programs/gl-bind-attrib-location-test.html:gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
conformance/programs/gl-bind-attrib-location-test.html:    0,1,0,1]), gl.STATIC_DRAW);
conformance/programs/gl-bind-attrib-location-test.html:  gl.bindAttribLocation(program, positionLocation, "vPosition");
conformance/programs/gl-bind-attrib-location-test.html:  gl.bindAttribLocation(program, colorLocation, "vColor");
conformance/programs/gl-bind-attrib-location-test.html:  gl.linkProgram(program);
conformance/programs/gl-bind-attrib-location-test.html:  gl.useProgram(program);
conformance/programs/gl-bind-attrib-location-test.html:  var linked = (gl.getProgramParameter(program, gl.LINK_STATUS) != 0);
conformance/programs/gl-bind-attrib-location-test.html:  debug("vPosition:" + gl.getAttribLocation(program, "vPosition"))
conformance/programs/gl-bind-attrib-location-test.html:  debug("vColor   :" + gl.getAttribLocation(program, "vColor"))
conformance/programs/gl-bind-attrib-location-test.html:  assertMsg(gl.getAttribLocation(program, "vPosition") == positionLocation,
conformance/programs/gl-bind-attrib-location-test.html:  assertMsg(gl.getAttribLocation(program, "vColor") == colorLocation,
conformance/programs/gl-bind-attrib-location-test.html:  var ploc = gl.getAttribLocation(program, "vPosition");
conformance/programs/gl-bind-attrib-location-test.html:  var cloc = gl.getAttribLocation(program, "vColor");
conformance/programs/gl-bind-attrib-location-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, positions);
conformance/programs/gl-bind-attrib-location-test.html:  gl.enableVertexAttribArray(positionLocation);
conformance/programs/gl-bind-attrib-location-test.html:  gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);
conformance/programs/gl-bind-attrib-location-test.html:  gl.bindBuffer(gl.ARRAY_BUFFER, colors);
conformance/programs/gl-bind-attrib-location-test.html:  gl.enableVertexAttribArray(colorLocation);
conformance/programs/gl-bind-attrib-location-test.html:  gl.vertexAttribPointer(colorLocation, 4, gl.FLOAT, false, 0, 0);
conformance/programs/gl-bind-attrib-location-test.html:  gl.clearColor(0, 0, 0, 1);
conformance/programs/gl-bind-attrib-location-test.html:  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/programs/gl-bind-attrib-location-test.html:  gl.drawArrays(gl.TRIANGLES, 0, 3);
conformance/programs/gl-bind-attrib-location-test.html:  gl.disableVertexAttribArray(positionLocation);
conformance/programs/gl-bind-attrib-location-test.html:  gl.disableVertexAttribArray(colorLocation);
conformance/programs/gl-bind-attrib-location-test.html:gl.disableVertexAttribArray(0);
conformance/programs/gl-bind-attrib-location-test.html:gl.vertexAttrib4f(0, 1, 0, 0, 1);
conformance/programs/gl-bind-attrib-location-test.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
deqp/functional/gles3/transformfeedback/array_interleaved_lines.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform1f(loc, 3.0); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform1i(loc, 3.0); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform1i(loc, 1); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform2f(loc, 3.0, 3.0); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform3f(loc, 3.0, 3.0, 3.0); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform4f(loc, 3.0, 3.0, 3.0, 3.0); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform2i(loc, 3, 3); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform3i(loc, 3, 3, 3); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform4i(loc, 3, 3, 3, 3); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform2i(loc, 1, 1); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform3i(loc, 1, 1, 1); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform4i(loc, 1, 1, 1, 1); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniformMatrix2fv(loc, false, [1, 1, 1, 1]); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniformMatrix3fv(loc, false, [1, 1, 1, 1, 1, 1, 1, 1, 1]); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniformMatrix4fv(loc, false, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform1i(loc, 1); }
conformance/uniforms/uniform-default-values.html:  setFn: function(gl, loc) { gl.uniform1i(loc, 1); }
conformance/uniforms/uniform-default-values.html:    gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) >= 2;
conformance/uniforms/uniform-default-values.html:var tex2D = gl.createTexture();
conformance/uniforms/uniform-default-values.html:var texCube = gl.createTexture();
conformance/uniforms/uniform-default-values.html:gl.bindTexture(gl.TEXTURE_2D, tex2D);
conformance/uniforms/uniform-default-values.html:gl.bindTexture(gl.TEXTURE_CUBE_MAP, texCube);
conformance/uniforms/uniform-default-values.html:  gl.TEXTURE_2D,
conformance/uniforms/uniform-default-values.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_X,
conformance/uniforms/uniform-default-values.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
conformance/uniforms/uniform-default-values.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
conformance/uniforms/uniform-default-values.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
conformance/uniforms/uniform-default-values.html:  gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
conformance/uniforms/uniform-default-values.html:  gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
conformance/uniforms/uniform-default-values.html:    gl.texImage2D(
conformance/uniforms/uniform-default-values.html:        targets[ii], 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixel);
conformance/uniforms/uniform-default-values.html:    var vs = wtu.loadShader(gl, vs, gl.VERTEX_SHADER);
conformance/uniforms/uniform-default-values.html:    var fs = wtu.loadShader(gl, fs, gl.FRAGMENT_SHADER);
conformance/uniforms/uniform-default-values.html:    gl.useProgram(program);
conformance/uniforms/uniform-default-values.html:    var loc = gl.getUniformLocation(program, "u_uniform[1]");
conformance/uniforms/uniform-default-values.html:        var loc = gl.getUniformLocation(program, "u_uniform");
conformance/uniforms/uniform-default-values.html:    var value = gl.getUniform(program, loc);
conformance/uniforms/uniform-default-values.html:    gl.linkProgram(program);
conformance/uniforms/uniform-default-values.html:    gl.deleteProgram(program);
conformance/uniforms/uniform-default-values.html:    gl.deleteShader(vs);
conformance/uniforms/uniform-default-values.html:    gl.deleteShader(fs);
conformance/uniforms/uniform-default-values.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no GL errors");
deqp/functional/gles3/transformfeedback/transformfeedback_test_generator.py:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/uniforms/out-of-bounds-uniform-array-access.html:  var colorArrayLoc = gl.getUniformLocation(program, "colorArray[0]");
conformance/uniforms/out-of-bounds-uniform-array-access.html:  gl.uniform4fv(colorArrayLoc, colors);
conformance/uniforms/out-of-bounds-uniform-array-access.html:  lineWidthLoc = gl.getUniformLocation(program, "lineWidth");
conformance/uniforms/out-of-bounds-uniform-array-access.html:  elemMultLoc = gl.getUniformLocation(program, "elemMult");
conformance/uniforms/out-of-bounds-uniform-array-access.html:  assertMsg(gl.getError() == gl.NO_ERROR, "Should be no errors from setup.");
conformance/uniforms/out-of-bounds-uniform-array-access.html:      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
conformance/uniforms/out-of-bounds-uniform-array-access.html:      gl.uniform1f(lineWidthLoc, lineWidth);
conformance/uniforms/out-of-bounds-uniform-array-access.html:      gl.uniform1i(elemMultLoc, elemMult);
conformance/uniforms/out-of-bounds-uniform-array-access.html:      gl.drawArrays(gl.POINTS, 0, gridRes * gridRes);
conformance/uniforms/out-of-bounds-uniform-array-access.html:      gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
conformance/uniforms/gl-uniform-unused-array-elements-get-truncated.html:var maxUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
conformance/uniforms/gl-uniform-unused-array-elements-get-truncated.html:  gl.useProgram(program);
conformance/uniforms/gl-uniform-unused-array-elements-get-truncated.html:    var colorLocation = gl.getUniformLocation(program, name);
conformance/uniforms/gl-uniform-unused-array-elements-get-truncated.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
conformance/uniforms/uniform-samplers-test.html:  var textureLoc = gl.getUniformLocation(program, "tex");
conformance/uniforms/uniform-samplers-test.html:  gl.uniform1i(textureLoc, 1);
conformance/uniforms/uniform-samplers-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/uniform-samplers-test.html:  gl.uniform1iv(textureLoc, [1]);
conformance/uniforms/uniform-samplers-test.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/uniform-samplers-test.html:  gl.uniform1f(textureLoc, 1);
conformance/uniforms/uniform-samplers-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/uniforms/uniform-samplers-test.html:  gl.uniform1fv(textureLoc, [1]);
conformance/uniforms/uniform-samplers-test.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/uniforms/uniform-samplers-test.html:  var maxTextureUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
conformance/uniforms/uniform-samplers-test.html:      gl.uniform1i(textureLoc, ii);
conformance/uniforms/uniform-samplers-test.html:      success = success && (gl.getError() == gl.NO_ERROR);
conformance/uniforms/uniform-samplers-test.html:      gl.uniform1iv(textureLoc, [ii]);
conformance/uniforms/uniform-samplers-test.html:      success = success && (gl.getError() == gl.NO_ERROR);
conformance/uniforms/uniform-samplers-test.html:        gl.uniform1i(textureLoc, ii);
conformance/uniforms/uniform-samplers-test.html:        success = success && (gl.getError() == gl.INVALID_VALUE);
conformance/uniforms/uniform-samplers-test.html:        gl.uniform1iv(textureLoc, [ii]);
conformance/uniforms/uniform-samplers-test.html:        success = success && (gl.getError() == gl.INVALID_VALUE);
conformance/uniforms/gl-uniformmatrix4fv.html:debug("Checking gl.uniformMatrix.");
conformance/uniforms/gl-uniformmatrix4fv.html:  var loc = gl.getUniformLocation(program, "world" + ii);
conformance/uniforms/gl-uniformmatrix4fv.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "should fail with insufficient array size for " + name);
conformance/uniforms/gl-uniformmatrix4fv.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should succeed with correct array size for " + name);
conformance/uniforms/gl-uniformmatrix4fv.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, "should fail with more than 1 array size for " + name);
conformance/uniforms/gl-uniformmatrix4fv.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "can call " + name + "with transpose = false");
conformance/uniforms/gl-uniformmatrix4fv.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE, name + " should return INVALID_VALUE with transpose = true");
conformance/uniforms/gl-uniformmatrix4fv.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "can call " + name + "with transpose = true");
conformance/uniforms/gl-uniform-arrays.html:      gl.uniform2fv(loc, [1, 2]);
conformance/uniforms/gl-uniform-arrays.html:      gl.uniform1fv(loc, [2]);
conformance/uniforms/gl-uniform-arrays.html:      gl.uniform1fv(loc, 2);
conformance/uniforms/gl-uniform-arrays.html:      gl.uniform1fv(loc, [2]);
conformance/uniforms/gl-uniform-arrays.html:      gl.uniform1fv(loc, 2);
conformance/uniforms/gl-uniform-arrays.html:      gl.uniform1fv(loc, [2]);
conformance/uniforms/gl-uniform-arrays.html:      gl.uniform1fv(loc, 2);
conformance/uniforms/gl-uniform-arrays.html:  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
conformance/uniforms/gl-uniform-arrays.html:  var info = gl.getActiveUniform(program, 0);
conformance/uniforms/gl-uniform-arrays.html:  shouldBeNull("gl.getUniformLocation(program, 'color[" + MaxInt32PlusOne + "]');");
conformance/uniforms/gl-uniform-arrays.html:  var loc = gl.getUniformLocation(program, "color[0]");
conformance/uniforms/gl-uniform-arrays.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/uniforms/gl-uniform-arrays.html:  gl.useProgram(program);
conformance/uniforms/gl-uniform-arrays.html:  wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/uniforms/gl-uniform-arrays.html:                  "should fail with insufficient array size with gl." + typeInfo.setter);
conformance/uniforms/gl-uniform-arrays.html:    wtu.glErrorShouldBe(gl, gl.INVALID_VALUE,
conformance/uniforms/gl-uniform-arrays.html:                    "should fail with non-multiple array size with gl." + typeInfo.setter);
conformance/uniforms/gl-uniform-arrays.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-uniform-arrays.html:                  "can set an array of uniforms with gl." + typeInfo.setter);
conformance/uniforms/gl-uniform-arrays.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-uniform-arrays.html:                  "can partially set an array of uniforms with gl." + typeInfo.setter + " with a smaller array");
conformance/uniforms/gl-uniform-arrays.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-uniform-arrays.html:                  "can set an array of uniforms with gl." + typeInfo.setter + " with a larger array");
conformance/uniforms/gl-uniform-arrays.html:  var values = gl.getUniform(program, loc);
conformance/uniforms/gl-uniform-arrays.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-uniform-arrays.html:                  "can call gl.getUniform");
conformance/uniforms/gl-uniform-arrays.html:            "gl.getUniform returns the correct type.");
conformance/uniforms/gl-uniform-arrays.html:    shouldBeNull("gl.getUniformLocation(program, 'color[" + (MaxInt32PlusOne + ii) + "]')");
conformance/uniforms/gl-uniform-arrays.html:    var elemLoc = gl.getUniformLocation(program, "color[" + ii + "]");
conformance/uniforms/gl-uniform-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-uniform-arrays.html:                    " of array from gl.getUniformLocation");
conformance/uniforms/gl-uniform-arrays.html:    var value = gl.getUniform(program, elemLoc);
conformance/uniforms/gl-uniform-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-uniform-arrays.html:                    "can get value of element " + ii + " of array from gl.getUniform");
conformance/uniforms/gl-uniform-arrays.html:  wtu.glErrorShouldBe(gl, gl.INVALID_OPERATION,
conformance/uniforms/gl-uniform-arrays.html:                  "using the wrong size of gl.Uniform fails");
conformance/uniforms/gl-uniform-arrays.html:  gl.useProgram(null);
conformance/uniforms/gl-uniform-arrays.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-uniform-arrays.html:                  "can call gl.useProgram(null)");
conformance/uniforms/gl-uniform-arrays.html:var maxUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
conformance/uniforms/gl-uniform-arrays.html:  gl.useProgram(program);
conformance/uniforms/gl-uniform-arrays.html:  var colorbLocation = gl.getUniformLocation(program, test.extraName + "[0]");
conformance/uniforms/gl-uniform-arrays.html:    gl.uniform4fv(colorbLocation, [0, 1, 0, 0]);
conformance/uniforms/gl-uniform-arrays.html:  assertMsg(gl.getUniformLocation(program, nameMaxInt32PlusOne) === null,
conformance/uniforms/gl-uniform-arrays.html:  var uniformLocation = gl.getUniformLocation(program, name);
conformance/uniforms/gl-uniform-arrays.html:  gl.uniform4fv(uniformLocation, test.color);
conformance/uniforms/gl-uniform-arrays.html:    var uniformLocation = gl.getUniformLocation(program, name);
conformance/uniforms/gl-uniform-arrays.html:    gl.uniform4fv(uniformLocation, [1, 0, 0, 1]);
conformance/uniforms/gl-uniform-arrays.html:  var positionLoc = gl.getAttribLocation(program, "a_position");
conformance/uniforms/gl-uniform-arrays.html:    gl.uniform4fv(locations[ii], [ii + 4, ii + 2, ii + 3, ii + 1]);
conformance/uniforms/gl-uniform-arrays.html:      var value = gl.getUniform(program, locations[ii]);
conformance/uniforms/gl-uniform-arrays.html:    wtu.glErrorShouldBe(gl, gl.NO_ERROR, "there should be no errors");
deqp/functional/gles3/transformfeedback/random_separate_lines.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
deqp/functional/gles3/transformfeedback/array_element_separate_lines.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/programs/gl-getshadersource.html:var shader = gl.createShader(gl.VERTEX_SHADER);
conformance/programs/gl-getshadersource.html:gl.shaderSource(shader, original);
conformance/programs/gl-getshadersource.html:var source = gl.getShaderSource(shader);
conformance/programs/gl-getshadersource.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "Should be no errors.");
conformance/programs/use-program-crash-with-discard-in-fragment-shader.html:gl.useProgram(program);
conformance/programs/use-program-crash-with-discard-in-fragment-shader.html:gl.clearColor(1.0, 0.0, 0.0, 1.0);
conformance/programs/use-program-crash-with-discard-in-fragment-shader.html:gl.clear(gl.COLOR_BUFFER_BIT);
deqp/functional/gles3/transformfeedback/random_separate_triangles.html:<script>goog.require('framework.opengl.gluVarTypeUtil');</script>
conformance/programs/invalid-UTF-16.html:var program = gl.createProgram();
conformance/programs/invalid-UTF-16.html:gl.bindAttribLocation(program, 0, string);
conformance/manual/canvas-no-clear-on-readpixels.html:gl.clearColor(0,1,0,1);
conformance/manual/canvas-no-clear-on-readpixels.html:gl.clear(gl.COLOR_BUFFER_BIT);
conformance/manual/canvas-no-clear-on-readpixels.html:  gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
conformance/manual/canvas-no-clear-on-readpixels.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR, "no errors");
conformance/uniforms/null-uniform-location.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/uniforms/null-uniform-location.html:shouldBeUndefined("gl.useProgram(program)");
conformance/uniforms/null-uniform-location.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u0"), white);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u1.var1"), white);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u1.var2"), black);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u1.var3"), black);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u1.var4"), black);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u2"), white);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u1.var2"), black);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u1.var3"), black);
conformance/uniforms/gl-uniform-struct-unused.html:gl.uniform4fv(gl.getUniformLocation(program, "u1.var4"), black);
conformance/uniforms/gl-uniform-struct-unused.html:wtu.glErrorShouldBe(gl, gl.NO_ERROR, "should be no GL errors");
conformance/uniforms/gl-unknown-uniform.html:  var loc = gl.getUniformLocation(program, "someUnknownUniform");
conformance/uniforms/gl-unknown-uniform.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
conformance/uniforms/gl-unknown-uniform.html:  gl.uniform1f(loc, 1);
conformance/uniforms/gl-unknown-uniform.html:  wtu.glErrorShouldBe(gl, gl.NO_ERROR,
